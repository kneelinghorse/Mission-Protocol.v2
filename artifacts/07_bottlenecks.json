{
  "largeFiles": [
    {
      "file": "src/index.ts",
      "lines": 880,
      "concern": "Single entry module orchestrates all MCP wiring; difficult to reason about and lacks modular boundaries."
    },
    {
      "file": "src/intelligence/mission-splitter.ts",
      "lines": 648,
      "concern": "Mission splitting algorithm combines semantic analysis, chunking, and dependency inference in one class."
    },
    {
      "file": "src/extraction/template-extractor.ts",
      "lines": 634,
      "concern": "Template extraction pipeline has deeply nested error handling and branching (63 decision points)."
    },
    {
      "file": "src/tools/version-template.ts",
      "lines": 551,
      "concern": "Versioning tool implements multiple workflows and degraded-mode paths in a single file."
    },
    {
      "file": "src/import-export/security-validator.ts",
      "lines": 510,
      "concern": "Security validator mixes structural checks, semantic policy evaluation, and reporting."
    }
  ],
  "hotspots": [
    {
      "file": "src/intelligence/token-counters.ts",
      "line": 154,
      "issue": "Fallback heuristics emit warnings every time Transformers-based tokenizers fail to load, and no caching is applied once the model eventually loads.",
      "impact": "high",
      "evidence": "Repeated telemetry warnings observed during tests (TokenCounter.fallbackCount)."
    },
    {
      "file": "src/intelligence/mission-splitter.ts",
      "line": 288,
      "issue": "Nested loops over proposed breakpoints and atomic operations are O(n^2) and run for every split attempt, which hurts large mission files.",
      "impact": "medium",
      "evidence": "reconcileBreakpoints iterates over every breakpoint and scans atomic operations without early exit."
    },
    {
      "file": "src/import-export/template-importer.ts",
      "line": 186,
      "issue": "resolveDependencies performs sequential recursion per dependency; network or file fetch latency compounds without batching.",
      "impact": "medium",
      "evidence": "resolveDependencies comment notes potential parallelism but not implemented."
    },
    {
      "file": "src/tools/split-mission.ts",
      "line": 217,
      "issue": "validateParams and loadMissionFile read arbitrary paths directly from user input without base-directory constraints, causing heavy disk access on large files.",
      "impact": "medium",
      "evidence": "fs.readFile called on user-provided path and large files processed wholly in memory."
    },
    {
      "file": "src/intelligence/token-optimizer.ts",
      "line": 156,
      "issue": "optimizeBatch processes missions sequentially and calls optimize for each mission without concurrency controls, which underutilizes available CPU for large batches.",
      "impact": "medium",
      "evidence": "optimizeBatch iterates over missions with await in loop (lines 182-190)."
    }
  ],
  "notes": [
    "Complexity metrics (artifacts/04_complexity_metrics.json) flagged 63 decision points inside template extractor, suggesting refactor opportunities.",
    "No profiling hooks are present; performance telemetry is limited to warning console logs."
  ]
}