{
  "synchronous_file_operations": [
    {
      "file": "tests/smoke/mcp-intelligence-tools-smoke.test.ts",
      "line": 53,
      "context": "fs.writeFileSync(missionFile, SAMPLE_MISSION, 'utf-8');\n  });\n\n  afterAll(() => {\n    fs.rmSync(tempDir, { recursive: tr"
    },
    {
      "file": "tests/smoke/template-assets-smoke.test.ts",
      "line": 32,
      "context": "fs.existsSync(registryPath)) {\n      throw new Error(`Registry not found at ${registryPath}. Restore template assets bef"
    },
    {
      "file": "tests/smoke/template-assets-smoke.test.ts",
      "line": 36,
      "context": "fs.existsSync(genericTemplatePath)) {\n      throw new Error(\n        `Generic mission template missing at ${genericTempl"
    },
    {
      "file": "tests/tools/create-mission.test.ts",
      "line": 36,
      "context": "fs.existsSync(testDataDir)) {\n      fs.mkdirSync(testDataDir, { recursive: true });\n    }\n  });\n\n  beforeEach(() => {\n  "
    },
    {
      "file": "tests/tools/create-mission.test.ts",
      "line": 64,
      "context": "fs.writeFileSync(path.join(testDataDir, 'generic_mission.yaml'), genericTemplate);\n  });\n\n  afterEach(() => {\n    // Cle"
    },
    {
      "file": "tests/tools/create-mission.test.ts",
      "line": 183,
      "context": "fs.writeFileSync(path.join(webDevDir, 'pack.yaml'), manifest);\n\n      // Create schema\n      const schema = `\ntype: obje"
    },
    {
      "file": "tests/tools/create-mission.test.ts",
      "line": 198,
      "context": "fs.writeFileSync(path.join(webDevDir, 'schema.yaml'), schema);\n\n      // Create template\n      const template = `\ntechSt"
    },
    {
      "file": "tests/tools/create-mission.test.ts",
      "line": 208,
      "context": "fs.writeFileSync(path.join(webDevDir, 'template.yaml'), template);\n\n      // Create registry\n      const registry = `\ndo"
    },
    {
      "file": "tests/tools/create-mission.test.ts",
      "line": 219,
      "context": "fs.writeFileSync(path.join(testDataDir, 'registry.yaml'), registry);\n\n      registryEntries = parser.loadRegistry('regis"
    },
    {
      "file": "tests/tools/create-mission.test.ts",
      "line": 444,
      "context": "fs.writeFileSync(path.join(testDataDir, 'broken-registry.yaml'), registry);\n\n      const registryEntries = parser.loadRe"
    },
    {
      "file": "tests/tools/create-mission.test.ts",
      "line": 466,
      "context": "fs.writeFileSync(path.join(testDataDir, 'generic_mission.yaml'), invalidTemplate);\n\n      const params = { objective: 'T"
    },
    {
      "file": "tests/tools/create-mission.coverage.test.ts",
      "line": 26,
      "context": "fs.existsSync(testDataDir)) {\n      fs.mkdirSync(testDataDir, { recursive: true });\n    }\n  });\n\n  beforeEach(() => {\n  "
    },
    {
      "file": "tests/tools/create-mission.coverage.test.ts",
      "line": 54,
      "context": "fs.writeFileSync(path.join(testDataDir, 'generic_mission.yaml'), genericTemplate);\n  });\n\n  afterEach(() => {\n    if (!f"
    },
    {
      "file": "tests/tools/create-mission.coverage.test.ts",
      "line": 58,
      "context": "fs.existsSync(testDataDir)) return;\n    for (const entry of fs.readdirSync(testDataDir)) {\n      const p = path.join(tes"
    },
    {
      "file": "tests/tools/list-domains.test.ts",
      "line": 26,
      "context": "fs.existsSync(testDataDir)) {\n      fs.mkdirSync(testDataDir, { recursive: true });\n    }\n  });\n\n  beforeEach(() => {\n  "
    },
    {
      "file": "tests/tools/list-domains.test.ts",
      "line": 61,
      "context": "fs.writeFileSync(path.join(testDataDir, 'single.yaml'), registryContent);\n\n      const result = tool.execute('single.yam"
    },
    {
      "file": "tests/tools/list-domains.test.ts",
      "line": 94,
      "context": "fs.writeFileSync(path.join(testDataDir, 'multiple.yaml'), registryContent);\n\n      const result = tool.execute('multiple"
    },
    {
      "file": "tests/tools/list-domains.test.ts",
      "line": 113,
      "context": "fs.writeFileSync(path.join(testDataDir, 'no-author.yaml'), registryContent);\n\n      const result = tool.execute('no-auth"
    },
    {
      "file": "tests/tools/list-domains.test.ts",
      "line": 133,
      "context": "fs.writeFileSync(path.join(testDataDir, 'invalid.yaml'), registryContent);\n\n      expect(() => tool.execute('invalid.yam"
    },
    {
      "file": "tests/tools/list-domains.test.ts",
      "line": 145,
      "context": "fs.writeFileSync(path.join(testDataDir, 'corrupted.yaml'), registryContent);\n\n      expect(() => tool.execute('corrupted"
    },
    {
      "file": "tests/tools/list-domains.test.ts",
      "line": 159,
      "context": "fs.writeFileSync(path.join(testDataDir, 'registry.yaml'), registryContent);\n\n      const result = tool.execute(); // No "
    },
    {
      "file": "tests/tools/list-domains.test.ts",
      "line": 303,
      "context": "fs.writeFileSync(path.join(testDataDir, 'full.yaml'), registryContent);\n\n      const domains = tool.execute('full.yaml')"
    },
    {
      "file": "tests/tools/list-domains.test.ts",
      "line": 321,
      "context": "fs.writeFileSync(path.join(testDataDir, 'no-array.yaml'), registryContent);\n\n      expect(() => tool.execute('no-array.y"
    },
    {
      "file": "tests/tools/list-domains.test.ts",
      "line": 330,
      "context": "fs.writeFileSync(path.join(testDataDir, 'empty.yaml'), registryContent);\n\n      const result = tool.execute('empty.yaml'"
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 27,
      "context": "fs.existsSync(tempDir)) {\n      fs.rmSync(tempDir, { recursive: true, force: true });\n    }\n  });\n\n  describe('Parameter"
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 84,
      "context": "fs.writeFileSync(path.join(testMissionDir, 'test.js'), 'console.log(\"test\")');\n\n      const params: ExtractTemplateParam"
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 99,
      "context": "fs.writeFileSync(path.join(testMissionDir, 'test.js'), 'console.log(\"test\")');\n\n      const params: ExtractTemplateParam"
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 118,
      "context": "fs.writeFileSync(\n        path.join(testMissionDir, 'app.js'),\n        'const express = require(\"express\");\\nconst app ="
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 123,
      "context": "fs.writeFileSync(\n        path.join(testMissionDir, 'package.json'),\n        JSON.stringify({\n          name: 'my-servic"
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 145,
      "context": "fs.existsSync(templateDir)).toBe(true);\n      expect(fs.existsSync(path.join(templateDir, 'template-metadata.json'))).to"
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 146,
      "context": "fs.existsSync(path.join(templateDir, 'template-metadata.json'))).toBe(true);\n      expect(fs.existsSync(path.join(templa"
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 147,
      "context": "fs.existsSync(path.join(templateDir, 'EXTRACTION_REPORT.md'))).toBe(true);\n    });\n\n    it('should extract template from"
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 152,
      "context": "fs.writeFileSync(\n        missionFile,\n        'name: test-mission\\ntype: build\\nstatus: complete'\n      );\n\n      const"
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 170,
      "context": "fs.existsSync(templateDir)).toBe(true);\n    });\n\n    it('should respect custom confidence threshold', async () => {\n    "
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 174,
      "context": "fs.writeFileSync(\n        path.join(testMissionDir, 'config.yaml'),\n        'name: test-app\\nversion: 1.0.0'\n      );\n\n "
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 194,
      "context": "fs.writeFileSync(\n        path.join(testMissionDir, 'app.js'),\n        'console.log(\"test\")'\n      );\n\n      const param"
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 206,
      "context": "fs.existsSync(templatesRoot);\n\n      const result = await extractTemplate(params);\n\n      expect(result.success).toBe(tr"
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 215,
      "context": "fs.existsSync(defaultTemplateDir)).toBe(true);\n\n      // Clean up the test artifact without disturbing pre-existing temp"
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 218,
      "context": "fs.existsSync(defaultTemplateDir)) {\n        fs.rmSync(defaultTemplateDir, { recursive: true, force: true });\n      }\n\n "
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 222,
      "context": "fs.existsSync(templatesRoot)) {\n        fs.rmSync(templatesRoot, { recursive: true, force: true });\n      }\n    });\n  })"
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 230,
      "context": "fs.writeFileSync(\n        path.join(testMissionDir, 'config.json'),\n        JSON.stringify({ name: 'test-service', port:"
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 247,
      "context": "fs.readFileSync(metadataPath, 'utf-8'));\n\n      expect(metadata.templateId).toBe('test-mission');\n      expect(metadata."
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 259,
      "context": "fs.writeFileSync(path.join(srcDir, 'index.js'), 'console.log(\"main\")');\n      fs.writeFileSync(path.join(testMissionDir,"
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 260,
      "context": "fs.writeFileSync(path.join(testMissionDir, 'README.md'), '# Test Project');\n\n      const params: ExtractTemplateParams ="
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 274,
      "context": "fs.existsSync(path.join(templateDir, 'src'))).toBe(true);\n      expect(fs.existsSync(path.join(templateDir, 'README.md')"
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 275,
      "context": "fs.existsSync(path.join(templateDir, 'README.md'))).toBe(true);\n    });\n\n    it('should create EXTRACTION_REPORT.md', as"
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 279,
      "context": "fs.writeFileSync(\n        path.join(testMissionDir, 'app.py'),\n        'print(\"test\")'\n      );\n\n      const params: Ext"
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 296,
      "context": "fs.existsSync(reportPath)).toBe(true);\n\n      const report = fs.readFileSync(reportPath, 'utf-8');\n      expect(report)."
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 298,
      "context": "fs.readFileSync(reportPath, 'utf-8');\n      expect(report).toContain('# Template Extraction Report');\n      expect(repor"
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 338,
      "context": "fs.existsSync(path.join(templateDir, 'hooks', 'pre_gen_project.sh'))).toBe(true);\n      expect(fs.existsSync(path.join(t"
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 339,
      "context": "fs.existsSync(path.join(templateDir, 'hooks', 'post_gen_project.sh'))).toBe(true);\n    });\n\n    it('should throw when wr"
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 357,
      "context": "fs.writeFileSync(path.join(nodeModulesDir, 'package.json'), '{}');\n\n      fs.writeFileSync(path.join(testMissionDir, 'ap"
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 359,
      "context": "fs.writeFileSync(path.join(testMissionDir, 'app.js'), 'console.log(\"test\")');\n\n      const params: ExtractTemplateParams"
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 373,
      "context": "fs.existsSync(path.join(templateDir, 'node_modules'))).toBe(false);\n      expect(fs.existsSync(path.join(templateDir, 'a"
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 374,
      "context": "fs.existsSync(path.join(templateDir, 'app.js'))).toBe(true);\n    });\n  });\n\n  describe('Performance', () => {\n    it('sh"
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 380,
      "context": "fs.writeFileSync(\n        path.join(testMissionDir, 'app.js'),\n        'console.log(\"test\")'\n      );\n\n      const param"
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 401,
      "context": "fs.writeFileSync(\n        path.join(testMissionDir, 'config.yaml'),\n        'name: test\\nversion: 1.0.0'\n      );\n\n     "
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 424,
      "context": "fs.writeFileSync(\n        path.join(testMissionDir, 'app.py'),\n        'from flask import Flask\\n\\napp = Flask(\"customer"
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 429,
      "context": "fs.writeFileSync(\n        path.join(testMissionDir, 'requirements.txt'),\n        'flask==2.0.0\\ngunicorn==20.1.0'\n      "
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 447,
      "context": "fs.readFileSync(metadataPath, 'utf-8'));\n\n      expect(Object.keys(metadata.parameters).length).toBeGreaterThan(0);\n    "
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 453,
      "context": "fs.writeFileSync(\n        path.join(testMissionDir, 'package.json'),\n        JSON.stringify({\n          name: 'order-ser"
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 466,
      "context": "fs.writeFileSync(\n        path.join(testMissionDir, 'index.js'),\n        'const express = require(\"express\");\\nconst app"
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 484,
      "context": "fs.readFileSync(reportPath, 'utf-8');\n\n      expect(report).toContain('order-service');\n    });\n  });\n\n  describe('Error"
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 507,
      "context": "fs.writeFileSync(badFile, '{invalid json');\n\n      const params: ExtractTemplateParams = {\n        missionFile: testMiss"
    },
    {
      "file": "tests/tools/suggest-splits.execute.test.ts",
      "line": 10,
      "context": "fs.writeFileSync(filePath, content, 'utf-8');\n  return filePath;\n}\n\ndescribe('SuggestSplitsToolImpl.execute (mocked spli"
    },
    {
      "file": "tests/tools/export-template.test.ts",
      "line": 42,
      "context": "fs.existsSync(fullPath)).toBe(true);\n  });\n\n  it('exports a mission template to JSON when requested', async () => {\n    "
    },
    {
      "file": "tests/tools/export-template.test.ts",
      "line": 65,
      "context": "fs.readFileSync(fullPath, 'utf-8');\n\n    expect(result.success).toBe(true);\n    expect(() => JSON.parse(content)).not.to"
    },
    {
      "file": "tests/security/path-traversal.test.ts",
      "line": 22,
      "context": "fs.writeFileSync(\n      path.join(tempDir, 'safe.yaml'),\n      'key: value\\nnumber: 42'\n    );\n  });\n\n  afterEach(() => "
    },
    {
      "file": "tests/security/path-traversal.test.ts",
      "line": 118,
      "context": "fs.writeFileSync(path.join(subdir, 'file.yaml'), 'data: test');\n\n      const sanitized = loader.sanitizePath('subdir/fil"
    },
    {
      "file": "tests/security/path-traversal.test.ts",
      "line": 127,
      "context": "fs.writeFileSync(path.join(nested, 'file.yaml'), 'data: test');\n\n      const sanitized = loader.sanitizePath('a/b/c/file"
    },
    {
      "file": "tests/security/path-traversal.test.ts",
      "line": 151,
      "context": "fs.writeFileSync(targetFile, 'data: test');\n\n      try {\n        fs.symlinkSync(targetFile, symlinkPath);\n\n        expec"
    },
    {
      "file": "tests/security/path-traversal.test.ts",
      "line": 161,
      "context": "fs.existsSync(symlinkPath)) {\n          fs.unlinkSync(symlinkPath);\n        }\n      }\n    });\n\n    test('should allow sy"
    },
    {
      "file": "tests/security/path-traversal.test.ts",
      "line": 177,
      "context": "fs.writeFileSync(targetFile, 'data: symlink-test');\n\n      try {\n        fs.symlinkSync(targetFile, symlinkPath);\n\n     "
    },
    {
      "file": "tests/security/path-traversal.test.ts",
      "line": 186,
      "context": "fs.existsSync(symlinkPath)) {\n          fs.unlinkSync(symlinkPath);\n        }\n      }\n    });\n  });\n\n  describe('File Si"
    },
    {
      "file": "tests/security/path-traversal.test.ts",
      "line": 202,
      "context": "fs.writeFileSync(largeFile, 'x'.repeat(200));\n\n      expect(() => {\n        smallLoader.load('large.yaml');\n      }).toT"
    },
    {
      "file": "tests/security/path-traversal.test.ts",
      "line": 230,
      "context": "fs.writeFileSync(path.join(subdir, 'file.yaml'), 'test: data');\n\n      const sanitized = loader.sanitizePath('sub//file."
    },
    {
      "file": "tests/integration/mcp-server.test.ts",
      "line": 30,
      "context": "fs.existsSync(require('path').join(baseDir, 'registry.yaml'))) {\n      const tmp = fs.mkdtempSync(require('path').join(o"
    },
    {
      "file": "tests/integration/mcp-server.test.ts",
      "line": 34,
      "context": "fs.writeFileSync(require('path').join(baseDir, 'registry.yaml'),\n        `domains:\\n` +\n        `  - name: foundation\\n "
    },
    {
      "file": "tests/integration/mcp-server.test.ts",
      "line": 40,
      "context": "fs.writeFileSync(require('path').join(baseDir, 'packs', 'foundation', 'pack.yaml'),\n        `name: foundation\\nversion: "
    },
    {
      "file": "tests/integration/mcp-server.test.ts",
      "line": 42,
      "context": "fs.writeFileSync(require('path').join(baseDir, 'packs', 'foundation', 'schema.json'),\n        `{\"$schema\":\"http://json-s"
    },
    {
      "file": "tests/integration/mcp-server.test.ts",
      "line": 44,
      "context": "fs.writeFileSync(require('path').join(baseDir, 'packs', 'foundation', 'template.yaml'),\n        `governanceChecklist:\\n "
    },
    {
      "file": "tests/integration/full-flow.test.ts",
      "line": 13,
      "context": "fs.existsSync(path.join(baseDir, 'registry.yaml'))) {\n      const tmp = fs.mkdtempSync(path.join(require('os').tmpdir(),"
    },
    {
      "file": "tests/integration/full-flow.test.ts",
      "line": 17,
      "context": "fs.writeFileSync(path.join(baseDir, 'registry.yaml'),\n        `domains:\\n  - name: foundation\\n    description: Core bas"
    },
    {
      "file": "tests/integration/full-flow.test.ts",
      "line": 19,
      "context": "fs.writeFileSync(path.join(baseDir, 'packs', 'foundation', 'pack.yaml'),\n        `name: foundation\\nversion: 1.0.0\\ndisp"
    },
    {
      "file": "tests/integration/full-flow.test.ts",
      "line": 21,
      "context": "fs.writeFileSync(path.join(baseDir, 'packs', 'foundation', 'schema.json'),\n        `{\"$schema\":\"http://json-schema.org/d"
    },
    {
      "file": "tests/integration/full-flow.test.ts",
      "line": 23,
      "context": "fs.writeFileSync(path.join(baseDir, 'packs', 'foundation', 'template.yaml'),\n        `governanceChecklist: []\\n`);\n    }"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 54,
      "context": "fs.writeFileSync(missionPath, complexMission);\n\n      // Step 1: Analyze initial quality\n      const initialQuality = aw"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 111,
      "context": "fs.writeFileSync(missionPath, lowQualityMission);\n\n      // Score the mission\n      const qualityResult = await scoreQua"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 163,
      "context": "fs.writeFileSync(missionPath, highQualityMission);\n\n      const qualityResult = await scoreQuality({\n        missionFile"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 221,
      "context": "fs.writeFileSync(missionPath, mission.content);\n      }\n\n      // Analyze dependencies\n      const analysis = await exec"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 268,
      "context": "fs.writeFileSync(missionPath, verboseMission);\n\n      // Get initial token count\n      const beforeContent = fs.readFile"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 271,
      "context": "fs.readFileSync(missionPath, 'utf-8');\n      const beforeLength = beforeContent.length;\n\n      // Optimize\n      const r"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 312,
      "context": "fs.writeFileSync(missionPath, testMission);\n\n      const beforeContent = fs.readFileSync(missionPath, 'utf-8');\n\n      /"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 314,
      "context": "fs.readFileSync(missionPath, 'utf-8');\n\n      // Optimize in dry run mode\n      const result = await handleOptimizeToken"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 327,
      "context": "fs.readFileSync(missionPath, 'utf-8');\n      expect(afterContent).toBe(beforeContent);\n\n      // But should still get op"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 352,
      "context": "fs.writeFileSync(missionPath, testMission);\n\n      const start = Date.now();\n      await scoreQuality({ missionFile: mis"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 377,
      "context": "fs.writeFileSync(missionPath, testMission);\n\n      const start = Date.now();\n      await handleOptimizeTokens({\n        "
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 399,
      "context": "fs.writeFileSync(malformedPath, 'invalid: yaml: content: [[[');\n\n      const qualityResult = await scoreQuality({\n      "
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 426,
      "context": "fs.writeFileSync(emptyPath, '');\n\n      const result = await scoreQuality({\n        missionFile: emptyPath,\n        verb"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 463,
      "context": "fs.writeFileSync(missionPath, testMission);\n\n      // Step 1: Initial quality assessment\n      const initialQuality = aw"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 507,
      "context": "fs.existsSync(FIXTURES_DIR)) {\n      try {\n        fs.rmdirSync(FIXTURES_DIR, { recursive: true });\n      } catch (err) "
    },
    {
      "file": "tests/integration/quality-scoring.test.ts",
      "line": 23,
      "context": "fs.existsSync(missionFile)) {\n        console.warn('Skipping test: current.yaml not found');\n        return;\n      }\n\n  "
    },
    {
      "file": "tests/integration/quality-scoring.test.ts",
      "line": 43,
      "context": "fs.existsSync(missionFile)) {\n        console.warn('Skipping test: current.yaml not found');\n        return;\n      }\n\n  "
    },
    {
      "file": "tests/integration/phase3-flow.test.ts",
      "line": 35,
      "context": "fs.writeFileSync(path.join(sourceDir, 'service.yaml'), 'name: api\\nversion: 1.0.0\\nport: 8080');\n\n    // Identify candid"
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 32,
      "context": "fs.existsSync(path.join(templatesDir, 'registry.yaml'))) {\n      const tmp = fs.mkdtempSync(path.join(require('os').tmpd"
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 39,
      "context": "fs.writeFileSync(path.join(localTemplates, 'registry.yaml'),\n        `domains:\\n  - name: software.technical-task\\n    d"
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 43,
      "context": "fs.writeFileSync(path.join(localTemplates, 'packs', 'software.technical-task', 'pack.yaml'),\n        `name: software.tec"
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 45,
      "context": "fs.writeFileSync(path.join(localTemplates, 'packs', 'software.technical-task', 'schema.json'),\n        `{\"$schema\":\"http"
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 47,
      "context": "fs.writeFileSync(path.join(localTemplates, 'packs', 'software.technical-task', 'template.yaml'),\n        `userStory: \"As"
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 54,
      "context": "fs.writeFileSync(path.join(localTemplates, 'packs', 'business.market-research', 'pack.yaml'),\n        `name: business.ma"
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 56,
      "context": "fs.writeFileSync(path.join(localTemplates, 'packs', 'business.market-research', 'schema.json'),\n        `{\"$schema\":\"htt"
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 58,
      "context": "fs.writeFileSync(path.join(localTemplates, 'packs', 'business.market-research', 'template.yaml'),\n        `stakeholders:"
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 62,
      "context": "fs.writeFileSync(path.join(localTemplates, 'generic_mission.yaml'),\n        `schemaType: \"Mission\"\\nschemaVersion: \"2.0\""
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 68,
      "context": "fs.existsSync(genericTemplatePath)) {\n      throw new Error(\n        `Required template missing: ${genericTemplatePath}."
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 434,
      "context": "fs.existsSync(path.join(packDir, 'pack.yaml'))).toBe(true);\n        expect(fs.existsSync(path.join(packDir, 'schema.json"
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 435,
      "context": "fs.existsSync(path.join(packDir, 'schema.json'))).toBe(true);\n        expect(fs.existsSync(path.join(packDir, 'template."
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 436,
      "context": "fs.existsSync(path.join(packDir, 'template.yaml'))).toBe(true);\n      }\n    });\n  });\n});\n"
    },
    {
      "file": "tests/utils/template-path.ts",
      "line": 18,
      "context": "fs.existsSync(registryPath)) {\n      return candidate;\n    }\n  }\n\n  // Default to workspace templates even if missing to"
    },
    {
      "file": "tests/import-export/template-exporter.test.ts",
      "line": 23,
      "context": "fs.existsSync(testDir)) {\n      fs.mkdirSync(testDir, { recursive: true });\n    }\n  });\n\n  beforeEach(() => {\n    // Cre"
    },
    {
      "file": "tests/import-export/template-exporter.test.ts",
      "line": 35,
      "context": "fs.existsSync(testDir)) {\n      fs.rmSync(testDir, { recursive: true, force: true });\n    }\n  });\n\n  // Helper to create"
    },
    {
      "file": "tests/import-export/template-exporter.test.ts",
      "line": 79,
      "context": "fs.existsSync(path.join(testDir, 'test-output.yaml'))).toBe(true);\n    });\n\n    it('should produce valid YAML that can b"
    },
    {
      "file": "tests/import-export/template-exporter.test.ts",
      "line": 87,
      "context": "fs.readFileSync(path.join(testDir, 'parseable.yaml'), 'utf-8');\n      const parsed = YAML.parse(content);\n\n      expect("
    },
    {
      "file": "tests/import-export/template-exporter.test.ts",
      "line": 99,
      "context": "fs.readFileSync(path.join(testDir, 'with-comments.yaml'), 'utf-8');\n\n      expect(content).toContain('# Mission Template"
    },
    {
      "file": "tests/import-export/template-exporter.test.ts",
      "line": 111,
      "context": "fs.readFileSync(path.join(testDir, 'no-comments.yaml'), 'utf-8');\n\n      expect(content).not.toContain('# Mission Templa"
    },
    {
      "file": "tests/import-export/template-exporter.test.ts",
      "line": 121,
      "context": "fs.readFileSync(path.join(testDir, 'safe-yaml.yaml'), 'utf-8');\n\n      // Check for dangerous YAML tags\n      expect(con"
    },
    {
      "file": "tests/import-export/template-exporter.test.ts",
      "line": 134,
      "context": "fs.readFileSync(path.join(testDir, 'pretty.yaml'), 'utf-8');\n\n      // Pretty YAML should have indentation\n      expect("
    },
    {
      "file": "tests/import-export/template-exporter.test.ts",
      "line": 150,
      "context": "fs.existsSync(path.join(testDir, 'test-output.json'))).toBe(true);\n    });\n\n    it('should produce valid JSON that can b"
    },
    {
      "file": "tests/import-export/template-exporter.test.ts",
      "line": 158,
      "context": "fs.readFileSync(path.join(testDir, 'parseable.json'), 'utf-8');\n      const parsed = JSON.parse(content);\n\n      expect("
    },
    {
      "file": "tests/import-export/template-exporter.test.ts",
      "line": 170,
      "context": "fs.readFileSync(path.join(testDir, 'pretty.json'), 'utf-8');\n\n      // Pretty JSON should have newlines and indentation\n"
    },
    {
      "file": "tests/import-export/template-exporter.test.ts",
      "line": 182,
      "context": "fs.readFileSync(path.join(testDir, 'compact.json'), 'utf-8');\n\n      // Compact JSON should not have pretty formatting\n "
    },
    {
      "file": "tests/import-export/template-exporter.test.ts",
      "line": 330,
      "context": "fs.existsSync(path.join(testDir, 'nested/dir/template.yaml'))\n      ).toBe(true);\n    });\n  });\n\n  describe('Export Mult"
    },
    {
      "file": "tests/import-export/template-exporter.test.ts",
      "line": 346,
      "context": "fs.existsSync(path.join(testDir, 'multi-export'))).toBe(true);\n    });\n\n    it('should continue on errors and return suc"
    },
    {
      "file": "tests/import-export/template-exporter.test.ts",
      "line": 380,
      "context": "fs.readFileSync(path.join(testDir, 'roundtrip.yaml'), 'utf-8');\n      const parsed = YAML.parse(content);\n\n      // Veri"
    },
    {
      "file": "tests/import-export/template-importer.test.ts",
      "line": 21,
      "context": "fs.existsSync(testDir)) {\n      fs.mkdirSync(testDir, { recursive: true });\n    }\n  });\n\n  beforeEach(() => {\n    // Res"
    },
    {
      "file": "tests/import-export/template-importer.test.ts",
      "line": 36,
      "context": "fs.existsSync(testDir)) {\n      fs.rmSync(testDir, { recursive: true, force: true });\n    }\n  });\n\n  // Helper to write "
    },
    {
      "file": "tests/import-export/template-importer.test.ts",
      "line": 43,
      "context": "fs.writeFileSync(path.join(testDir, filename), content, 'utf-8');\n  }\n\n  // Helper to create valid template YAML\n  funct"
    },
    {
      "file": "tests/registry/registry-parser.test.ts",
      "line": 21,
      "context": "fs.existsSync(TEST_DATA_DIR)) {\n      fs.mkdirSync(TEST_DATA_DIR, { recursive: true });\n    }\n\n    loader = new SecureYA"
    },
    {
      "file": "tests/registry/registry-parser.test.ts",
      "line": 32,
      "context": "fs.writeFileSync(\n        registryPath,\n        `\ndomains:\n  - name: test-domain\n    description: Test domain pack\n    v"
    },
    {
      "file": "tests/registry/registry-parser.test.ts",
      "line": 54,
      "context": "fs.writeFileSync(\n        registryPath,\n        `\ndomains:\n  - name: domain-one\n    description: First domain\n    versio"
    },
    {
      "file": "tests/registry/registry-parser.test.ts",
      "line": 88,
      "context": "fs.writeFileSync(\n        registryPath,\n        `\ndomains:\n  - name: with-author\n    description: Has author\n    version"
    },
    {
      "file": "tests/registry/registry-parser.test.ts",
      "line": 117,
      "context": "fs.writeFileSync(\n        registryPath,\n        `\ndomains:\n  - description: Missing name\n    version: 1.0.0\n    path: do"
    },
    {
      "file": "tests/registry/registry-parser.test.ts",
      "line": 133,
      "context": "fs.writeFileSync(\n        registryPath,\n        `\ndomains:\n  - name: test\n    description: Invalid version\n    version: "
    },
    {
      "file": "tests/registry/registry-parser.test.ts",
      "line": 150,
      "context": "fs.writeFileSync(\n        registryPath,\n        `\ndomains:\n  - name: test\n    description: Invalid schema version\n    ve"
    },
    {
      "file": "tests/registry/registry-parser.test.ts",
      "line": 169,
      "context": "fs.writeFileSync(\n        registryPath,\n        `\ndomains:\n  - name: test\n    description: Path traversal attempt\n    ve"
    },
    {
      "file": "tests/registry/registry-parser.test.ts",
      "line": 186,
      "context": "fs.writeFileSync(\n        registryPath,\n        `\ndomains:\n  - name: test\n    description: Absolute path\n    version: 1."
    },
    {
      "file": "tests/registry/registry-parser.test.ts",
      "line": 203,
      "context": "fs.writeFileSync(\n        registryPath,\n        `\ndomains:\n  - name: test\n    description: Empty author\n    version: 1.0"
    },
    {
      "file": "tests/versioning/migration-engine.test.ts",
      "line": 24,
      "context": "fs.existsSync(testDir)) {\n      fs.mkdirSync(testDir, { recursive: true });\n    }\n  });\n\n  beforeEach(() => {\n    versio"
    },
    {
      "file": "tests/versioning/migration-engine.test.ts",
      "line": 36,
      "context": "fs.existsSync(testDir)) {\n      fs.rmSync(testDir, { recursive: true, force: true });\n    }\n  });\n\n  describe('Migration"
    },
    {
      "file": "tests/versioning/migration-engine.test.ts",
      "line": 333,
      "context": "fs.existsSync(result.backupPath!)).toBe(true);\n\n      // Verify backup content\n      const backupContent = fs.readFileSy"
    },
    {
      "file": "tests/versioning/migration-engine.test.ts",
      "line": 336,
      "context": "fs.readFileSync(result.backupPath!, 'utf-8');\n      expect(JSON.parse(backupContent)).toEqual(template);\n    });\n\n    te"
    },
    {
      "file": "tests/versioning/migration-engine.test.ts",
      "line": 401,
      "context": "fs.writeFileSync(backupPath, JSON.stringify(template), 'utf-8');\n\n      const result = await migrationEngine.rollback('t"
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 24,
      "context": "fs.existsSync(tempDir)) {\n      fs.rmSync(tempDir, { recursive: true, force: true });\n    }\n  });\n\n  describe('Stage 1: "
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 33,
      "context": "fs.writeFileSync(\n        appPy,\n        `from flask import Flask\\n\\napp = Flask(\"customer-api\")\\n\\n@app.route('/custome"
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 53,
      "context": "fs.writeFileSync(\n        configYaml,\n        `name: my-service\\nversion: 1.0.0\\nport: 8080\\nauthor: test@example.com\\n`"
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 80,
      "context": "fs.writeFileSync(\n        packageJson,\n        JSON.stringify({\n          name: 'test-project',\n          version: '1.0."
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 111,
      "context": "fs.writeFileSync(file, 'print(\"Hello\")');\n\n      const config: ExtractionConfig = {\n        sourceMissionPath: testMissi"
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 133,
      "context": "fs.writeFileSync(path.join(nodeModulesDir, 'package.json'), '{}');\n\n      // Create a normal file\n      fs.writeFileSync"
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 136,
      "context": "fs.writeFileSync(path.join(testMissionDir, 'app.js'), 'console.log(\"test\")');\n\n      const config: ExtractionConfig = {\n"
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 152,
      "context": "fs.writeFileSync(\n        path.join(testMissionDir, 'file1.py'),\n        'PROJECT_NAME = \"unique-project\"\\nCOMMON = \"com"
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 156,
      "context": "fs.writeFileSync(\n        path.join(testMissionDir, 'file2.py'),\n        'NAME = \"unique-project\"\\nCOMMON = \"common-valu"
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 160,
      "context": "fs.writeFileSync(\n        path.join(testMissionDir, 'file3.py'),\n        'COMMON = \"common-value\"\\n'\n      );\n\n      con"
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 190,
      "context": "fs.writeFileSync(\n        path.join(testMissionDir, 'only.js'),\n        'console.log(\"unique_literal_value\")'\n      );\n\n"
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 214,
      "context": "fs.writeFileSync(path.join(gitDir, 'config'), 'git');\n      fs.writeFileSync(path.join(distDir, 'bundle.js'), 'dist');\n "
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 215,
      "context": "fs.writeFileSync(path.join(distDir, 'bundle.js'), 'dist');\n      fs.writeFileSync(path.join(testMissionDir, 'debug.log')"
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 216,
      "context": "fs.writeFileSync(path.join(testMissionDir, 'debug.log'), 'log');\n\n      // Create one valid file\n      fs.writeFileSync("
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 219,
      "context": "fs.writeFileSync(path.join(testMissionDir, 'main.js'), 'console.log(\"ok\")');\n\n      const config: ExtractionConfig = {\n "
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 237,
      "context": "fs.writeFileSync(\n        appPy,\n        'from flask import Flask\\n\\napp = Flask(\"my-service\")\\n'\n      );\n\n      const "
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 259,
      "context": "fs.writeFileSync(\n        appPy,\n        'PROJECT = \"customer-api\"\\nprint(\"Welcome to customer-api\")\\n'\n      );\n\n      "
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 283,
      "context": "fs.writeFileSync(configYaml, 'name: test-service\\nport: 3000\\n');\n\n      const config: ExtractionConfig = {\n        sour"
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 308,
      "context": "fs.writeFileSync(\n        configJson,\n        JSON.stringify({ name: 'true', port: 8080 }, null, 2)\n      );\n\n      cons"
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 336,
      "context": "fs.writeFileSync(path.join(customDir, 'index.js'), 'console.log(\"test\")');\n\n      // Also include a common directory to "
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 341,
      "context": "fs.writeFileSync(path.join(srcDir, 'helper.js'), 'console.log(\"helper\")');\n\n      const config: ExtractionConfig = {\n   "
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 362,
      "context": "fs.writeFileSync(\n        path.join(testMissionDir, 'a.json'),\n        JSON.stringify({ name: 'alpha' }, null, 2)\n      "
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 366,
      "context": "fs.writeFileSync(\n        path.join(testMissionDir, 'b.json'),\n        JSON.stringify({ name: 'alpha' }, null, 2)\n      "
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 370,
      "context": "fs.writeFileSync(\n        path.join(testMissionDir, 'c.json'),\n        JSON.stringify({ name: 'beta' }, null, 2)\n      )"
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 394,
      "context": "fs.writeFileSync(\n        path.join(testMissionDir, 'package.json'),\n        JSON.stringify({\n          name: 'my-micros"
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 403,
      "context": "fs.writeFileSync(\n        path.join(testMissionDir, 'app.js'),\n        'const express = require(\"express\");\\nconst app ="
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 441,
      "context": "fs.writeFileSync(file, `const value = \"test-${i}\";\\nconsole.log(value);`);\n      }\n\n      const config: ExtractionConfig"
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 482,
      "context": "fs.writeFileSync(path.join(testMissionDir, 'app.py'), 'print(\"test\")');\n      fs.writeFileSync(path.join(testMissionDir,"
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 483,
      "context": "fs.writeFileSync(path.join(testMissionDir, 'index.ts'), 'console.log(\"test\")');\n      fs.writeFileSync(path.join(testMis"
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 484,
      "context": "fs.writeFileSync(path.join(testMissionDir, 'Main.java'), 'class Main {}');\n      fs.writeFileSync(path.join(testMissionD"
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 485,
      "context": "fs.writeFileSync(path.join(testMissionDir, 'main.go'), 'package main');\n\n      const config: ExtractionConfig = {\n      "
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 503,
      "context": "fs.writeFileSync(\n        nestedJson,\n        JSON.stringify({ info: { name: 'nested-app', meta: { version: '1.2.3' } } "
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 529,
      "context": "fs.writeFileSync(path.join(specialDir, 'index.js'), 'console.log(\"ok\")');\n\n      const config: ExtractionConfig = {\n    "
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 545,
      "context": "fs.writeFileSync(path.join(testMissionDir, '.env'), 'PORT=3000');\n      fs.writeFileSync(path.join(testMissionDir, 'scri"
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 546,
      "context": "fs.writeFileSync(path.join(testMissionDir, 'script.rb'), 'puts \"hi\"');\n\n      const config: ExtractionConfig = {\n       "
    },
    {
      "file": "tests/loaders/yaml-loader.test.ts",
      "line": 33,
      "context": "fs.writeFileSync(path.join(tempDir, 'simple.yaml'), yamlContent);\n\n      const data = loader.load('simple.yaml');\n      "
    },
    {
      "file": "tests/loaders/yaml-loader.test.ts",
      "line": 52,
      "context": "fs.writeFileSync(path.join(tempDir, 'nested.yaml'), yamlContent);\n\n      const data = loader.load('nested.yaml');\n      "
    },
    {
      "file": "tests/loaders/yaml-loader.test.ts",
      "line": 67,
      "context": "fs.writeFileSync(path.join(tempDir, 'array.yaml'), yamlContent);\n\n      const data = loader.load('array.yaml');\n      ex"
    },
    {
      "file": "tests/loaders/yaml-loader.test.ts",
      "line": 90,
      "context": "fs.writeFileSync(path.join(tempDir, 'anchors.yaml'), yamlContent);\n\n      const data = loader.load('anchors.yaml');\n    "
    },
    {
      "file": "tests/loaders/yaml-loader.test.ts",
      "line": 104,
      "context": "fs.writeFileSync(path.join(tempDir, 'multiline.yaml'), yamlContent);\n\n      const data = loader.load('multiline.yaml');\n"
    },
    {
      "file": "tests/loaders/yaml-loader.test.ts",
      "line": 116,
      "context": "fs.writeFileSync(path.join(tempDir, 'nulls.yaml'), yamlContent);\n\n      const data = loader.load('nulls.yaml');\n      ex"
    },
    {
      "file": "tests/loaders/yaml-loader.test.ts",
      "line": 130,
      "context": "fs.writeFileSync(path.join(tempDir, 'invalid.yaml'), yamlContent);\n\n      expect(() => {\n        loader.load('invalid.ya"
    },
    {
      "file": "tests/loaders/yaml-loader.test.ts",
      "line": 145,
      "context": "fs.writeFileSync(path.join(tempDir, 'malicious1.yaml'), maliciousYAML);\n\n      // The YAML library should reject this or"
    },
    {
      "file": "tests/loaders/yaml-loader.test.ts",
      "line": 157,
      "context": "fs.writeFileSync(path.join(tempDir, 'malicious2.yaml'), maliciousYAML);\n\n      expect(() => {\n        loader.load('malic"
    },
    {
      "file": "tests/loaders/yaml-loader.test.ts",
      "line": 169,
      "context": "fs.writeFileSync(path.join(tempDir, 'malicious3.yaml'), maliciousYAML);\n\n      expect(() => {\n        loader.load('malic"
    },
    {
      "file": "tests/loaders/yaml-loader.test.ts",
      "line": 180,
      "context": "fs.writeFileSync(path.join(tempDir, 'malicious4.yaml'), maliciousYAML);\n\n      expect(() => {\n        loader.load('malic"
    },
    {
      "file": "tests/loaders/yaml-loader.test.ts",
      "line": 192,
      "context": "fs.writeFileSync(path.join(tempDir, 'malicious5.yaml'), maliciousYAML);\n\n      expect(() => {\n        loader.load('malic"
    },
    {
      "file": "tests/loaders/yaml-loader.test.ts",
      "line": 203,
      "context": "fs.writeFileSync(path.join(tempDir, 'malicious6.yaml'), maliciousYAML);\n\n      expect(() => {\n        loader.load('malic"
    },
    {
      "file": "tests/loaders/yaml-loader.test.ts",
      "line": 217,
      "context": "fs.writeFileSync(path.join(tempDir, 'app.yaml'), yamlContent);\n\n      const schema: JSONSchema = {\n        type: 'object"
    },
    {
      "file": "tests/loaders/yaml-loader.test.ts",
      "line": 236,
      "context": "fs.writeFileSync(path.join(tempDir, 'incomplete.yaml'), yamlContent);\n\n      const schema: JSONSchema = {\n        type: "
    },
    {
      "file": "tests/loaders/yaml-loader.test.ts",
      "line": 257,
      "context": "fs.writeFileSync(path.join(tempDir, 'wrongtype.yaml'), yamlContent);\n\n      const schema: JSONSchema = {\n        type: '"
    },
    {
      "file": "tests/loaders/yaml-loader.test.ts",
      "line": 278,
      "context": "fs.writeFileSync(path.join(tempDir, 'server.yaml'), yamlContent);\n\n      const schema: JSONSchema = {\n        type: 'obj"
    },
    {
      "file": "tests/loaders/yaml-loader.test.ts",
      "line": 307,
      "context": "fs.writeFileSync(path.join(tempDir, 'users.yaml'), yamlContent);\n\n      const schema: JSONSchema = {\n        type: 'obje"
    },
    {
      "file": "tests/loaders/yaml-loader.test.ts",
      "line": 334,
      "context": "fs.writeFileSync(path.join(tempDir, 'enum.yaml'), yamlContent);\n\n      const schema: JSONSchema = {\n        type: 'objec"
    },
    {
      "file": "tests/loaders/yaml-loader.test.ts",
      "line": 354,
      "context": "fs.writeFileSync(path.join(tempDir, 'bad-enum.yaml'), yamlContent);\n\n      const schema: JSONSchema = {\n        type: 'o"
    },
    {
      "file": "tests/loaders/yaml-loader.test.ts",
      "line": 374,
      "context": "fs.writeFileSync(path.join(tempDir, 'file1.yaml'), 'value: 1');\n      fs.writeFileSync(path.join(tempDir, 'file2.yaml'),"
    },
    {
      "file": "tests/loaders/yaml-loader.test.ts",
      "line": 375,
      "context": "fs.writeFileSync(path.join(tempDir, 'file2.yaml'), 'value: 2');\n      fs.writeFileSync(path.join(tempDir, 'file3.yaml'),"
    },
    {
      "file": "tests/loaders/yaml-loader.test.ts",
      "line": 376,
      "context": "fs.writeFileSync(path.join(tempDir, 'file3.yaml'), 'value: 3');\n\n      const results = loader.loadMultiple(['file1.yaml'"
    },
    {
      "file": "tests/loaders/yaml-loader.test.ts",
      "line": 385,
      "context": "fs.writeFileSync(path.join(tempDir, 'config1.yaml'), 'name: Config1\\nversion: 1.0');\n      fs.writeFileSync(path.join(te"
    },
    {
      "file": "tests/loaders/yaml-loader.test.ts",
      "line": 386,
      "context": "fs.writeFileSync(path.join(tempDir, 'config2.yaml'), 'name: Config2\\nversion: 2.0');\n\n      const schema: JSONSchema = {"
    },
    {
      "file": "tests/loaders/yaml-loader.test.ts",
      "line": 415,
      "context": "fs.writeFileSync(path.join(tempDir, 'error.yaml'), yamlContent);\n\n      const schema: JSONSchema = {\n        type: 'obje"
    },
    {
      "file": "src/tools/split-mission.ts",
      "line": 210,
      "context": "fs.existsSync(params.missionFile)) {\n      throw new Error(`Mission file not found: ${params.missionFile}`);\n    }\n\n    "
    },
    {
      "file": "src/tools/split-mission.ts",
      "line": 218,
      "context": "fs.existsSync(params.outputDir)) {\n      throw new Error(`Output directory not found: ${params.outputDir}`);\n    }\n  }\n\n"
    },
    {
      "file": "src/tools/split-mission.ts",
      "line": 245,
      "context": "fs.readFileSync(filePath, 'utf-8');\n\n      try {\n        const parsed = YAML.parse(content);\n\n        // Check if it's a"
    },
    {
      "file": "src/tools/split-mission.ts",
      "line": 287,
      "context": "fs.writeFileSync(filePath, missionYaml, 'utf-8');\n      files.push(filePath);\n    }\n\n    return files;\n  }\n\n  /**\n   * C"
    },
    {
      "file": "src/tools/extract-template.ts",
      "line": 110,
      "context": "fs.existsSync(params.missionFile)) {\n    throw new Error(`Mission file does not exist: ${params.missionFile}`);\n  }\n\n  i"
    },
    {
      "file": "src/tools/extract-template.ts",
      "line": 148,
      "context": "fs.writeFileSync(filePath, file.content, 'utf-8');\n  }\n\n  // Write metadata file\n  const metadataPath = path.join(templa"
    },
    {
      "file": "src/tools/extract-template.ts",
      "line": 153,
      "context": "fs.writeFileSync(\n    metadataPath,\n    JSON.stringify(template.metadata, null, 2),\n    'utf-8'\n  );\n\n  // Write extract"
    },
    {
      "file": "src/tools/extract-template.ts",
      "line": 162,
      "context": "fs.writeFileSync(reportPath, report, 'utf-8');\n\n  // Write hooks if present\n  if (template.hooks?.preGenerate) {\n    con"
    },
    {
      "file": "src/tools/extract-template.ts",
      "line": 168,
      "context": "fs.writeFileSync(preHookPath, template.hooks.preGenerate, 'utf-8');\n    fs.chmodSync(preHookPath, 0o755);\n  }\n\n  if (tem"
    },
    {
      "file": "src/tools/extract-template.ts",
      "line": 175,
      "context": "fs.writeFileSync(postHookPath, template.hooks.postGenerate, 'utf-8');\n    fs.chmodSync(postHookPath, 0o755);\n  }\n}\n\n/**\n"
    },
    {
      "file": "src/tools/suggest-splits.ts",
      "line": 193,
      "context": "fs.existsSync(params.missionFile)) {\n      throw new Error(`Mission file not found: ${params.missionFile}`);\n    }\n  }\n\n"
    },
    {
      "file": "src/tools/suggest-splits.ts",
      "line": 203,
      "context": "fs.readFileSync(filePath, 'utf-8');\n\n      try {\n        const parsed = YAML.parse(content);\n        if (isGenericMissio"
    },
    {
      "file": "src/tools/analyze-dependencies.ts",
      "line": 52,
      "context": "fs.existsSync(args.missionDirectory)) {\n      throw new Error(`Mission directory does not exist: ${args.missionDirectory"
    },
    {
      "file": "src/import-export/template-importer.ts",
      "line": 218,
      "context": "fs.readFileSync(sanitizedPath, 'utf-8');\n      }\n\n      throw new DependencyResolutionError(\n        `Unsupported protoc"
    },
    {
      "file": "src/import-export/template-importer.ts",
      "line": 263,
      "context": "fs.writeFileSync(tempFile, yamlContent);\n      return await this.import(path.basename(tempFile), options);\n    } finally"
    },
    {
      "file": "src/import-export/template-importer.ts",
      "line": 267,
      "context": "fs.existsSync(tempFile)) {\n        fs.unlinkSync(tempFile);\n      }\n    }\n  }\n\n  /**\n   * Get the base directory\n   */\n "
    },
    {
      "file": "src/import-export/template-exporter.ts",
      "line": 61,
      "context": "fs.existsSync(outputDir)) {\n        fs.mkdirSync(outputDir, { recursive: true });\n      }\n\n      // Write file\n      fs."
    },
    {
      "file": "src/import-export/template-exporter.ts",
      "line": 66,
      "context": "fs.writeFileSync(resolvedPath, content, 'utf-8');\n\n      return true;\n    } catch (error) {\n      throw new ImportExport"
    },
    {
      "file": "src/extraction/template-extractor.ts",
      "line": 50,
      "context": "fs.existsSync(this.config.sourceMissionPath)) {\n        throw new Error(`Source mission path does not exist: ${this.conf"
    },
    {
      "file": "src/extraction/template-extractor.ts",
      "line": 102,
      "context": "fs.readFileSync(filePath, 'utf-8');\n      const relativePath = path.relative(missionPath, filePath);\n\n      // Analyze d"
    },
    {
      "file": "src/extraction/template-extractor.ts",
      "line": 195,
      "context": "fs.readFileSync(filePath, 'utf-8');\n      let templatePath = relativePath;\n\n      // Apply parameterization to file path"
    },
    {
      "file": "src/loaders/yaml-loader.ts",
      "line": 164,
      "context": "fs.existsSync(sanitizedPath)) {\n      throw new Error(`File not found: ${filePath}`);\n    }\n\n    // Use lstatSync to det"
    },
    {
      "file": "src/loaders/yaml-loader.ts",
      "line": 182,
      "context": "fs.readFileSync(sanitizedPath, 'utf-8');\n\n    // Layer 2: Safe parse\n    const parsed = this.safeParse(content);\n\n    //"
    }
  ],
  "nested_loops": [
    {
      "file": "dist/index.d.ts",
      "line": 247,
      "context": "format: {\n                readonly type: \"string\";\n                readonly enum: readonly [\"yaml\", \"json\"];\n           "
    },
    {
      "file": "dist/index.d.ts",
      "line": 307,
      "context": "format)\";\n            };\n            readonly targetModel: {\n                readonly type: \"string\";\n                re"
    },
    {
      "file": "dist/tools/import-template.d.ts",
      "line": 5,
      "context": "for use in Claude Desktop and other MCP-compatible environments.\n *\n * Implements the 6-layer security validation pipeli"
    },
    {
      "file": "dist/tools/split-mission.d.ts",
      "line": 20,
      "context": "for split_mission tool\n */\nexport interface SplitMissionParams {\n    /** Path to mission file to split (YAML format) */\n"
    },
    {
      "file": "dist/tools/split-mission.d.ts",
      "line": 96,
      "context": "for mission splitting\n */\nexport declare class SplitMissionToolImpl {\n    private loader;\n    private splitter;\n    priv"
    },
    {
      "file": "dist/tools/export-template.d.ts",
      "line": 11,
      "context": "for Template Export\n */\nexport interface ExportTemplateParams {\n    /** Template object to export (must conform to missi"
    },
    {
      "file": "dist/tools/list-domains.d.ts",
      "line": 14,
      "context": "for the MCP server.\n * Reads from the registry and formats output for LLM consumption.\n */\nexport declare class ListDoma"
    },
    {
      "file": "dist/tools/extract-template.d.ts",
      "line": 9,
      "context": "for Template Extraction\n */\nexport interface ExtractTemplateParams {\n    /** Path to the source mission file or director"
    },
    {
      "file": "dist/tools/create-mission.d.ts",
      "line": 74,
      "context": "for mission creation\n */\nexport declare class CreateMissionToolImpl {\n    private packLoader;\n    private merger;\n    pr"
    },
    {
      "file": "dist/tools/combine-packs.d.ts",
      "line": 22,
      "context": "for combine_packs tool\n */\nexport interface CombinePacksParams {\n    /** Array of pack names to combine (required) */\n  "
    },
    {
      "file": "dist/tools/combine-packs.d.ts",
      "line": 81,
      "context": "format: {\n                readonly type: \"string\";\n                readonly enum: readonly [\"yaml\", \"json\"];\n           "
    },
    {
      "file": "dist/tools/combine-packs.d.ts",
      "line": 93,
      "context": "for pack combination\n */\nexport declare class CombinePacksToolImpl {\n    private packLoader;\n    private combiner;\n    p"
    },
    {
      "file": "dist/tools/optimize-tokens.d.ts",
      "line": 34,
      "context": "for optimize_tokens\n */\nexport declare const optimizeTokensToolDefinition: {\n    readonly name: \"optimize_tokens\";\n    r"
    },
    {
      "file": "dist/tools/optimize-tokens.d.ts",
      "line": 45,
      "context": "format)\";\n            };\n            readonly targetModel: {\n                readonly type: \"string\";\n                re"
    },
    {
      "file": "dist/tools/suggest-splits.d.ts",
      "line": 18,
      "context": "for suggest_splits tool\n */\nexport interface SuggestSplitsParams {\n    /** Path to mission file to analyze */\n    missio"
    },
    {
      "file": "dist/tools/suggest-splits.d.ts",
      "line": 59,
      "context": "for suggest_splits\n */\nexport declare const suggestSplitsToolDefinition: {\n    readonly name: \"suggest_splits\";\n    read"
    },
    {
      "file": "dist/tools/suggest-splits.d.ts",
      "line": 87,
      "context": "for split suggestions\n */\nexport declare class SuggestSplitsToolImpl {\n    private splitter;\n    private complexityScore"
    },
    {
      "file": "dist/types/registry.d.ts",
      "line": 4,
      "context": "for domain pack registry entries and validation results.\n *\n * @module types/registry\n */\n/**\n * Domain Pack Entry\n * Re"
    },
    {
      "file": "dist/types/tools.d.ts",
      "line": 4,
      "context": "for MCP tools and their outputs.\n *\n * @module types/tools\n */\n/**\n * Domain Information\n * Simplified view of a domain "
    },
    {
      "file": "dist/domains/types.d.ts",
      "line": 11,
      "context": "for a domain-specific pack\n */\nexport interface DomainPackManifest {\n    /** Globally unique identifier for the pack */\n"
    },
    {
      "file": "dist/merge/deep-merge.d.ts",
      "line": 2,
      "context": "for Mission Template Composition\n *\n * Deterministic algorithm that merges generic mission templates with\n * domain-spec"
    },
    {
      "file": "dist/intelligence/graph-validator.d.ts",
      "line": 20,
      "context": "for DAG properties and cycles\n * Based on research findings from R4.3_Intelligent_Mission_Sequencing\n */\nexport declare "
    },
    {
      "file": "dist/intelligence/complexity-scorer.d.ts",
      "line": 52,
      "context": "for missions\n */\nexport declare class ComplexityScorer {\n    private config;\n    private tokenCounter;\n    constructor(t"
    },
    {
      "file": "dist/schemas/generic-mission.d.ts",
      "line": 57,
      "context": "for compatibility\";\n        };\n        readonly missionId: {\n            readonly type: \"string\";\n            readonly m"
    },
    {
      "file": "dist/versioning/types.d.ts",
      "line": 2,
      "context": "for the Template Versioning system.\n * Implements SemVer support and migration capabilities for mission B3.4.\n */\n/**\n *"
    },
    {
      "file": "dist/versioning/types.d.ts",
      "line": 88,
      "context": "for this migration */\n    id: string;\n    /** Source version (what it migrates from) */\n    fromVersion: SemanticVersion"
    },
    {
      "file": "dist/versioning/types.d.ts",
      "line": 168,
      "context": "for pack combinations)\n */\nexport interface VersionResolutionResult {\n    /** Whether resolution was successful */\n    s"
    },
    {
      "file": "dist/versioning/types.d.ts",
      "line": 183,
      "context": "for version manager operations\n */\nexport interface VersionManagerOptions {\n    /** Whether to allow pre-release version"
    },
    {
      "file": "dist/versioning/version-manager.d.ts",
      "line": 7,
      "context": "for mission templates\n */\nexport declare class VersionManager {\n    private registry;\n    private options;\n    construct"
    },
    {
      "file": "dist/extraction/types.d.ts",
      "line": 2,
      "context": "for the Template Extraction system.\n * Based on research mission R3.1.\n */\n/**\n * Defines a single configurable paramete"
    },
    {
      "file": "dist/extraction/types.d.ts",
      "line": 23,
      "context": "for an extracted mission template.\n * This file (template-metadata.json) lives at the root of the template directory.\n *"
    },
    {
      "file": "dist/extraction/types.d.ts",
      "line": 55,
      "context": "for potential parameterization.\n */\nexport interface Candidate {\n    /** The type of candidate identified */\n    type: '"
    },
    {
      "file": "dist/extraction/types.d.ts",
      "line": 103,
      "context": "for including this file (if optional) */\n    condition?: string;\n}\n/**\n * Configuration for the extraction process.\n */\n"
    },
    {
      "file": "dist/loaders/yaml-loader.d.ts",
      "line": 13,
      "context": "for all file operations\n     * All loaded files must be within this directory\n     */\n    baseDir: string;\n    /**\n     "
    },
    {
      "file": "tests/smoke/mcp-intelligence-tools-smoke.test.ts",
      "line": 26,
      "context": "fort must consider compliance checkpoints, localization blockers, and GPU-heavy inference steps.\n\nsuccessCriteria:\n  - \""
    },
    {
      "file": "tests/tools/create-mission.test.ts",
      "line": 361,
      "context": "formatForLLM', () => {\n    it('should format YAML with helpful context', () => {\n      const yamlString = `\nschemaType: "
    },
    {
      "file": "tests/tools/create-mission.test.ts",
      "line": 370,
      "context": "formatted = tool.formatForLLM(yamlString);\n\n      expect(formatted).toContain('Mission Created Successfully');\n      exp"
    },
    {
      "file": "tests/tools/list-domains.test.ts",
      "line": 168,
      "context": "formatForLLM', () => {\n    it('should format empty array with helpful message', () => {\n      const domains: DomainInfo["
    },
    {
      "file": "tests/tools/list-domains.test.ts",
      "line": 280,
      "context": "formatForLLM(domains);\n\n      expect(result).toContain('Test with \"quotes\" and <tags>');\n    });\n  });\n\n  describe('inte"
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 2,
      "context": "for the extract_template MCP tool\n */\n\nimport { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimpo"
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 378,
      "context": "formance', () => {\n    it('should complete extraction quickly for small missions', async () => {\n      fs.writeFileSync("
    },
    {
      "file": "tests/tools/analyze-dependencies.test.ts",
      "line": 1,
      "context": "formatAnalysisResult, AnalyzeDependenciesArgs } from '../../src/tools/analyze-dependencies';\nimport * as fs from 'fs';\ni"
    },
    {
      "file": "tests/tools/analyze-dependencies.test.ts",
      "line": 227,
      "context": "formatAnalysisResult', () => {\n    it('should format valid result with execution order', async () => {\n      const resul"
    },
    {
      "file": "tests/tools/analyze-dependencies.test.ts",
      "line": 233,
      "context": "formatted = formatAnalysisResult(result);\n\n      expect(formatted).toContain('Total Missions: 3');\n      expect(formatte"
    },
    {
      "file": "tests/tools/analyze-dependencies.test.ts",
      "line": 274,
      "context": "formatted = formatAnalysisResult(result);\n\n      expect(formatted).toContain('Has Cycles: Yes');\n      expect(formatted)"
    },
    {
      "file": "tests/tools/analyze-dependencies.test.ts",
      "line": 300,
      "context": "formatted = formatAnalysisResult(result);\n\n      if (result.inferredDependencies && result.inferredDependencies.length >"
    },
    {
      "file": "tests/tools/split-mission.test.ts",
      "line": 4,
      "context": "for the split_mission MCP tool\n */\n\nimport { describe, test, expect, beforeEach, afterEach } from '@jest/globals';\nimpor"
    },
    {
      "file": "tests/tools/split-mission.test.ts",
      "line": 415,
      "context": "formatForLLM', () => {\n    test('should format split result for LLM', async () => {\n      const mission = {\n        sche"
    },
    {
      "file": "tests/tools/split-mission.test.ts",
      "line": 436,
      "context": "formatted = tool.formatForLLM(result);\n\n      expect(typeof formatted).toBe('string');\n      expect(formatted.length).to"
    },
    {
      "file": "tests/tools/split-mission.test.ts",
      "line": 445,
      "context": "formatted).toContain('Analysis Complete');\n      }\n    });\n\n    test('should format no-split result for LLM explicitly',"
    },
    {
      "file": "tests/tools/split-mission.test.ts",
      "line": 468,
      "context": "formance test',\n        context: {\n          background: 'Testing performance',\n        },\n        successCriteria: Arra"
    },
    {
      "file": "tests/tools/version-template.errors.test.ts",
      "line": 1,
      "context": "foreEach } from '@jest/globals';\n\ndescribe('version-template error handling', () => {\n  beforeEach(() => {\n    jest.rese"
    },
    {
      "file": "tests/domains/domain-pack-loader.test.ts",
      "line": 2,
      "context": "for DomainPackLoader\n *\n * Tests all loader functionality:\n * - Pack manifest loading and validation\n * - Schema loading"
    },
    {
      "file": "tests/domains/domain-pack-loader.test.ts",
      "line": 32,
      "context": "foreEach(() => {\n    // Use app directory as base for tests\n    testBaseDir = path.resolve(__dirname, '../../');\n    loa"
    },
    {
      "file": "tests/intelligence/model-transpilers.test.ts",
      "line": 89,
      "context": "formation';\n      const result = transpiler.transpile(content, 'gemini');\n\n      expect(result).toContain('Context: Impo"
    },
    {
      "file": "tests/intelligence/token-validation.test.ts",
      "line": 47,
      "context": "for Claude unofficial tokenizer', async () => {\n      await counter.count('hello world', 'claude');\n      \n      // Acce"
    },
    {
      "file": "tests/intelligence/mission-splitter.test.ts",
      "line": 4,
      "context": "for the hybrid semantic-structural decomposition algorithm\n */\n\nimport { describe, test, expect, beforeEach } from '@jes"
    },
    {
      "file": "tests/intelligence/mission-splitter.test.ts",
      "line": 543,
      "context": "formance test mission',\n        context: {\n          background: 'Testing splitting performance',\n          dependencies"
    },
    {
      "file": "tests/intelligence/complexity-scorer.test.ts",
      "line": 4,
      "context": "for the Composite Complexity Score (CCS) calculation\n */\n\nimport { describe, test, expect, beforeEach } from '@jest/glob"
    },
    {
      "file": "tests/intelligence/complexity-scorer.test.ts",
      "line": 409,
      "context": "formance test',\n        context: {\n          background: 'Testing performance of complexity analysis',\n          depende"
    },
    {
      "file": "tests/security/path-traversal.test.ts",
      "line": 16,
      "context": "foreEach(() => {\n    // Create a temporary directory for testing\n    tempDir = fs.mkdtempSync(path.join(os.tmpdir(), 'ya"
    },
    {
      "file": "tests/combination/pack-combiner.test.ts",
      "line": 246,
      "context": "for empty pack list', () => {\n      const result = combiner.combine([], []);\n\n      expect(result.success).toBe(false);\n"
    },
    {
      "file": "tests/integration/mcp-server.test.ts",
      "line": 2,
      "context": "for MCP Server\n *\n * End-to-end tests validating the complete Phase 1 workflow:\n * - Server initialization\n * - Registry"
    },
    {
      "file": "tests/integration/mcp-server.test.ts",
      "line": 80,
      "context": "format domain list for LLM consumption', () => {\n      // Execute tool\n      const domains = listDomainsTool.execute('re"
    },
    {
      "file": "tests/integration/mcp-server.test.ts",
      "line": 204,
      "context": "for missing registry\n      expect(domains).toEqual([]);\n    });\n\n    it('should throw on invalid registry format', () =>"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 292,
      "context": "format may vary - YAML or model-specific)\n      expect(afterContent).toContain('OPTIMIZE-001');\n      expect(afterConten"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 328,
      "context": "foreContent);\n\n      // But should still get optimization preview\n      expect(result.optimizedContent).toBeDefined();\n\n"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 365,
      "context": "formance targets', async () => {\n      const testMission = `\nmissionId: \"PERF-002\"\nobjective: \"Another performance test "
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 397,
      "context": "formed mission files gracefully', async () => {\n      const malformedPath = path.join(FIXTURES_DIR, 'malformed.yaml');\n "
    },
    {
      "file": "tests/integration/quality-scoring.test.ts",
      "line": 71,
      "context": "for scoring mission quality, including metrics for clarity, completeness, and AI-readiness.',\n        context: 'This mis"
    },
    {
      "file": "tests/import-export/template-exporter.test.ts",
      "line": 137,
      "context": "for indentation\n    });\n  });\n\n  describe('JSON Export', () => {\n    it('should export template to JSON format', () => {"
    },
    {
      "file": "tests/import-export/performance.test.ts",
      "line": 5,
      "context": "formance test: Import validation completes in <1 second for typical templates (<100KB)\n * Uses skipSignatureVerification"
    },
    {
      "file": "tests/import-export/template-importer.test.ts",
      "line": 97,
      "context": "formed YAML', async () => {\n      writeTemplateFile('malformed.yaml', 'invalid: yaml: content: [[[');\n\n      await expec"
    },
    {
      "file": "tests/import-export/template-importer.test.ts",
      "line": 267,
      "context": "formance Requirements', () => {\n    it('should complete import in <1 second for typical templates', async () => {\n      "
    },
    {
      "file": "tests/import-export/security-validator.test.ts",
      "line": 19,
      "context": "foreEach(() => {\n    // Reset trusted keys before each test\n    SecurityValidator.clearTrustedKeys();\n\n    // Create val"
    },
    {
      "file": "tests/import-export/security-validator.test.ts",
      "line": 125,
      "context": "foreEach(() => {\n      // Register trusted key for all semantic tests\n      SecurityValidator.registerTrustedKey({\n     "
    },
    {
      "file": "tests/import-export/security-validator.test.ts",
      "line": 196,
      "context": "force cross-field consistency (endDate > startDate)', async () => {\n      const template = createValidTemplate();\n      "
    },
    {
      "file": "tests/import-export/security-validator.test.ts",
      "line": 362,
      "context": "format'))).toBe(\n        true\n      );\n    });\n  });\n\n  describe('Performance Requirements', () => {\n    it('should trac"
    },
    {
      "file": "tests/registry/semver-validator.test.ts",
      "line": 139,
      "context": "for invalid SemVer', () => {\n      expect(() => validateSemVerOrThrow('1.0')).toThrow(\n        'Invalid SemVer format fo"
    },
    {
      "file": "tests/versioning/migration-engine.test.ts",
      "line": 22,
      "context": "foreAll(() => {\n    // Create test directory for backups\n    if (!fs.existsSync(testDir)) {\n      fs.mkdirSync(testDir, "
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 2,
      "context": "for TemplateExtractor\n */\n\nimport { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport * as fs f"
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 437,
      "context": "for typical missions', async () => {\n      // Create a mission with ~50 files\n      for (let i = 0; i < 50; i++) {\n     "
    },
    {
      "file": "scripts/validate-token-counts.ts",
      "line": 35,
      "context": "for AI-assisted development workflows.' },\n  { name: 'long', text: `\nThis mission file represents the master backlog and"
    },
    {
      "file": "scripts/validate-token-counts.ts",
      "line": 179,
      "context": "for required API keys\n  const hasAnthropicKey = !!process.env.ANTHROPIC_API_KEY;\n  const hasGoogleKey = !!process.env.GO"
    },
    {
      "file": "src/index.ts",
      "line": 476,
      "context": "formatted = context.splitMissionTool.formatForLLM(result);\n\n      const heuristicWarning =\n        result.tokenUsage?.mo"
    },
    {
      "file": "src/index.ts",
      "line": 511,
      "context": "formatted = context.suggestSplitsTool.formatForLLM(result, params.detailed || false);\n\n      const heuristicWarning =\n  "
    },
    {
      "file": "src/tools/combine-packs.ts",
      "line": 27,
      "context": "for combine_packs tool\n */\nexport interface CombinePacksParams {\n  /** Array of pack names to combine (required) */\n  pa"
    },
    {
      "file": "src/tools/combine-packs.ts",
      "line": 90,
      "context": "format: {\n        type: 'string',\n        enum: ['yaml', 'json'],\n        default: 'yaml',\n        description: 'Output "
    },
    {
      "file": "src/tools/combine-packs.ts",
      "line": 276,
      "context": "formatOutput(\n    combinedPack: any,\n    format: 'yaml' | 'json'\n  ): string {\n    if (format === 'json') {\n      return"
    },
    {
      "file": "src/tools/optimize-tokens.ts",
      "line": 43,
      "context": "for optimize_tokens\n */\nexport const optimizeTokensToolDefinition = {\n  name: 'optimize_tokens',\n  description: 'Optimiz"
    },
    {
      "file": "src/tools/optimize-tokens.ts",
      "line": 54,
      "context": "format)',\n      },\n      targetModel: {\n        type: 'string',\n        enum: ['claude', 'gpt', 'gemini'],\n        descr"
    },
    {
      "file": "src/tools/import-template.ts",
      "line": 15,
      "context": "for Template Import\n */\nexport interface ImportTemplateParams {\n  /** Path to the template file to import */\n  templateP"
    },
    {
      "file": "src/tools/import-template.ts",
      "line": 203,
      "context": "format)',\n      },\n      baseDir: {\n        type: 'string',\n        description:\n          'Base directory for import op"
    },
    {
      "file": "src/tools/import-template.ts",
      "line": 213,
      "context": "for production use)',\n      },\n      trustLevel: {\n        type: 'string',\n        enum: ['verified-internal', 'signed-k"
    },
    {
      "file": "src/tools/split-mission.ts",
      "line": 28,
      "context": "for split_mission tool\n */\nexport interface SplitMissionParams {\n  /** Path to mission file to split (YAML format) */\n  "
    },
    {
      "file": "src/tools/version-template.ts",
      "line": 120,
      "context": "format: X.Y.Z)',\n      },\n      version2: {\n        type: 'string',\n        description: 'Second version to compare (Sem"
    },
    {
      "file": "src/tools/version-template.ts",
      "line": 233,
      "context": "format: X.Y.Z)',\n      },\n      toVersion: {\n        type: 'string',\n        description: 'Target version (SemVer format"
    },
    {
      "file": "src/tools/version-template.ts",
      "line": 336,
      "context": "format (X.Y.Z)',\n      },\n      changelog: {\n        type: 'string',\n        description: 'Human-readable changelog entr"
    },
    {
      "file": "src/tools/version-template.ts",
      "line": 497,
      "context": "format (X.Y.Z)',\n      },\n      version2: {\n        type: 'string',\n        description: 'Second version in SemVer forma"
    },
    {
      "file": "src/tools/extract-template.ts",
      "line": 14,
      "context": "for Template Extraction\n */\nexport interface ExtractTemplateParams {\n  /** Path to the source mission file or directory "
    },
    {
      "file": "src/tools/extract-template.ts",
      "line": 271,
      "context": "for the template (optional, defaults to ./templates)'\n      },\n      confidenceThreshold: {\n        type: 'number',\n    "
    },
    {
      "file": "src/tools/suggest-splits.ts",
      "line": 25,
      "context": "for suggest_splits tool\n */\nexport interface SuggestSplitsParams {\n  /** Path to mission file to analyze */\n  missionFil"
    },
    {
      "file": "src/tools/suggest-splits.ts",
      "line": 70,
      "context": "for suggest_splits\n */\nexport const suggestSplitsToolDefinition = {\n  name: 'suggest_splits',\n  description: 'Analyzes a"
    },
    {
      "file": "src/tools/suggest-splits.ts",
      "line": 272,
      "context": "for each step');\n    parts.push('- Allows for better error recovery');\n\n    return parts.join('\\n');\n  }\n\n  /**\n   * Get"
    },
    {
      "file": "src/tools/export-template.ts",
      "line": 15,
      "context": "for Template Export\n */\nexport interface ExportTemplateParams {\n  /** Template object to export (must conform to mission"
    },
    {
      "file": "src/tools/export-template.ts",
      "line": 82,
      "context": "for display\n    const resolvedPath = path.resolve(baseDir, params.outputPath);\n\n    return {\n      success: true,\n      "
    },
    {
      "file": "src/tools/export-template.ts",
      "line": 131,
      "context": "format if provided\n  if (params.format && !['yaml', 'json'].includes(params.format)) {\n    throw new Error('format must "
    },
    {
      "file": "src/tools/export-template.ts",
      "line": 208,
      "context": "for export operations (optional, defaults to current directory)',\n      },\n      format: {\n        type: 'string',\n     "
    },
    {
      "file": "src/tools/analyze-dependencies.ts",
      "line": 109,
      "context": "formanceMs\n    };\n  } catch (error: any) {\n    const performanceMs = Date.now() - startTime;\n    return {\n      totalMis"
    },
    {
      "file": "src/types/tools.ts",
      "line": 4,
      "context": "for MCP tools and their outputs.\n *\n * @module types/tools\n */\n\n/**\n * Domain Information\n * Simplified view of a domain"
    },
    {
      "file": "src/types/registry.ts",
      "line": 4,
      "context": "for domain pack registry entries and validation results.\n *\n * @module types/registry\n */\n\n/**\n * Domain Pack Entry\n * R"
    },
    {
      "file": "src/domains/types.ts",
      "line": 13,
      "context": "for a domain-specific pack\n */\nexport interface DomainPackManifest {\n  /** Globally unique identifier for the pack */\n  "
    },
    {
      "file": "src/domains/domain-pack-loader.ts",
      "line": 128,
      "context": "for safety before returning\n    const templateValidation = this.validateTemplateAgainstSchema(template, schema);\n    if "
    },
    {
      "file": "src/quality/improvement-engine.ts",
      "line": 185,
      "context": "formation.`;\n      }\n    });\n\n    // Information Breadth\n    this.addRule('Information Breadth', {\n      condition: (val"
    },
    {
      "file": "src/quality/quality-scorer.ts",
      "line": 36,
      "context": "formanceTargetMs = config.performanceTargetMs || 3000;\n\n    this.clarityAnalyzer = new ClarityAnalyzer(this.metricWeight"
    },
    {
      "file": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 163,
      "context": "for structural consistency and best practices\n   */\n  private calculateLintingScore(mission: MissionContent): number {\n "
    },
    {
      "file": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 196,
      "context": "for proper field naming\n    if (mission.domainFields) {\n      const fields = Object.keys(mission.domainFields);\n      fo"
    },
    {
      "file": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 247,
      "context": "for scope indicators\n    const scopeIndicators = [\n      'in-scope', 'out-of-scope', 'scope', 'boundary', 'boundaries',\n"
    },
    {
      "file": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 325,
      "context": "for linting\n\n  private findEmptyFields(obj: any, path: string = ''): string[] {\n    const empty: string[] = [];\n\n    for"
    },
    {
      "file": "src/quality/analyzers/clarity-analyzer.ts",
      "line": 155,
      "context": "for potentially ambiguous sentence structures\n   */\n  private detectSyntacticAmbiguity(text: string): number {\n    const"
    },
    {
      "file": "src/quality/analyzers/clarity-analyzer.ts",
      "line": 189,
      "context": "for (const sentence of sentences) {\n      const words = sentence.toLowerCase().split(/\\s+/);\n      for (let i = 0; i < w"
    },
    {
      "file": "src/quality/analyzers/clarity-analyzer.ts",
      "line": 242,
      "context": "for optional fields in structure\n    if (mission.domainFields) {\n      // Optional sections add complexity\n      const o"
    },
    {
      "file": "src/quality/analyzers/completeness-analyzer.ts",
      "line": 42,
      "context": "formation Breadth',\n        rawValue: metrics.informationBreadth,\n        normalizedScore: metrics.informationBreadth,\n "
    },
    {
      "file": "src/quality/analyzers/completeness-analyzer.ts",
      "line": 188,
      "context": "for topic alignment with mission type\n   */\n  private async calculateSemanticCoverage(mission: MissionContent): Promise<"
    },
    {
      "file": "src/quality/analyzers/completeness-analyzer.ts",
      "line": 294,
      "context": "formance', 'deliverable'\n      ],\n      'Build.Documentation.v1': [\n        'document', 'specification', 'guide', 'instr"
    },
    {
      "file": "src/merge/deep-merge.ts",
      "line": 2,
      "context": "for Mission Template Composition\n *\n * Deterministic algorithm that merges generic mission templates with\n * domain-spec"
    },
    {
      "file": "src/intelligence/mission-splitter.ts",
      "line": 211,
      "context": "foreText: prevSentence,\n          afterText: currSentence,\n        });\n      }\n    }\n\n    // Also propose breaks at stru"
    },
    {
      "file": "src/intelligence/mission-splitter.ts",
      "line": 370,
      "context": "for (let i = 1; i < subMissions.length; i++) {\n      // By default, each mission depends on the previous one\n      subMi"
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 160,
      "context": "for mission references\n    if (missionData.context) {\n      const contextDeps = this.extractMissionReferencesFromText(mi"
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 214,
      "context": "forEach(match => references.add(match));\n    }\n\n    // Also match simple single-letter mission IDs (for tests)\n    const"
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 309,
      "context": "form topological sort using Kahn's algorithm (BFS-based)\n   * Based on R4.3 research: \"Use Kahn's algorithm for parallel"
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 357,
      "context": "for identifying temporal bottlenecks\"\n   * Simplified implementation assuming uniform task duration\n   *\n   * Critical p"
    },
    {
      "file": "src/intelligence/token-counters.ts",
      "line": 15,
      "context": "for external libraries\n */\ntype GPTTokens = number[];\ntype PreTrainedTokenizer = any;\n\n/**\n * Token counter implementati"
    },
    {
      "file": "src/intelligence/token-counters.ts",
      "line": 147,
      "context": "for English text\n   * Used when primary tokenizer fails to load\n   */\n  private fallbackCount(text: string, model: Suppo"
    },
    {
      "file": "src/intelligence/context-propagator.ts",
      "line": 37,
      "context": "for context propagation\n */\nexport interface ContextPropagatorConfig {\n  maxContextTokens: number; // Maximum tokens to "
    },
    {
      "file": "src/intelligence/context-propagator.ts",
      "line": 132,
      "context": "for short chains\n   */\n  private fullContextStuffing(\n    originalMission: string,\n    completedResults: SubMissionResul"
    },
    {
      "file": "src/intelligence/graph-validator.ts",
      "line": 37,
      "context": "for missing dependencies\n    this.checkMissingDependencies(graph, warnings);\n\n    // Detect cycles using DFS with back-e"
    },
    {
      "file": "src/intelligence/graph-validator.ts",
      "line": 66,
      "context": "for missing dependencies (dependencies referenced but not in graph)\n   */\n  private checkMissingDependencies(graph: Depe"
    },
    {
      "file": "src/intelligence/model-transpilers.ts",
      "line": 77,
      "context": "format (### delimiters and clear structure)\n   */\n  private transpileToGPT(content: string): string {\n    let result = c"
    },
    {
      "file": "src/intelligence/model-transpilers.ts",
      "line": 128,
      "context": "for few-shot learning\n   */\n  private structureExamples(content: string): string {\n    // Look for example patterns\n    "
    },
    {
      "file": "src/intelligence/model-transpilers.ts",
      "line": 170,
      "context": "format guidance\n    const deliverablesMatch = content.match(/deliverables:?\\s*([^]*?)(?=\\n\\w+:|$)/i);\n    if (deliverabl"
    },
    {
      "file": "src/intelligence/compression-rules.ts",
      "line": 197,
      "context": "format\n */\nexport function convertProseToList(text: string, delimiters: string[]): string {\n  // Check if text contains "
    },
    {
      "file": "src/intelligence/compression-rules.ts",
      "line": 215,
      "context": "for (const delimiter of delimiters) {\n    // Create list item format\n    const delimiterRegex = new RegExp(`\\\\s*${delimi"
    },
    {
      "file": "src/intelligence/compression-rules.ts",
      "line": 289,
      "context": "for (const pattern of patterns) {\n    const matches = text.matchAll(pattern);\n    for (const match of matches) {\n      c"
    },
    {
      "file": "src/intelligence/complexity-scorer.ts",
      "line": 35,
      "context": "for complexity scoring\n */\nexport interface ComplexityScorerConfig {\n  model: SupportedModel;\n  contextWindow: number; /"
    },
    {
      "file": "src/intelligence/complexity-scorer.ts",
      "line": 78,
      "context": "fore',\n  'first',\n  'second',\n  'third',\n  'finally',\n  'subsequently',\n  'following',\n  'preceding',\n];\n\n/**\n * Complex"
    },
    {
      "file": "src/intelligence/complexity-scorer.ts",
      "line": 174,
      "context": "for instructions\n\n    // Count logical operators\n    const logicalOps = this.countLogicalOperators(missionText);\n    sco"
    },
    {
      "file": "src/intelligence/complexity-scorer.ts",
      "line": 187,
      "context": "for nesting\n\n    // Count deliverables (more deliverables = more complex)\n    if (mission?.deliverables) {\n      score +"
    },
    {
      "file": "src/combination/dependency-resolver.ts",
      "line": 217,
      "context": "form topological sort using Kahn's algorithm\n   *\n   * @param graph - Dependency graph\n   * @returns Ordered list of pac"
    },
    {
      "file": "src/schemas/generic-mission.ts",
      "line": 75,
      "context": "for compatibility\"\n    },\n    missionId: {\n      type: \"string\",\n      minLength: 1,\n      description: \"Unique identifi"
    },
    {
      "file": "src/import-export/template-importer.ts",
      "line": 107,
      "context": "formance target (<1 second for typical templates)\n      if (totalTime > 1000) {\n        console.warn(\n          `Import "
    },
    {
      "file": "src/import-export/security-validator.ts",
      "line": 168,
      "context": "formanceMs = Date.now() - startTime;\n      const valid = errors.length === 0;\n\n      return {\n        valid,\n        lay"
    },
    {
      "file": "src/import-export/security-validator.ts",
      "line": 180,
      "context": "formanceMs = Date.now() - startTime;\n      return {\n        valid: false,\n        layers,\n        errors: [...errors, er"
    },
    {
      "file": "src/import-export/security-validator.ts",
      "line": 279,
      "context": "forge, crypto)\n   */\n  private verifySignatureInternal(\n    content: string,\n    signature: string,\n    publicKey: strin"
    },
    {
      "file": "src/import-export/security-validator.ts",
      "line": 415,
      "context": "format (semver)\n        if (!dep.version.match(/^\\d+\\.\\d+\\.\\d+$/)) {\n          errors.push(`Invalid version format for d"
    },
    {
      "file": "src/import-export/template-exporter.ts",
      "line": 121,
      "context": "format - Output format\n   * @param options - Export options\n   * @returns Serialized string\n   */\n  private serialize(\n "
    },
    {
      "file": "src/import-export/template-exporter.ts",
      "line": 137,
      "context": "format\n   * Uses safe serialization - no language-specific tags\n   *\n   * @param template - Template to serialize\n   * @"
    },
    {
      "file": "src/versioning/types.ts",
      "line": 2,
      "context": "for the Template Versioning system.\n * Implements SemVer support and migration capabilities for mission B3.4.\n */\n\n/**\n "
    },
    {
      "file": "src/versioning/types.ts",
      "line": 110,
      "context": "for this migration */\n  id: string;\n\n  /** Source version (what it migrates from) */\n  fromVersion: SemanticVersion;\n\n  "
    },
    {
      "file": "src/versioning/types.ts",
      "line": 216,
      "context": "for pack combinations)\n */\nexport interface VersionResolutionResult {\n  /** Whether resolution was successful */\n  succe"
    },
    {
      "file": "src/versioning/types.ts",
      "line": 235,
      "context": "for version manager operations\n */\nexport interface VersionManagerOptions {\n  /** Whether to allow pre-release versions "
    },
    {
      "file": "src/extraction/template-extractor.ts",
      "line": 42,
      "context": "for the extraction process\n   */\n  async extract(): Promise<ExtractionResult> {\n    const totalStartTime = performance.n"
    },
    {
      "file": "src/extraction/template-extractor.ts",
      "line": 74,
      "context": "formance.now() - totalStartTime)\n      };\n    }\n  }\n\n  /**\n   * Stage 1: Automated Candidate Identification\n   *\n   * An"
    },
    {
      "file": "src/extraction/template-extractor.ts",
      "line": 170,
      "context": "forms candidates into a structured template with:\n   * - Rule-based parameter generation\n   * - Conditional block infere"
    },
    {
      "file": "src/extraction/template-extractor.ts",
      "line": 191,
      "context": "for (const filePath of files) {\n      if (this.shouldExcludeFile(filePath)) continue;\n\n      const relativePath = path.r"
    },
    {
      "file": "src/extraction/template-extractor.ts",
      "line": 211,
      "context": "for (const [paramName, candidateList] of Object.entries(candidates)) {\n        for (const candidate of candidateList) {\n"
    },
    {
      "file": "src/extraction/types.ts",
      "line": 2,
      "context": "for the Template Extraction system.\n * Based on research mission R3.1.\n */\n\n/**\n * Defines a single configurable paramet"
    },
    {
      "file": "src/extraction/types.ts",
      "line": 30,
      "context": "for an extracted mission template.\n * This file (template-metadata.json) lives at the root of the template directory.\n *"
    },
    {
      "file": "src/extraction/types.ts",
      "line": 78,
      "context": "for potential parameterization.\n */\nexport interface Candidate {\n  /** The type of candidate identified */\n  type: 'lite"
    },
    {
      "file": "src/extraction/types.ts",
      "line": 140,
      "context": "for including this file (if optional) */\n  condition?: string;\n}\n\n/**\n * Configuration for the extraction process.\n */\ne"
    }
  ],
  "large_data_structures": [
    {
      "file": "dist/index.d.ts",
      "line": 32,
      "context": "[{\n    name: string;\n    description: string;\n    inputSchema: {\n        type: string;\n        properties: {};\n        a"
    },
    {
      "file": "tests/tools/list-domains.test.ts",
      "line": 177,
      "context": "[\n        {\n          name: 'foundation',\n          description: 'Core infrastructure',\n          version: '1.0.0',\n    "
    },
    {
      "file": "tests/tools/list-domains.test.ts",
      "line": 195,
      "context": "[\n        {\n          name: 'foundation',\n          description: 'Core infrastructure',\n          version: '1.0.0',\n    "
    },
    {
      "file": "tests/tools/list-domains.test.ts",
      "line": 220,
      "context": "[\n        {\n          name: 'foundation',\n          description: 'Core infrastructure',\n          version: '1.0.0',\n    "
    },
    {
      "file": "tests/tools/list-domains.test.ts",
      "line": 234,
      "context": "[\n        {\n          name: 'foundation',\n          description: 'Core',\n          version: '1.0.0',\n        },\n        "
    },
    {
      "file": "tests/tools/list-domains.test.ts",
      "line": 255,
      "context": "[\n        {\n          name: 'test',\n          description: 'Test domain',\n          version: '1.0.0',\n        },\n      ]"
    },
    {
      "file": "tests/tools/list-domains.test.ts",
      "line": 272,
      "context": "[\n        {\n          name: 'test',\n          description: 'Test with \"quotes\" and <tags>',\n          version: '1.0.0',\n"
    },
    {
      "file": "tests/tools/suggest-splits.execute.test.ts",
      "line": 44,
      "context": "[\n        { position: 20, reason: 'Objective shift', confidence: 0.75 },\n        { position: 80, reason: 'Deliverable ph"
    },
    {
      "file": "tests/tools/analyze-dependencies.test.ts",
      "line": 13,
      "context": "[\n      {\n        missionId: 'R4.3',\n        objective: 'Research mission for dependency analysis',\n        context: 'Th"
    },
    {
      "file": "tests/tools/analyze-dependencies.test.ts",
      "line": 169,
      "context": "[\n        {\n          missionId: 'A',\n          domainFields: {\n            handoffContext: {\n              dependencies"
    },
    {
      "file": "tests/tools/analyze-dependencies.test.ts",
      "line": 246,
      "context": "[\n        {\n          missionId: 'A',\n          domainFields: {\n            handoffContext: {\n              dependencies"
    },
    {
      "file": "tests/tools/split-mission.test.ts",
      "line": 67,
      "context": "[\n          'Database schema created and migrated',\n          'Authentication system working',\n          'API endpoints "
    },
    {
      "file": "tests/tools/split-mission.test.ts",
      "line": 79,
      "context": "[\n          'Database migrations',\n          'Auth service code',\n          'API implementation',\n          'Frontend ap"
    },
    {
      "file": "tests/tools/split-mission.test.ts",
      "line": 152,
      "context": "[\n          'Phase 1: Design complete',\n          'Phase 2: Implementation done',\n          'Phase 3: Testing finished',"
    },
    {
      "file": "tests/tools/split-mission.test.ts",
      "line": 159,
      "context": "[\n          'Design documents',\n          'Source code',\n          'Test reports',\n          'Deployment guide',\n       "
    },
    {
      "file": "tests/tools/split-mission.test.ts",
      "line": 202,
      "context": "[\n          'Step 1: Setup environment',\n          'Step 2: Build application',\n          'Step 3: Run tests',\n         "
    },
    {
      "file": "tests/tools/suggest-splits.format.test.ts",
      "line": 51,
      "context": "[\n        { position: 120, reason: 'Context shift', confidence: 0.75, preview: '...preview one...' },\n        { position"
    },
    {
      "file": "tests/domains/domain-pack-loader.test.ts",
      "line": 369,
      "context": "[\n        {\n          name: 'other-pack',\n          version: '1.0.0',\n          description: 'Another pack',\n          p"
    },
    {
      "file": "tests/domains/domain-pack-loader.test.ts",
      "line": 385,
      "context": "[\n        {\n          name: 'test-pack',\n          version: '1.0.0',\n          description: 'Test pack',\n          path:"
    },
    {
      "file": "tests/domains/domain-pack-loader.test.ts",
      "line": 405,
      "context": "[\n        {\n          name: 'test-pack',\n          version: '1.0.0',\n          description: 'Test pack',\n          path:"
    },
    {
      "file": "tests/domains/domain-pack-loader.test.ts",
      "line": 431,
      "context": "[\n        {\n          name: 'test-pack',\n          version: '1.0.0',\n          description: 'Test pack',\n          path:"
    },
    {
      "file": "tests/domains/domain-pack-loader.test.ts",
      "line": 450,
      "context": "[\n        {\n          name: 'test-pack',\n          version: '1.0.0',\n          description: 'Test pack',\n          path:"
    },
    {
      "file": "tests/domains/domain-pack-loader.test.ts",
      "line": 473,
      "context": "[\n        {\n          name: 'test-pack',\n          version: '1.0.0',\n          description: 'Test pack',\n          path:"
    },
    {
      "file": "tests/domains/domain-pack-loader.test.ts",
      "line": 503,
      "context": "[\n        {\n          name: 'test-pack',\n          version: '1.0.0',\n          description: 'Test pack',\n          path:"
    },
    {
      "file": "tests/domains/domain-pack-loader.test.ts",
      "line": 796,
      "context": "[\n        {\n          name: 'test-pack',\n          version: '1.0.0',\n          description: 'Test pack',\n          path:"
    },
    {
      "file": "tests/domains/domain-pack-loader.test.ts",
      "line": 831,
      "context": "[\n        {\n          name: 'test-pack',\n          version: '1.0.0',\n          description: 'Test pack',\n          path:"
    },
    {
      "file": "tests/domains/domain-pack-loader.test.ts",
      "line": 870,
      "context": "[\n        {\n          name: 'test-pack',\n          version: '1.0.0',\n          description: 'Test pack',\n          path:"
    },
    {
      "file": "tests/quality/quality-scorer.test.ts",
      "line": 21,
      "context": "[\n          'Three-dimensional quality model implemented (Clarity, Completeness, AI-Readiness).',\n          'All specifi"
    },
    {
      "file": "tests/quality/quality-scorer.test.ts",
      "line": 27,
      "context": "[\n          'The implemented QualityScorer class with all metric calculations.',\n          'Unified scoring algorithm wi"
    },
    {
      "file": "tests/quality/clarity-analyzer.test.ts",
      "line": 20,
      "context": "[\n          'Three-dimensional quality model implemented.',\n          'All specified metrics functional and accurate.',\n"
    },
    {
      "file": "tests/quality/clarity-analyzer.test.ts",
      "line": 25,
      "context": "[\n          'The implemented QualityScorer class.',\n          'Unified scoring algorithm with weighted dimensions.'\n    "
    },
    {
      "file": "tests/quality/clarity-analyzer.test.ts",
      "line": 118,
      "context": "[\n        { fkgl: 8, expectedNormalized: 0.8 },   // Too simple\n        { fkgl: 11, expectedNormalized: 1.0 },  // Optim"
    },
    {
      "file": "tests/intelligence/compression-rules.test.ts",
      "line": 22,
      "context": "[\n        { type: 'regex_replace' as const, pattern: /it is important to note that/gi, replacement: 'note:', enabled: tr"
    },
    {
      "file": "tests/intelligence/compression-rules.test.ts",
      "line": 62,
      "context": "[\n        { type: 'regex_replace' as const, pattern: /is able to/gi, replacement: 'can', enabled: true },\n        { type"
    },
    {
      "file": "tests/intelligence/mission-splitter.test.ts",
      "line": 57,
      "context": "[\n          'Database schema created',\n          'API endpoints functional',\n          'Frontend deployed',\n          'I"
    },
    {
      "file": "tests/intelligence/mission-splitter.test.ts",
      "line": 64,
      "context": "[\n          'Database migrations',\n          'API code',\n          'Frontend app',\n          'Test suite',\n          'Do"
    },
    {
      "file": "tests/intelligence/mission-splitter.test.ts",
      "line": 263,
      "context": "[\n            para('First topic: Setup the development environment. Install dependencies and configure tools.'),\n       "
    },
    {
      "file": "tests/intelligence/complexity-scorer.test.ts",
      "line": 76,
      "context": "[\n          'All microservices deployed',\n          'Authentication working',\n          'Database schema created',\n     "
    },
    {
      "file": "tests/intelligence/complexity-scorer.test.ts",
      "line": 88,
      "context": "[\n          'Auth service code',\n          'Database migrations',\n          'API implementation',\n          'Frontend ap"
    },
    {
      "file": "tests/intelligence/complexity-scorer.test.ts",
      "line": 291,
      "context": "[\n          'Phase 1 complete',\n          'Phase 2 complete',\n          'Phase 3 complete',\n          'All tests passing"
    },
    {
      "file": "tests/intelligence/complexity-scorer.test.ts",
      "line": 298,
      "context": "[\n          'Code',\n          'Tests',\n          'Docs',\n          'Deployment',\n          'Monitoring',\n        ],\n    "
    },
    {
      "file": "tests/intelligence/dependency-inferrer.test.ts",
      "line": 45,
      "context": "[\n        'Must align with research from R4.3',\n        'Verify outputs from B4.3 are integrated',\n      ],\n    };\n\n    "
    },
    {
      "file": "tests/intelligence/dependency-inferrer.test.ts",
      "line": 83,
      "context": "[\n      { from: 'B4.4', to: 'B4.3', confidence: 0.5, reason: 'struct', method: 'structural' },\n      { from: 'B4.4', to:"
    },
    {
      "file": "tests/intelligence/dependency-inferrer.test.ts",
      "line": 94,
      "context": "[\n      { from: 'B4.4', to: 'B4.3', confidence: 0.9, reason: 'keyword', method: 'keyword' },\n      { from: 'B4.4', to: '"
    },
    {
      "file": "tests/intelligence/dependency-inferrer.test.ts",
      "line": 122,
      "context": "[\n        'app/src/intelligence/dependency-analyzer.ts',\n        'app/src/intelligence/graph-validator.ts',\n      ],\n   "
    },
    {
      "file": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 12,
      "context": "[\n        {\n          missionId: 'R4.3',\n          context: 'Research mission',\n          filePath: 'missions/R4.3.yaml'"
    },
    {
      "file": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 39,
      "context": "[\n        {\n          missionId: 'A',\n          filePath: 'missions/A.yaml'\n        },\n        {\n          missionId: 'B"
    },
    {
      "file": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 64,
      "context": "[\n        {\n          missionId: 'A',\n          domainFields: {\n            handoffContext: {\n              dependencies"
    },
    {
      "file": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 102,
      "context": "[\n        {\n          missionId: 'B',\n          domainFields: {\n            handoffContext: {\n              dependencies"
    },
    {
      "file": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 139,
      "context": "[\n        {\n          missionId: 'A',\n          filePath: 'missions/A.yaml'\n        },\n        {\n          missionId: 'B"
    },
    {
      "file": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 185,
      "context": "[\n        {\n          missionId: 'R4.3',\n          filePath: 'missions/R4.3.yaml'\n        },\n        {\n          mission"
    },
    {
      "file": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 209,
      "context": "[\n        {\n          missionId: 'A',\n          filePath: 'missions/A.yaml'\n        },\n        {\n          missionId: 'B"
    },
    {
      "file": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 233,
      "context": "[\n        {\n          missionId: 'R4.3',\n          filePath: 'missions/R4.3.yaml'\n        },\n        {\n          mission"
    },
    {
      "file": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 255,
      "context": "[\n        {\n          missionId: 'A',\n          domainFields: {\n            handoffContext: {\n              dependencies"
    },
    {
      "file": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 284,
      "context": "[\n        {\n          missionId: 'A',\n          domainFields: {\n            handoffContext: {\n              dependencies"
    },
    {
      "file": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 334,
      "context": "[\n        {\n          missionId: 'A',\n          domainFields: {\n            handoffContext: {\n              dependencies"
    },
    {
      "file": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 354,
      "context": "[\n        {\n          missionId: 'D',\n          domainFields: {\n            handoffContext: {\n              dependencies"
    },
    {
      "file": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 405,
      "context": "[\n        {\n          missionId: 'A',\n          filePath: 'missions/A.yaml'\n        },\n        {\n          missionId: 'B"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 185,
      "context": "[\n        {\n          id: 'M1',\n          content: `\nmissionId: \"M1\"\nobjective: \"Build core data layer\"\ncontext: \"Founda"
    },
    {
      "file": "tests/integration/quality-scoring.test.ts",
      "line": 73,
      "context": "[\n          'All research questions in the domainFields are answered.',\n          'The buildImplications section is popu"
    },
    {
      "file": "tests/integration/quality-scoring.test.ts",
      "line": 79,
      "context": "[\n          'This completed and validated mission file.',\n          'A structured buildImplications object ready for use"
    },
    {
      "file": "tests/integration/quality-scoring.test.ts",
      "line": 85,
      "context": "[\n            'What metrics effectively measure mission clarity for AI consumption?',\n            'How can we quantify m"
    },
    {
      "file": "tests/integration/quality-scoring.test.ts",
      "line": 104,
      "context": "[\n          'Three-dimensional quality model implemented (Clarity, Completeness, AI-Readiness).',\n          'All specifi"
    },
    {
      "file": "tests/integration/quality-scoring.test.ts",
      "line": 112,
      "context": "[\n          'The implemented QualityScorer class with all metric calculations.',\n          'Unified scoring algorithm wi"
    },
    {
      "file": "tests/integration/quality-scoring.test.ts",
      "line": 121,
      "context": "[\n            {\n              finding: 'Use three-dimensional model: Clarity, Completeness, AI-Readiness.',\n            "
    },
    {
      "file": "tests/integration/quality-scoring.test.ts",
      "line": 187,
      "context": "[\n          'All components implemented according to specification.',\n          'Comprehensive test coverage achieved (>"
    },
    {
      "file": "tests/integration/quality-scoring.test.ts",
      "line": 197,
      "context": "[\n          'Complete implementation with all components.',\n          'Comprehensive test suite.',\n          'Performanc"
    },
    {
      "file": "tests/integration/quality-scoring.test.ts",
      "line": 207,
      "context": "[\n            'Must maintain backward compatibility.',\n            'No breaking changes to public API.',\n            'Me"
    },
    {
      "file": "tests/utils/template-path.ts",
      "line": 9,
      "context": "[\n    process.env.MISSION_PROTOCOL_TEMPLATE_DIR,\n    path.resolve(process.cwd(), 'templates'),\n    path.resolve(__dirnam"
    },
    {
      "file": "tests/import-export/template-importer.coverage.test.ts",
      "line": 85,
      "context": "[\n        {\n          name: 'dep-1',\n          sourceUrl: 'file:///tmp/dep.yaml',\n          version: '0.0.1',\n          "
    },
    {
      "file": "tests/import-export/template-exporter.test.ts",
      "line": 57,
      "context": "[\n          {\n            name: 'Phase 1',\n            steps: [\n              {\n                action: 'test-action',\n "
    },
    {
      "file": "tests/import-export/template-exporter.test.ts",
      "line": 350,
      "context": "[\n        createValidTemplate(),\n        { ...createValidTemplate(), apiVersion: 'invalid' } as MissionTemplate, // Inva"
    },
    {
      "file": "tests/import-export/template-exporter.test.ts",
      "line": 367,
      "context": "[\n        {\n          name: 'dep',\n          sourceUrl: 'https://example.com/dep.yaml',\n          version: '1.0.0',\n    "
    },
    {
      "file": "tests/import-export/security-validator.test.ts",
      "line": 44,
      "context": "[\n          {\n            name: 'Phase 1',\n            steps: [\n              {\n                action: 'test-action',\n "
    },
    {
      "file": "tests/import-export/security-validator.test.ts",
      "line": 272,
      "context": "[\n        {\n          name: 'malicious-dep',\n          sourceUrl: 'https://evil.com/malware.yaml',\n          version: '1"
    },
    {
      "file": "tests/import-export/security-validator.test.ts",
      "line": 293,
      "context": "[\n        {\n          name: 'safe-dep',\n          sourceUrl: 'https://trusted.example.com/dep.yaml',\n          version: "
    },
    {
      "file": "tests/import-export/security-validator.test.ts",
      "line": 314,
      "context": "[\n        {\n          name: 'dep',\n          sourceUrl: 'https://subdomain.example.com/dep.yaml',\n          version: '1."
    },
    {
      "file": "tests/import-export/security-validator.test.ts",
      "line": 331,
      "context": "[\n        {\n          name: 'dep',\n          sourceUrl: 'file:///local/dep.yaml',\n          version: '1.0.0',\n          "
    },
    {
      "file": "tests/import-export/security-validator.test.ts",
      "line": 350,
      "context": "[\n        {\n          name: 'dep',\n          sourceUrl: 'file:///local/dep.yaml',\n          version: 'not-a-valid-versio"
    },
    {
      "file": "tests/registry/registry-parser.test.ts",
      "line": 284,
      "context": "[\n      {\n        name: 'v1-domain',\n        description: 'Version 1',\n        version: '1.0.0',\n        path: 'domains/"
    },
    {
      "file": "tests/registry/registry-parser.test.ts",
      "line": 343,
      "context": "[\n      {\n        name: 'exact-v1',\n        description: 'Exactly 1.0.0',\n        version: '1.0.0',\n        path: 'domai"
    },
    {
      "file": "tests/registry/registry-parser.test.ts",
      "line": 379,
      "context": "[\n      {\n        name: 'test-domain',\n        description: 'Test',\n        version: '1.0.0',\n        path: 'domains/tes"
    },
    {
      "file": "tests/loaders/yaml-loader.test.ts",
      "line": 128,
      "context": "[structure\n`;\n      fs.writeFileSync(path.join(tempDir, 'invalid.yaml'), yamlContent);\n\n      expect(() => {\n        loa"
    },
    {
      "file": "scripts/validate-token-counts.ts",
      "line": 33,
      "context": "[\n  { name: 'short', text: 'hello world' },\n  { name: 'medium', text: 'The Mission Creation Protocol enables structured,"
    },
    {
      "file": "src/index.ts",
      "line": 90,
      "context": "[\n  listDomainsToolDefinition,\n  createMissionToolDefinition,\n  extractTemplateToolDefinition,\n  importTemplateToolDefin"
    },
    {
      "file": "src/index.ts",
      "line": 393,
      "context": "[\n            {\n              type: 'text',\n              text: `Token optimization failed: ${errorText}`,\n            }"
    },
    {
      "file": "src/tools/combine-packs.ts",
      "line": 153,
      "context": "[\n              'Selective strategy requires at least one of overridePaths or mergePaths',\n            ],\n          };\n "
    },
    {
      "file": "src/tools/split-mission.ts",
      "line": 308,
      "context": "[\n        `Complete ${subMission.objective}`,\n        'All deliverables produced',\n        'Pass to next sub-mission if "
    },
    {
      "file": "src/tools/split-mission.ts",
      "line": 360,
      "context": "[\n      '# Mission Split Analysis',\n      '',\n      `**Complexity Score:** ${complexity.compositeScore.toFixed(2)}/10`,\n"
    },
    {
      "file": "src/tools/split-mission.ts",
      "line": 419,
      "context": "[\n            `**Token Usage (${tokenUsage.model}):**`,\n            `- Mission tokens: ${tokenUsage.totalTokens}`,\n     "
    },
    {
      "file": "src/tools/split-mission.ts",
      "line": 427,
      "context": "[\n            '**Token Usage:**',\n            '- Token metrics unavailable for this result.',\n          ];\n\n      return"
    },
    {
      "file": "src/tools/split-mission.ts",
      "line": 442,
      "context": "[\n          `**Token Usage (${tokenUsage.model}):**`,\n          `- Mission tokens: ${tokenUsage.totalTokens}`,\n         "
    },
    {
      "file": "src/tools/version-template.ts",
      "line": 512,
      "context": "[\n  checkVersionCompatibilityToolDefinition,\n  findMigrationPathToolDefinition,\n  registerTemplateVersionToolDefinition,"
    },
    {
      "file": "src/tools/extract-template.ts",
      "line": 54,
      "context": "[\n        'node_modules/**',\n        '.git/**',\n        'dist/**',\n        'build/**',\n        '*.log',\n        '.env',\n"
    },
    {
      "file": "src/tools/suggest-splits.ts",
      "line": 255,
      "context": "[\n      `This mission has high complexity (${score.toFixed(2)}/10) and should be split.`,\n      '',\n      `**Recommended"
    },
    {
      "file": "src/tools/suggest-splits.ts",
      "line": 315,
      "context": "[\n      '# Mission Complexity Analysis',\n      '',\n      `**Composite Complexity Score:** ${result.complexity.compositeS"
    },
    {
      "file": "src/quality/quality-scorer.ts",
      "line": 51,
      "context": "[\n      this.clarityAnalyzer.analyze(mission),\n      this.completenessAnalyzer.analyze(mission),\n      this.aiReadinessA"
    },
    {
      "file": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 19,
      "context": "[\n    'adequate', 'as appropriate', 'timely', 'significant', 'possibly',\n    'etc', 'appropriate', 'reasonable', 'normal"
    },
    {
      "file": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 38,
      "context": "[\n      {\n        name: 'Syntactic Validity',\n        rawValue: metrics.syntacticValidity ? 1 : 0,\n        normalizedSco"
    },
    {
      "file": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 114,
      "context": "[\n      // 1. Explicit Goal\n      {\n        name: 'Explicit goal',\n        test: () => this.hasExplicitGoal(mission.obje"
    },
    {
      "file": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 228,
      "context": "['implement', 'create', 'build', 'develop', 'research',\n                         'define', 'analyze', 'design', 'test', "
    },
    {
      "file": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 248,
      "context": "[\n      'in-scope', 'out-of-scope', 'scope', 'boundary', 'boundaries',\n      'includes', 'excludes', 'focuses on', 'limi"
    },
    {
      "file": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 265,
      "context": "[\n      'format', 'json', 'yaml', 'table', 'list', 'bullet',\n      'markdown', 'structured', 'template', 'schema'\n    ];"
    },
    {
      "file": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 277,
      "context": "[\n      'do not', 'don\\'t', 'avoid', 'exclude', 'without',\n      'must not', 'should not', 'cannot', 'never'\n    ];\n\n   "
    },
    {
      "file": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 287,
      "context": "[\n      'must', 'required', 'shall', 'only', 'specifically',\n      'constraint', 'limitation', 'restriction'\n    ];\n\n   "
    },
    {
      "file": "src/quality/analyzers/clarity-analyzer.ts",
      "line": 35,
      "context": "[\n      {\n        name: 'Flesch-Kincaid Grade Level',\n        rawValue: metrics.fleschKincaidGradeLevel,\n        normali"
    },
    {
      "file": "src/quality/analyzers/clarity-analyzer.ts",
      "line": 120,
      "context": "[\n      'the', 'a', 'an', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for',\n      'of', 'with', 'from', 'by', 'as', 'is"
    },
    {
      "file": "src/quality/analyzers/clarity-analyzer.ts",
      "line": 143,
      "context": "[\n      'bank', 'record', 'table', 'field', 'file', 'run', 'execute',\n      'process', 'service', 'object', 'class', 'ty"
    },
    {
      "file": "src/quality/analyzers/clarity-analyzer.ts",
      "line": 164,
      "context": "[\n        /\\b(saw|watched|heard)\\s+\\w+\\s+(duck|bear|fish|fly)\\b/i, // \"saw her duck\"\n        /\\b\\w+\\s+and\\s+\\w+\\s+(or|an"
    },
    {
      "file": "src/quality/analyzers/clarity-analyzer.ts",
      "line": 220,
      "context": "[\n      /\\bif\\b/g, /\\bwhen\\b/g, /\\bunless\\b/g, /\\botherwise\\b/g,\n      /\\balternatively\\b/g, /\\bin case of\\b/g, /\\bdepen"
    },
    {
      "file": "src/quality/analyzers/completeness-analyzer.ts",
      "line": 33,
      "context": "[\n      {\n        name: 'Structural Completeness',\n        rawValue: metrics.structuralCompleteness,\n        normalizedS"
    },
    {
      "file": "src/quality/analyzers/completeness-analyzer.ts",
      "line": 106,
      "context": "[\n      // Core mission elements\n      { name: 'Has objective', test: () => this.hasNonEmpty(mission.objective) },\n     "
    },
    {
      "file": "src/quality/analyzers/completeness-analyzer.ts",
      "line": 135,
      "context": "[\n      // Objective should be substantive (>10 words)\n      {\n        name: 'Objective density',\n        test: () => th"
    },
    {
      "file": "src/quality/analyzers/completeness-analyzer.ts",
      "line": 288,
      "context": "[\n        'research', 'analysis', 'findings', 'evidence', 'standards',\n        'metrics', 'framework', 'methodology', 'e"
    },
    {
      "file": "src/quality/analyzers/completeness-analyzer.ts",
      "line": 292,
      "context": "[\n        'implement', 'build', 'develop', 'code', 'test',\n        'integration', 'functionality', 'performance', 'deliv"
    },
    {
      "file": "src/quality/analyzers/completeness-analyzer.ts",
      "line": 296,
      "context": "[\n        'document', 'specification', 'guide', 'instructions',\n        'overview', 'reference', 'examples', 'usage'\n   "
    },
    {
      "file": "src/intelligence/mission-splitter.ts",
      "line": 77,
      "context": "[\n  'then',\n  'next',\n  'after',\n  'once',\n  'before',\n  'first',\n  'second',\n  'third',\n  'finally',\n  'subsequently',\n"
    },
    {
      "file": "src/intelligence/mission-splitter.ts",
      "line": 596,
      "context": "[\n      `Mission complexity score: ${complexity.compositeScore.toFixed(2)}/10`,\n      '',\n      'Reasons for recommended"
    },
    {
      "file": "src/intelligence/context-propagator.ts",
      "line": 138,
      "context": "[\n      '=== ORIGINAL MISSION ===',\n      originalMission,\n      '',\n      '=== COMPLETED SUB-MISSIONS ===',\n    ];\n\n   "
    },
    {
      "file": "src/intelligence/context-propagator.ts",
      "line": 163,
      "context": "[\n      '=== ORIGINAL MISSION (Summary) ===',\n      this.extractKeyInfo(originalMission).keySentences.slice(0, 3).join('"
    },
    {
      "file": "src/intelligence/context-propagator.ts",
      "line": 188,
      "context": "[\n      '=== MISSION OVERVIEW ===',\n      `The mission aims to: ${this.extractObjective(originalMission)}`,\n      '',\n  "
    },
    {
      "file": "src/intelligence/context-propagator.ts",
      "line": 225,
      "context": "[\n      '=== MISSION CONTEXT ===',\n      this.extractKeyInfo(originalMission).keySentences.slice(0, 2).join(' '),\n      "
    },
    {
      "file": "src/intelligence/context-propagator.ts",
      "line": 256,
      "context": "[\n        'objective',\n        'goal',\n        'success',\n        'complete',\n        'implement',\n        'create',\n   "
    },
    {
      "file": "src/intelligence/compression-rules.ts",
      "line": 17,
      "context": "[\n  // Remove conversational fillers\n  {\n    type: 'regex_replace',\n    pattern: /could you (please )?(explain|generate|"
    },
    {
      "file": "src/intelligence/compression-rules.ts",
      "line": 86,
      "context": "[\n  {\n    type: 'convert_prose_to_list',\n    enabled: true,\n    delimiters: ['First,', 'Then,', 'Next,', 'Finally,', 'La"
    },
    {
      "file": "src/intelligence/compression-rules.ts",
      "line": 102,
      "context": "[\n  {\n    type: 'convert_passive_to_active',\n    enabled: true,\n  },\n  // Simplify verbose constructions\n  {\n    type: '"
    },
    {
      "file": "src/intelligence/compression-rules.ts",
      "line": 229,
      "context": "[\n    { pattern: /(\\w+) should be (\\w+ed) by (\\w+)/gi, replacement: '$3 should $2 $1' },\n    { pattern: /(\\w+) will be ("
    },
    {
      "file": "src/intelligence/dependency-inferrer.ts",
      "line": 21,
      "context": "[\n    'requires',\n    'depends on',\n    'after completion of',\n    'is followed by',\n    'prerequisite',\n    'based on',"
    },
    {
      "file": "src/intelligence/dependency-inferrer.ts",
      "line": 39,
      "context": "[\n    'before',\n    'after',\n    'then',\n    'next',\n    'following',\n    'subsequent',\n    'prior to',\n    'once',\n    "
    },
    {
      "file": "src/intelligence/complexity-scorer.ts",
      "line": 73,
      "context": "[\n  'then',\n  'next',\n  'after',\n  'once',\n  'before',\n  'first',\n  'second',\n  'third',\n  'finally',\n  'subsequently',\n"
    },
    {
      "file": "src/schemas/generic-mission.ts",
      "line": 58,
      "context": "[\n    \"schemaType\",\n    \"schemaVersion\",\n    \"missionId\",\n    \"objective\",\n    \"successCriteria\",\n    \"deliverables\"\n  ]"
    },
    {
      "file": "src/import-export/security-validator.ts",
      "line": 88,
      "context": "[\n    '!!python',\n    '!!java',\n    'eval',\n    'exec',\n    'subprocess',\n    '__import__',\n    'system',\n    'os.system"
    },
    {
      "file": "src/import-export/template-exporter.ts",
      "line": 187,
      "context": "[\n      '# Mission Template',\n      `# Name: ${metadata.name}`,\n      `# Version: ${metadata.version}`,\n      `# Author:"
    },
    {
      "file": "src/extraction/template-extractor.ts",
      "line": 552,
      "context": "['src', 'lib', 'test', 'tests', 'bin', 'dist', 'build', 'public', 'static', 'assets', 'docs', 'config'];\n    return comm"
    }
  ],
  "inefficient_queries": []
}