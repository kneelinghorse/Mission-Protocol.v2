{
  "modules": [
    {
      "file": "src/index.ts",
      "exports": [
        {
          "kind": "Interface",
          "name": "MissionProtocolContext",
          "properties": [
            {
              "name": "baseDir",
              "type": "string"
            },
            {
              "name": "defaultModel",
              "type": "SupportedModel"
            },
            {
              "name": "loader",
              "type": "SecureYAMLLoader"
            },
            {
              "name": "registryParser",
              "type": "RegistryParser"
            },
            {
              "name": "packCombiner",
              "type": "PackCombiner"
            },
            {
              "name": "listDomainsTool",
              "type": "ListDomainsToolImpl"
            },
            {
              "name": "createMissionTool",
              "type": "CreateMissionToolImpl"
            },
            {
              "name": "combinePacksTool",
              "type": "CombinePacksToolImpl"
            },
            {
              "name": "optimizeTokensTool",
              "type": "OptimizeTokensToolImpl"
            },
            {
              "name": "splitMissionTool",
              "type": "SplitMissionToolImpl"
            },
            {
              "name": "suggestSplitsTool",
              "type": "SuggestSplitsToolImpl"
            },
            {
              "name": "tokenCounter",
              "type": "TokenCounter"
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "name": "ToolDefinitions",
          "type": "typeof TOOL_DEFINITIONS"
        },
        {
          "kind": "Function",
          "name": "getToolDefinitions",
          "parameters": [],
          "returnType": "ToolDefinitions"
        },
        {
          "kind": "Function",
          "name": "summarizeValue",
          "parameters": [
            {
              "name": "value",
              "type": "unknown"
            }
          ],
          "returnType": "JsonValue"
        },
        {
          "kind": "Function",
          "name": "sanitizeArgs",
          "parameters": [
            {
              "name": "args",
              "type": "unknown"
            }
          ],
          "returnType": "Record<string, JsonValue> | undefined"
        },
        {
          "kind": "Function",
          "name": "buildMissionProtocolContext",
          "parameters": [
            {
              "name": "options",
              "type": "{\n  baseDir?: string;\n  defaultModel?: SupportedModel;\n}"
            }
          ],
          "returnType": "Promise<MissionProtocolContext>"
        },
        {
          "kind": "Function",
          "name": "executeMissionProtocolTool",
          "parameters": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "args",
              "type": "unknown"
            },
            {
              "name": "context",
              "type": "MissionProtocolContext"
            }
          ],
          "returnType": "Promise<CallToolResult>"
        },
        {
          "kind": "Variable",
          "name": "__test__",
          "type": null
        }
      ]
    },
    {
      "file": "src/tools/analyze-dependencies.ts",
      "exports": [
        {
          "kind": "Interface",
          "name": "AnalyzeDependenciesArgs",
          "properties": [
            {
              "name": "missionDirectory",
              "type": "string"
            },
            {
              "name": "includeInferred",
              "type": "boolean"
            },
            {
              "name": "minConfidence",
              "type": "number"
            }
          ]
        },
        {
          "kind": "Interface",
          "name": "AnalyzeDependenciesResult",
          "properties": [
            {
              "name": "totalMissions",
              "type": "number"
            },
            {
              "name": "isValid",
              "type": "boolean"
            },
            {
              "name": "isDAG",
              "type": "boolean"
            },
            {
              "name": "hasCycles",
              "type": "boolean"
            },
            {
              "name": "cycles",
              "type": "string[][]"
            },
            {
              "name": "executionOrder",
              "type": "string[]"
            },
            {
              "name": "criticalPath",
              "type": "string[]"
            },
            {
              "name": "inferredDependencies",
              "type": "Array<{\n    from: string;\n    to: string;\n    confidence: number;\n    reason: string;\n  }>"
            },
            {
              "name": "errors",
              "type": "string[]"
            },
            {
              "name": "warnings",
              "type": "string[]"
            },
            {
              "name": "performanceMs",
              "type": "number"
            }
          ]
        },
        {
          "kind": "Function",
          "name": "analyzeDependencies",
          "parameters": [
            {
              "name": "args",
              "type": "AnalyzeDependenciesArgs"
            }
          ],
          "returnType": "Promise<AnalyzeDependenciesResult>"
        },
        {
          "kind": "Function",
          "name": "formatAnalysisResult",
          "parameters": [
            {
              "name": "result",
              "type": "AnalyzeDependenciesResult"
            }
          ],
          "returnType": "string"
        },
        {
          "kind": "Variable",
          "name": "getDependencyAnalysisToolDefinition",
          "type": null
        },
        {
          "kind": "Variable",
          "name": "analyzeDependenciesToolDefinitionDeprecated",
          "type": null
        },
        {
          "kind": "Function",
          "name": "executeAnalyzeDependenciesTool",
          "parameters": [
            {
              "name": "params",
              "type": "AnalyzeDependenciesArgs"
            }
          ],
          "returnType": "Promise<string>"
        }
      ]
    },
    {
      "file": "src/tools/combine-packs.ts",
      "exports": [
        {
          "kind": "Interface",
          "name": "CombinePacksParams",
          "properties": [
            {
              "name": "packNames",
              "type": "string[]"
            },
            {
              "name": "strategy",
              "type": "CombinationStrategy"
            },
            {
              "name": "overridePaths",
              "type": "string[]"
            },
            {
              "name": "mergePaths",
              "type": "string[]"
            },
            {
              "name": "resolveDependencies",
              "type": "boolean"
            },
            {
              "name": "format",
              "type": "'yaml' | 'json'"
            }
          ]
        },
        {
          "kind": "Variable",
          "name": "createCombinedPackToolDefinition",
          "type": null
        },
        {
          "kind": "Variable",
          "name": "combinePacksToolDefinitionDeprecated",
          "type": null,
          "valueSnippet": "{\n  ...createCombinedPackToolDefinition,\n  name: 'combine_packs',\n  description:\n    '[DEPRECATED] Use create_combined_pack instead. Provides the same multi-pack combination workflow.',\n} as const"
        },
        {
          "kind": "Class",
          "name": "CombinePacksToolImpl",
          "methods": [
            {
              "name": "execute",
              "parameters": [
                {
                  "name": "params",
                  "type": "CombinePacksParams"
                },
                {
                  "name": "registryPath",
                  "type": "string"
                }
              ],
              "returnType": "Promise<{\n    success: boolean;\n    combinedPack?: string;\n    loadOrder?: string[];\n    errors?: string[];\n    warnings?: string[];\n  }>"
            },
            {
              "name": "preview",
              "parameters": [
                {
                  "name": "params",
                  "type": "CombinePacksParams"
                },
                {
                  "name": "registryPath",
                  "type": "string"
                }
              ],
              "returnType": "Promise<{\n    success: boolean;\n    loadOrder?: string[];\n    dependencies?: string[];\n    warnings?: string[];\n    errors?: string[];\n  }>"
            },
            {
              "name": "formatOutput",
              "parameters": [
                {
                  "name": "combinedPack",
                  "type": "CombinedPack"
                },
                {
                  "name": "format",
                  "type": "'yaml' | 'json'"
                }
              ],
              "returnType": "string"
            }
          ]
        },
        {
          "kind": "Function",
          "name": "createCombinePacksTool",
          "parameters": [
            {
              "name": "packLoader",
              "type": "DomainPackLoader"
            },
            {
              "name": "registry",
              "type": "RegistryParser"
            },
            {
              "name": "loader",
              "type": "SecureYAMLLoader"
            }
          ],
          "returnType": "CombinePacksToolImpl"
        },
        {
          "kind": "Function",
          "name": "handleCombinePacks",
          "parameters": [
            {
              "name": "params",
              "type": "CombinePacksParams"
            },
            {
              "name": "registryPath",
              "type": "string"
            },
            {
              "name": "packLoader",
              "type": "DomainPackLoader"
            },
            {
              "name": "registry",
              "type": "RegistryParser"
            },
            {
              "name": "loader",
              "type": "SecureYAMLLoader"
            }
          ],
          "returnType": "Promise<string>"
        }
      ]
    },
    {
      "file": "src/tools/create-mission.ts",
      "exports": [
        {
          "kind": "Interface",
          "name": "CreateMissionParams",
          "properties": [
            {
              "name": "objective",
              "type": "string"
            },
            {
              "name": "domain",
              "type": "string"
            },
            {
              "name": "successCriteria",
              "type": "string[]"
            },
            {
              "name": "constraints",
              "type": "string[]"
            }
          ]
        },
        {
          "kind": "Variable",
          "name": "createMissionToolDefinition",
          "type": null
        },
        {
          "kind": "Class",
          "name": "CreateMissionToolImpl",
          "methods": [
            {
              "name": "execute",
              "parameters": [
                {
                  "name": "params",
                  "type": "CreateMissionParams"
                },
                {
                  "name": "registryEntries",
                  "type": "DomainPackEntry[]"
                }
              ],
              "returnType": "Promise<string>"
            },
            {
              "name": "validateParams",
              "parameters": [
                {
                  "name": "params",
                  "type": "CreateMissionParams"
                }
              ],
              "returnType": "void"
            },
            {
              "name": "buildContextFromParams",
              "parameters": [
                {
                  "name": "params",
                  "type": "CreateMissionParams"
                }
              ],
              "returnType": "Record<string, JsonValue>"
            },
            {
              "name": "generateMissionId",
              "parameters": [],
              "returnType": "string"
            },
            {
              "name": "loadGenericTemplate",
              "parameters": [],
              "returnType": "Promise<GenericMission>"
            },
            {
              "name": "populateCoreFields",
              "parameters": [
                {
                  "name": "template",
                  "type": "GenericMission"
                },
                {
                  "name": "params",
                  "type": "CreateMissionParams"
                },
                {
                  "name": "missionId",
                  "type": "string"
                }
              ],
              "returnType": "GenericMission"
            },
            {
              "name": "mergeWithDomain",
              "parameters": [
                {
                  "name": "mission",
                  "type": "GenericMission"
                },
                {
                  "name": "domainName",
                  "type": "string"
                },
                {
                  "name": "registryEntries",
                  "type": "DomainPackEntry[]"
                }
              ],
              "returnType": "Promise<GenericMission>"
            },
            {
              "name": "validateMission",
              "parameters": [
                {
                  "name": "mission",
                  "type": "GenericMission"
                }
              ],
              "returnType": "void"
            },
            {
              "name": "toYAML",
              "parameters": [
                {
                  "name": "mission",
                  "type": "GenericMission"
                }
              ],
              "returnType": "string"
            },
            {
              "name": "formatForLLM",
              "parameters": [
                {
                  "name": "yamlString",
                  "type": "string"
                }
              ],
              "returnType": "string"
            }
          ]
        }
      ]
    },
    {
      "file": "src/tools/export-template.ts",
      "exports": [
        {
          "kind": "Interface",
          "name": "ExportTemplateParams",
          "properties": [
            {
              "name": "template",
              "type": "MissionTemplate"
            },
            {
              "name": "outputPath",
              "type": "string"
            },
            {
              "name": "baseDir",
              "type": "string"
            },
            {
              "name": "format",
              "type": "'yaml' | 'json'"
            },
            {
              "name": "includeComments",
              "type": "boolean"
            },
            {
              "name": "pretty",
              "type": "boolean"
            }
          ]
        },
        {
          "kind": "Interface",
          "name": "ExportTemplateResult",
          "properties": [
            {
              "name": "success",
              "type": "boolean"
            },
            {
              "name": "outputPath",
              "type": "string"
            },
            {
              "name": "format",
              "type": "string"
            },
            {
              "name": "message",
              "type": "string"
            },
            {
              "name": "preview",
              "type": "string"
            }
          ]
        },
        {
          "kind": "Function",
          "name": "exportTemplate",
          "parameters": [
            {
              "name": "params",
              "type": "ExportTemplateParams"
            }
          ],
          "returnType": "Promise<ExportTemplateResult>"
        },
        {
          "kind": "Function",
          "name": "createTemplateFromMission",
          "parameters": [
            {
              "name": "missionData",
              "type": "Record<string, unknown>"
            },
            {
              "name": "metadata",
              "type": "{\n    name: string;\n    version: string;\n    author: string;\n    signature: {\n      keyId: string;\n      algorithm: string;\n      value: string;\n    };\n  }"
            }
          ],
          "returnType": "MissionTemplate"
        },
        {
          "kind": "Variable",
          "name": "getTemplateExportToolDefinition",
          "type": null
        },
        {
          "kind": "Variable",
          "name": "exportTemplateToolDefinitionDeprecated",
          "type": null,
          "valueSnippet": "{\n  ...getTemplateExportToolDefinition,\n  name: 'export_template',\n  description:\n    '[DEPRECATED] Use get_template_export instead. Provides the same strict serialization workflow.',\n} as const"
        }
      ]
    },
    {
      "file": "src/tools/extract-template.ts",
      "exports": [
        {
          "kind": "Interface",
          "name": "ExtractTemplateParams",
          "properties": [
            {
              "name": "missionFile",
              "type": "string"
            },
            {
              "name": "templateName",
              "type": "string"
            },
            {
              "name": "author",
              "type": "string"
            },
            {
              "name": "outputDir",
              "type": "string"
            },
            {
              "name": "confidenceThreshold",
              "type": "number"
            }
          ]
        },
        {
          "kind": "Function",
          "name": "extractTemplate",
          "parameters": [
            {
              "name": "params",
              "type": "ExtractTemplateParams"
            }
          ],
          "returnType": "Promise<ExtractionResult>"
        },
        {
          "kind": "Function",
          "name": "writeTemplate",
          "parameters": [
            {
              "name": "templateDir",
              "type": "string"
            },
            {
              "name": "result",
              "type": "ExtractionResult"
            }
          ],
          "returnType": "Promise<void>"
        },
        {
          "kind": "Function",
          "name": "generateExtractionReport",
          "parameters": [
            {
              "name": "result",
              "type": "ExtractionResult"
            }
          ],
          "returnType": "string"
        },
        {
          "kind": "Variable",
          "name": "getTemplateExtractionToolDefinition",
          "type": null
        },
        {
          "kind": "Variable",
          "name": "extractTemplateToolDefinitionDeprecated",
          "type": null
        }
      ]
    },
    {
      "file": "src/tools/import-template.ts",
      "exports": [
        {
          "kind": "Interface",
          "name": "ImportTemplateParams",
          "properties": [
            {
              "name": "templatePath",
              "type": "string"
            },
            {
              "name": "baseDir",
              "type": "string"
            },
            {
              "name": "skipSignatureVerification",
              "type": "boolean"
            },
            {
              "name": "trustLevel",
              "type": "'verified-internal' | 'signed-known' | 'untrusted'"
            },
            {
              "name": "maxResourceMemory",
              "type": "number"
            },
            {
              "name": "maxResourceCpu",
              "type": "number"
            },
            {
              "name": "allowedActions",
              "type": "string[]"
            },
            {
              "name": "urlAllowlist",
              "type": "string[]"
            }
          ]
        },
        {
          "kind": "Interface",
          "name": "ImportTemplateResult",
          "properties": [
            {
              "name": "success",
              "type": "boolean"
            },
            {
              "name": "template",
              "type": "{\n    name: string;\n    version: string;\n    author: string;\n    apiVersion: string;\n    spec: unknown;\n  }"
            },
            {
              "name": "validationReport",
              "type": "{\n    valid: boolean;\n    performanceMs: number;\n    layers: Array<{\n      layer: string;\n      passed: boolean;\n      message?: string;\n    }>;\n    errors: string[];\n    warnings: string[];\n  }"
            },
            {
              "name": "dependencies",
              "type": "{\n    [name: string]: {\n      name: string;\n      version: string;\n    };\n  }"
            },
            {
              "name": "message",
              "type": "string"
            }
          ]
        },
        {
          "kind": "Function",
          "name": "importTemplate",
          "parameters": [
            {
              "name": "params",
              "type": "ImportTemplateParams"
            }
          ],
          "returnType": "Promise<ImportTemplateResult>"
        },
        {
          "kind": "Variable",
          "name": "createTemplateImportToolDefinition",
          "type": null
        },
        {
          "kind": "Variable",
          "name": "importTemplateToolDefinitionDeprecated",
          "type": null
        }
      ]
    },
    {
      "file": "src/tools/list-domains.ts",
      "exports": [
        {
          "kind": "Class",
          "name": "ListDomainsToolImpl",
          "methods": [
            {
              "name": "execute",
              "parameters": [
                {
                  "name": "registryPath",
                  "type": "string"
                }
              ],
              "returnType": "Promise<DomainInfo[]>"
            },
            {
              "name": "toDomainInfo",
              "parameters": [
                {
                  "name": "entry",
                  "type": "DomainPackEntry"
                }
              ],
              "returnType": "DomainInfo"
            },
            {
              "name": "formatForLLM",
              "parameters": [
                {
                  "name": "domains",
                  "type": "DomainInfo[]"
                }
              ],
              "returnType": "string"
            }
          ]
        },
        {
          "kind": "Variable",
          "name": "getAvailableDomainsToolDefinition",
          "type": null
        },
        {
          "kind": "Variable",
          "name": "listAvailableDomainsToolDefinitionDeprecated",
          "type": null
        }
      ]
    },
    {
      "file": "src/tools/optimize-tokens.ts",
      "exports": [
        {
          "kind": "Interface",
          "name": "OptimizeTokensParams",
          "properties": [
            {
              "name": "missionFile",
              "type": "string"
            },
            {
              "name": "targetModel",
              "type": "SupportedModel"
            },
            {
              "name": "compressionLevel",
              "type": "CompressionLevel"
            },
            {
              "name": "dryRun",
              "type": "boolean"
            },
            {
              "name": "preserveTags",
              "type": "string[]"
            }
          ]
        },
        {
          "kind": "Variable",
          "name": "updateTokenOptimizationToolDefinition",
          "type": null
        },
        {
          "kind": "Variable",
          "name": "optimizeTokensToolDefinitionDeprecated",
          "type": null
        },
        {
          "kind": "Class",
          "name": "OptimizeTokensToolImpl",
          "methods": [
            {
              "name": "execute",
              "parameters": [
                {
                  "name": "params",
                  "type": "OptimizeTokensParams"
                }
              ],
              "returnType": "Promise<{\n    success: boolean;\n    optimizedContent?: string;\n    stats?: {\n      originalTokens: number;\n      compressedTokens: number;\n      reductionPercentage: number;\n      compressionRatio: number;\n      passesApplied: string[];\n    };\n    tokenUsage?: {\n      model: SupportedModel;\n      original: {\n        count: number;\n        estimatedCost?: number;\n      };\n      optimized: {\n        count: number;\n        estimatedCost?: number;\n      };\n      savings: number;\n      compressionRatio: number;\n    };\n    warnings?: string[];\n    error?: string;\n  }>"
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "name": "OptimizeTokensExecutionResult",
          "type": "Awaited<ReturnType<OptimizeTokensToolImpl['execute']>>"
        },
        {
          "kind": "Function",
          "name": "handleOptimizeTokens",
          "parameters": [
            {
              "name": "params",
              "type": "OptimizeTokensParams"
            }
          ],
          "returnType": "Promise<OptimizeTokensExecutionResult>"
        }
      ]
    },
    {
      "file": "src/tools/score-quality.ts",
      "exports": [
        {
          "kind": "Interface",
          "name": "ScoreQualityInput",
          "properties": [
            {
              "name": "missionFile",
              "type": "string"
            },
            {
              "name": "verbose",
              "type": "boolean"
            }
          ]
        },
        {
          "kind": "Interface",
          "name": "ScoreQualityOutput",
          "properties": [
            {
              "name": "success",
              "type": "boolean"
            },
            {
              "name": "score",
              "type": "QualityScore"
            },
            {
              "name": "summary",
              "type": "string"
            },
            {
              "name": "error",
              "type": "string"
            }
          ]
        },
        {
          "kind": "Function",
          "name": "scoreQuality",
          "parameters": [
            {
              "name": "input",
              "type": "ScoreQualityInput"
            }
          ],
          "returnType": "Promise<ScoreQualityOutput>"
        },
        {
          "kind": "Function",
          "name": "formatQualitySummary",
          "parameters": [
            {
              "name": "score",
              "type": "QualityScore"
            },
            {
              "name": "verbose",
              "type": "boolean"
            }
          ],
          "returnType": "string"
        },
        {
          "kind": "Function",
          "name": "getQualityGrade",
          "parameters": [
            {
              "name": "score",
              "type": "number"
            }
          ],
          "returnType": "string"
        },
        {
          "kind": "Variable",
          "name": "getMissionQualityScoreTool",
          "type": null
        },
        {
          "kind": "Variable",
          "name": "scoreQualityToolDeprecated",
          "type": null,
          "valueSnippet": "{\n  ...getMissionQualityScoreTool,\n  name: 'score_quality',\n  description: '[DEPRECATED] Use get_mission_quality_score instead. Runs the same quality scoring pipeline.'\n} as const"
        }
      ]
    },
    {
      "file": "src/tools/split-mission.ts",
      "exports": [
        {
          "kind": "Interface",
          "name": "SplitMissionParams",
          "properties": [
            {
              "name": "missionFile",
              "type": "string"
            },
            {
              "name": "model",
              "type": "SupportedModel"
            },
            {
              "name": "maxSubMissions",
              "type": "number"
            },
            {
              "name": "outputDir",
              "type": "string"
            },
            {
              "name": "preserveStructure",
              "type": "boolean"
            }
          ]
        },
        {
          "kind": "Interface",
          "name": "SplitMissionResult",
          "properties": [
            {
              "name": "shouldSplit",
              "type": "boolean"
            },
            {
              "name": "complexity",
              "type": "{\n    score: number;\n    reasons: string[];\n  }"
            },
            {
              "name": "subMissionFiles",
              "type": "string[]"
            },
            {
              "name": "executionPlan",
              "type": "{\n    order: number;\n    file: string;\n    objective: string;\n    dependencies: string[];\n  }[]"
            },
            {
              "name": "summary",
              "type": "string"
            },
            {
              "name": "tokenUsage",
              "type": "{\n    model: SupportedModel;\n    totalTokens: number;\n    estimatedCost?: number;\n    contextWindow: number;\n    utilization: number;\n  }"
            }
          ]
        },
        {
          "kind": "Variable",
          "name": "createMissionSplitsToolDefinition",
          "type": null
        },
        {
          "kind": "Variable",
          "name": "splitMissionToolDefinitionDeprecated",
          "type": null,
          "valueSnippet": "{\n  ...createMissionSplitsToolDefinition,\n  name: 'split_mission',\n  description:\n    '[DEPRECATED] Use create_mission_splits instead. Generates the same token-balanced mission segments.',\n} as const"
        },
        {
          "kind": "Class",
          "name": "SplitMissionToolImpl",
          "methods": [
            {
              "name": "execute",
              "parameters": [
                {
                  "name": "params",
                  "type": "SplitMissionParams"
                }
              ],
              "returnType": "Promise<SplitMissionResult>"
            },
            {
              "name": "validateParams",
              "parameters": [
                {
                  "name": "params",
                  "type": "SplitMissionParams"
                }
              ],
              "returnType": "Promise<void>"
            },
            {
              "name": "buildTokenUsage",
              "parameters": [
                {
                  "name": "complexity",
                  "type": "ComplexityAnalysis"
                }
              ],
              "returnType": null
            },
            {
              "name": "loadMissionFile",
              "parameters": [
                {
                  "name": "filePath",
                  "type": "string"
                }
              ],
              "returnType": "Promise<GenericMission | string>"
            },
            {
              "name": "writeSubMissions",
              "parameters": [
                {
                  "name": "splitResult",
                  "type": "SplitResult"
                },
                {
                  "name": "outputDir",
                  "type": "string"
                },
                {
                  "name": "baseName",
                  "type": "string"
                }
              ],
              "returnType": "Promise<string[]>"
            },
            {
              "name": "subMissionToYAML",
              "parameters": [
                {
                  "name": "subMission",
                  "type": "SubMission"
                },
                {
                  "name": "preservedContext",
                  "type": "string"
                }
              ],
              "returnType": "string"
            },
            {
              "name": "createExecutionPlan",
              "parameters": [
                {
                  "name": "subMissions",
                  "type": "SubMission[]"
                },
                {
                  "name": "files",
                  "type": "string[]"
                }
              ],
              "returnType": "Array<{\n    order: number;\n    file: string;\n    objective: string;\n    dependencies: string[];\n  }>"
            },
            {
              "name": "generateSummary",
              "parameters": [
                {
                  "name": "complexity",
                  "type": "ComplexityAnalysis"
                },
                {
                  "name": "splitResult",
                  "type": "SplitResult"
                },
                {
                  "name": "files",
                  "type": "string[]"
                }
              ],
              "returnType": "string"
            },
            {
              "name": "getContextWindow",
              "parameters": [
                {
                  "name": "model",
                  "type": "SupportedModel"
                }
              ],
              "returnType": "number"
            },
            {
              "name": "formatForLLM",
              "parameters": [
                {
                  "name": "result",
                  "type": "SplitMissionResult"
                }
              ],
              "returnType": "string"
            }
          ]
        }
      ]
    },
    {
      "file": "src/tools/suggest-splits.ts",
      "exports": [
        {
          "kind": "Interface",
          "name": "SuggestSplitsParams",
          "properties": [
            {
              "name": "missionFile",
              "type": "string"
            },
            {
              "name": "model",
              "type": "SupportedModel"
            },
            {
              "name": "detailed",
              "type": "boolean"
            }
          ]
        },
        {
          "kind": "Interface",
          "name": "SplitSuggestion",
          "properties": [
            {
              "name": "shouldSplit",
              "type": "boolean"
            },
            {
              "name": "complexity",
              "type": "{\n    compositeScore: number;\n    tokenScore: number;\n    structuralScore: number;\n    timeHorizonScore: number;\n    computationalScore: number;\n  }"
            },
            {
              "name": "reasons",
              "type": "string[]"
            },
            {
              "name": "suggestedBreakpoints",
              "type": "Array<{\n    position: number;\n    reason: string;\n    confidence: number;\n    preview: string;\n  }>"
            },
            {
              "name": "estimatedSubMissions",
              "type": "number"
            },
            {
              "name": "estimatedHumanHours",
              "type": "number"
            },
            {
              "name": "recommendation",
              "type": "string"
            },
            {
              "name": "tokenUsage",
              "type": "{\n    model: SupportedModel;\n    totalTokens: number;\n    estimatedCost?: number;\n    contextWindow: number;\n    utilization: number;\n  }"
            }
          ]
        },
        {
          "kind": "Variable",
          "name": "getSplitSuggestionsToolDefinition",
          "type": null
        },
        {
          "kind": "Variable",
          "name": "suggestSplitsToolDefinitionDeprecated",
          "type": null
        },
        {
          "kind": "Class",
          "name": "SuggestSplitsToolImpl",
          "methods": [
            {
              "name": "execute",
              "parameters": [
                {
                  "name": "params",
                  "type": "SuggestSplitsParams"
                }
              ],
              "returnType": "Promise<SplitSuggestion>"
            },
            {
              "name": "buildTokenUsage",
              "parameters": [
                {
                  "name": "complexity",
                  "type": "ComplexityAnalysis"
                }
              ],
              "returnType": null
            },
            {
              "name": "validateParams",
              "parameters": [
                {
                  "name": "params",
                  "type": "SuggestSplitsParams"
                }
              ],
              "returnType": "Promise<void>"
            },
            {
              "name": "loadMissionFile",
              "parameters": [
                {
                  "name": "filePath",
                  "type": "string"
                }
              ],
              "returnType": "Promise<GenericMission | string>"
            },
            {
              "name": "generateRecommendation",
              "parameters": [
                {
                  "name": "suggestion",
                  "type": "SplitAnalysisResult"
                }
              ],
              "returnType": "string"
            },
            {
              "name": "getNoSplitRecommendation",
              "parameters": [
                {
                  "name": "complexity",
                  "type": "ComplexityAnalysis"
                }
              ],
              "returnType": "string"
            },
            {
              "name": "getSplitRecommendation",
              "parameters": [
                {
                  "name": "suggestion",
                  "type": "SplitAnalysisResult"
                }
              ],
              "returnType": "string"
            },
            {
              "name": "getBreakpointPreview",
              "parameters": [
                {
                  "name": "text",
                  "type": "string"
                },
                {
                  "name": "position",
                  "type": "number"
                }
              ],
              "returnType": "string"
            },
            {
              "name": "serializeMission",
              "parameters": [
                {
                  "name": "mission",
                  "type": "GenericMission"
                }
              ],
              "returnType": "string"
            },
            {
              "name": "getContextWindow",
              "parameters": [
                {
                  "name": "model",
                  "type": "SupportedModel"
                }
              ],
              "returnType": "number"
            },
            {
              "name": "formatForLLM",
              "parameters": [
                {
                  "name": "result",
                  "type": "SplitSuggestion"
                },
                {
                  "name": "detailed",
                  "type": "boolean"
                }
              ],
              "returnType": "string"
            }
          ]
        }
      ]
    },
    {
      "file": "src/tools/version-template.ts",
      "exports": [
        {
          "kind": "Interface",
          "name": "CheckVersionCompatibilityParams",
          "properties": [
            {
              "name": "templateId",
              "type": "string"
            },
            {
              "name": "version1",
              "type": "string"
            },
            {
              "name": "version2",
              "type": "string"
            },
            {
              "name": "options",
              "type": "VersionManagerOptions"
            }
          ]
        },
        {
          "kind": "Interface",
          "name": "CheckVersionCompatibilityResult",
          "properties": [
            {
              "name": "success",
              "type": "boolean"
            },
            {
              "name": "compatible",
              "type": "boolean"
            },
            {
              "name": "reason",
              "type": "string"
            },
            {
              "name": "suggestedUpgrade",
              "type": "{\n    from: string;\n    to: string;\n    migrationRequired: boolean;\n  }"
            },
            {
              "name": "message",
              "type": "string"
            }
          ]
        },
        {
          "kind": "Function",
          "name": "checkVersionCompatibility",
          "parameters": [
            {
              "name": "params",
              "type": "CheckVersionCompatibilityParams"
            }
          ],
          "returnType": "Promise<CheckVersionCompatibilityResult>"
        },
        {
          "kind": "Variable",
          "name": "getVersionCompatibilityToolDefinition",
          "type": null
        },
        {
          "kind": "Variable",
          "name": "checkVersionCompatibilityToolDefinitionDeprecated",
          "type": null
        },
        {
          "kind": "Interface",
          "name": "FindMigrationPathParams",
          "properties": [
            {
              "name": "templateId",
              "type": "string"
            },
            {
              "name": "fromVersion",
              "type": "string"
            },
            {
              "name": "toVersion",
              "type": "string"
            },
            {
              "name": "options",
              "type": "VersionManagerOptions"
            }
          ]
        },
        {
          "kind": "Interface",
          "name": "FindMigrationPathResult",
          "properties": [
            {
              "name": "success",
              "type": "boolean"
            },
            {
              "name": "pathFound",
              "type": "boolean"
            },
            {
              "name": "path",
              "type": "{\n    from: string;\n    to: string;\n    steps: Array<{\n      id: string;\n      fromVersion: string;\n      toVersion: string;\n      description: string;\n      estimatedDuration?: number;\n      reversible: boolean;\n    }>;\n    reversible: boolean;\n    totalDuration: number;\n  }"
            },
            {
              "name": "message",
              "type": "string"
            }
          ]
        },
        {
          "kind": "Function",
          "name": "findMigrationPath",
          "parameters": [
            {
              "name": "params",
              "type": "FindMigrationPathParams"
            }
          ],
          "returnType": "Promise<FindMigrationPathResult>"
        },
        {
          "kind": "Variable",
          "name": "getMigrationPathToolDefinition",
          "type": null
        },
        {
          "kind": "Variable",
          "name": "findMigrationPathToolDefinitionDeprecated",
          "type": null,
          "valueSnippet": "{\n  ...getMigrationPathToolDefinition,\n  name: 'find_migration_path',\n  description:\n    '[DEPRECATED] Use get_migration_path instead. Produces the same ordered migration plan.',\n} as const"
        },
        {
          "kind": "Interface",
          "name": "RegisterTemplateVersionParams",
          "properties": [
            {
              "name": "templateId",
              "type": "string"
            },
            {
              "name": "version",
              "type": "string"
            },
            {
              "name": "changelog",
              "type": "string"
            },
            {
              "name": "compatibleWith",
              "type": "string"
            },
            {
              "name": "releaseDate",
              "type": "string"
            },
            {
              "name": "options",
              "type": "VersionManagerOptions"
            }
          ]
        },
        {
          "kind": "Interface",
          "name": "RegisterTemplateVersionResult",
          "properties": [
            {
              "name": "success",
              "type": "boolean"
            },
            {
              "name": "version",
              "type": "{\n    templateId: string;\n    version: string;\n    releaseDate: string;\n  }"
            },
            {
              "name": "message",
              "type": "string"
            }
          ]
        },
        {
          "kind": "Function",
          "name": "registerTemplateVersion",
          "parameters": [
            {
              "name": "params",
              "type": "RegisterTemplateVersionParams"
            }
          ],
          "returnType": "Promise<RegisterTemplateVersionResult>"
        },
        {
          "kind": "Variable",
          "name": "createTemplateVersionToolDefinition",
          "type": null
        },
        {
          "kind": "Variable",
          "name": "registerTemplateVersionToolDefinitionDeprecated",
          "type": null
        },
        {
          "kind": "Interface",
          "name": "GetLatestVersionParams",
          "properties": [
            {
              "name": "templateId",
              "type": "string"
            },
            {
              "name": "includePrerelease",
              "type": "boolean"
            },
            {
              "name": "options",
              "type": "VersionManagerOptions"
            }
          ]
        },
        {
          "kind": "Interface",
          "name": "GetLatestVersionResult",
          "properties": [
            {
              "name": "success",
              "type": "boolean"
            },
            {
              "name": "version",
              "type": "{\n    templateId: string;\n    version: string;\n    releaseDate: string;\n    deprecated?: boolean;\n    deprecationMessage?: string;\n  }"
            },
            {
              "name": "message",
              "type": "string"
            }
          ]
        },
        {
          "kind": "Function",
          "name": "getLatestVersion",
          "parameters": [
            {
              "name": "params",
              "type": "GetLatestVersionParams"
            }
          ],
          "returnType": "Promise<GetLatestVersionResult>"
        },
        {
          "kind": "Variable",
          "name": "getLatestVersionToolDefinition",
          "type": null
        },
        {
          "kind": "Interface",
          "name": "CompareVersionsParams",
          "properties": [
            {
              "name": "version1",
              "type": "string"
            },
            {
              "name": "version2",
              "type": "string"
            }
          ]
        },
        {
          "kind": "Interface",
          "name": "CompareVersionsResult",
          "properties": [
            {
              "name": "success",
              "type": "boolean"
            },
            {
              "name": "comparison",
              "type": "'less_than' | 'equal' | 'greater_than'"
            },
            {
              "name": "message",
              "type": "string"
            }
          ]
        },
        {
          "kind": "Function",
          "name": "compareVersions",
          "parameters": [
            {
              "name": "params",
              "type": "CompareVersionsParams"
            }
          ],
          "returnType": "Promise<CompareVersionsResult>"
        },
        {
          "kind": "Variable",
          "name": "getVersionComparisonToolDefinition",
          "type": null
        },
        {
          "kind": "Variable",
          "name": "compareVersionsToolDefinitionDeprecated",
          "type": null,
          "valueSnippet": "{\n  ...getVersionComparisonToolDefinition,\n  name: 'compare_versions',\n  description:\n    '[DEPRECATED] Use get_version_comparison instead. Provides the same ordering result.',\n} as const"
        },
        {
          "kind": "Variable",
          "name": "versioningTools",
          "type": null,
          "valueSnippet": "[\n  getVersionCompatibilityToolDefinition,\n  getMigrationPathToolDefinition,\n  createTemplateVersionToolDefinition,\n  getLatestVersionToolDefinition,\n  getVersionComparisonToolDefinition,\n] as const"
        },
        {
          "kind": "Variable",
          "name": "versioningToolsDeprecated",
          "type": null
        }
      ]
    }
  ],
  "summary": {
    "totalExports": 93,
    "functions": 25,
    "classes": 6,
    "variables": 33,
    "interfaces": 27,
    "types": 2
  }
}