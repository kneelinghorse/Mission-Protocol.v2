{
  "long_functions": [
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 122,
      "length": 53,
      "signature": "items.forEach(item => {"
    },
    {
      "path": "dist/index.d.ts",
      "line": 32,
      "length": 352,
      "signature": "export declare function getToolDefinitions(): readonly [{"
    },
    {
      "path": "dist/tools/analyze-dependencies.js",
      "line": 50,
      "length": 69,
      "signature": "async function analyzeDependencies(args) {"
    },
    {
      "path": "dist/tools/extract-template.js",
      "line": 170,
      "length": 52,
      "signature": "function generateExtractionReport(result) {"
    },
    {
      "path": "dist/tools/import-template.d.ts",
      "line": 64,
      "length": 53,
      "signature": "export declare function importTemplate(params: ImportTemplateParams): Promise<ImportTemplateResult>;"
    },
    {
      "path": "scripts/validate-token-counts.ts",
      "line": 173,
      "length": 76,
      "signature": "async function main() {"
    },
    {
      "path": "src/tools/analyze-dependencies.ts",
      "line": 43,
      "length": 80,
      "signature": "export async function analyzeDependencies(args: AnalyzeDependenciesArgs): Promise<AnalyzeDependenciesResult> {"
    },
    {
      "path": "src/tools/extract-template.ts",
      "line": 36,
      "length": 56,
      "signature": "export async function extractTemplate(params: ExtractTemplateParams): Promise<ExtractionResult> {"
    },
    {
      "path": "src/tools/extract-template.ts",
      "line": 183,
      "length": 62,
      "signature": "export function generateExtractionReport(result: ExtractionResult): string {"
    },
    {
      "path": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 27,
      "length": 59,
      "signature": "it('should optimize a mission and verify quality improvement', async () => {"
    },
    {
      "path": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 180,
      "length": 59,
      "signature": "it('should analyze dependencies across multiple missions', async () => {"
    },
    {
      "path": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 243,
      "length": 55,
      "signature": "it('should optimize tokens while preserving semantic meaning', async () => {"
    },
    {
      "path": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 441,
      "length": 61,
      "signature": "it('should process mission through full quality \u2192 optimize \u2192 score workflow', async () => {"
    },
    {
      "path": "tests/tools/create-mission.test.ts",
      "line": 170,
      "length": 52,
      "signature": "beforeEach(() => {"
    },
    {
      "path": "tests/tools/split-mission.test.ts",
      "line": 56,
      "length": 60,
      "signature": "test('should split complex mission and create sub-mission files', async () => {"
    }
  ],
  "large_files": [
    {
      "path": "cmos/context/src/active_set_optimizer.js",
      "line_count": 654
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line_count": 740
    },
    {
      "path": "cmos/context/src/context_alerts.js",
      "line_count": 893
    },
    {
      "path": "cmos/context/src/context_compressor.js",
      "line_count": 594
    },
    {
      "path": "cmos/context/src/context_state.js",
      "line_count": 520
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line_count": 680
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line_count": 781
    },
    {
      "path": "cmos/context/src/domain_manager.js",
      "line_count": 668
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line_count": 882
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line_count": 702
    },
    {
      "path": "cmos/context/src/viability_regions.js",
      "line_count": 519
    },
    {
      "path": "dist/index.js",
      "line_count": 538
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line_count": 559
    },
    {
      "path": "src/index.ts",
      "line_count": 617
    },
    {
      "path": "src/intelligence/mission-splitter.ts",
      "line_count": 608
    },
    {
      "path": "src/tools/version-template.ts",
      "line_count": 518
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line_count": 893
    },
    {
      "path": "tests/extraction/template-extractor.test.ts",
      "line_count": 561
    },
    {
      "path": "tests/integration/phase4-intelligence-flow.test.ts",
      "line_count": 515
    },
    {
      "path": "tests/intelligence/mission-splitter.test.ts",
      "line_count": 561
    },
    {
      "path": "tests/tools/create-mission.test.ts",
      "line_count": 594
    },
    {
      "path": "tests/tools/extract-template.test.ts",
      "line_count": 522
    },
    {
      "path": "tests/versioning/migration-engine.test.ts",
      "line_count": 630
    }
  ],
  "deep_nesting": [
    {
      "path": "cmos/context/src/active_set_optimizer.js",
      "line": 112,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/active_set_optimizer.js",
      "line": 113,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/active_set_optimizer.js",
      "line": 114,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/active_set_optimizer.js",
      "line": 115,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/active_set_optimizer.js",
      "line": 116,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/active_set_optimizer.js",
      "line": 117,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/active_set_optimizer.js",
      "line": 118,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/active_set_optimizer.js",
      "line": 119,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/active_set_optimizer.js",
      "line": 120,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/active_set_optimizer.js",
      "line": 121,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/active_set_optimizer.js",
      "line": 122,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 128,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 129,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 130,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 154,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 155,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 156,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 157,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 158,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 227,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 228,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 229,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 230,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 231,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 251,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 252,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 253,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 254,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 255,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 256,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 257,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 258,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 259,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 260,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 261,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 262,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 263,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 264,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 265,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 266,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 267,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 268,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 269,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 290,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 291,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 292,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 293,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 294,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 295,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 324,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 325,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 326,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 327,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 328,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 361,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 362,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 363,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 364,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 365,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 366,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 367,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 368,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 369,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 370,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 371,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 402,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 403,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 404,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 405,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 406,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 407,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 408,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 409,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/anti_patterns.js",
      "line": 410,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_alerts.js",
      "line": 84,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_alerts.js",
      "line": 85,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_alerts.js",
      "line": 86,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_alerts.js",
      "line": 573,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_alerts.js",
      "line": 574,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_alerts.js",
      "line": 575,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_alerts.js",
      "line": 857,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_alerts.js",
      "line": 858,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_alerts.js",
      "line": 859,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_alerts.js",
      "line": 860,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_alerts.js",
      "line": 861,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_compressor.js",
      "line": 330,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_compressor.js",
      "line": 331,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_compressor.js",
      "line": 356,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_compressor.js",
      "line": 357,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_compressor.js",
      "line": 458,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_compressor.js",
      "line": 459,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/context_compressor.js",
      "line": 460,
      "brace_depth": 7
    },
    {
      "path": "cmos/context/src/context_compressor.js",
      "line": 461,
      "brace_depth": 7
    },
    {
      "path": "cmos/context/src/context_compressor.js",
      "line": 462,
      "brace_depth": 7
    },
    {
      "path": "cmos/context/src/context_compressor.js",
      "line": 463,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/context_compressor.js",
      "line": 464,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/context_compressor.js",
      "line": 465,
      "brace_depth": 7
    },
    {
      "path": "cmos/context/src/context_compressor.js",
      "line": 466,
      "brace_depth": 7
    },
    {
      "path": "cmos/context/src/context_compressor.js",
      "line": 467,
      "brace_depth": 7
    },
    {
      "path": "cmos/context/src/context_compressor.js",
      "line": 468,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/context_compressor.js",
      "line": 469,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_compressor.js",
      "line": 511,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_compressor.js",
      "line": 512,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_compressor.js",
      "line": 513,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_compressor.js",
      "line": 514,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_compressor.js",
      "line": 515,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_compressor.js",
      "line": 518,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_compressor.js",
      "line": 519,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_compressor.js",
      "line": 520,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_compressor.js",
      "line": 521,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_compressor.js",
      "line": 522,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_health.js",
      "line": 70,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_health.js",
      "line": 71,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_health.js",
      "line": 72,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_health.js",
      "line": 73,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_health.js",
      "line": 74,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_health.js",
      "line": 241,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_health.js",
      "line": 242,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_health.js",
      "line": 243,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_health.js",
      "line": 244,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_health.js",
      "line": 245,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_health.js",
      "line": 246,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_health.js",
      "line": 249,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_health.js",
      "line": 250,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_health.js",
      "line": 251,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_health.js",
      "line": 252,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_health.js",
      "line": 253,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/context_health.js",
      "line": 254,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 128,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 129,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 130,
      "brace_depth": 7
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 131,
      "brace_depth": 7
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 132,
      "brace_depth": 7
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 133,
      "brace_depth": 7
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 134,
      "brace_depth": 7
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 135,
      "brace_depth": 7
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 136,
      "brace_depth": 7
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 137,
      "brace_depth": 7
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 138,
      "brace_depth": 8
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 139,
      "brace_depth": 8
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 140,
      "brace_depth": 7
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 141,
      "brace_depth": 8
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 142,
      "brace_depth": 8
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 143,
      "brace_depth": 8
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 144,
      "brace_depth": 8
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 145,
      "brace_depth": 7
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 146,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 147,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 257,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 258,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 259,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 260,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 261,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 273,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 274,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 328,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 329,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 330,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 331,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 332,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 333,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 334,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 411,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 412,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 413,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 433,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 434,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 435,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 436,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 437,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 438,
      "brace_depth": 7
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 439,
      "brace_depth": 7
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 440,
      "brace_depth": 7
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 441,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 442,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 584,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 585,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 586,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 587,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_dependencies.js",
      "line": 588,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 83,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 84,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 85,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 86,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 87,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 88,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 90,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 91,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 92,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 93,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 94,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 95,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 122,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 123,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 124,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 125,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 126,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 127,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 128,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 129,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 130,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 131,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 132,
      "brace_depth": 7
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 133,
      "brace_depth": 7
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 134,
      "brace_depth": 7
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 135,
      "brace_depth": 7
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 136,
      "brace_depth": 7
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 137,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 138,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 139,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 140,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 141,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 142,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 143,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 144,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 145,
      "brace_depth": 7
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 146,
      "brace_depth": 8
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 147,
      "brace_depth": 8
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 148,
      "brace_depth": 8
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 149,
      "brace_depth": 8
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 150,
      "brace_depth": 8
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 151,
      "brace_depth": 8
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 152,
      "brace_depth": 8
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 153,
      "brace_depth": 8
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 154,
      "brace_depth": 7
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 155,
      "brace_depth": 7
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 156,
      "brace_depth": 7
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 157,
      "brace_depth": 8
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 158,
      "brace_depth": 8
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 159,
      "brace_depth": 8
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 160,
      "brace_depth": 8
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 161,
      "brace_depth": 8
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 162,
      "brace_depth": 8
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 163,
      "brace_depth": 7
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 164,
      "brace_depth": 7
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 165,
      "brace_depth": 7
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 166,
      "brace_depth": 7
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 167,
      "brace_depth": 7
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 168,
      "brace_depth": 7
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 169,
      "brace_depth": 8
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 170,
      "brace_depth": 8
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 171,
      "brace_depth": 8
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 172,
      "brace_depth": 7
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 173,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 174,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 287,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 288,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 289,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 290,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 291,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 321,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 322,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 323,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 324,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 325,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 326,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 327,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 328,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 329,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 330,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 331,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 381,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 382,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 383,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 384,
      "brace_depth": 7
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 385,
      "brace_depth": 7
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 386,
      "brace_depth": 7
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 387,
      "brace_depth": 7
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 388,
      "brace_depth": 7
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 389,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 390,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 414,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 415,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 416,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 417,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 418,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 419,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 450,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 451,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 452,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 453,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 454,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 471,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 472,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 473,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 474,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 475,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 476,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 477,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 478,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 479,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 578,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 579,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 604,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 605,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 606,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 607,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 630,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 631,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 632,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 660,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 661,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 662,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 699,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 700,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 701,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 702,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 703,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/domain_discovery.js",
      "line": 704,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_manager.js",
      "line": 228,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_manager.js",
      "line": 229,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_manager.js",
      "line": 230,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_manager.js",
      "line": 231,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_manager.js",
      "line": 578,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_manager.js",
      "line": 579,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/domain_manager.js",
      "line": 580,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 227,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 228,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 288,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 289,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 290,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 507,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 508,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 509,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 512,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 513,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 514,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 517,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 518,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 519,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 523,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 524,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 525,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 526,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 543,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 544,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 545,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 546,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 550,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 551,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 552,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 555,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 556,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 557,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 577,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 578,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 579,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 580,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 581,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 582,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 583,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 584,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 585,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 586,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 587,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 588,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 589,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 590,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 591,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 592,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 593,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 634,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 635,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 655,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 656,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 657,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 658,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 659,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 660,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 661,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 681,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 682,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 683,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 684,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 688,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 689,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 690,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 770,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 771,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 772,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 773,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 774,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 775,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 776,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 777,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/recovery_strategies.js",
      "line": 778,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 76,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 77,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 78,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 96,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 97,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 98,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 99,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 100,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 101,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 187,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 188,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 192,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 193,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 197,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 198,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 199,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 200,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 201,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 202,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 225,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 226,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 227,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 228,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 229,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 313,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 314,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 315,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 316,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 448,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 449,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 507,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 508,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 509,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 510,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 511,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 521,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 522,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 523,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 559,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 560,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 561,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 562,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 563,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 564,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 565,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 566,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 567,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 568,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 569,
      "brace_depth": 6
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 570,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 589,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 590,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 591,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 592,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 621,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 622,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 623,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 624,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/smart_compressor.js",
      "line": 625,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/state_calculator.js",
      "line": 347,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/state_calculator.js",
      "line": 348,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/viability_regions.js",
      "line": 146,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/viability_regions.js",
      "line": 147,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/viability_regions.js",
      "line": 148,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/viability_regions.js",
      "line": 149,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/viability_regions.js",
      "line": 150,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/viability_regions.js",
      "line": 151,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/viability_regions.js",
      "line": 254,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/viability_regions.js",
      "line": 255,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/viability_regions.js",
      "line": 256,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/viability_regions.js",
      "line": 257,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/viability_regions.js",
      "line": 258,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/viability_regions.js",
      "line": 259,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/viability_regions.js",
      "line": 306,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/viability_regions.js",
      "line": 307,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/viability_regions.js",
      "line": 308,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/viability_regions.js",
      "line": 309,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/viability_regions.js",
      "line": 310,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/viability_regions.js",
      "line": 311,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/viability_regions.js",
      "line": 312,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/viability_regions.js",
      "line": 313,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/viability_regions.js",
      "line": 316,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/viability_regions.js",
      "line": 317,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/viability_regions.js",
      "line": 318,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/viability_regions.js",
      "line": 319,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/viability_regions.js",
      "line": 320,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/viability_regions.js",
      "line": 321,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/viability_regions.js",
      "line": 322,
      "brace_depth": 5
    },
    {
      "path": "cmos/context/src/viability_regions.js",
      "line": 323,
      "brace_depth": 5
    },
    {
      "path": "coverage/lcov-report/sorter.js",
      "line": 174,
      "brace_depth": 5
    },
    {
      "path": "coverage/lcov-report/sorter.js",
      "line": 175,
      "brace_depth": 5
    },
    {
      "path": "coverage/lcov-report/sorter.js",
      "line": 189,
      "brace_depth": 5
    },
    {
      "path": "coverage/lcov-report/sorter.js",
      "line": 190,
      "brace_depth": 5
    },
    {
      "path": "coverage/lcov-report/sorter.js",
      "line": 191,
      "brace_depth": 5
    },
    {
      "path": "coverage/lcov-report/sorter.js",
      "line": 192,
      "brace_depth": 5
    },
    {
      "path": "coverage/sorter.js",
      "line": 174,
      "brace_depth": 5
    },
    {
      "path": "coverage/sorter.js",
      "line": 175,
      "brace_depth": 5
    },
    {
      "path": "coverage/sorter.js",
      "line": 189,
      "brace_depth": 5
    },
    {
      "path": "coverage/sorter.js",
      "line": 190,
      "brace_depth": 5
    },
    {
      "path": "coverage/sorter.js",
      "line": 191,
      "brace_depth": 5
    },
    {
      "path": "coverage/sorter.js",
      "line": 192,
      "brace_depth": 5
    },
    {
      "path": "dist/combination/dependency-resolver.js",
      "line": 122,
      "brace_depth": 5
    },
    {
      "path": "dist/combination/dependency-resolver.js",
      "line": 123,
      "brace_depth": 6
    },
    {
      "path": "dist/combination/dependency-resolver.js",
      "line": 124,
      "brace_depth": 6
    },
    {
      "path": "dist/combination/dependency-resolver.js",
      "line": 125,
      "brace_depth": 7
    },
    {
      "path": "dist/combination/dependency-resolver.js",
      "line": 126,
      "brace_depth": 7
    },
    {
      "path": "dist/combination/dependency-resolver.js",
      "line": 127,
      "brace_depth": 6
    },
    {
      "path": "dist/combination/dependency-resolver.js",
      "line": 128,
      "brace_depth": 6
    },
    {
      "path": "dist/combination/dependency-resolver.js",
      "line": 129,
      "brace_depth": 5
    },
    {
      "path": "dist/combination/dependency-resolver.js",
      "line": 165,
      "brace_depth": 5
    },
    {
      "path": "dist/combination/dependency-resolver.js",
      "line": 166,
      "brace_depth": 5
    },
    {
      "path": "dist/combination/dependency-resolver.js",
      "line": 200,
      "brace_depth": 5
    },
    {
      "path": "dist/combination/dependency-resolver.js",
      "line": 201,
      "brace_depth": 5
    },
    {
      "path": "dist/combination/dependency-resolver.js",
      "line": 224,
      "brace_depth": 5
    },
    {
      "path": "dist/combination/dependency-resolver.js",
      "line": 225,
      "brace_depth": 5
    },
    {
      "path": "dist/combination/dependency-resolver.js",
      "line": 290,
      "brace_depth": 5
    },
    {
      "path": "dist/combination/dependency-resolver.js",
      "line": 291,
      "brace_depth": 5
    },
    {
      "path": "dist/combination/dependency-resolver.js",
      "line": 292,
      "brace_depth": 5
    },
    {
      "path": "dist/combination/dependency-resolver.js",
      "line": 293,
      "brace_depth": 6
    },
    {
      "path": "dist/combination/dependency-resolver.js",
      "line": 294,
      "brace_depth": 6
    },
    {
      "path": "dist/combination/dependency-resolver.js",
      "line": 295,
      "brace_depth": 5
    },
    {
      "path": "dist/combination/merge-strategies.js",
      "line": 103,
      "brace_depth": 5
    },
    {
      "path": "dist/combination/merge-strategies.js",
      "line": 104,
      "brace_depth": 5
    },
    {
      "path": "dist/combination/merge-strategies.js",
      "line": 107,
      "brace_depth": 5
    },
    {
      "path": "dist/combination/merge-strategies.js",
      "line": 108,
      "brace_depth": 5
    },
    {
      "path": "dist/combination/merge-strategies.js",
      "line": 111,
      "brace_depth": 5
    },
    {
      "path": "dist/combination/merge-strategies.js",
      "line": 112,
      "brace_depth": 5
    },
    {
      "path": "dist/combination/pack-combiner.js",
      "line": 64,
      "brace_depth": 5
    },
    {
      "path": "dist/combination/pack-combiner.js",
      "line": 65,
      "brace_depth": 5
    },
    {
      "path": "dist/combination/pack-combiner.js",
      "line": 66,
      "brace_depth": 5
    },
    {
      "path": "dist/combination/pack-combiner.js",
      "line": 67,
      "brace_depth": 5
    },
    {
      "path": "dist/combination/pack-combiner.js",
      "line": 68,
      "brace_depth": 5
    },
    {
      "path": "dist/combination/pack-combiner.js",
      "line": 82,
      "brace_depth": 5
    },
    {
      "path": "dist/combination/pack-combiner.js",
      "line": 83,
      "brace_depth": 5
    },
    {
      "path": "dist/combination/pack-combiner.js",
      "line": 84,
      "brace_depth": 5
    },
    {
      "path": "dist/combination/pack-combiner.js",
      "line": 85,
      "brace_depth": 5
    },
    {
      "path": "dist/combination/pack-combiner.js",
      "line": 86,
      "brace_depth": 5
    },
    {
      "path": "dist/combination/pack-combiner.js",
      "line": 97,
      "brace_depth": 5
    },
    {
      "path": "dist/combination/pack-combiner.js",
      "line": 98,
      "brace_depth": 5
    },
    {
      "path": "dist/combination/pack-combiner.js",
      "line": 99,
      "brace_depth": 5
    },
    {
      "path": "dist/combination/pack-combiner.js",
      "line": 159,
      "brace_depth": 5
    },
    {
      "path": "dist/combination/pack-combiner.js",
      "line": 160,
      "brace_depth": 5
    },
    {
      "path": "dist/combination/pack-combiner.js",
      "line": 161,
      "brace_depth": 6
    },
    {
      "path": "dist/combination/pack-combiner.js",
      "line": 162,
      "brace_depth": 6
    },
    {
      "path": "dist/combination/pack-combiner.js",
      "line": 163,
      "brace_depth": 5
    },
    {
      "path": "dist/domains/domain-pack-loader.js",
      "line": 75,
      "brace_depth": 5
    },
    {
      "path": "dist/domains/domain-pack-loader.js",
      "line": 76,
      "brace_depth": 5
    },
    {
      "path": "dist/domains/domain-pack-loader.js",
      "line": 77,
      "brace_depth": 5
    },
    {
      "path": "dist/domains/domain-pack-loader.js",
      "line": 215,
      "brace_depth": 5
    },
    {
      "path": "dist/domains/domain-pack-loader.js",
      "line": 216,
      "brace_depth": 5
    },
    {
      "path": "dist/domains/domain-pack-loader.js",
      "line": 218,
      "brace_depth": 5
    },
    {
      "path": "dist/domains/domain-pack-loader.js",
      "line": 219,
      "brace_depth": 5
    },
    {
      "path": "dist/domains/domain-pack-loader.js",
      "line": 221,
      "brace_depth": 5
    },
    {
      "path": "dist/domains/domain-pack-loader.js",
      "line": 222,
      "brace_depth": 5
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 131,
      "brace_depth": 5
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 132,
      "brace_depth": 5
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 134,
      "brace_depth": 5
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 135,
      "brace_depth": 5
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 136,
      "brace_depth": 5
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 137,
      "brace_depth": 5
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 147,
      "brace_depth": 5
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 148,
      "brace_depth": 5
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 150,
      "brace_depth": 5
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 151,
      "brace_depth": 5
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 152,
      "brace_depth": 5
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 153,
      "brace_depth": 5
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 193,
      "brace_depth": 5
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 194,
      "brace_depth": 6
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 195,
      "brace_depth": 6
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 196,
      "brace_depth": 5
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 201,
      "brace_depth": 5
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 202,
      "brace_depth": 6
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 203,
      "brace_depth": 6
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 204,
      "brace_depth": 6
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 205,
      "brace_depth": 6
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 206,
      "brace_depth": 6
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 207,
      "brace_depth": 5
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 306,
      "brace_depth": 5
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 307,
      "brace_depth": 5
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 309,
      "brace_depth": 5
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 310,
      "brace_depth": 5
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 311,
      "brace_depth": 5
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 312,
      "brace_depth": 5
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 313,
      "brace_depth": 5
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 314,
      "brace_depth": 5
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 315,
      "brace_depth": 5
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 316,
      "brace_depth": 5
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 336,
      "brace_depth": 5
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 337,
      "brace_depth": 5
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 338,
      "brace_depth": 6
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 339,
      "brace_depth": 6
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 340,
      "brace_depth": 5
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 341,
      "brace_depth": 6
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 342,
      "brace_depth": 6
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 343,
      "brace_depth": 6
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 344,
      "brace_depth": 6
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 345,
      "brace_depth": 6
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 346,
      "brace_depth": 6
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 347,
      "brace_depth": 6
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 348,
      "brace_depth": 6
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 349,
      "brace_depth": 5
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 364,
      "brace_depth": 5
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 365,
      "brace_depth": 5
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 367,
      "brace_depth": 5
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 368,
      "brace_depth": 5
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 369,
      "brace_depth": 5
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 370,
      "brace_depth": 5
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 371,
      "brace_depth": 5
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 372,
      "brace_depth": 5
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 373,
      "brace_depth": 5
    },
    {
      "path": "dist/extraction/template-extractor.js",
      "line": 374,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 41,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 42,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 43,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 44,
      "brace_depth": 6
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 45,
      "brace_depth": 6
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 46,
      "brace_depth": 6
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 47,
      "brace_depth": 6
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 48,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 60,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 61,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 62,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 63,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 64,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 193,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 194,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 195,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 196,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 244,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 245,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 250,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 251,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 253,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 254,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 259,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 260,
      "brace_depth": 6
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 261,
      "brace_depth": 7
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 262,
      "brace_depth": 8
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 263,
      "brace_depth": 8
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 264,
      "brace_depth": 7
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 265,
      "brace_depth": 6
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 266,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 273,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 274,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 278,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 279,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 280,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 281,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 282,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 311,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 312,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 313,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 314,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 325,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 326,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 329,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 330,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 333,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 334,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 338,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 339,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 340,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 341,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 342,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 374,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 375,
      "brace_depth": 5
    },
    {
      "path": "dist/import-export/security-validator.js",
      "line": 376,
      "brace_depth": 5
    },
    {
      "path": "dist/index.d.ts",
      "line": 57,
      "brace_depth": 5
    },
    {
      "path": "dist/index.d.ts",
      "line": 58,
      "brace_depth": 5
    },
    {
      "path": "dist/index.d.ts",
      "line": 64,
      "brace_depth": 5
    },
    {
      "path": "dist/index.d.ts",
      "line": 65,
      "brace_depth": 5
    },
    {
      "path": "dist/index.d.ts",
      "line": 135,
      "brace_depth": 5
    },
    {
      "path": "dist/index.d.ts",
      "line": 136,
      "brace_depth": 5
    },
    {
      "path": "dist/index.d.ts",
      "line": 142,
      "brace_depth": 5
    },
    {
      "path": "dist/index.d.ts",
      "line": 143,
      "brace_depth": 5
    },
    {
      "path": "dist/index.d.ts",
      "line": 160,
      "brace_depth": 5
    },
    {
      "path": "dist/index.d.ts",
      "line": 161,
      "brace_depth": 6
    },
    {
      "path": "dist/index.d.ts",
      "line": 162,
      "brace_depth": 6
    },
    {
      "path": "dist/index.d.ts",
      "line": 163,
      "brace_depth": 6
    },
    {
      "path": "dist/index.d.ts",
      "line": 164,
      "brace_depth": 5
    },
    {
      "path": "dist/index.d.ts",
      "line": 165,
      "brace_depth": 6
    },
    {
      "path": "dist/index.d.ts",
      "line": 166,
      "brace_depth": 6
    },
    {
      "path": "dist/index.d.ts",
      "line": 167,
      "brace_depth": 6
    },
    {
      "path": "dist/index.d.ts",
      "line": 168,
      "brace_depth": 5
    },
    {
      "path": "dist/index.d.ts",
      "line": 169,
      "brace_depth": 6
    },
    {
      "path": "dist/index.d.ts",
      "line": 170,
      "brace_depth": 6
    },
    {
      "path": "dist/index.d.ts",
      "line": 171,
      "brace_depth": 6
    },
    {
      "path": "dist/index.d.ts",
      "line": 172,
      "brace_depth": 5
    },
    {
      "path": "dist/index.d.ts",
      "line": 173,
      "brace_depth": 6
    },
    {
      "path": "dist/index.d.ts",
      "line": 174,
      "brace_depth": 6
    },
    {
      "path": "dist/index.d.ts",
      "line": 175,
      "brace_depth": 6
    },
    {
      "path": "dist/index.d.ts",
      "line": 176,
      "brace_depth": 5
    },
    {
      "path": "dist/index.d.ts",
      "line": 177,
      "brace_depth": 6
    },
    {
      "path": "dist/index.d.ts",
      "line": 178,
      "brace_depth": 6
    },
    {
      "path": "dist/index.d.ts",
      "line": 179,
      "brace_depth": 6
    },
    {
      "path": "dist/index.d.ts",
      "line": 180,
      "brace_depth": 5
    },
    {
      "path": "dist/index.d.ts",
      "line": 216,
      "brace_depth": 5
    },
    {
      "path": "dist/index.d.ts",
      "line": 217,
      "brace_depth": 5
    },
    {
      "path": "dist/index.d.ts",
      "line": 230,
      "brace_depth": 5
    },
    {
      "path": "dist/index.d.ts",
      "line": 231,
      "brace_depth": 5
    },
    {
      "path": "dist/index.d.ts",
      "line": 237,
      "brace_depth": 5
    },
    {
      "path": "dist/index.d.ts",
      "line": 238,
      "brace_depth": 5
    },
    {
      "path": "dist/index.d.ts",
      "line": 325,
      "brace_depth": 5
    },
    {
      "path": "dist/index.d.ts",
      "line": 326,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 183,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 184,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 185,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 188,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 189,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 190,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 201,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 202,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 203,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 206,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 207,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 208,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 220,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 221,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 222,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 236,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 237,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 238,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 241,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 242,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 243,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 255,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 256,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 257,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 260,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 261,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 262,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 272,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 273,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 274,
      "brace_depth": 6
    },
    {
      "path": "dist/index.js",
      "line": 275,
      "brace_depth": 6
    },
    {
      "path": "dist/index.js",
      "line": 276,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 277,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 279,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 280,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 281,
      "brace_depth": 6
    },
    {
      "path": "dist/index.js",
      "line": 282,
      "brace_depth": 6
    },
    {
      "path": "dist/index.js",
      "line": 283,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 284,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 295,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 296,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 297,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 308,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 309,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 310,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 313,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 314,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 315,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 327,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 328,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 329,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 332,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 333,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 334,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 343,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 344,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 345,
      "brace_depth": 6
    },
    {
      "path": "dist/index.js",
      "line": 346,
      "brace_depth": 6
    },
    {
      "path": "dist/index.js",
      "line": 347,
      "brace_depth": 6
    },
    {
      "path": "dist/index.js",
      "line": 348,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 349,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 350,
      "brace_depth": 6
    },
    {
      "path": "dist/index.js",
      "line": 351,
      "brace_depth": 6
    },
    {
      "path": "dist/index.js",
      "line": 352,
      "brace_depth": 6
    },
    {
      "path": "dist/index.js",
      "line": 353,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 354,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 376,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 377,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 394,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 395,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 396,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 399,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 400,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 401,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 402,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 403,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 404,
      "brace_depth": 6
    },
    {
      "path": "dist/index.js",
      "line": 405,
      "brace_depth": 6
    },
    {
      "path": "dist/index.js",
      "line": 406,
      "brace_depth": 6
    },
    {
      "path": "dist/index.js",
      "line": 407,
      "brace_depth": 6
    },
    {
      "path": "dist/index.js",
      "line": 408,
      "brace_depth": 6
    },
    {
      "path": "dist/index.js",
      "line": 409,
      "brace_depth": 6
    },
    {
      "path": "dist/index.js",
      "line": 410,
      "brace_depth": 6
    },
    {
      "path": "dist/index.js",
      "line": 411,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 427,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 428,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 429,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 432,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 433,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 434,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 435,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 436,
      "brace_depth": 6
    },
    {
      "path": "dist/index.js",
      "line": 437,
      "brace_depth": 6
    },
    {
      "path": "dist/index.js",
      "line": 438,
      "brace_depth": 6
    },
    {
      "path": "dist/index.js",
      "line": 439,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 440,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 441,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 457,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 458,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 459,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 462,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 463,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 464,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 465,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 466,
      "brace_depth": 6
    },
    {
      "path": "dist/index.js",
      "line": 467,
      "brace_depth": 6
    },
    {
      "path": "dist/index.js",
      "line": 468,
      "brace_depth": 6
    },
    {
      "path": "dist/index.js",
      "line": 469,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 470,
      "brace_depth": 5
    },
    {
      "path": "dist/index.js",
      "line": 471,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/context-propagator.js",
      "line": 178,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/context-propagator.js",
      "line": 179,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 128,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 129,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 130,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 131,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 132,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 133,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 141,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 142,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 154,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 155,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 222,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 223,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 224,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 225,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 226,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 227,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 228,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 229,
      "brace_depth": 7
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 230,
      "brace_depth": 7
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 231,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 232,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 233,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 234,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 235,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 236,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 237,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 238,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 248,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 249,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 299,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 300,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 301,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 302,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 303,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 304,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 305,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 337,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 338,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 339,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 340,
      "brace_depth": 7
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 341,
      "brace_depth": 7
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 342,
      "brace_depth": 7
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 343,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 344,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 346,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 347,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-analyzer.js",
      "line": 348,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-inferrer.js",
      "line": 61,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-inferrer.js",
      "line": 62,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-inferrer.js",
      "line": 63,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-inferrer.js",
      "line": 64,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/dependency-inferrer.js",
      "line": 65,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/dependency-inferrer.js",
      "line": 66,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/dependency-inferrer.js",
      "line": 67,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/dependency-inferrer.js",
      "line": 68,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/dependency-inferrer.js",
      "line": 69,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/dependency-inferrer.js",
      "line": 70,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-inferrer.js",
      "line": 71,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-inferrer.js",
      "line": 77,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-inferrer.js",
      "line": 78,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/dependency-inferrer.js",
      "line": 79,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/dependency-inferrer.js",
      "line": 80,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/dependency-inferrer.js",
      "line": 81,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/dependency-inferrer.js",
      "line": 82,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/dependency-inferrer.js",
      "line": 83,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/dependency-inferrer.js",
      "line": 84,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-inferrer.js",
      "line": 85,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-inferrer.js",
      "line": 129,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-inferrer.js",
      "line": 130,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/dependency-inferrer.js",
      "line": 131,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/dependency-inferrer.js",
      "line": 132,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/dependency-inferrer.js",
      "line": 133,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/dependency-inferrer.js",
      "line": 134,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/dependency-inferrer.js",
      "line": 135,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/dependency-inferrer.js",
      "line": 136,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-inferrer.js",
      "line": 166,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-inferrer.js",
      "line": 167,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-inferrer.js",
      "line": 168,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-inferrer.js",
      "line": 169,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-inferrer.js",
      "line": 170,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-inferrer.js",
      "line": 171,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-inferrer.js",
      "line": 177,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-inferrer.js",
      "line": 178,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-inferrer.js",
      "line": 179,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-inferrer.js",
      "line": 180,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-inferrer.js",
      "line": 181,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/dependency-inferrer.js",
      "line": 182,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/graph-validator.js",
      "line": 24,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/graph-validator.js",
      "line": 25,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/graph-validator.js",
      "line": 26,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/graph-validator.js",
      "line": 47,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/graph-validator.js",
      "line": 48,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/graph-validator.js",
      "line": 75,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/graph-validator.js",
      "line": 76,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/graph-validator.js",
      "line": 77,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/graph-validator.js",
      "line": 78,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/graph-validator.js",
      "line": 79,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/graph-validator.js",
      "line": 80,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/graph-validator.js",
      "line": 81,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/graph-validator.js",
      "line": 82,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/graph-validator.js",
      "line": 83,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/graph-validator.js",
      "line": 84,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/graph-validator.js",
      "line": 85,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/graph-validator.js",
      "line": 86,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/graph-validator.js",
      "line": 87,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/graph-validator.js",
      "line": 88,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/graph-validator.js",
      "line": 142,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/graph-validator.js",
      "line": 143,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/graph-validator.js",
      "line": 146,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/graph-validator.js",
      "line": 147,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/graph-validator.js",
      "line": 150,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/graph-validator.js",
      "line": 151,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/graph-validator.js",
      "line": 176,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/graph-validator.js",
      "line": 177,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/graph-validator.js",
      "line": 178,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/graph-validator.js",
      "line": 179,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/graph-validator.js",
      "line": 180,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/graph-validator.js",
      "line": 181,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/graph-validator.js",
      "line": 182,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/graph-validator.js",
      "line": 183,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/graph-validator.js",
      "line": 184,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/graph-validator.js",
      "line": 185,
      "brace_depth": 6
    },
    {
      "path": "dist/intelligence/graph-validator.js",
      "line": 186,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/graph-validator.js",
      "line": 193,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/graph-validator.js",
      "line": 194,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/graph-validator.js",
      "line": 195,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/graph-validator.js",
      "line": 196,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/graph-validator.js",
      "line": 198,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/graph-validator.js",
      "line": 199,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/mission-splitter.js",
      "line": 104,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/mission-splitter.js",
      "line": 105,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/mission-splitter.js",
      "line": 106,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/mission-splitter.js",
      "line": 107,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/mission-splitter.js",
      "line": 108,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/mission-splitter.js",
      "line": 170,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/mission-splitter.js",
      "line": 171,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/mission-splitter.js",
      "line": 172,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/mission-splitter.js",
      "line": 173,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/mission-splitter.js",
      "line": 230,
      "brace_depth": 5
    },
    {
      "path": "dist/intelligence/mission-splitter.js",
      "line": 231,
      "brace_depth": 5
    },
    {
      "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
      "line": 167,
      "brace_depth": 5
    },
    {
      "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
      "line": 168,
      "brace_depth": 5
    },
    {
      "path": "dist/quality/analyzers/clarity-analyzer.js",
      "line": 164,
      "brace_depth": 5
    },
    {
      "path": "dist/quality/analyzers/clarity-analyzer.js",
      "line": 165,
      "brace_depth": 5
    },
    {
      "path": "dist/quality/analyzers/clarity-analyzer.js",
      "line": 166,
      "brace_depth": 5
    },
    {
      "path": "dist/quality/analyzers/clarity-analyzer.js",
      "line": 167,
      "brace_depth": 6
    },
    {
      "path": "dist/quality/analyzers/clarity-analyzer.js",
      "line": 168,
      "brace_depth": 6
    },
    {
      "path": "dist/quality/analyzers/clarity-analyzer.js",
      "line": 169,
      "brace_depth": 5
    },
    {
      "path": "dist/quality/analyzers/clarity-analyzer.js",
      "line": 170,
      "brace_depth": 5
    },
    {
      "path": "dist/quality/analyzers/clarity-analyzer.js",
      "line": 171,
      "brace_depth": 6
    },
    {
      "path": "dist/quality/analyzers/clarity-analyzer.js",
      "line": 172,
      "brace_depth": 6
    },
    {
      "path": "dist/quality/analyzers/clarity-analyzer.js",
      "line": 173,
      "brace_depth": 5
    },
    {
      "path": "dist/quality/analyzers/completeness-analyzer.js",
      "line": 71,
      "brace_depth": 5
    },
    {
      "path": "dist/quality/analyzers/completeness-analyzer.js",
      "line": 72,
      "brace_depth": 5
    },
    {
      "path": "dist/quality/analyzers/completeness-analyzer.js",
      "line": 74,
      "brace_depth": 5
    },
    {
      "path": "dist/quality/analyzers/completeness-analyzer.js",
      "line": 75,
      "brace_depth": 5
    },
    {
      "path": "dist/quality/analyzers/completeness-analyzer.js",
      "line": 77,
      "brace_depth": 5
    },
    {
      "path": "dist/quality/analyzers/completeness-analyzer.js",
      "line": 78,
      "brace_depth": 5
    },
    {
      "path": "dist/quality/improvement-engine.js",
      "line": 43,
      "brace_depth": 5
    },
    {
      "path": "dist/quality/improvement-engine.js",
      "line": 44,
      "brace_depth": 5
    },
    {
      "path": "dist/quality/improvement-engine.js",
      "line": 45,
      "brace_depth": 5
    },
    {
      "path": "dist/quality/improvement-engine.js",
      "line": 46,
      "brace_depth": 5
    },
    {
      "path": "dist/quality/improvement-engine.js",
      "line": 47,
      "brace_depth": 5
    },
    {
      "path": "dist/quality/improvement-engine.js",
      "line": 48,
      "brace_depth": 5
    },
    {
      "path": "dist/registry/registry-parser.js",
      "line": 23,
      "brace_depth": 5
    },
    {
      "path": "dist/registry/registry-parser.js",
      "line": 24,
      "brace_depth": 5
    },
    {
      "path": "dist/registry/registry-parser.js",
      "line": 25,
      "brace_depth": 5
    },
    {
      "path": "dist/registry/registry-parser.js",
      "line": 26,
      "brace_depth": 5
    },
    {
      "path": "dist/registry/registry-parser.js",
      "line": 27,
      "brace_depth": 5
    },
    {
      "path": "dist/registry/registry-parser.js",
      "line": 28,
      "brace_depth": 5
    },
    {
      "path": "dist/registry/registry-parser.js",
      "line": 29,
      "brace_depth": 5
    },
    {
      "path": "dist/schemas/generic-mission.d.ts",
      "line": 72,
      "brace_depth": 5
    },
    {
      "path": "dist/schemas/generic-mission.d.ts",
      "line": 73,
      "brace_depth": 5
    },
    {
      "path": "dist/schemas/generic-mission.d.ts",
      "line": 74,
      "brace_depth": 5
    },
    {
      "path": "dist/schemas/generic-mission.d.ts",
      "line": 76,
      "brace_depth": 5
    },
    {
      "path": "dist/schemas/generic-mission.d.ts",
      "line": 77,
      "brace_depth": 5
    },
    {
      "path": "dist/schemas/generic-mission.d.ts",
      "line": 78,
      "brace_depth": 6
    },
    {
      "path": "dist/schemas/generic-mission.d.ts",
      "line": 79,
      "brace_depth": 6
    },
    {
      "path": "dist/schemas/generic-mission.d.ts",
      "line": 80,
      "brace_depth": 5
    },
    {
      "path": "dist/schemas/generic-mission.d.ts",
      "line": 81,
      "brace_depth": 5
    },
    {
      "path": "dist/schemas/generic-mission.d.ts",
      "line": 83,
      "brace_depth": 5
    },
    {
      "path": "dist/schemas/generic-mission.d.ts",
      "line": 84,
      "brace_depth": 5
    },
    {
      "path": "dist/schemas/generic-mission.d.ts",
      "line": 85,
      "brace_depth": 6
    },
    {
      "path": "dist/schemas/generic-mission.d.ts",
      "line": 86,
      "brace_depth": 6
    },
    {
      "path": "dist/schemas/generic-mission.d.ts",
      "line": 87,
      "brace_depth": 5
    },
    {
      "path": "dist/schemas/generic-mission.d.ts",
      "line": 88,
      "brace_depth": 5
    },
    {
      "path": "dist/schemas/generic-mission.js",
      "line": 54,
      "brace_depth": 5
    },
    {
      "path": "dist/schemas/generic-mission.js",
      "line": 55,
      "brace_depth": 5
    },
    {
      "path": "dist/schemas/generic-mission.js",
      "line": 56,
      "brace_depth": 5
    },
    {
      "path": "dist/schemas/generic-mission.js",
      "line": 58,
      "brace_depth": 5
    },
    {
      "path": "dist/schemas/generic-mission.js",
      "line": 59,
      "brace_depth": 5
    },
    {
      "path": "dist/schemas/generic-mission.js",
      "line": 60,
      "brace_depth": 6
    },
    {
      "path": "dist/schemas/generic-mission.js",
      "line": 61,
      "brace_depth": 6
    },
    {
      "path": "dist/schemas/generic-mission.js",
      "line": 62,
      "brace_depth": 5
    },
    {
      "path": "dist/schemas/generic-mission.js",
      "line": 63,
      "brace_depth": 5
    },
    {
      "path": "dist/schemas/generic-mission.js",
      "line": 65,
      "brace_depth": 5
    },
    {
      "path": "dist/schemas/generic-mission.js",
      "line": 66,
      "brace_depth": 5
    },
    {
      "path": "dist/schemas/generic-mission.js",
      "line": 67,
      "brace_depth": 6
    },
    {
      "path": "dist/schemas/generic-mission.js",
      "line": 68,
      "brace_depth": 6
    },
    {
      "path": "dist/schemas/generic-mission.js",
      "line": 69,
      "brace_depth": 5
    },
    {
      "path": "dist/schemas/generic-mission.js",
      "line": 70,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/analyze-dependencies.js",
      "line": 131,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/analyze-dependencies.js",
      "line": 132,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/analyze-dependencies.js",
      "line": 137,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/analyze-dependencies.js",
      "line": 138,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/combine-packs.d.ts",
      "line": 50,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/combine-packs.d.ts",
      "line": 51,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/combine-packs.d.ts",
      "line": 64,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/combine-packs.d.ts",
      "line": 65,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/combine-packs.d.ts",
      "line": 71,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/combine-packs.d.ts",
      "line": 72,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/combine-packs.js",
      "line": 127,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/combine-packs.js",
      "line": 128,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/combine-packs.js",
      "line": 129,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/combine-packs.js",
      "line": 133,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/combine-packs.js",
      "line": 134,
      "brace_depth": 6
    },
    {
      "path": "dist/tools/combine-packs.js",
      "line": 135,
      "brace_depth": 6
    },
    {
      "path": "dist/tools/combine-packs.js",
      "line": 136,
      "brace_depth": 6
    },
    {
      "path": "dist/tools/combine-packs.js",
      "line": 137,
      "brace_depth": 6
    },
    {
      "path": "dist/tools/combine-packs.js",
      "line": 138,
      "brace_depth": 6
    },
    {
      "path": "dist/tools/combine-packs.js",
      "line": 139,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/combine-packs.js",
      "line": 157,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/combine-packs.js",
      "line": 158,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/combine-packs.js",
      "line": 159,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/combine-packs.js",
      "line": 160,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/combine-packs.js",
      "line": 176,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/combine-packs.js",
      "line": 177,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/combine-packs.js",
      "line": 178,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/combine-packs.js",
      "line": 215,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/combine-packs.js",
      "line": 216,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/combine-packs.js",
      "line": 217,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/create-mission.d.ts",
      "line": 56,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/create-mission.d.ts",
      "line": 57,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/create-mission.d.ts",
      "line": 63,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/create-mission.d.ts",
      "line": 64,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/create-mission.js",
      "line": 243,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/create-mission.js",
      "line": 244,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/export-template.d.ts",
      "line": 69,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/export-template.d.ts",
      "line": 70,
      "brace_depth": 6
    },
    {
      "path": "dist/tools/export-template.d.ts",
      "line": 71,
      "brace_depth": 6
    },
    {
      "path": "dist/tools/export-template.d.ts",
      "line": 72,
      "brace_depth": 6
    },
    {
      "path": "dist/tools/export-template.d.ts",
      "line": 73,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/export-template.d.ts",
      "line": 74,
      "brace_depth": 6
    },
    {
      "path": "dist/tools/export-template.d.ts",
      "line": 75,
      "brace_depth": 6
    },
    {
      "path": "dist/tools/export-template.d.ts",
      "line": 76,
      "brace_depth": 6
    },
    {
      "path": "dist/tools/export-template.d.ts",
      "line": 77,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/export-template.d.ts",
      "line": 78,
      "brace_depth": 6
    },
    {
      "path": "dist/tools/export-template.d.ts",
      "line": 79,
      "brace_depth": 6
    },
    {
      "path": "dist/tools/export-template.d.ts",
      "line": 80,
      "brace_depth": 6
    },
    {
      "path": "dist/tools/export-template.d.ts",
      "line": 81,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/export-template.d.ts",
      "line": 82,
      "brace_depth": 6
    },
    {
      "path": "dist/tools/export-template.d.ts",
      "line": 83,
      "brace_depth": 6
    },
    {
      "path": "dist/tools/export-template.d.ts",
      "line": 84,
      "brace_depth": 6
    },
    {
      "path": "dist/tools/export-template.d.ts",
      "line": 85,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/export-template.d.ts",
      "line": 86,
      "brace_depth": 6
    },
    {
      "path": "dist/tools/export-template.d.ts",
      "line": 87,
      "brace_depth": 6
    },
    {
      "path": "dist/tools/export-template.d.ts",
      "line": 88,
      "brace_depth": 6
    },
    {
      "path": "dist/tools/export-template.d.ts",
      "line": 89,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/export-template.js",
      "line": 147,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/export-template.js",
      "line": 148,
      "brace_depth": 6
    },
    {
      "path": "dist/tools/export-template.js",
      "line": 149,
      "brace_depth": 6
    },
    {
      "path": "dist/tools/export-template.js",
      "line": 150,
      "brace_depth": 6
    },
    {
      "path": "dist/tools/export-template.js",
      "line": 151,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/export-template.js",
      "line": 152,
      "brace_depth": 6
    },
    {
      "path": "dist/tools/export-template.js",
      "line": 153,
      "brace_depth": 6
    },
    {
      "path": "dist/tools/export-template.js",
      "line": 154,
      "brace_depth": 6
    },
    {
      "path": "dist/tools/export-template.js",
      "line": 155,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/export-template.js",
      "line": 156,
      "brace_depth": 6
    },
    {
      "path": "dist/tools/export-template.js",
      "line": 157,
      "brace_depth": 6
    },
    {
      "path": "dist/tools/export-template.js",
      "line": 158,
      "brace_depth": 6
    },
    {
      "path": "dist/tools/export-template.js",
      "line": 159,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/export-template.js",
      "line": 160,
      "brace_depth": 6
    },
    {
      "path": "dist/tools/export-template.js",
      "line": 161,
      "brace_depth": 6
    },
    {
      "path": "dist/tools/export-template.js",
      "line": 162,
      "brace_depth": 6
    },
    {
      "path": "dist/tools/export-template.js",
      "line": 163,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/export-template.js",
      "line": 164,
      "brace_depth": 6
    },
    {
      "path": "dist/tools/export-template.js",
      "line": 165,
      "brace_depth": 6
    },
    {
      "path": "dist/tools/export-template.js",
      "line": 166,
      "brace_depth": 6
    },
    {
      "path": "dist/tools/export-template.js",
      "line": 167,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/import-template.d.ts",
      "line": 102,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/import-template.d.ts",
      "line": 103,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/import-template.d.ts",
      "line": 109,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/import-template.d.ts",
      "line": 110,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/optimize-tokens.d.ts",
      "line": 63,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/optimize-tokens.d.ts",
      "line": 64,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/optimize-tokens.js",
      "line": 110,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/optimize-tokens.js",
      "line": 111,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/optimize-tokens.js",
      "line": 112,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/optimize-tokens.js",
      "line": 133,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/optimize-tokens.js",
      "line": 134,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/optimize-tokens.js",
      "line": 135,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/optimize-tokens.js",
      "line": 136,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/optimize-tokens.js",
      "line": 137,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/optimize-tokens.js",
      "line": 138,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/optimize-tokens.js",
      "line": 141,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/optimize-tokens.js",
      "line": 142,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/optimize-tokens.js",
      "line": 143,
      "brace_depth": 6
    },
    {
      "path": "dist/tools/optimize-tokens.js",
      "line": 144,
      "brace_depth": 6
    },
    {
      "path": "dist/tools/optimize-tokens.js",
      "line": 145,
      "brace_depth": 6
    },
    {
      "path": "dist/tools/optimize-tokens.js",
      "line": 146,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/optimize-tokens.js",
      "line": 147,
      "brace_depth": 6
    },
    {
      "path": "dist/tools/optimize-tokens.js",
      "line": 148,
      "brace_depth": 6
    },
    {
      "path": "dist/tools/optimize-tokens.js",
      "line": 149,
      "brace_depth": 6
    },
    {
      "path": "dist/tools/optimize-tokens.js",
      "line": 150,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/optimize-tokens.js",
      "line": 151,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/optimize-tokens.js",
      "line": 152,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/split-mission.js",
      "line": 130,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/split-mission.js",
      "line": 131,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/split-mission.js",
      "line": 132,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/split-mission.js",
      "line": 203,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/split-mission.js",
      "line": 204,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/suggest-splits.js",
      "line": 172,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/suggest-splits.js",
      "line": 173,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/version-template.js",
      "line": 104,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/version-template.js",
      "line": 105,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/version-template.js",
      "line": 106,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/version-template.js",
      "line": 107,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/version-template.js",
      "line": 108,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/version-template.js",
      "line": 109,
      "brace_depth": 5
    },
    {
      "path": "dist/tools/version-template.js",
      "line": 110,
      "brace_depth": 5
    },
    {
      "path": "dist/versioning/migration-engine.js",
      "line": 133,
      "brace_depth": 5
    },
    {
      "path": "dist/versioning/migration-engine.js",
      "line": 134,
      "brace_depth": 5
    },
    {
      "path": "dist/versioning/migration-engine.js",
      "line": 135,
      "brace_depth": 6
    },
    {
      "path": "dist/versioning/migration-engine.js",
      "line": 136,
      "brace_depth": 6
    },
    {
      "path": "dist/versioning/migration-engine.js",
      "line": 137,
      "brace_depth": 7
    },
    {
      "path": "dist/versioning/migration-engine.js",
      "line": 138,
      "brace_depth": 7
    },
    {
      "path": "dist/versioning/migration-engine.js",
      "line": 139,
      "brace_depth": 6
    },
    {
      "path": "dist/versioning/migration-engine.js",
      "line": 140,
      "brace_depth": 5
    },
    {
      "path": "dist/versioning/migration-engine.js",
      "line": 141,
      "brace_depth": 6
    },
    {
      "path": "dist/versioning/migration-engine.js",
      "line": 142,
      "brace_depth": 6
    },
    {
      "path": "dist/versioning/migration-engine.js",
      "line": 143,
      "brace_depth": 5
    },
    {
      "path": "dist/versioning/migration-engine.js",
      "line": 144,
      "brace_depth": 5
    },
    {
      "path": "dist/versioning/migration-engine.js",
      "line": 145,
      "brace_depth": 5
    },
    {
      "path": "dist/versioning/migration-engine.js",
      "line": 146,
      "brace_depth": 5
    },
    {
      "path": "dist/versioning/migration-engine.js",
      "line": 148,
      "brace_depth": 5
    },
    {
      "path": "dist/versioning/migration-engine.js",
      "line": 149,
      "brace_depth": 5
    },
    {
      "path": "dist/versioning/migration-engine.js",
      "line": 150,
      "brace_depth": 5
    },
    {
      "path": "dist/versioning/migration-engine.js",
      "line": 151,
      "brace_depth": 6
    },
    {
      "path": "dist/versioning/migration-engine.js",
      "line": 152,
      "brace_depth": 7
    },
    {
      "path": "dist/versioning/migration-engine.js",
      "line": 153,
      "brace_depth": 7
    },
    {
      "path": "dist/versioning/migration-engine.js",
      "line": 154,
      "brace_depth": 7
    },
    {
      "path": "dist/versioning/migration-engine.js",
      "line": 155,
      "brace_depth": 7
    },
    {
      "path": "dist/versioning/migration-engine.js",
      "line": 156,
      "brace_depth": 6
    },
    {
      "path": "dist/versioning/migration-engine.js",
      "line": 157,
      "brace_depth": 5
    },
    {
      "path": "dist/versioning/migration-engine.js",
      "line": 316,
      "brace_depth": 5
    },
    {
      "path": "dist/versioning/migration-engine.js",
      "line": 317,
      "brace_depth": 5
    },
    {
      "path": "dist/versioning/migration-engine.js",
      "line": 318,
      "brace_depth": 5
    },
    {
      "path": "dist/versioning/migration-engine.js",
      "line": 319,
      "brace_depth": 5
    },
    {
      "path": "dist/versioning/migration-engine.js",
      "line": 323,
      "brace_depth": 5
    },
    {
      "path": "dist/versioning/migration-engine.js",
      "line": 324,
      "brace_depth": 5
    },
    {
      "path": "dist/versioning/migration-engine.js",
      "line": 325,
      "brace_depth": 5
    },
    {
      "path": "dist/versioning/migration-engine.js",
      "line": 326,
      "brace_depth": 5
    },
    {
      "path": "dist/versioning/version-manager.js",
      "line": 94,
      "brace_depth": 5
    },
    {
      "path": "dist/versioning/version-manager.js",
      "line": 95,
      "brace_depth": 5
    },
    {
      "path": "dist/versioning/version-manager.js",
      "line": 100,
      "brace_depth": 5
    },
    {
      "path": "dist/versioning/version-manager.js",
      "line": 101,
      "brace_depth": 5
    },
    {
      "path": "dist/versioning/version-manager.js",
      "line": 293,
      "brace_depth": 5
    },
    {
      "path": "dist/versioning/version-manager.js",
      "line": 294,
      "brace_depth": 5
    },
    {
      "path": "dist/versioning/version-manager.js",
      "line": 295,
      "brace_depth": 6
    },
    {
      "path": "dist/versioning/version-manager.js",
      "line": 296,
      "brace_depth": 6
    },
    {
      "path": "dist/versioning/version-manager.js",
      "line": 297,
      "brace_depth": 6
    },
    {
      "path": "dist/versioning/version-manager.js",
      "line": 298,
      "brace_depth": 5
    },
    {
      "path": "dist/versioning/version-manager.js",
      "line": 306,
      "brace_depth": 5
    },
    {
      "path": "dist/versioning/version-manager.js",
      "line": 307,
      "brace_depth": 5
    },
    {
      "path": "dist/versioning/version-manager.js",
      "line": 311,
      "brace_depth": 5
    },
    {
      "path": "dist/versioning/version-manager.js",
      "line": 312,
      "brace_depth": 5
    },
    {
      "path": "dist/versioning/version-manager.js",
      "line": 313,
      "brace_depth": 5
    },
    {
      "path": "dist/versioning/version-manager.js",
      "line": 319,
      "brace_depth": 5
    },
    {
      "path": "dist/versioning/version-manager.js",
      "line": 320,
      "brace_depth": 5
    },
    {
      "path": "dist/versioning/version-manager.js",
      "line": 325,
      "brace_depth": 5
    },
    {
      "path": "dist/versioning/version-manager.js",
      "line": 326,
      "brace_depth": 5
    },
    {
      "path": "dist/versioning/version-manager.js",
      "line": 327,
      "brace_depth": 6
    },
    {
      "path": "dist/versioning/version-manager.js",
      "line": 328,
      "brace_depth": 6
    },
    {
      "path": "dist/versioning/version-manager.js",
      "line": 329,
      "brace_depth": 6
    },
    {
      "path": "dist/versioning/version-manager.js",
      "line": 330,
      "brace_depth": 5
    },
    {
      "path": "src/combination/dependency-resolver.ts",
      "line": 143,
      "brace_depth": 5
    },
    {
      "path": "src/combination/dependency-resolver.ts",
      "line": 144,
      "brace_depth": 6
    },
    {
      "path": "src/combination/dependency-resolver.ts",
      "line": 145,
      "brace_depth": 6
    },
    {
      "path": "src/combination/dependency-resolver.ts",
      "line": 146,
      "brace_depth": 7
    },
    {
      "path": "src/combination/dependency-resolver.ts",
      "line": 147,
      "brace_depth": 7
    },
    {
      "path": "src/combination/dependency-resolver.ts",
      "line": 148,
      "brace_depth": 7
    },
    {
      "path": "src/combination/dependency-resolver.ts",
      "line": 149,
      "brace_depth": 7
    },
    {
      "path": "src/combination/dependency-resolver.ts",
      "line": 150,
      "brace_depth": 7
    },
    {
      "path": "src/combination/dependency-resolver.ts",
      "line": 151,
      "brace_depth": 6
    },
    {
      "path": "src/combination/dependency-resolver.ts",
      "line": 152,
      "brace_depth": 6
    },
    {
      "path": "src/combination/dependency-resolver.ts",
      "line": 153,
      "brace_depth": 5
    },
    {
      "path": "src/combination/dependency-resolver.ts",
      "line": 197,
      "brace_depth": 5
    },
    {
      "path": "src/combination/dependency-resolver.ts",
      "line": 198,
      "brace_depth": 5
    },
    {
      "path": "src/combination/dependency-resolver.ts",
      "line": 238,
      "brace_depth": 5
    },
    {
      "path": "src/combination/dependency-resolver.ts",
      "line": 239,
      "brace_depth": 5
    },
    {
      "path": "src/combination/dependency-resolver.ts",
      "line": 267,
      "brace_depth": 5
    },
    {
      "path": "src/combination/dependency-resolver.ts",
      "line": 268,
      "brace_depth": 5
    },
    {
      "path": "src/combination/dependency-resolver.ts",
      "line": 362,
      "brace_depth": 5
    },
    {
      "path": "src/combination/dependency-resolver.ts",
      "line": 363,
      "brace_depth": 5
    },
    {
      "path": "src/combination/dependency-resolver.ts",
      "line": 364,
      "brace_depth": 5
    },
    {
      "path": "src/combination/dependency-resolver.ts",
      "line": 365,
      "brace_depth": 5
    },
    {
      "path": "src/combination/dependency-resolver.ts",
      "line": 366,
      "brace_depth": 6
    },
    {
      "path": "src/combination/dependency-resolver.ts",
      "line": 367,
      "brace_depth": 6
    },
    {
      "path": "src/combination/dependency-resolver.ts",
      "line": 368,
      "brace_depth": 5
    },
    {
      "path": "src/combination/merge-strategies.ts",
      "line": 142,
      "brace_depth": 5
    },
    {
      "path": "src/combination/merge-strategies.ts",
      "line": 143,
      "brace_depth": 5
    },
    {
      "path": "src/combination/merge-strategies.ts",
      "line": 146,
      "brace_depth": 5
    },
    {
      "path": "src/combination/merge-strategies.ts",
      "line": 147,
      "brace_depth": 5
    },
    {
      "path": "src/combination/merge-strategies.ts",
      "line": 148,
      "brace_depth": 5
    },
    {
      "path": "src/combination/merge-strategies.ts",
      "line": 149,
      "brace_depth": 5
    },
    {
      "path": "src/combination/merge-strategies.ts",
      "line": 150,
      "brace_depth": 5
    },
    {
      "path": "src/combination/merge-strategies.ts",
      "line": 151,
      "brace_depth": 5
    },
    {
      "path": "src/combination/merge-strategies.ts",
      "line": 154,
      "brace_depth": 5
    },
    {
      "path": "src/combination/merge-strategies.ts",
      "line": 155,
      "brace_depth": 5
    },
    {
      "path": "src/combination/pack-combiner.ts",
      "line": 82,
      "brace_depth": 5
    },
    {
      "path": "src/combination/pack-combiner.ts",
      "line": 83,
      "brace_depth": 5
    },
    {
      "path": "src/combination/pack-combiner.ts",
      "line": 84,
      "brace_depth": 5
    },
    {
      "path": "src/combination/pack-combiner.ts",
      "line": 85,
      "brace_depth": 5
    },
    {
      "path": "src/combination/pack-combiner.ts",
      "line": 86,
      "brace_depth": 5
    },
    {
      "path": "src/combination/pack-combiner.ts",
      "line": 105,
      "brace_depth": 5
    },
    {
      "path": "src/combination/pack-combiner.ts",
      "line": 106,
      "brace_depth": 5
    },
    {
      "path": "src/combination/pack-combiner.ts",
      "line": 107,
      "brace_depth": 5
    },
    {
      "path": "src/combination/pack-combiner.ts",
      "line": 108,
      "brace_depth": 5
    },
    {
      "path": "src/combination/pack-combiner.ts",
      "line": 109,
      "brace_depth": 5
    },
    {
      "path": "src/combination/pack-combiner.ts",
      "line": 122,
      "brace_depth": 5
    },
    {
      "path": "src/combination/pack-combiner.ts",
      "line": 123,
      "brace_depth": 5
    },
    {
      "path": "src/combination/pack-combiner.ts",
      "line": 124,
      "brace_depth": 5
    },
    {
      "path": "src/combination/pack-combiner.ts",
      "line": 196,
      "brace_depth": 5
    },
    {
      "path": "src/combination/pack-combiner.ts",
      "line": 197,
      "brace_depth": 5
    },
    {
      "path": "src/combination/pack-combiner.ts",
      "line": 198,
      "brace_depth": 6
    },
    {
      "path": "src/combination/pack-combiner.ts",
      "line": 199,
      "brace_depth": 6
    },
    {
      "path": "src/combination/pack-combiner.ts",
      "line": 200,
      "brace_depth": 5
    },
    {
      "path": "src/domains/domain-pack-loader.ts",
      "line": 47,
      "brace_depth": 5
    },
    {
      "path": "src/domains/domain-pack-loader.ts",
      "line": 48,
      "brace_depth": 5
    },
    {
      "path": "src/domains/domain-pack-loader.ts",
      "line": 49,
      "brace_depth": 5
    },
    {
      "path": "src/domains/domain-pack-loader.ts",
      "line": 219,
      "brace_depth": 5
    },
    {
      "path": "src/domains/domain-pack-loader.ts",
      "line": 220,
      "brace_depth": 5
    },
    {
      "path": "src/domains/domain-pack-loader.ts",
      "line": 222,
      "brace_depth": 5
    },
    {
      "path": "src/domains/domain-pack-loader.ts",
      "line": 223,
      "brace_depth": 5
    },
    {
      "path": "src/domains/domain-pack-loader.ts",
      "line": 224,
      "brace_depth": 5
    },
    {
      "path": "src/domains/domain-pack-loader.ts",
      "line": 225,
      "brace_depth": 5
    },
    {
      "path": "src/domains/domain-pack-loader.ts",
      "line": 226,
      "brace_depth": 5
    },
    {
      "path": "src/domains/domain-pack-loader.ts",
      "line": 227,
      "brace_depth": 5
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 125,
      "brace_depth": 5
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 126,
      "brace_depth": 5
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 129,
      "brace_depth": 5
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 130,
      "brace_depth": 5
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 131,
      "brace_depth": 5
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 132,
      "brace_depth": 5
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 145,
      "brace_depth": 5
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 146,
      "brace_depth": 5
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 149,
      "brace_depth": 5
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 150,
      "brace_depth": 5
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 151,
      "brace_depth": 5
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 152,
      "brace_depth": 5
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 200,
      "brace_depth": 5
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 201,
      "brace_depth": 6
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 202,
      "brace_depth": 6
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 203,
      "brace_depth": 6
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 204,
      "brace_depth": 6
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 205,
      "brace_depth": 6
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 206,
      "brace_depth": 5
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 212,
      "brace_depth": 5
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 213,
      "brace_depth": 6
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 214,
      "brace_depth": 6
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 215,
      "brace_depth": 6
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 216,
      "brace_depth": 6
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 217,
      "brace_depth": 6
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 218,
      "brace_depth": 5
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 356,
      "brace_depth": 5
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 357,
      "brace_depth": 5
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 360,
      "brace_depth": 5
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 361,
      "brace_depth": 5
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 362,
      "brace_depth": 5
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 363,
      "brace_depth": 5
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 364,
      "brace_depth": 5
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 365,
      "brace_depth": 5
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 366,
      "brace_depth": 5
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 367,
      "brace_depth": 5
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 397,
      "brace_depth": 5
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 398,
      "brace_depth": 5
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 399,
      "brace_depth": 5
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 400,
      "brace_depth": 6
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 401,
      "brace_depth": 6
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 402,
      "brace_depth": 5
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 403,
      "brace_depth": 5
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 404,
      "brace_depth": 6
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 405,
      "brace_depth": 6
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 406,
      "brace_depth": 6
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 407,
      "brace_depth": 6
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 408,
      "brace_depth": 6
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 409,
      "brace_depth": 6
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 410,
      "brace_depth": 6
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 411,
      "brace_depth": 6
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 412,
      "brace_depth": 5
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 435,
      "brace_depth": 5
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 436,
      "brace_depth": 5
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 439,
      "brace_depth": 5
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 440,
      "brace_depth": 5
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 441,
      "brace_depth": 5
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 442,
      "brace_depth": 5
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 443,
      "brace_depth": 5
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 444,
      "brace_depth": 5
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 445,
      "brace_depth": 5
    },
    {
      "path": "src/extraction/template-extractor.ts",
      "line": 446,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 51,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 52,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 53,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 54,
      "brace_depth": 6
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 55,
      "brace_depth": 6
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 56,
      "brace_depth": 6
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 57,
      "brace_depth": 6
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 58,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 70,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 71,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 72,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 73,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 74,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 250,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 251,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 252,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 253,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 310,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 311,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 317,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 318,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 319,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 320,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 322,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 323,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 324,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 325,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 331,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 332,
      "brace_depth": 6
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 333,
      "brace_depth": 7
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 334,
      "brace_depth": 8
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 335,
      "brace_depth": 8
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 336,
      "brace_depth": 7
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 337,
      "brace_depth": 6
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 338,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 346,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 347,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 352,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 353,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 354,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 355,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 356,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 388,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 389,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 390,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 391,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 406,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 407,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 411,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 412,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 416,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 417,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 422,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 423,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 424,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 425,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 426,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 461,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 462,
      "brace_depth": 5
    },
    {
      "path": "src/import-export/security-validator.ts",
      "line": 463,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 210,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 211,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 212,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 215,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 216,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 217,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 230,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 231,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 232,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 235,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 236,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 237,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 252,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 253,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 254,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 271,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 272,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 273,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 276,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 277,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 278,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 293,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 294,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 295,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 298,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 299,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 300,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 313,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 314,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 315,
      "brace_depth": 6
    },
    {
      "path": "src/index.ts",
      "line": 316,
      "brace_depth": 6
    },
    {
      "path": "src/index.ts",
      "line": 317,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 318,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 321,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 322,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 323,
      "brace_depth": 6
    },
    {
      "path": "src/index.ts",
      "line": 324,
      "brace_depth": 6
    },
    {
      "path": "src/index.ts",
      "line": 325,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 326,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 338,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 339,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 340,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 352,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 353,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 354,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 357,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 358,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 359,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 374,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 375,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 376,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 379,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 380,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 381,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 392,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 393,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 394,
      "brace_depth": 6
    },
    {
      "path": "src/index.ts",
      "line": 395,
      "brace_depth": 6
    },
    {
      "path": "src/index.ts",
      "line": 396,
      "brace_depth": 6
    },
    {
      "path": "src/index.ts",
      "line": 397,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 398,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 399,
      "brace_depth": 6
    },
    {
      "path": "src/index.ts",
      "line": 400,
      "brace_depth": 6
    },
    {
      "path": "src/index.ts",
      "line": 401,
      "brace_depth": 6
    },
    {
      "path": "src/index.ts",
      "line": 402,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 403,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 429,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 430,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 451,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 452,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 453,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 456,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 457,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 458,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 459,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 460,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 461,
      "brace_depth": 6
    },
    {
      "path": "src/index.ts",
      "line": 462,
      "brace_depth": 6
    },
    {
      "path": "src/index.ts",
      "line": 463,
      "brace_depth": 6
    },
    {
      "path": "src/index.ts",
      "line": 464,
      "brace_depth": 6
    },
    {
      "path": "src/index.ts",
      "line": 465,
      "brace_depth": 6
    },
    {
      "path": "src/index.ts",
      "line": 466,
      "brace_depth": 6
    },
    {
      "path": "src/index.ts",
      "line": 467,
      "brace_depth": 6
    },
    {
      "path": "src/index.ts",
      "line": 468,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 489,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 490,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 491,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 494,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 495,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 496,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 497,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 498,
      "brace_depth": 6
    },
    {
      "path": "src/index.ts",
      "line": 499,
      "brace_depth": 6
    },
    {
      "path": "src/index.ts",
      "line": 500,
      "brace_depth": 6
    },
    {
      "path": "src/index.ts",
      "line": 501,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 502,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 503,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 524,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 525,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 526,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 529,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 530,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 531,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 532,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 533,
      "brace_depth": 6
    },
    {
      "path": "src/index.ts",
      "line": 534,
      "brace_depth": 6
    },
    {
      "path": "src/index.ts",
      "line": 535,
      "brace_depth": 6
    },
    {
      "path": "src/index.ts",
      "line": 536,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 537,
      "brace_depth": 5
    },
    {
      "path": "src/index.ts",
      "line": 538,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/context-propagator.ts",
      "line": 269,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/context-propagator.ts",
      "line": 270,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 140,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 141,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 142,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 143,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 144,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 145,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 154,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 155,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 169,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 170,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 252,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 253,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 254,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 255,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 256,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 257,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 258,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 259,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 260,
      "brace_depth": 7
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 261,
      "brace_depth": 7
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 262,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 263,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 264,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 265,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 266,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 267,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 268,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 280,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 281,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 340,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 341,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 342,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 343,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 344,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 345,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 346,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 347,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 386,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 387,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 388,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 389,
      "brace_depth": 7
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 390,
      "brace_depth": 7
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 391,
      "brace_depth": 7
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 392,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 393,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 396,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 397,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-analyzer.ts",
      "line": 398,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-inferrer.ts",
      "line": 113,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-inferrer.ts",
      "line": 114,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-inferrer.ts",
      "line": 115,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-inferrer.ts",
      "line": 116,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-inferrer.ts",
      "line": 117,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/dependency-inferrer.ts",
      "line": 118,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/dependency-inferrer.ts",
      "line": 119,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/dependency-inferrer.ts",
      "line": 120,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/dependency-inferrer.ts",
      "line": 121,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/dependency-inferrer.ts",
      "line": 122,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/dependency-inferrer.ts",
      "line": 123,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-inferrer.ts",
      "line": 124,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-inferrer.ts",
      "line": 131,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-inferrer.ts",
      "line": 132,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/dependency-inferrer.ts",
      "line": 133,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/dependency-inferrer.ts",
      "line": 134,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/dependency-inferrer.ts",
      "line": 135,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/dependency-inferrer.ts",
      "line": 136,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/dependency-inferrer.ts",
      "line": 137,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/dependency-inferrer.ts",
      "line": 138,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-inferrer.ts",
      "line": 139,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-inferrer.ts",
      "line": 193,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-inferrer.ts",
      "line": 194,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/dependency-inferrer.ts",
      "line": 195,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/dependency-inferrer.ts",
      "line": 196,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/dependency-inferrer.ts",
      "line": 197,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/dependency-inferrer.ts",
      "line": 198,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/dependency-inferrer.ts",
      "line": 199,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/dependency-inferrer.ts",
      "line": 200,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-inferrer.ts",
      "line": 236,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-inferrer.ts",
      "line": 237,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-inferrer.ts",
      "line": 238,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-inferrer.ts",
      "line": 239,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-inferrer.ts",
      "line": 240,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-inferrer.ts",
      "line": 241,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-inferrer.ts",
      "line": 248,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-inferrer.ts",
      "line": 249,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-inferrer.ts",
      "line": 250,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-inferrer.ts",
      "line": 251,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-inferrer.ts",
      "line": 252,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/dependency-inferrer.ts",
      "line": 253,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/graph-validator.ts",
      "line": 45,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/graph-validator.ts",
      "line": 46,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/graph-validator.ts",
      "line": 47,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/graph-validator.ts",
      "line": 71,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/graph-validator.ts",
      "line": 72,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/graph-validator.ts",
      "line": 104,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/graph-validator.ts",
      "line": 105,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/graph-validator.ts",
      "line": 106,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/graph-validator.ts",
      "line": 107,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/graph-validator.ts",
      "line": 108,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/graph-validator.ts",
      "line": 109,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/graph-validator.ts",
      "line": 110,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/graph-validator.ts",
      "line": 111,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/graph-validator.ts",
      "line": 112,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/graph-validator.ts",
      "line": 113,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/graph-validator.ts",
      "line": 114,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/graph-validator.ts",
      "line": 115,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/graph-validator.ts",
      "line": 116,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/graph-validator.ts",
      "line": 117,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/graph-validator.ts",
      "line": 181,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/graph-validator.ts",
      "line": 182,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/graph-validator.ts",
      "line": 186,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/graph-validator.ts",
      "line": 187,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/graph-validator.ts",
      "line": 191,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/graph-validator.ts",
      "line": 192,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/graph-validator.ts",
      "line": 221,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/graph-validator.ts",
      "line": 222,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/graph-validator.ts",
      "line": 223,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/graph-validator.ts",
      "line": 224,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/graph-validator.ts",
      "line": 225,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/graph-validator.ts",
      "line": 226,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/graph-validator.ts",
      "line": 227,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/graph-validator.ts",
      "line": 228,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/graph-validator.ts",
      "line": 229,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/graph-validator.ts",
      "line": 230,
      "brace_depth": 6
    },
    {
      "path": "src/intelligence/graph-validator.ts",
      "line": 231,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/graph-validator.ts",
      "line": 239,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/graph-validator.ts",
      "line": 240,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/graph-validator.ts",
      "line": 241,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/graph-validator.ts",
      "line": 242,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/graph-validator.ts",
      "line": 245,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/graph-validator.ts",
      "line": 246,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/mission-splitter.ts",
      "line": 208,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/mission-splitter.ts",
      "line": 209,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/mission-splitter.ts",
      "line": 210,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/mission-splitter.ts",
      "line": 211,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/mission-splitter.ts",
      "line": 212,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/mission-splitter.ts",
      "line": 293,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/mission-splitter.ts",
      "line": 294,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/mission-splitter.ts",
      "line": 295,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/mission-splitter.ts",
      "line": 296,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/mission-splitter.ts",
      "line": 381,
      "brace_depth": 5
    },
    {
      "path": "src/intelligence/mission-splitter.ts",
      "line": 382,
      "brace_depth": 5
    },
    {
      "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 201,
      "brace_depth": 5
    },
    {
      "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 202,
      "brace_depth": 5
    },
    {
      "path": "src/quality/analyzers/clarity-analyzer.ts",
      "line": 192,
      "brace_depth": 5
    },
    {
      "path": "src/quality/analyzers/clarity-analyzer.ts",
      "line": 193,
      "brace_depth": 5
    },
    {
      "path": "src/quality/analyzers/clarity-analyzer.ts",
      "line": 194,
      "brace_depth": 5
    },
    {
      "path": "src/quality/analyzers/clarity-analyzer.ts",
      "line": 195,
      "brace_depth": 6
    },
    {
      "path": "src/quality/analyzers/clarity-analyzer.ts",
      "line": 196,
      "brace_depth": 6
    },
    {
      "path": "src/quality/analyzers/clarity-analyzer.ts",
      "line": 197,
      "brace_depth": 5
    },
    {
      "path": "src/quality/analyzers/clarity-analyzer.ts",
      "line": 198,
      "brace_depth": 5
    },
    {
      "path": "src/quality/analyzers/clarity-analyzer.ts",
      "line": 199,
      "brace_depth": 6
    },
    {
      "path": "src/quality/analyzers/clarity-analyzer.ts",
      "line": 200,
      "brace_depth": 6
    },
    {
      "path": "src/quality/analyzers/clarity-analyzer.ts",
      "line": 201,
      "brace_depth": 5
    },
    {
      "path": "src/quality/analyzers/completeness-analyzer.ts",
      "line": 88,
      "brace_depth": 5
    },
    {
      "path": "src/quality/analyzers/completeness-analyzer.ts",
      "line": 89,
      "brace_depth": 5
    },
    {
      "path": "src/quality/analyzers/completeness-analyzer.ts",
      "line": 90,
      "brace_depth": 5
    },
    {
      "path": "src/quality/analyzers/completeness-analyzer.ts",
      "line": 91,
      "brace_depth": 5
    },
    {
      "path": "src/quality/analyzers/completeness-analyzer.ts",
      "line": 92,
      "brace_depth": 5
    },
    {
      "path": "src/quality/analyzers/completeness-analyzer.ts",
      "line": 93,
      "brace_depth": 5
    },
    {
      "path": "src/quality/improvement-engine.ts",
      "line": 73,
      "brace_depth": 5
    },
    {
      "path": "src/quality/improvement-engine.ts",
      "line": 74,
      "brace_depth": 5
    },
    {
      "path": "src/quality/improvement-engine.ts",
      "line": 75,
      "brace_depth": 5
    },
    {
      "path": "src/quality/improvement-engine.ts",
      "line": 76,
      "brace_depth": 5
    },
    {
      "path": "src/quality/improvement-engine.ts",
      "line": 77,
      "brace_depth": 5
    },
    {
      "path": "src/quality/improvement-engine.ts",
      "line": 78,
      "brace_depth": 5
    },
    {
      "path": "src/registry/registry-parser.ts",
      "line": 25,
      "brace_depth": 5
    },
    {
      "path": "src/registry/registry-parser.ts",
      "line": 26,
      "brace_depth": 5
    },
    {
      "path": "src/registry/registry-parser.ts",
      "line": 27,
      "brace_depth": 5
    },
    {
      "path": "src/registry/registry-parser.ts",
      "line": 28,
      "brace_depth": 5
    },
    {
      "path": "src/registry/registry-parser.ts",
      "line": 29,
      "brace_depth": 5
    },
    {
      "path": "src/registry/registry-parser.ts",
      "line": 30,
      "brace_depth": 5
    },
    {
      "path": "src/registry/registry-parser.ts",
      "line": 31,
      "brace_depth": 5
    },
    {
      "path": "src/schemas/generic-mission.ts",
      "line": 90,
      "brace_depth": 5
    },
    {
      "path": "src/schemas/generic-mission.ts",
      "line": 91,
      "brace_depth": 5
    },
    {
      "path": "src/schemas/generic-mission.ts",
      "line": 92,
      "brace_depth": 5
    },
    {
      "path": "src/schemas/generic-mission.ts",
      "line": 94,
      "brace_depth": 5
    },
    {
      "path": "src/schemas/generic-mission.ts",
      "line": 95,
      "brace_depth": 5
    },
    {
      "path": "src/schemas/generic-mission.ts",
      "line": 96,
      "brace_depth": 6
    },
    {
      "path": "src/schemas/generic-mission.ts",
      "line": 97,
      "brace_depth": 6
    },
    {
      "path": "src/schemas/generic-mission.ts",
      "line": 98,
      "brace_depth": 5
    },
    {
      "path": "src/schemas/generic-mission.ts",
      "line": 99,
      "brace_depth": 5
    },
    {
      "path": "src/schemas/generic-mission.ts",
      "line": 101,
      "brace_depth": 5
    },
    {
      "path": "src/schemas/generic-mission.ts",
      "line": 102,
      "brace_depth": 5
    },
    {
      "path": "src/schemas/generic-mission.ts",
      "line": 103,
      "brace_depth": 6
    },
    {
      "path": "src/schemas/generic-mission.ts",
      "line": 104,
      "brace_depth": 6
    },
    {
      "path": "src/schemas/generic-mission.ts",
      "line": 105,
      "brace_depth": 5
    },
    {
      "path": "src/schemas/generic-mission.ts",
      "line": 106,
      "brace_depth": 5
    },
    {
      "path": "src/tools/analyze-dependencies.ts",
      "line": 139,
      "brace_depth": 5
    },
    {
      "path": "src/tools/analyze-dependencies.ts",
      "line": 140,
      "brace_depth": 5
    },
    {
      "path": "src/tools/analyze-dependencies.ts",
      "line": 144,
      "brace_depth": 5
    },
    {
      "path": "src/tools/analyze-dependencies.ts",
      "line": 145,
      "brace_depth": 5
    },
    {
      "path": "src/tools/combine-packs.ts",
      "line": 143,
      "brace_depth": 5
    },
    {
      "path": "src/tools/combine-packs.ts",
      "line": 144,
      "brace_depth": 5
    },
    {
      "path": "src/tools/combine-packs.ts",
      "line": 145,
      "brace_depth": 5
    },
    {
      "path": "src/tools/combine-packs.ts",
      "line": 150,
      "brace_depth": 5
    },
    {
      "path": "src/tools/combine-packs.ts",
      "line": 151,
      "brace_depth": 6
    },
    {
      "path": "src/tools/combine-packs.ts",
      "line": 152,
      "brace_depth": 6
    },
    {
      "path": "src/tools/combine-packs.ts",
      "line": 153,
      "brace_depth": 6
    },
    {
      "path": "src/tools/combine-packs.ts",
      "line": 154,
      "brace_depth": 6
    },
    {
      "path": "src/tools/combine-packs.ts",
      "line": 155,
      "brace_depth": 6
    },
    {
      "path": "src/tools/combine-packs.ts",
      "line": 156,
      "brace_depth": 5
    },
    {
      "path": "src/tools/combine-packs.ts",
      "line": 183,
      "brace_depth": 5
    },
    {
      "path": "src/tools/combine-packs.ts",
      "line": 184,
      "brace_depth": 5
    },
    {
      "path": "src/tools/combine-packs.ts",
      "line": 185,
      "brace_depth": 5
    },
    {
      "path": "src/tools/combine-packs.ts",
      "line": 186,
      "brace_depth": 5
    },
    {
      "path": "src/tools/combine-packs.ts",
      "line": 203,
      "brace_depth": 5
    },
    {
      "path": "src/tools/combine-packs.ts",
      "line": 204,
      "brace_depth": 5
    },
    {
      "path": "src/tools/combine-packs.ts",
      "line": 205,
      "brace_depth": 5
    },
    {
      "path": "src/tools/combine-packs.ts",
      "line": 261,
      "brace_depth": 5
    },
    {
      "path": "src/tools/combine-packs.ts",
      "line": 262,
      "brace_depth": 5
    },
    {
      "path": "src/tools/combine-packs.ts",
      "line": 263,
      "brace_depth": 5
    },
    {
      "path": "src/tools/create-mission.ts",
      "line": 270,
      "brace_depth": 5
    },
    {
      "path": "src/tools/create-mission.ts",
      "line": 271,
      "brace_depth": 5
    },
    {
      "path": "src/tools/create-mission.ts",
      "line": 272,
      "brace_depth": 5
    },
    {
      "path": "src/tools/create-mission.ts",
      "line": 273,
      "brace_depth": 5
    },
    {
      "path": "src/tools/export-template.ts",
      "line": 178,
      "brace_depth": 5
    },
    {
      "path": "src/tools/export-template.ts",
      "line": 179,
      "brace_depth": 6
    },
    {
      "path": "src/tools/export-template.ts",
      "line": 180,
      "brace_depth": 6
    },
    {
      "path": "src/tools/export-template.ts",
      "line": 181,
      "brace_depth": 6
    },
    {
      "path": "src/tools/export-template.ts",
      "line": 182,
      "brace_depth": 5
    },
    {
      "path": "src/tools/export-template.ts",
      "line": 183,
      "brace_depth": 6
    },
    {
      "path": "src/tools/export-template.ts",
      "line": 184,
      "brace_depth": 6
    },
    {
      "path": "src/tools/export-template.ts",
      "line": 185,
      "brace_depth": 6
    },
    {
      "path": "src/tools/export-template.ts",
      "line": 186,
      "brace_depth": 5
    },
    {
      "path": "src/tools/export-template.ts",
      "line": 187,
      "brace_depth": 6
    },
    {
      "path": "src/tools/export-template.ts",
      "line": 188,
      "brace_depth": 6
    },
    {
      "path": "src/tools/export-template.ts",
      "line": 189,
      "brace_depth": 6
    },
    {
      "path": "src/tools/export-template.ts",
      "line": 190,
      "brace_depth": 5
    },
    {
      "path": "src/tools/export-template.ts",
      "line": 191,
      "brace_depth": 6
    },
    {
      "path": "src/tools/export-template.ts",
      "line": 192,
      "brace_depth": 6
    },
    {
      "path": "src/tools/export-template.ts",
      "line": 193,
      "brace_depth": 6
    },
    {
      "path": "src/tools/export-template.ts",
      "line": 194,
      "brace_depth": 5
    },
    {
      "path": "src/tools/export-template.ts",
      "line": 195,
      "brace_depth": 6
    },
    {
      "path": "src/tools/export-template.ts",
      "line": 196,
      "brace_depth": 6
    },
    {
      "path": "src/tools/export-template.ts",
      "line": 197,
      "brace_depth": 6
    },
    {
      "path": "src/tools/export-template.ts",
      "line": 198,
      "brace_depth": 5
    },
    {
      "path": "src/tools/optimize-tokens.ts",
      "line": 125,
      "brace_depth": 5
    },
    {
      "path": "src/tools/optimize-tokens.ts",
      "line": 126,
      "brace_depth": 5
    },
    {
      "path": "src/tools/optimize-tokens.ts",
      "line": 127,
      "brace_depth": 5
    },
    {
      "path": "src/tools/optimize-tokens.ts",
      "line": 152,
      "brace_depth": 5
    },
    {
      "path": "src/tools/optimize-tokens.ts",
      "line": 153,
      "brace_depth": 5
    },
    {
      "path": "src/tools/optimize-tokens.ts",
      "line": 154,
      "brace_depth": 5
    },
    {
      "path": "src/tools/optimize-tokens.ts",
      "line": 155,
      "brace_depth": 5
    },
    {
      "path": "src/tools/optimize-tokens.ts",
      "line": 156,
      "brace_depth": 5
    },
    {
      "path": "src/tools/optimize-tokens.ts",
      "line": 157,
      "brace_depth": 5
    },
    {
      "path": "src/tools/optimize-tokens.ts",
      "line": 160,
      "brace_depth": 5
    },
    {
      "path": "src/tools/optimize-tokens.ts",
      "line": 161,
      "brace_depth": 5
    },
    {
      "path": "src/tools/optimize-tokens.ts",
      "line": 162,
      "brace_depth": 6
    },
    {
      "path": "src/tools/optimize-tokens.ts",
      "line": 163,
      "brace_depth": 6
    },
    {
      "path": "src/tools/optimize-tokens.ts",
      "line": 164,
      "brace_depth": 6
    },
    {
      "path": "src/tools/optimize-tokens.ts",
      "line": 165,
      "brace_depth": 5
    },
    {
      "path": "src/tools/optimize-tokens.ts",
      "line": 166,
      "brace_depth": 6
    },
    {
      "path": "src/tools/optimize-tokens.ts",
      "line": 167,
      "brace_depth": 6
    },
    {
      "path": "src/tools/optimize-tokens.ts",
      "line": 168,
      "brace_depth": 6
    },
    {
      "path": "src/tools/optimize-tokens.ts",
      "line": 169,
      "brace_depth": 5
    },
    {
      "path": "src/tools/optimize-tokens.ts",
      "line": 170,
      "brace_depth": 5
    },
    {
      "path": "src/tools/optimize-tokens.ts",
      "line": 171,
      "brace_depth": 5
    },
    {
      "path": "src/tools/split-mission.ts",
      "line": 160,
      "brace_depth": 5
    },
    {
      "path": "src/tools/split-mission.ts",
      "line": 161,
      "brace_depth": 5
    },
    {
      "path": "src/tools/split-mission.ts",
      "line": 162,
      "brace_depth": 5
    },
    {
      "path": "src/tools/split-mission.ts",
      "line": 251,
      "brace_depth": 5
    },
    {
      "path": "src/tools/split-mission.ts",
      "line": 252,
      "brace_depth": 5
    },
    {
      "path": "src/tools/suggest-splits.ts",
      "line": 207,
      "brace_depth": 5
    },
    {
      "path": "src/tools/suggest-splits.ts",
      "line": 208,
      "brace_depth": 5
    },
    {
      "path": "src/tools/version-template.ts",
      "line": 198,
      "brace_depth": 5
    },
    {
      "path": "src/tools/version-template.ts",
      "line": 199,
      "brace_depth": 5
    },
    {
      "path": "src/tools/version-template.ts",
      "line": 200,
      "brace_depth": 5
    },
    {
      "path": "src/tools/version-template.ts",
      "line": 201,
      "brace_depth": 5
    },
    {
      "path": "src/tools/version-template.ts",
      "line": 202,
      "brace_depth": 5
    },
    {
      "path": "src/tools/version-template.ts",
      "line": 203,
      "brace_depth": 5
    },
    {
      "path": "src/tools/version-template.ts",
      "line": 204,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 151,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 152,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 153,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 154,
      "brace_depth": 6
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 155,
      "brace_depth": 6
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 156,
      "brace_depth": 6
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 157,
      "brace_depth": 6
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 158,
      "brace_depth": 6
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 159,
      "brace_depth": 7
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 160,
      "brace_depth": 7
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 161,
      "brace_depth": 7
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 162,
      "brace_depth": 7
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 163,
      "brace_depth": 7
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 164,
      "brace_depth": 6
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 165,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 166,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 167,
      "brace_depth": 6
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 168,
      "brace_depth": 6
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 169,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 170,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 171,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 172,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 173,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 174,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 175,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 176,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 177,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 178,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 179,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 180,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 181,
      "brace_depth": 6
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 182,
      "brace_depth": 7
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 183,
      "brace_depth": 7
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 184,
      "brace_depth": 7
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 185,
      "brace_depth": 7
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 186,
      "brace_depth": 6
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 187,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 416,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 417,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 418,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 419,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 422,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 423,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 424,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/migration-engine.ts",
      "line": 425,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/version-manager.ts",
      "line": 122,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/version-manager.ts",
      "line": 123,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/version-manager.ts",
      "line": 127,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/version-manager.ts",
      "line": 128,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/version-manager.ts",
      "line": 366,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/version-manager.ts",
      "line": 367,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/version-manager.ts",
      "line": 368,
      "brace_depth": 6
    },
    {
      "path": "src/versioning/version-manager.ts",
      "line": 369,
      "brace_depth": 6
    },
    {
      "path": "src/versioning/version-manager.ts",
      "line": 370,
      "brace_depth": 6
    },
    {
      "path": "src/versioning/version-manager.ts",
      "line": 371,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/version-manager.ts",
      "line": 381,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/version-manager.ts",
      "line": 382,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/version-manager.ts",
      "line": 388,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/version-manager.ts",
      "line": 389,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/version-manager.ts",
      "line": 390,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/version-manager.ts",
      "line": 398,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/version-manager.ts",
      "line": 399,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/version-manager.ts",
      "line": 400,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/version-manager.ts",
      "line": 401,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/version-manager.ts",
      "line": 405,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/version-manager.ts",
      "line": 406,
      "brace_depth": 5
    },
    {
      "path": "src/versioning/version-manager.ts",
      "line": 407,
      "brace_depth": 6
    },
    {
      "path": "src/versioning/version-manager.ts",
      "line": 408,
      "brace_depth": 6
    },
    {
      "path": "src/versioning/version-manager.ts",
      "line": 409,
      "brace_depth": 6
    },
    {
      "path": "src/versioning/version-manager.ts",
      "line": 410,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 191,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 192,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 227,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 228,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 259,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 260,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 261,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 262,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 263,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 264,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 266,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 267,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 268,
      "brace_depth": 6
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 269,
      "brace_depth": 6
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 270,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 272,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 273,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 286,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 287,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 288,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 289,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 290,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 291,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 293,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 294,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 307,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 308,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 309,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 310,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 311,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 312,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 326,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 327,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 328,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 329,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 330,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 331,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 333,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 334,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 347,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 348,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 349,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 350,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 351,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 352,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 354,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 355,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 629,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 630,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 631,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 632,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 633,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 634,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 649,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 650,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 651,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 652,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 653,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 654,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 787,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 788,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 861,
      "brace_depth": 5
    },
    {
      "path": "tests/domains/domain-pack-loader.test.ts",
      "line": 862,
      "brace_depth": 5
    },
    {
      "path": "tests/extraction/template-extractor.test.ts",
      "line": 277,
      "brace_depth": 5
    },
    {
      "path": "tests/extraction/template-extractor.test.ts",
      "line": 466,
      "brace_depth": 5
    },
    {
      "path": "tests/extraction/template-extractor.test.ts",
      "line": 467,
      "brace_depth": 5
    },
    {
      "path": "tests/extraction/template-extractor.test.ts",
      "line": 468,
      "brace_depth": 5
    },
    {
      "path": "tests/extraction/template-extractor.test.ts",
      "line": 469,
      "brace_depth": 5
    },
    {
      "path": "tests/extraction/template-extractor.test.ts",
      "line": 470,
      "brace_depth": 5
    },
    {
      "path": "tests/import-export/security-validator.test.ts",
      "line": 36,
      "brace_depth": 5
    },
    {
      "path": "tests/import-export/security-validator.test.ts",
      "line": 37,
      "brace_depth": 5
    },
    {
      "path": "tests/import-export/security-validator.test.ts",
      "line": 38,
      "brace_depth": 5
    },
    {
      "path": "tests/import-export/security-validator.test.ts",
      "line": 39,
      "brace_depth": 5
    },
    {
      "path": "tests/import-export/security-validator.test.ts",
      "line": 45,
      "brace_depth": 5
    },
    {
      "path": "tests/import-export/security-validator.test.ts",
      "line": 46,
      "brace_depth": 5
    },
    {
      "path": "tests/import-export/security-validator.test.ts",
      "line": 47,
      "brace_depth": 5
    },
    {
      "path": "tests/import-export/security-validator.test.ts",
      "line": 48,
      "brace_depth": 6
    },
    {
      "path": "tests/import-export/security-validator.test.ts",
      "line": 49,
      "brace_depth": 6
    },
    {
      "path": "tests/import-export/security-validator.test.ts",
      "line": 50,
      "brace_depth": 6
    },
    {
      "path": "tests/import-export/security-validator.test.ts",
      "line": 51,
      "brace_depth": 5
    },
    {
      "path": "tests/import-export/security-validator.test.ts",
      "line": 52,
      "brace_depth": 5
    },
    {
      "path": "tests/import-export/template-exporter.test.ts",
      "line": 49,
      "brace_depth": 5
    },
    {
      "path": "tests/import-export/template-exporter.test.ts",
      "line": 50,
      "brace_depth": 5
    },
    {
      "path": "tests/import-export/template-exporter.test.ts",
      "line": 51,
      "brace_depth": 5
    },
    {
      "path": "tests/import-export/template-exporter.test.ts",
      "line": 52,
      "brace_depth": 5
    },
    {
      "path": "tests/import-export/template-exporter.test.ts",
      "line": 58,
      "brace_depth": 5
    },
    {
      "path": "tests/import-export/template-exporter.test.ts",
      "line": 59,
      "brace_depth": 5
    },
    {
      "path": "tests/import-export/template-exporter.test.ts",
      "line": 60,
      "brace_depth": 5
    },
    {
      "path": "tests/import-export/template-exporter.test.ts",
      "line": 61,
      "brace_depth": 6
    },
    {
      "path": "tests/import-export/template-exporter.test.ts",
      "line": 62,
      "brace_depth": 6
    },
    {
      "path": "tests/import-export/template-exporter.test.ts",
      "line": 63,
      "brace_depth": 6
    },
    {
      "path": "tests/import-export/template-exporter.test.ts",
      "line": 64,
      "brace_depth": 5
    },
    {
      "path": "tests/import-export/template-exporter.test.ts",
      "line": 65,
      "brace_depth": 5
    },
    {
      "path": "tests/import-export/template-exporter.test.ts",
      "line": 236,
      "brace_depth": 5
    },
    {
      "path": "tests/import-export/template-exporter.test.ts",
      "line": 237,
      "brace_depth": 5
    },
    {
      "path": "tests/import-export/template-exporter.test.ts",
      "line": 238,
      "brace_depth": 5
    },
    {
      "path": "tests/import-export/template-exporter.test.ts",
      "line": 393,
      "brace_depth": 5
    },
    {
      "path": "tests/import-export/template-exporter.test.ts",
      "line": 394,
      "brace_depth": 5
    },
    {
      "path": "tests/import-export/template-exporter.test.ts",
      "line": 395,
      "brace_depth": 5
    },
    {
      "path": "tests/import-export/template-importer.coverage.test.ts",
      "line": 15,
      "brace_depth": 5
    },
    {
      "path": "tests/import-export/template-importer.coverage.test.ts",
      "line": 16,
      "brace_depth": 5
    },
    {
      "path": "tests/import-export/template-importer.coverage.test.ts",
      "line": 17,
      "brace_depth": 5
    },
    {
      "path": "tests/import-export/template-importer.coverage.test.ts",
      "line": 18,
      "brace_depth": 5
    },
    {
      "path": "tests/import-export/template-importer.coverage.test.ts",
      "line": 78,
      "brace_depth": 5
    },
    {
      "path": "tests/import-export/template-importer.coverage.test.ts",
      "line": 79,
      "brace_depth": 5
    },
    {
      "path": "tests/import-export/template-importer.coverage.test.ts",
      "line": 80,
      "brace_depth": 5
    },
    {
      "path": "tests/import-export/template-importer.coverage.test.ts",
      "line": 81,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/phase2-flow.test.ts",
      "line": 268,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/phase2-flow.test.ts",
      "line": 269,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/phase2-flow.test.ts",
      "line": 270,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/phase2-flow.test.ts",
      "line": 271,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/phase2-flow.test.ts",
      "line": 272,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/phase2-flow.test.ts",
      "line": 273,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/phase2-flow.test.ts",
      "line": 338,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/phase2-flow.test.ts",
      "line": 339,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/phase2-flow.test.ts",
      "line": 340,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/phase2-flow.test.ts",
      "line": 363,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/phase2-flow.test.ts",
      "line": 364,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/phase2-flow.test.ts",
      "line": 365,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 486,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 487,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 488,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 493,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 494,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 495,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 496,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/quality-scoring.test.ts",
      "line": 83,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/quality-scoring.test.ts",
      "line": 84,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/quality-scoring.test.ts",
      "line": 85,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/quality-scoring.test.ts",
      "line": 86,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/quality-scoring.test.ts",
      "line": 87,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/quality-scoring.test.ts",
      "line": 88,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/quality-scoring.test.ts",
      "line": 119,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/quality-scoring.test.ts",
      "line": 120,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/quality-scoring.test.ts",
      "line": 121,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/quality-scoring.test.ts",
      "line": 122,
      "brace_depth": 6
    },
    {
      "path": "tests/integration/quality-scoring.test.ts",
      "line": 123,
      "brace_depth": 6
    },
    {
      "path": "tests/integration/quality-scoring.test.ts",
      "line": 124,
      "brace_depth": 6
    },
    {
      "path": "tests/integration/quality-scoring.test.ts",
      "line": 125,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/quality-scoring.test.ts",
      "line": 126,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/quality-scoring.test.ts",
      "line": 205,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/quality-scoring.test.ts",
      "line": 206,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/quality-scoring.test.ts",
      "line": 207,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/quality-scoring.test.ts",
      "line": 208,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/quality-scoring.test.ts",
      "line": 209,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/quality-scoring.test.ts",
      "line": 210,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/quality-scoring.test.ts",
      "line": 211,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/template-runtime-store.test.ts",
      "line": 97,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/template-runtime-store.test.ts",
      "line": 98,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/template-runtime-store.test.ts",
      "line": 99,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/template-runtime-store.test.ts",
      "line": 100,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/template-runtime-store.test.ts",
      "line": 101,
      "brace_depth": 5
    },
    {
      "path": "tests/integration/template-runtime-store.test.ts",
      "line": 102,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/complexity-scorer.test.ts",
      "line": 71,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/complexity-scorer.test.ts",
      "line": 72,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/complexity-scorer.test.ts",
      "line": 73,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/complexity-scorer.test.ts",
      "line": 74,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/complexity-scorer.test.ts",
      "line": 226,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/complexity-scorer.test.ts",
      "line": 227,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/complexity-scorer.test.ts",
      "line": 276,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/complexity-scorer.test.ts",
      "line": 277,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/complexity-scorer.test.ts",
      "line": 278,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/complexity-scorer.test.ts",
      "line": 279,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/complexity-scorer.test.ts",
      "line": 288,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/complexity-scorer.test.ts",
      "line": 289,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/complexity-scorer.test.ts",
      "line": 318,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/complexity-scorer.test.ts",
      "line": 319,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/complexity-scorer.test.ts",
      "line": 320,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/complexity-scorer.test.ts",
      "line": 321,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/complexity-scorer.test.ts",
      "line": 370,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/complexity-scorer.test.ts",
      "line": 371,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/complexity-scorer.test.ts",
      "line": 410,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/complexity-scorer.test.ts",
      "line": 411,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/complexity-scorer.test.ts",
      "line": 412,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 21,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 22,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 23,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 24,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 67,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 68,
      "brace_depth": 6
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 69,
      "brace_depth": 6
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 70,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 76,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 77,
      "brace_depth": 6
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 78,
      "brace_depth": 6
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 79,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 85,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 86,
      "brace_depth": 6
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 87,
      "brace_depth": 6
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 88,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 105,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 106,
      "brace_depth": 6
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 107,
      "brace_depth": 6
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 108,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 114,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 115,
      "brace_depth": 6
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 116,
      "brace_depth": 6
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 117,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 146,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 147,
      "brace_depth": 6
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 148,
      "brace_depth": 6
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 149,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 155,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 156,
      "brace_depth": 6
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 157,
      "brace_depth": 6
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 158,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 164,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 165,
      "brace_depth": 6
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 166,
      "brace_depth": 6
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 167,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 192,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 193,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 194,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 195,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 216,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 217,
      "brace_depth": 6
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 218,
      "brace_depth": 6
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 219,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 258,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 259,
      "brace_depth": 6
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 260,
      "brace_depth": 6
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 261,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 267,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 268,
      "brace_depth": 6
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 269,
      "brace_depth": 6
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 270,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 287,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 288,
      "brace_depth": 6
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 289,
      "brace_depth": 6
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 290,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 296,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 297,
      "brace_depth": 6
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 298,
      "brace_depth": 6
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 299,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 305,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 306,
      "brace_depth": 6
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 307,
      "brace_depth": 6
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 308,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 314,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 315,
      "brace_depth": 6
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 316,
      "brace_depth": 6
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 317,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 337,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 338,
      "brace_depth": 6
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 339,
      "brace_depth": 6
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 340,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 357,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 358,
      "brace_depth": 6
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 359,
      "brace_depth": 6
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 360,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 366,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 367,
      "brace_depth": 6
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 368,
      "brace_depth": 6
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 369,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 375,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 376,
      "brace_depth": 6
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 377,
      "brace_depth": 6
    },
    {
      "path": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 378,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/mission-splitter.test.ts",
      "line": 53,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/mission-splitter.test.ts",
      "line": 54,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/mission-splitter.test.ts",
      "line": 55,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/mission-splitter.test.ts",
      "line": 202,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/mission-splitter.test.ts",
      "line": 203,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/mission-splitter.test.ts",
      "line": 262,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/mission-splitter.test.ts",
      "line": 263,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/mission-splitter.test.ts",
      "line": 264,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/mission-splitter.test.ts",
      "line": 265,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/mission-splitter.test.ts",
      "line": 266,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/mission-splitter.test.ts",
      "line": 267,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/mission-splitter.test.ts",
      "line": 268,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/mission-splitter.test.ts",
      "line": 269,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/mission-splitter.test.ts",
      "line": 544,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/mission-splitter.test.ts",
      "line": 545,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/mission-splitter.test.ts",
      "line": 546,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/token-counters.api.test.ts",
      "line": 29,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/token-counters.api.test.ts",
      "line": 30,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/token-counters.api.test.ts",
      "line": 79,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/token-counters.api.test.ts",
      "line": 80,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/token-validation.test.ts",
      "line": 142,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/token-validation.test.ts",
      "line": 143,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/token-validation.test.ts",
      "line": 144,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/token-validation.test.ts",
      "line": 145,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/token-validation.test.ts",
      "line": 147,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/token-validation.test.ts",
      "line": 148,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/token-validation.test.ts",
      "line": 149,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/token-validation.test.ts",
      "line": 180,
      "brace_depth": 5
    },
    {
      "path": "tests/intelligence/token-validation.test.ts",
      "line": 181,
      "brace_depth": 5
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 222,
      "brace_depth": 5
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 223,
      "brace_depth": 5
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 224,
      "brace_depth": 5
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 241,
      "brace_depth": 5
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 242,
      "brace_depth": 5
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 243,
      "brace_depth": 5
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 261,
      "brace_depth": 5
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 262,
      "brace_depth": 5
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 263,
      "brace_depth": 5
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 283,
      "brace_depth": 5
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 284,
      "brace_depth": 6
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 285,
      "brace_depth": 6
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 286,
      "brace_depth": 6
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 287,
      "brace_depth": 7
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 288,
      "brace_depth": 7
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 289,
      "brace_depth": 7
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 290,
      "brace_depth": 6
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 291,
      "brace_depth": 5
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 311,
      "brace_depth": 5
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 312,
      "brace_depth": 6
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 313,
      "brace_depth": 6
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 314,
      "brace_depth": 7
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 315,
      "brace_depth": 7
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 316,
      "brace_depth": 7
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 317,
      "brace_depth": 8
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 318,
      "brace_depth": 8
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 319,
      "brace_depth": 8
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 320,
      "brace_depth": 7
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 321,
      "brace_depth": 6
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 322,
      "brace_depth": 5
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 338,
      "brace_depth": 5
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 339,
      "brace_depth": 6
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 340,
      "brace_depth": 6
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 341,
      "brace_depth": 6
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 342,
      "brace_depth": 5
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 358,
      "brace_depth": 5
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 359,
      "brace_depth": 6
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 360,
      "brace_depth": 6
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 361,
      "brace_depth": 6
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 362,
      "brace_depth": 5
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 391,
      "brace_depth": 5
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 392,
      "brace_depth": 5
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 393,
      "brace_depth": 5
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 419,
      "brace_depth": 5
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 420,
      "brace_depth": 5
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 421,
      "brace_depth": 5
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 430,
      "brace_depth": 5
    },
    {
      "path": "tests/loaders/yaml-loader.test.ts",
      "line": 431,
      "brace_depth": 5
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 43,
      "brace_depth": 5
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 44,
      "brace_depth": 5
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 45,
      "brace_depth": 5
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 49,
      "brace_depth": 5
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 50,
      "brace_depth": 5
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 51,
      "brace_depth": 5
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 57,
      "brace_depth": 5
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 58,
      "brace_depth": 5
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 59,
      "brace_depth": 5
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 60,
      "brace_depth": 5
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 67,
      "brace_depth": 5
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 68,
      "brace_depth": 6
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 69,
      "brace_depth": 7
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 70,
      "brace_depth": 7
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 71,
      "brace_depth": 6
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 72,
      "brace_depth": 5
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 76,
      "brace_depth": 5
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 77,
      "brace_depth": 6
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 78,
      "brace_depth": 7
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 79,
      "brace_depth": 7
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 80,
      "brace_depth": 6
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 81,
      "brace_depth": 5
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 87,
      "brace_depth": 5
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 88,
      "brace_depth": 6
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 89,
      "brace_depth": 7
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 90,
      "brace_depth": 7
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 91,
      "brace_depth": 7
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 92,
      "brace_depth": 6
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 93,
      "brace_depth": 5
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 186,
      "brace_depth": 5
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 187,
      "brace_depth": 5
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 188,
      "brace_depth": 5
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 192,
      "brace_depth": 5
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 193,
      "brace_depth": 5
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 199,
      "brace_depth": 5
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 200,
      "brace_depth": 5
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 351,
      "brace_depth": 5
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 352,
      "brace_depth": 5
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 353,
      "brace_depth": 5
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 361,
      "brace_depth": 5
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 362,
      "brace_depth": 5
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 363,
      "brace_depth": 5
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 366,
      "brace_depth": 5
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 367,
      "brace_depth": 5
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 368,
      "brace_depth": 5
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 369,
      "brace_depth": 5
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 380,
      "brace_depth": 5
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 381,
      "brace_depth": 5
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 382,
      "brace_depth": 5
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 383,
      "brace_depth": 5
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 387,
      "brace_depth": 5
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 388,
      "brace_depth": 5
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 389,
      "brace_depth": 5
    },
    {
      "path": "tests/merge/deep-merge.test.ts",
      "line": 390,
      "brace_depth": 5
    },
    {
      "path": "tests/quality/clarity-analyzer.test.ts",
      "line": 128,
      "brace_depth": 5
    },
    {
      "path": "tests/quality/clarity-analyzer.test.ts",
      "line": 129,
      "brace_depth": 5
    },
    {
      "path": "tests/quality/clarity-analyzer.test.ts",
      "line": 130,
      "brace_depth": 5
    },
    {
      "path": "tests/quality/clarity-analyzer.test.ts",
      "line": 131,
      "brace_depth": 5
    },
    {
      "path": "tests/quality/clarity-analyzer.test.ts",
      "line": 132,
      "brace_depth": 5
    },
    {
      "path": "tests/quality/quality-scorer.test.ts",
      "line": 32,
      "brace_depth": 5
    },
    {
      "path": "tests/quality/quality-scorer.test.ts",
      "line": 33,
      "brace_depth": 5
    },
    {
      "path": "tests/quality/quality-scorer.test.ts",
      "line": 96,
      "brace_depth": 5
    },
    {
      "path": "tests/quality/quality-scorer.test.ts",
      "line": 97,
      "brace_depth": 5
    },
    {
      "path": "tests/quality/quality-scorer.test.ts",
      "line": 98,
      "brace_depth": 5
    },
    {
      "path": "tests/quality/quality-scorer.test.ts",
      "line": 99,
      "brace_depth": 5
    },
    {
      "path": "tests/quality/quality-scorer.test.ts",
      "line": 100,
      "brace_depth": 5
    },
    {
      "path": "tests/schemas/generic-mission.test.ts",
      "line": 42,
      "brace_depth": 5
    },
    {
      "path": "tests/schemas/generic-mission.test.ts",
      "line": 43,
      "brace_depth": 5
    },
    {
      "path": "tests/schemas/generic-mission.test.ts",
      "line": 44,
      "brace_depth": 5
    },
    {
      "path": "tests/schemas/generic-mission.test.ts",
      "line": 45,
      "brace_depth": 5
    },
    {
      "path": "tests/schemas/generic-mission.test.ts",
      "line": 49,
      "brace_depth": 5
    },
    {
      "path": "tests/schemas/generic-mission.test.ts",
      "line": 50,
      "brace_depth": 5
    },
    {
      "path": "tests/schemas/generic-mission.test.ts",
      "line": 51,
      "brace_depth": 5
    },
    {
      "path": "tests/schemas/generic-mission.test.ts",
      "line": 66,
      "brace_depth": 5
    },
    {
      "path": "tests/schemas/generic-mission.test.ts",
      "line": 67,
      "brace_depth": 5
    },
    {
      "path": "tests/schemas/generic-mission.test.ts",
      "line": 68,
      "brace_depth": 5
    },
    {
      "path": "tests/schemas/generic-mission.test.ts",
      "line": 69,
      "brace_depth": 5
    },
    {
      "path": "tests/schemas/generic-mission.test.ts",
      "line": 190,
      "brace_depth": 5
    },
    {
      "path": "tests/schemas/generic-mission.test.ts",
      "line": 191,
      "brace_depth": 5
    },
    {
      "path": "tests/schemas/generic-mission.test.ts",
      "line": 319,
      "brace_depth": 5
    },
    {
      "path": "tests/schemas/generic-mission.test.ts",
      "line": 320,
      "brace_depth": 5
    },
    {
      "path": "tests/schemas/generic-mission.test.ts",
      "line": 321,
      "brace_depth": 5
    },
    {
      "path": "tests/schemas/generic-mission.test.ts",
      "line": 322,
      "brace_depth": 5
    },
    {
      "path": "tests/security/path-traversal.test.ts",
      "line": 156,
      "brace_depth": 5
    },
    {
      "path": "tests/security/path-traversal.test.ts",
      "line": 157,
      "brace_depth": 5
    },
    {
      "path": "tests/security/path-traversal.test.ts",
      "line": 161,
      "brace_depth": 5
    },
    {
      "path": "tests/security/path-traversal.test.ts",
      "line": 162,
      "brace_depth": 5
    },
    {
      "path": "tests/security/path-traversal.test.ts",
      "line": 186,
      "brace_depth": 5
    },
    {
      "path": "tests/security/path-traversal.test.ts",
      "line": 187,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/analyze-dependencies.test.ts",
      "line": 36,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/analyze-dependencies.test.ts",
      "line": 37,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/analyze-dependencies.test.ts",
      "line": 148,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/analyze-dependencies.test.ts",
      "line": 149,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/analyze-dependencies.test.ts",
      "line": 172,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/analyze-dependencies.test.ts",
      "line": 173,
      "brace_depth": 6
    },
    {
      "path": "tests/tools/analyze-dependencies.test.ts",
      "line": 174,
      "brace_depth": 6
    },
    {
      "path": "tests/tools/analyze-dependencies.test.ts",
      "line": 175,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/analyze-dependencies.test.ts",
      "line": 180,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/analyze-dependencies.test.ts",
      "line": 181,
      "brace_depth": 6
    },
    {
      "path": "tests/tools/analyze-dependencies.test.ts",
      "line": 182,
      "brace_depth": 6
    },
    {
      "path": "tests/tools/analyze-dependencies.test.ts",
      "line": 183,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/analyze-dependencies.test.ts",
      "line": 188,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/analyze-dependencies.test.ts",
      "line": 189,
      "brace_depth": 6
    },
    {
      "path": "tests/tools/analyze-dependencies.test.ts",
      "line": 190,
      "brace_depth": 6
    },
    {
      "path": "tests/tools/analyze-dependencies.test.ts",
      "line": 191,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/analyze-dependencies.test.ts",
      "line": 249,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/analyze-dependencies.test.ts",
      "line": 250,
      "brace_depth": 6
    },
    {
      "path": "tests/tools/analyze-dependencies.test.ts",
      "line": 251,
      "brace_depth": 6
    },
    {
      "path": "tests/tools/analyze-dependencies.test.ts",
      "line": 252,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/analyze-dependencies.test.ts",
      "line": 257,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/analyze-dependencies.test.ts",
      "line": 258,
      "brace_depth": 6
    },
    {
      "path": "tests/tools/analyze-dependencies.test.ts",
      "line": 259,
      "brace_depth": 6
    },
    {
      "path": "tests/tools/analyze-dependencies.test.ts",
      "line": 260,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/extract-template.test.ts",
      "line": 312,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/extract-template.test.ts",
      "line": 313,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/extract-template.test.ts",
      "line": 314,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/extract-template.test.ts",
      "line": 315,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/extract-template.test.ts",
      "line": 316,
      "brace_depth": 6
    },
    {
      "path": "tests/tools/extract-template.test.ts",
      "line": 317,
      "brace_depth": 6
    },
    {
      "path": "tests/tools/extract-template.test.ts",
      "line": 318,
      "brace_depth": 6
    },
    {
      "path": "tests/tools/extract-template.test.ts",
      "line": 319,
      "brace_depth": 6
    },
    {
      "path": "tests/tools/extract-template.test.ts",
      "line": 320,
      "brace_depth": 6
    },
    {
      "path": "tests/tools/extract-template.test.ts",
      "line": 321,
      "brace_depth": 6
    },
    {
      "path": "tests/tools/extract-template.test.ts",
      "line": 322,
      "brace_depth": 6
    },
    {
      "path": "tests/tools/extract-template.test.ts",
      "line": 323,
      "brace_depth": 6
    },
    {
      "path": "tests/tools/extract-template.test.ts",
      "line": 324,
      "brace_depth": 6
    },
    {
      "path": "tests/tools/extract-template.test.ts",
      "line": 325,
      "brace_depth": 6
    },
    {
      "path": "tests/tools/extract-template.test.ts",
      "line": 326,
      "brace_depth": 6
    },
    {
      "path": "tests/tools/extract-template.test.ts",
      "line": 327,
      "brace_depth": 6
    },
    {
      "path": "tests/tools/extract-template.test.ts",
      "line": 328,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/extract-template.test.ts",
      "line": 329,
      "brace_depth": 6
    },
    {
      "path": "tests/tools/extract-template.test.ts",
      "line": 330,
      "brace_depth": 6
    },
    {
      "path": "tests/tools/extract-template.test.ts",
      "line": 331,
      "brace_depth": 6
    },
    {
      "path": "tests/tools/extract-template.test.ts",
      "line": 332,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/extract-template.test.ts",
      "line": 460,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/extract-template.test.ts",
      "line": 461,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/extract-template.test.ts",
      "line": 509,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/extract-template.test.ts",
      "line": 510,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/extract-template.test.ts",
      "line": 511,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/extract-template.test.ts",
      "line": 512,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/extract-template.test.ts",
      "line": 513,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/import-template.test.ts",
      "line": 66,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/import-template.test.ts",
      "line": 67,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/import-template.test.ts",
      "line": 68,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/import-template.test.ts",
      "line": 69,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/optimize-tokens.test.ts",
      "line": 116,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/optimize-tokens.test.ts",
      "line": 117,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/optimize-tokens.test.ts",
      "line": 118,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/optimize-tokens.test.ts",
      "line": 119,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/optimize-tokens.test.ts",
      "line": 120,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/optimize-tokens.test.ts",
      "line": 135,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/optimize-tokens.test.ts",
      "line": 136,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/optimize-tokens.test.ts",
      "line": 137,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/optimize-tokens.test.ts",
      "line": 138,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/split-mission.test.ts",
      "line": 62,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/split-mission.test.ts",
      "line": 63,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/split-mission.test.ts",
      "line": 64,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/split-mission.test.ts",
      "line": 65,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/split-mission.test.ts",
      "line": 149,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/split-mission.test.ts",
      "line": 150,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/split-mission.test.ts",
      "line": 180,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/split-mission.test.ts",
      "line": 181,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/split-mission.test.ts",
      "line": 182,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/split-mission.test.ts",
      "line": 183,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/split-mission.test.ts",
      "line": 184,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/split-mission.test.ts",
      "line": 185,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/split-mission.test.ts",
      "line": 186,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/split-mission.test.ts",
      "line": 187,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/split-mission.test.ts",
      "line": 188,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/split-mission.test.ts",
      "line": 189,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/split-mission.test.ts",
      "line": 190,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/split-mission.test.ts",
      "line": 225,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/split-mission.test.ts",
      "line": 226,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/split-mission.test.ts",
      "line": 227,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/split-mission.test.ts",
      "line": 228,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/split-mission.test.ts",
      "line": 229,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/split-mission.test.ts",
      "line": 236,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/split-mission.test.ts",
      "line": 237,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/split-mission.test.ts",
      "line": 238,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/split-mission.test.ts",
      "line": 239,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/split-mission.test.ts",
      "line": 240,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/split-mission.test.ts",
      "line": 407,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/split-mission.test.ts",
      "line": 408,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/split-mission.test.ts",
      "line": 409,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/split-mission.test.ts",
      "line": 469,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/split-mission.test.ts",
      "line": 470,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/suggest-splits.execute.test.ts",
      "line": 30,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/suggest-splits.execute.test.ts",
      "line": 31,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/suggest-splits.execute.test.ts",
      "line": 32,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/suggest-splits.execute.test.ts",
      "line": 33,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/suggest-splits.execute.test.ts",
      "line": 34,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/suggest-splits.execute.test.ts",
      "line": 38,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/suggest-splits.execute.test.ts",
      "line": 39,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/suggest-splits.execute.test.ts",
      "line": 40,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/suggest-splits.execute.test.ts",
      "line": 41,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/suggest-splits.execute.test.ts",
      "line": 53,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/suggest-splits.execute.test.ts",
      "line": 54,
      "brace_depth": 6
    },
    {
      "path": "tests/tools/suggest-splits.execute.test.ts",
      "line": 55,
      "brace_depth": 7
    },
    {
      "path": "tests/tools/suggest-splits.execute.test.ts",
      "line": 56,
      "brace_depth": 7
    },
    {
      "path": "tests/tools/suggest-splits.execute.test.ts",
      "line": 57,
      "brace_depth": 6
    },
    {
      "path": "tests/tools/suggest-splits.execute.test.ts",
      "line": 58,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/suggest-splits.execute.test.ts",
      "line": 60,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/suggest-splits.execute.test.ts",
      "line": 61,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/suggest-splits.execute.test.ts",
      "line": 65,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/suggest-splits.execute.test.ts",
      "line": 66,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/suggest-splits.execute.test.ts",
      "line": 87,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/suggest-splits.execute.test.ts",
      "line": 88,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/suggest-splits.execute.test.ts",
      "line": 89,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/suggest-splits.execute.test.ts",
      "line": 90,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/suggest-splits.execute.test.ts",
      "line": 91,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/suggest-splits.execute.test.ts",
      "line": 95,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/suggest-splits.execute.test.ts",
      "line": 96,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/suggest-splits.execute.test.ts",
      "line": 97,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/suggest-splits.execute.test.ts",
      "line": 98,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/suggest-splits.execute.test.ts",
      "line": 107,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/suggest-splits.execute.test.ts",
      "line": 108,
      "brace_depth": 6
    },
    {
      "path": "tests/tools/suggest-splits.execute.test.ts",
      "line": 109,
      "brace_depth": 7
    },
    {
      "path": "tests/tools/suggest-splits.execute.test.ts",
      "line": 110,
      "brace_depth": 7
    },
    {
      "path": "tests/tools/suggest-splits.execute.test.ts",
      "line": 111,
      "brace_depth": 6
    },
    {
      "path": "tests/tools/suggest-splits.execute.test.ts",
      "line": 112,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/suggest-splits.execute.test.ts",
      "line": 114,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/suggest-splits.execute.test.ts",
      "line": 115,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/suggest-splits.execute.test.ts",
      "line": 119,
      "brace_depth": 5
    },
    {
      "path": "tests/tools/suggest-splits.execute.test.ts",
      "line": 120,
      "brace_depth": 5
    },
    {
      "path": "tests/versioning/migration-engine.test.ts",
      "line": 467,
      "brace_depth": 5
    },
    {
      "path": "tests/versioning/migration-engine.test.ts",
      "line": 468,
      "brace_depth": 5
    },
    {
      "path": "tests/versioning/migration-engine.test.ts",
      "line": 469,
      "brace_depth": 5
    },
    {
      "path": "tests/versioning/migration-engine.test.ts",
      "line": 470,
      "brace_depth": 5
    },
    {
      "path": "tests/versioning/version-manager.test.ts",
      "line": 347,
      "brace_depth": 5
    },
    {
      "path": "tests/versioning/version-manager.test.ts",
      "line": 348,
      "brace_depth": 5
    },
    {
      "path": "tests/versioning/version-manager.test.ts",
      "line": 349,
      "brace_depth": 5
    }
  ],
  "duplicate_blocks": [
    {
      "snippet": "\nreturn score;\n}\n\n/**",
      "occurrences": [
        {
          "path": "cmos/context/src/active_set_optimizer.js",
          "line": 305
        },
        {
          "path": "cmos/context/src/context_compressor.js",
          "line": 437
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 157
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 182
        }
      ]
    },
    {
      "snippet": "};\n}\n}\n\n/**",
      "occurrences": [
        {
          "path": "cmos/context/src/active_set_optimizer.js",
          "line": 413
        },
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 483
        },
        {
          "path": "cmos/context/src/context_alerts.js",
          "line": 115
        },
        {
          "path": "cmos/context/src/recovery_strategies.js",
          "line": 136
        },
        {
          "path": "cmos/context/src/recovery_strategies.js",
          "line": 786
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 94
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 147
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 344
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 75
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 187
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 261
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 370
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 440
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 121
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 211
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 269
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 98
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 90
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 151
        },
        {
          "path": "src/tools/score-quality.ts",
          "line": 57
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 234
        }
      ]
    },
    {
      "snippet": "configuration: this.config\n};\n}\n}\n",
      "occurrences": [
        {
          "path": "cmos/context/src/active_set_optimizer.js",
          "line": 649
        },
        {
          "path": "cmos/context/src/domain_discovery.js",
          "line": 776
        }
      ]
    },
    {
      "snippet": "};\n\n// Event handling\nthis.eventListeners = new Map();\n",
      "occurrences": [
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 72
        },
        {
          "path": "cmos/context/src/context_alerts.js",
          "line": 60
        }
      ]
    },
    {
      "snippet": "],\ntimestamp: Date.now()\n};\n}\n",
      "occurrences": [
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 209
        },
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 239
        },
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 303
        },
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 336
        },
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 379
        },
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 418
        }
      ]
    },
    {
      "snippet": "timestamp: Date.now()\n};\n}\n\n/**",
      "occurrences": [
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 210
        },
        {
          "path": "cmos/context/src/context_compressor.js",
          "line": 574
        }
      ]
    },
    {
      "snippet": "timestamp: Date.now()\n};\n}\n}\n",
      "occurrences": [
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 269
        },
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 482
        }
      ]
    },
    {
      "snippet": "};\n}\n}\n\nreturn null;",
      "occurrences": [
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 270
        },
        {
          "path": "cmos/context/src/domain_discovery.js",
          "line": 292
        }
      ]
    },
    {
      "snippet": "}\n}\n\nreturn null;\n}",
      "occurrences": [
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 271
        },
        {
          "path": "cmos/context/src/domain_discovery.js",
          "line": 293
        }
      ]
    },
    {
      "snippet": "}\n\nreturn null;\n}\n",
      "occurrences": [
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 272
        },
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 306
        },
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 339
        },
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 382
        },
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 421
        },
        {
          "path": "cmos/context/src/context_alerts.js",
          "line": 413
        },
        {
          "path": "cmos/context/src/domain_discovery.js",
          "line": 294
        },
        {
          "path": "cmos/context/src/viability_regions.js",
          "line": 212
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 532
        }
      ]
    },
    {
      "snippet": "\nreturn null;\n}\n\n/**",
      "occurrences": [
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 273
        },
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 307
        },
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 340
        },
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 383
        },
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 422
        },
        {
          "path": "cmos/context/src/context_alerts.js",
          "line": 414
        },
        {
          "path": "cmos/context/src/domain_discovery.js",
          "line": 295
        },
        {
          "path": "cmos/context/src/viability_regions.js",
          "line": 213
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 533
        }
      ]
    },
    {
      "snippet": "timestamp: Date.now()\n};\n}\n\nreturn null;",
      "occurrences": [
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 304
        },
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 337
        },
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 380
        },
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 419
        },
        {
          "path": "cmos/context/src/viability_regions.js",
          "line": 210
        }
      ]
    },
    {
      "snippet": "};\n}\n\nreturn null;\n}",
      "occurrences": [
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 305
        },
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 338
        },
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 381
        },
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 420
        },
        {
          "path": "cmos/context/src/viability_regions.js",
          "line": 211
        }
      ]
    },
    {
      "snippet": "}\n\n/**\n* Utility methods\n*/",
      "occurrences": [
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 485
        },
        {
          "path": "cmos/context/src/context_compressor.js",
          "line": 475
        }
      ]
    },
    {
      "snippet": "\n/**\n* Utility methods\n*/\n",
      "occurrences": [
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 486
        },
        {
          "path": "cmos/context/src/context_compressor.js",
          "line": 476
        }
      ]
    },
    {
      "snippet": "\nconst mean = values.reduce((a, b) => a + b, 0) / values.length;\nconst variance = values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / values.length;\n\nreturn variance;",
      "occurrences": [
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 557
        },
        {
          "path": "cmos/context/src/recovery_strategies.js",
          "line": 738
        }
      ]
    },
    {
      "snippet": "const mean = values.reduce((a, b) => a + b, 0) / values.length;\nconst variance = values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / values.length;\n\nreturn variance;\n}",
      "occurrences": [
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 558
        },
        {
          "path": "cmos/context/src/recovery_strategies.js",
          "line": 739
        }
      ]
    },
    {
      "snippet": "const variance = values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / values.length;\n\nreturn variance;\n}\n",
      "occurrences": [
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 559
        },
        {
          "path": "cmos/context/src/recovery_strategies.js",
          "line": 740
        }
      ]
    },
    {
      "snippet": "domains: {}\n}\n};\n}\n",
      "occurrences": [
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 643
        },
        {
          "path": "cmos/context/src/domain_manager.js",
          "line": 484
        }
      ]
    },
    {
      "snippet": "}\n};\n}\n\n/**",
      "occurrences": [
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 644
        },
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 715
        },
        {
          "path": "cmos/context/src/context_alerts.js",
          "line": 783
        },
        {
          "path": "cmos/context/src/context_alerts.js",
          "line": 871
        },
        {
          "path": "cmos/context/src/context_compressor.js",
          "line": 75
        },
        {
          "path": "cmos/context/src/context_compressor.js",
          "line": 537
        },
        {
          "path": "cmos/context/src/context_health.js",
          "line": 93
        },
        {
          "path": "cmos/context/src/domain_dependencies.js",
          "line": 216
        },
        {
          "path": "cmos/context/src/domain_manager.js",
          "line": 485
        },
        {
          "path": "cmos/context/src/domain_manager.js",
          "line": 645
        },
        {
          "path": "cmos/context/src/smart_compressor.js",
          "line": 347
        },
        {
          "path": "cmos/context/src/viability_regions.js",
          "line": 132
        },
        {
          "path": "src/quality/quality-scorer.ts",
          "line": 93
        }
      ]
    },
    {
      "snippet": "};\n}\n\n/**\n* Event handling",
      "occurrences": [
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 645
        },
        {
          "path": "cmos/context/src/context_alerts.js",
          "line": 784
        }
      ]
    },
    {
      "snippet": "}\n\n/**\n* Event handling\n*/",
      "occurrences": [
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 646
        },
        {
          "path": "cmos/context/src/context_alerts.js",
          "line": 785
        },
        {
          "path": "cmos/context/src/domain_manager.js",
          "line": 589
        }
      ]
    },
    {
      "snippet": "\n/**\n* Event handling\n*/\non(event, listener) {",
      "occurrences": [
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 647
        },
        {
          "path": "cmos/context/src/context_alerts.js",
          "line": 786
        },
        {
          "path": "cmos/context/src/domain_manager.js",
          "line": 590
        }
      ]
    },
    {
      "snippet": "/**\n* Event handling\n*/\non(event, listener) {\nif (!this.eventListeners.has(event)) {",
      "occurrences": [
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 648
        },
        {
          "path": "cmos/context/src/context_alerts.js",
          "line": 787
        },
        {
          "path": "cmos/context/src/domain_manager.js",
          "line": 591
        }
      ]
    },
    {
      "snippet": "* Event handling\n*/\non(event, listener) {\nif (!this.eventListeners.has(event)) {\nthis.eventListeners.set(event, []);",
      "occurrences": [
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 649
        },
        {
          "path": "cmos/context/src/context_alerts.js",
          "line": 788
        },
        {
          "path": "cmos/context/src/domain_manager.js",
          "line": 592
        }
      ]
    },
    {
      "snippet": "*/\non(event, listener) {\nif (!this.eventListeners.has(event)) {\nthis.eventListeners.set(event, []);\n}",
      "occurrences": [
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 650
        },
        {
          "path": "cmos/context/src/context_alerts.js",
          "line": 789
        },
        {
          "path": "cmos/context/src/domain_manager.js",
          "line": 593
        }
      ]
    },
    {
      "snippet": "on(event, listener) {\nif (!this.eventListeners.has(event)) {\nthis.eventListeners.set(event, []);\n}\nthis.eventListeners.get(event).push(listener);",
      "occurrences": [
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 651
        },
        {
          "path": "cmos/context/src/context_alerts.js",
          "line": 790
        },
        {
          "path": "cmos/context/src/domain_manager.js",
          "line": 594
        }
      ]
    },
    {
      "snippet": "if (!this.eventListeners.has(event)) {\nthis.eventListeners.set(event, []);\n}\nthis.eventListeners.get(event).push(listener);\n}",
      "occurrences": [
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 652
        },
        {
          "path": "cmos/context/src/context_alerts.js",
          "line": 791
        },
        {
          "path": "cmos/context/src/domain_manager.js",
          "line": 595
        }
      ]
    },
    {
      "snippet": "this.eventListeners.set(event, []);\n}\nthis.eventListeners.get(event).push(listener);\n}\n",
      "occurrences": [
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 653
        },
        {
          "path": "cmos/context/src/context_alerts.js",
          "line": 792
        },
        {
          "path": "cmos/context/src/domain_manager.js",
          "line": 596
        }
      ]
    },
    {
      "snippet": "}\nthis.eventListeners.get(event).push(listener);\n}\n\nemit(event, data) {",
      "occurrences": [
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 654
        },
        {
          "path": "cmos/context/src/context_alerts.js",
          "line": 793
        },
        {
          "path": "cmos/context/src/domain_manager.js",
          "line": 597
        }
      ]
    },
    {
      "snippet": "this.eventListeners.get(event).push(listener);\n}\n\nemit(event, data) {\nconst listeners = this.eventListeners.get(event) || [];",
      "occurrences": [
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 655
        },
        {
          "path": "cmos/context/src/context_alerts.js",
          "line": 794
        },
        {
          "path": "cmos/context/src/domain_manager.js",
          "line": 598
        }
      ]
    },
    {
      "snippet": "}\n\nemit(event, data) {\nconst listeners = this.eventListeners.get(event) || [];\nlisteners.forEach(listener => {",
      "occurrences": [
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 656
        },
        {
          "path": "cmos/context/src/context_alerts.js",
          "line": 795
        },
        {
          "path": "cmos/context/src/domain_manager.js",
          "line": 599
        }
      ]
    },
    {
      "snippet": "\nemit(event, data) {\nconst listeners = this.eventListeners.get(event) || [];\nlisteners.forEach(listener => {\ntry {",
      "occurrences": [
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 657
        },
        {
          "path": "cmos/context/src/context_alerts.js",
          "line": 796
        },
        {
          "path": "cmos/context/src/domain_manager.js",
          "line": 600
        }
      ]
    },
    {
      "snippet": "emit(event, data) {\nconst listeners = this.eventListeners.get(event) || [];\nlisteners.forEach(listener => {\ntry {\nlistener(data);",
      "occurrences": [
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 658
        },
        {
          "path": "cmos/context/src/context_alerts.js",
          "line": 797
        },
        {
          "path": "cmos/context/src/domain_manager.js",
          "line": 601
        }
      ]
    },
    {
      "snippet": "const listeners = this.eventListeners.get(event) || [];\nlisteners.forEach(listener => {\ntry {\nlistener(data);\n} catch (error) {",
      "occurrences": [
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 659
        },
        {
          "path": "cmos/context/src/context_alerts.js",
          "line": 798
        },
        {
          "path": "cmos/context/src/domain_manager.js",
          "line": 602
        }
      ]
    },
    {
      "snippet": "listeners.forEach(listener => {\ntry {\nlistener(data);\n} catch (error) {\nconsole.warn(`Event listener error for ${event}:`, error);",
      "occurrences": [
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 660
        },
        {
          "path": "cmos/context/src/domain_manager.js",
          "line": 603
        }
      ]
    },
    {
      "snippet": "try {\nlistener(data);\n} catch (error) {\nconsole.warn(`Event listener error for ${event}:`, error);\n}",
      "occurrences": [
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 661
        },
        {
          "path": "cmos/context/src/domain_manager.js",
          "line": 604
        }
      ]
    },
    {
      "snippet": "listener(data);\n} catch (error) {\nconsole.warn(`Event listener error for ${event}:`, error);\n}\n});",
      "occurrences": [
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 662
        },
        {
          "path": "cmos/context/src/domain_manager.js",
          "line": 605
        }
      ]
    },
    {
      "snippet": "} catch (error) {\nconsole.warn(`Event listener error for ${event}:`, error);\n}\n});\n}",
      "occurrences": [
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 663
        },
        {
          "path": "cmos/context/src/domain_manager.js",
          "line": 606
        }
      ]
    },
    {
      "snippet": "console.warn(`Event listener error for ${event}:`, error);\n}\n});\n}\n",
      "occurrences": [
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 664
        },
        {
          "path": "cmos/context/src/domain_manager.js",
          "line": 607
        }
      ]
    },
    {
      "snippet": "}\n});\n}\n\n/**",
      "occurrences": [
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 665
        },
        {
          "path": "cmos/context/src/context_alerts.js",
          "line": 804
        },
        {
          "path": "cmos/context/src/domain_dependencies.js",
          "line": 284
        },
        {
          "path": "cmos/context/src/domain_manager.js",
          "line": 608
        },
        {
          "path": "cmos/context/src/viability_regions.js",
          "line": 325
        }
      ]
    },
    {
      "snippet": "};\n}\n\n/**\n* Cleanup resources",
      "occurrences": [
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 716
        },
        {
          "path": "cmos/context/src/context_alerts.js",
          "line": 872
        },
        {
          "path": "cmos/context/src/domain_manager.js",
          "line": 646
        }
      ]
    },
    {
      "snippet": "}\n\n/**\n* Cleanup resources\n*/",
      "occurrences": [
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 717
        },
        {
          "path": "cmos/context/src/context_alerts.js",
          "line": 873
        },
        {
          "path": "cmos/context/src/domain_manager.js",
          "line": 647
        }
      ]
    },
    {
      "snippet": "\n/**\n* Cleanup resources\n*/\ndestroy() {",
      "occurrences": [
        {
          "path": "cmos/context/src/anti_patterns.js",
          "line": 718
        },
        {
          "path": "cmos/context/src/context_alerts.js",
          "line": 874
        },
        {
          "path": "cmos/context/src/domain_manager.js",
          "line": 648
        }
      ]
    },
    {
      "snippet": "}\n\nreturn true;\n}\n",
      "occurrences": [
        {
          "path": "cmos/context/src/context_alerts.js",
          "line": 217
        },
        {
          "path": "cmos/context/src/domain_manager.js",
          "line": 347
        },
        {
          "path": "cmos/context/src/state_calculator.js",
          "line": 321
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 230
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 195
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 163
        }
      ]
    },
    {
      "snippet": "\nreturn true;\n}\n\n/**",
      "occurrences": [
        {
          "path": "cmos/context/src/context_alerts.js",
          "line": 218
        },
        {
          "path": "cmos/context/src/context_alerts.js",
          "line": 268
        },
        {
          "path": "cmos/context/src/context_alerts.js",
          "line": 303
        },
        {
          "path": "cmos/context/src/context_alerts.js",
          "line": 344
        },
        {
          "path": "cmos/context/src/domain_manager.js",
          "line": 348
        },
        {
          "path": "cmos/context/src/state_calculator.js",
          "line": 322
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 231
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 196
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 164
        }
      ]
    },
    {
      "snippet": "}\n\n/**\n* Helper methods\n*/",
      "occurrences": [
        {
          "path": "cmos/context/src/context_alerts.js",
          "line": 584
        },
        {
          "path": "cmos/context/src/domain_discovery.js",
          "line": 544
        },
        {
          "path": "cmos/context/src/smart_compressor.js",
          "line": 398
        }
      ]
    },
    {
      "snippet": "\n/**\n* Helper methods\n*/\n",
      "occurrences": [
        {
          "path": "cmos/context/src/context_alerts.js",
          "line": 585
        },
        {
          "path": "cmos/context/src/domain_discovery.js",
          "line": 545
        },
        {
          "path": "cmos/context/src/smart_compressor.js",
          "line": 399
        }
      ]
    },
    {
      "snippet": "]\n}\n};\n}\n",
      "occurrences": [
        {
          "path": "cmos/context/src/context_alerts.js",
          "line": 782
        },
        {
          "path": "cmos/context/src/viability_regions.js",
          "line": 131
        }
      ]
    },
    {
      "snippet": "}\n\n/**\n* Get comprehensive diagnostics\n*/",
      "occurrences": [
        {
          "path": "cmos/context/src/context_alerts.js",
          "line": 843
        },
        {
          "path": "cmos/context/src/domain_manager.js",
          "line": 610
        }
      ]
    },
    {
      "snippet": "\n/**\n* Get comprehensive diagnostics\n*/\ngetDiagnostics() {",
      "occurrences": [
        {
          "path": "cmos/context/src/context_alerts.js",
          "line": 844
        },
        {
          "path": "cmos/context/src/domain_manager.js",
          "line": 611
        }
      ]
    },
    {
      "snippet": "this.compressionStats = {\nduplicatesRemoved: 0,\nbytesReduced: 0,\noperationsCount: 0\n};",
      "occurrences": [
        {
          "path": "cmos/context/src/context_compressor.js",
          "line": 20
        },
        {
          "path": "cmos/context/src/context_compressor.js",
          "line": 559
        }
      ]
    },
    {
      "snippet": "duplicatesRemoved: 0,\nbytesReduced: 0,\noperationsCount: 0\n};\n}",
      "occurrences": [
        {
          "path": "cmos/context/src/context_compressor.js",
          "line": 21
        },
        {
          "path": "cmos/context/src/context_compressor.js",
          "line": 560
        }
      ]
    },
    {
      "snippet": "bytesReduced: 0,\noperationsCount: 0\n};\n}\n",
      "occurrences": [
        {
          "path": "cmos/context/src/context_compressor.js",
          "line": 22
        },
        {
          "path": "cmos/context/src/context_compressor.js",
          "line": 561
        }
      ]
    },
    {
      "snippet": "operationsCount: 0\n};\n}\n\n/**",
      "occurrences": [
        {
          "path": "cmos/context/src/context_compressor.js",
          "line": 23
        },
        {
          "path": "cmos/context/src/context_compressor.js",
          "line": 562
        }
      ]
    },
    {
      "snippet": "\nreturn compressed;\n}\n\n/**",
      "occurrences": [
        {
          "path": "cmos/context/src/context_compressor.js",
          "line": 100
        },
        {
          "path": "cmos/context/src/context_compressor.js",
          "line": 125
        },
        {
          "path": "cmos/context/src/context_compressor.js",
          "line": 172
        },
        {
          "path": "cmos/context/src/context_compressor.js",
          "line": 473
        },
        {
          "path": "cmos/context/src/smart_compressor.js",
          "line": 165
        }
      ]
    },
    {
      "snippet": "}\n});\n\nreturn compressed;\n}",
      "occurrences": [
        {
          "path": "cmos/context/src/context_compressor.js",
          "line": 170
        },
        {
          "path": "cmos/context/src/context_compressor.js",
          "line": 332
        },
        {
          "path": "cmos/context/src/context_compressor.js",
          "line": 471
        }
      ]
    },
    {
      "snippet": "});\n\nreturn compressed;\n}\n",
      "occurrences": [
        {
          "path": "cmos/context/src/context_compressor.js",
          "line": 171
        },
        {
          "path": "cmos/context/src/context_compressor.js",
          "line": 333
        },
        {
          "path": "cmos/context/src/context_compressor.js",
          "line": 472
        }
      ]
    },
    {
      "snippet": "} else {\nthis.compressionStats.duplicatesRemoved++;\n}\n});\n",
      "occurrences": [
        {
          "path": "cmos/context/src/context_compressor.js",
          "line": 190
        },
        {
          "path": "cmos/context/src/context_compressor.js",
          "line": 212
        }
      ]
    },
    {
      "snippet": "return scoreB - scoreA; // Descending order\n});\n}\n\n/**",
      "occurrences": [
        {
          "path": "cmos/context/src/context_compressor.js",
          "line": 227
        },
        {
          "path": "cmos/context/src/context_compressor.js",
          "line": 238
        }
      ]
    },
    {
      "snippet": "}\n\nreturn Math.max(0, score);\n}\n",
      "occurrences": [
        {
          "path": "cmos/context/src/context_compressor.js",
          "line": 275
        },
        {
          "path": "cmos/context/src/context_compressor.js",
          "line": 310
        }
      ]
    },
    {
      "snippet": "\nreturn Math.max(0, score);\n}\n\n/**",
      "occurrences": [
        {
          "path": "cmos/context/src/context_compressor.js",
          "line": 276
        },
        {
          "path": "cmos/context/src/context_compressor.js",
          "line": 311
        }
      ]
    },
    {
      "snippet": "}\n\nreturn compressed;\n}\n",
      "occurrences": [
        {
          "path": "cmos/context/src/context_compressor.js",
          "line": 364
        },
        {
          "path": "cmos/context/src/smart_compressor.js",
          "line": 164
        },
        {
          "path": "cmos/context/src/smart_compressor.js",
          "line": 542
        },
        {
          "path": "cmos/context/src/smart_compressor.js",
          "line": 573
        },
        {
          "path": "cmos/context/src/smart_compressor.js",
          "line": 595
        },
        {
          "path": "cmos/context/src/smart_compressor.js",
          "line": 610
        },
        {
          "path": "cmos/context/src/smart_compressor.js",
          "line": 628
        }
      ]
    },
    {
      "snippet": "}\n\nreturn score;\n}\n",
      "occurrences": [
        {
          "path": "cmos/context/src/context_compressor.js",
          "line": 436
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 156
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 181
        }
      ]
    },
    {
      "snippet": "\nObject.keys(metrics).forEach(metric => {\nconst value = metrics[metric];\nconst thresholds = this.thresholds.metrics[metric];\n",
      "occurrences": [
        {
          "path": "cmos/context/src/context_health.js",
          "line": 197
        },
        {
          "path": "cmos/context/src/context_health.js",
          "line": 235
        }
      ]
    },
    {
      "snippet": "Object.keys(metrics).forEach(metric => {\nconst value = metrics[metric];\nconst thresholds = this.thresholds.metrics[metric];\n\nif (value >= thresholds.critical) {",
      "occurrences": [
        {
          "path": "cmos/context/src/context_health.js",
          "line": 198
        },
        {
          "path": "cmos/context/src/context_health.js",
          "line": 236
        }
      ]
    },
    {
      "snippet": "\nreturn alerts;\n}\n\n/**",
      "occurrences": [
        {
          "path": "cmos/context/src/context_health.js",
          "line": 258
        },
        {
          "path": "cmos/context/src/viability_regions.js",
          "line": 291
        }
      ]
    },
    {
      "snippet": "}\n\n/**\n* Get diagnostic summary\n*/",
      "occurrences": [
        {
          "path": "cmos/context/src/context_health.js",
          "line": 330
        },
        {
          "path": "cmos/context/src/context_state.js",
          "line": 490
        }
      ]
    },
    {
      "snippet": "\n/**\n* Get diagnostic summary\n*/\ngetDiagnostics() {",
      "occurrences": [
        {
          "path": "cmos/context/src/context_health.js",
          "line": 331
        },
        {
          "path": "cmos/context/src/context_state.js",
          "line": 491
        }
      ]
    },
    {
      "snippet": "}\n\n/**\n* Check if state is in viable region\n*/",
      "occurrences": [
        {
          "path": "cmos/context/src/context_state.js",
          "line": 300
        },
        {
          "path": "cmos/context/src/viability_regions.js",
          "line": 163
        }
      ]
    },
    {
      "snippet": "}\n}\n\n/**\n* Get performance statistics",
      "occurrences": [
        {
          "path": "cmos/context/src/context_state.js",
          "line": 468
        },
        {
          "path": "cmos/context/src/smart_compressor.js",
          "line": 655
        }
      ]
    },
    {
      "snippet": "}\n\n/**\n* Get performance statistics\n*/",
      "occurrences": [
        {
          "path": "cmos/context/src/context_state.js",
          "line": 469
        },
        {
          "path": "cmos/context/src/smart_compressor.js",
          "line": 656
        }
      ]
    },
    {
      "snippet": "\n/**\n* Get performance statistics\n*/\ngetPerformanceStats() {",
      "occurrences": [
        {
          "path": "cmos/context/src/context_state.js",
          "line": 470
        },
        {
          "path": "cmos/context/src/smart_compressor.js",
          "line": 657
        }
      ]
    },
    {
      "snippet": "});\n});\n}\n\n/**",
      "occurrences": [
        {
          "path": "cmos/context/src/domain_dependencies.js",
          "line": 149
        },
        {
          "path": "cmos/context/src/domain_dependencies.js",
          "line": 170
        }
      ]
    },
    {
      "snippet": "\nconst intersection = new Set([...keywords1].filter(x => keywords2.has(x)));\nconst union = new Set([...keywords1, ...keywords2]);\n\nreturn union.size > 0 ? intersection.size / union.size : 0;",
      "occurrences": [
        {
          "path": "cmos/context/src/domain_dependencies.js",
          "line": 226
        },
        {
          "path": "cmos/context/src/domain_discovery.js",
          "line": 643
        }
      ]
    },
    {
      "snippet": "const intersection = new Set([...keywords1].filter(x => keywords2.has(x)));\nconst union = new Set([...keywords1, ...keywords2]);\n\nreturn union.size > 0 ? intersection.size / union.size : 0;\n}",
      "occurrences": [
        {
          "path": "cmos/context/src/domain_dependencies.js",
          "line": 227
        },
        {
          "path": "cmos/context/src/domain_discovery.js",
          "line": 644
        }
      ]
    },
    {
      "snippet": "const union = new Set([...keywords1, ...keywords2]);\n\nreturn union.size > 0 ? intersection.size / union.size : 0;\n}\n",
      "occurrences": [
        {
          "path": "cmos/context/src/domain_dependencies.js",
          "line": 228
        },
        {
          "path": "cmos/context/src/domain_discovery.js",
          "line": 645
        }
      ]
    },
    {
      "snippet": "const relationship = this.relationships.get(relationshipKey);\n\nif (relationship) {\ntotalStrength += relationship.strength;\nedgeCount++;",
      "occurrences": [
        {
          "path": "cmos/context/src/domain_dependencies.js",
          "line": 297
        },
        {
          "path": "cmos/context/src/domain_dependencies.js",
          "line": 378
        }
      ]
    },
    {
      "snippet": "\nif (relationship) {\ntotalStrength += relationship.strength;\nedgeCount++;\n}",
      "occurrences": [
        {
          "path": "cmos/context/src/domain_dependencies.js",
          "line": 298
        },
        {
          "path": "cmos/context/src/domain_dependencies.js",
          "line": 379
        }
      ]
    },
    {
      "snippet": "if (relationship) {\ntotalStrength += relationship.strength;\nedgeCount++;\n}\n}",
      "occurrences": [
        {
          "path": "cmos/context/src/domain_dependencies.js",
          "line": 299
        },
        {
          "path": "cmos/context/src/domain_dependencies.js",
          "line": 380
        }
      ]
    },
    {
      "snippet": "totalStrength += relationship.strength;\nedgeCount++;\n}\n}\n",
      "occurrences": [
        {
          "path": "cmos/context/src/domain_dependencies.js",
          "line": 300
        },
        {
          "path": "cmos/context/src/domain_dependencies.js",
          "line": 381
        }
      ]
    },
    {
      "snippet": "edgeCount++;\n}\n}\n\nreturn edgeCount > 0 ? totalStrength / edgeCount : 0;",
      "occurrences": [
        {
          "path": "cmos/context/src/domain_dependencies.js",
          "line": 301
        },
        {
          "path": "cmos/context/src/domain_dependencies.js",
          "line": 382
        }
      ]
    },
    {
      "snippet": "}\n}\n\nreturn edgeCount > 0 ? totalStrength / edgeCount : 0;\n}",
      "occurrences": [
        {
          "path": "cmos/context/src/domain_dependencies.js",
          "line": 302
        },
        {
          "path": "cmos/context/src/domain_dependencies.js",
          "line": 383
        }
      ]
    },
    {
      "snippet": "}\n\nreturn edgeCount > 0 ? totalStrength / edgeCount : 0;\n}\n",
      "occurrences": [
        {
          "path": "cmos/context/src/domain_dependencies.js",
          "line": 303
        },
        {
          "path": "cmos/context/src/domain_dependencies.js",
          "line": 384
        }
      ]
    },
    {
      "snippet": "\nreturn edgeCount > 0 ? totalStrength / edgeCount : 0;\n}\n\n/**",
      "occurrences": [
        {
          "path": "cmos/context/src/domain_dependencies.js",
          "line": 304
        },
        {
          "path": "cmos/context/src/domain_dependencies.js",
          "line": 385
        }
      ]
    },
    {
      "snippet": "});\n}\n});\n});\n",
      "occurrences": [
        {
          "path": "cmos/context/src/domain_dependencies.js",
          "line": 334
        },
        {
          "path": "cmos/context/src/domain_discovery.js",
          "line": 704
        }
      ]
    },
    {
      "snippet": "});\n\nreturn serialized;\n}\n",
      "occurrences": [
        {
          "path": "cmos/context/src/domain_dependencies.js",
          "line": 613
        },
        {
          "path": "cmos/context/src/domain_dependencies.js",
          "line": 628
        }
      ]
    },
    {
      "snippet": "}\n};\n}\n}\n",
      "occurrences": [
        {
          "path": "cmos/context/src/domain_dependencies.js",
          "line": 675
        },
        {
          "path": "cmos/context/src/recovery_strategies.js",
          "line": 877
        }
      ]
    },
    {
      "snippet": "}\n}\n\nreturn result;\n}",
      "occurrences": [
        {
          "path": "cmos/context/src/domain_discovery.js",
          "line": 393
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 166
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 254
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 276
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 349
        }
      ]
    },
    {
      "snippet": "}\n\nreturn result;\n}\n",
      "occurrences": [
        {
          "path": "cmos/context/src/domain_discovery.js",
          "line": 394
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 276
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 113
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 167
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 191
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 219
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 238
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 255
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 277
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 309
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 350
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 120
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 164
        }
      ]
    },
    {
      "snippet": "\nreturn result;\n}\n\n/**",
      "occurrences": [
        {
          "path": "cmos/context/src/domain_discovery.js",
          "line": 395
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 277
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 114
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 168
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 192
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 220
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 239
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 256
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 278
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 310
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 351
        },
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 72
        },
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 90
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 121
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 165
        }
      ]
    },
    {
      "snippet": "\n} catch (error) {\nconst errorResult = {\nsuccess: false,\nerror: error.message,",
      "occurrences": [
        {
          "path": "cmos/context/src/domain_manager.js",
          "line": 119
        },
        {
          "path": "cmos/context/src/domain_manager.js",
          "line": 269
        }
      ]
    },
    {
      "snippet": "throw error;\n}\n}\n\n/**",
      "occurrences": [
        {
          "path": "cmos/context/src/domain_manager.js",
          "line": 129
        },
        {
          "path": "cmos/context/src/domain_manager.js",
          "line": 279
        },
        {
          "path": "src/index.ts",
          "line": 568
        },
        {
          "path": "src/tools/list-domains.ts",
          "line": 46
        }
      ]
    },
    {
      "snippet": "}\n}\n}\n\n/**",
      "occurrences": [
        {
          "path": "cmos/context/src/domain_manager.js",
          "line": 415
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 269
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 126
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 74
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 384
        },
        {
          "path": "src/loaders/yaml-loader.ts",
          "line": 124
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 179
        }
      ]
    },
    {
      "snippet": "}\n}\n}\n\nreturn {",
      "occurrences": [
        {
          "path": "cmos/context/src/recovery_strategies.js",
          "line": 291
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 282
        }
      ]
    },
    {
      "snippet": "targetRatio: 2.5,\npreserveCentrality: true\n});\n\nreturn {",
      "occurrences": [
        {
          "path": "cmos/context/src/recovery_strategies.js",
          "line": 458
        },
        {
          "path": "cmos/context/src/recovery_strategies.js",
          "line": 481
        }
      ]
    },
    {
      "snippet": "\nif (context.working_memory?.domains) {\nObject.keys(context.working_memory.domains).forEach(key => {\nconst domain = context.working_memory.domains[key];\n",
      "occurrences": [
        {
          "path": "cmos/context/src/recovery_strategies.js",
          "line": 537
        },
        {
          "path": "cmos/context/src/recovery_strategies.js",
          "line": 571
        },
        {
          "path": "cmos/context/src/recovery_strategies.js",
          "line": 675
        }
      ]
    },
    {
      "snippet": "}\n});\n}\n\nreturn {",
      "occurrences": [
        {
          "path": "cmos/context/src/recovery_strategies.js",
          "line": 662
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 228
        }
      ]
    },
    {
      "snippet": "...config\n};\n}\n\n/**",
      "occurrences": [
        {
          "path": "cmos/context/src/smart_compressor.js",
          "line": 45
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 37
        }
      ]
    },
    {
      "snippet": ");\n}\n});\n}\n",
      "occurrences": [
        {
          "path": "cmos/context/src/smart_compressor.js",
          "line": 229
        },
        {
          "path": "cmos/context/src/smart_compressor.js",
          "line": 592
        },
        {
          "path": "cmos/context/src/smart_compressor.js",
          "line": 625
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 227
        },
        {
          "path": "src/index.ts",
          "line": 191
        }
      ]
    },
    {
      "snippet": "\nreturn context;\n}\n\n/**",
      "occurrences": [
        {
          "path": "cmos/context/src/smart_compressor.js",
          "line": 233
        },
        {
          "path": "cmos/context/src/smart_compressor.js",
          "line": 258
        }
      ]
    },
    {
      "snippet": "};\n}\n});\n}\n",
      "occurrences": [
        {
          "path": "cmos/context/src/smart_compressor.js",
          "line": 316
        },
        {
          "path": "cmos/context/src/smart_compressor.js",
          "line": 570
        }
      ]
    },
    {
      "snippet": "const compressed = JSON.parse(JSON.stringify(context));\n\nif (compressed.working_memory?.domains) {\nObject.keys(compressed.working_memory.domains).forEach(key => {\nconst domain = compressed.working_mem",
      "occurrences": [
        {
          "path": "cmos/context/src/smart_compressor.js",
          "line": 553
        },
        {
          "path": "cmos/context/src/smart_compressor.js",
          "line": 579
        }
      ]
    },
    {
      "snippet": "\nif (compressed.working_memory?.domains) {\nObject.keys(compressed.working_memory.domains).forEach(key => {\nconst domain = compressed.working_memory.domains[key];\n",
      "occurrences": [
        {
          "path": "cmos/context/src/smart_compressor.js",
          "line": 554
        },
        {
          "path": "cmos/context/src/smart_compressor.js",
          "line": 580
        }
      ]
    },
    {
      "snippet": "}\n});\n}\n\nreturn compressed;",
      "occurrences": [
        {
          "path": "cmos/context/src/smart_compressor.js",
          "line": 571
        },
        {
          "path": "cmos/context/src/smart_compressor.js",
          "line": 593
        },
        {
          "path": "cmos/context/src/smart_compressor.js",
          "line": 626
        }
      ]
    },
    {
      "snippet": "});\n}\n\nreturn compressed;\n}",
      "occurrences": [
        {
          "path": "cmos/context/src/smart_compressor.js",
          "line": 572
        },
        {
          "path": "cmos/context/src/smart_compressor.js",
          "line": 594
        },
        {
          "path": "cmos/context/src/smart_compressor.js",
          "line": 609
        },
        {
          "path": "cmos/context/src/smart_compressor.js",
          "line": 627
        }
      ]
    },
    {
      "snippet": "}\n\n/**\n* Get diagnostic information\n*/",
      "occurrences": [
        {
          "path": "cmos/context/src/smart_compressor.js",
          "line": 682
        },
        {
          "path": "cmos/context/src/viability_regions.js",
          "line": 501
        }
      ]
    },
    {
      "snippet": "\n/**\n* Get diagnostic information\n*/\ngetDiagnostics() {",
      "occurrences": [
        {
          "path": "cmos/context/src/smart_compressor.js",
          "line": 683
        },
        {
          "path": "cmos/context/src/viability_regions.js",
          "line": 502
        }
      ]
    },
    {
      "snippet": "if (this.hasNestedProperty(context, field)) {\nscore += 1;\n}\n}\n",
      "occurrences": [
        {
          "path": "cmos/context/src/state_calculator.js",
          "line": 111
        },
        {
          "path": "cmos/context/src/state_calculator.js",
          "line": 118
        }
      ]
    },
    {
      "snippet": "}\n\n/**\n* Helper functions\n*/",
      "occurrences": [
        {
          "path": "cmos/context/src/state_calculator.js",
          "line": 303
        },
        {
          "path": "cmos/context/src/viability_regions.js",
          "line": 429
        }
      ]
    },
    {
      "snippet": "\n/**\n* Helper functions\n*/\n",
      "occurrences": [
        {
          "path": "cmos/context/src/state_calculator.js",
          "line": 304
        },
        {
          "path": "cmos/context/src/viability_regions.js",
          "line": 430
        }
      ]
    },
    {
      "snippet": "zone: classification.zone,\nrecommendations: classification.info.recommendations,\ntimestamp: now\n});\n}",
      "occurrences": [
        {
          "path": "cmos/context/src/viability_regions.js",
          "line": 271
        },
        {
          "path": "cmos/context/src/viability_regions.js",
          "line": 283
        }
      ]
    },
    {
      "snippet": "recommendations: classification.info.recommendations,\ntimestamp: now\n});\n}\n",
      "occurrences": [
        {
          "path": "cmos/context/src/viability_regions.js",
          "line": 272
        },
        {
          "path": "cmos/context/src/viability_regions.js",
          "line": 284
        }
      ]
    },
    {
      "snippet": "}\n\nreturn false;\n}\n",
      "occurrences": [
        {
          "path": "cmos/context/src/viability_regions.js",
          "line": 342
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 186
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 205
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 320
        }
      ]
    },
    {
      "snippet": "\nreturn false;\n}\n\n/**",
      "occurrences": [
        {
          "path": "cmos/context/src/viability_regions.js",
          "line": 343
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 187
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 206
        }
      ]
    },
    {
      "snippet": "/* eslint-disable */\nvar jumpToCode = (function init() {\n// Classes of code we would like to highlight in the file view\nvar missingCoverageClasses = ['.cbranch-no', '.cstat-no', '.fstat-no'];\n",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 1
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 1
        }
      ]
    },
    {
      "snippet": "var jumpToCode = (function init() {\n// Classes of code we would like to highlight in the file view\nvar missingCoverageClasses = ['.cbranch-no', '.cstat-no', '.fstat-no'];\n\n// Elements to highlight in ",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 2
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 2
        }
      ]
    },
    {
      "snippet": "// Classes of code we would like to highlight in the file view\nvar missingCoverageClasses = ['.cbranch-no', '.cstat-no', '.fstat-no'];\n\n// Elements to highlight in the file listing view\nvar fileListin",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 3
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 3
        }
      ]
    },
    {
      "snippet": "var missingCoverageClasses = ['.cbranch-no', '.cstat-no', '.fstat-no'];\n\n// Elements to highlight in the file listing view\nvar fileListingElements = ['td.pct.low'];\n",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 4
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 4
        }
      ]
    },
    {
      "snippet": "\n// Elements to highlight in the file listing view\nvar fileListingElements = ['td.pct.low'];\n\n// We don't want to select elements that are direct descendants of another match",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 5
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 5
        }
      ]
    },
    {
      "snippet": "// Elements to highlight in the file listing view\nvar fileListingElements = ['td.pct.low'];\n\n// We don't want to select elements that are direct descendants of another match\nvar notSelector = ':not(' ",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 6
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 6
        }
      ]
    },
    {
      "snippet": "var fileListingElements = ['td.pct.low'];\n\n// We don't want to select elements that are direct descendants of another match\nvar notSelector = ':not(' + missingCoverageClasses.join('):not(') + ') > '; ",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 7
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 7
        }
      ]
    },
    {
      "snippet": "\n// We don't want to select elements that are direct descendants of another match\nvar notSelector = ':not(' + missingCoverageClasses.join('):not(') + ') > '; // becomes `:not(a):not(b) > `\n\n// Selecto",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 8
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 8
        }
      ]
    },
    {
      "snippet": "// We don't want to select elements that are direct descendants of another match\nvar notSelector = ':not(' + missingCoverageClasses.join('):not(') + ') > '; // becomes `:not(a):not(b) > `\n\n// Selector",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 9
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 9
        }
      ]
    },
    {
      "snippet": "var notSelector = ':not(' + missingCoverageClasses.join('):not(') + ') > '; // becomes `:not(a):not(b) > `\n\n// Selector that finds elements on the page to which we can jump\nvar selector =\nfileListingE",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 10
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 10
        }
      ]
    },
    {
      "snippet": "\n// Selector that finds elements on the page to which we can jump\nvar selector =\nfileListingElements.join(', ') +\n', ' +",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 11
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 11
        }
      ]
    },
    {
      "snippet": "// Selector that finds elements on the page to which we can jump\nvar selector =\nfileListingElements.join(', ') +\n', ' +\nnotSelector +",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 12
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 12
        }
      ]
    },
    {
      "snippet": "var selector =\nfileListingElements.join(', ') +\n', ' +\nnotSelector +\nmissingCoverageClasses.join(', ' + notSelector); // becomes `:not(a):not(b) > a, :not(a):not(b) > b`",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 13
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 13
        }
      ]
    },
    {
      "snippet": "fileListingElements.join(', ') +\n', ' +\nnotSelector +\nmissingCoverageClasses.join(', ' + notSelector); // becomes `:not(a):not(b) > a, :not(a):not(b) > b`\n",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 14
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 14
        }
      ]
    },
    {
      "snippet": "', ' +\nnotSelector +\nmissingCoverageClasses.join(', ' + notSelector); // becomes `:not(a):not(b) > a, :not(a):not(b) > b`\n\n// The NodeList of matching elements",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 15
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 15
        }
      ]
    },
    {
      "snippet": "notSelector +\nmissingCoverageClasses.join(', ' + notSelector); // becomes `:not(a):not(b) > a, :not(a):not(b) > b`\n\n// The NodeList of matching elements\nvar missingCoverageElements = document.querySel",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 16
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 16
        }
      ]
    },
    {
      "snippet": "missingCoverageClasses.join(', ' + notSelector); // becomes `:not(a):not(b) > a, :not(a):not(b) > b`\n\n// The NodeList of matching elements\nvar missingCoverageElements = document.querySelectorAll(selec",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 17
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 17
        }
      ]
    },
    {
      "snippet": "\n// The NodeList of matching elements\nvar missingCoverageElements = document.querySelectorAll(selector);\n\nvar currentIndex;",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 18
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 18
        }
      ]
    },
    {
      "snippet": "// The NodeList of matching elements\nvar missingCoverageElements = document.querySelectorAll(selector);\n\nvar currentIndex;\n",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 19
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 19
        }
      ]
    },
    {
      "snippet": "var missingCoverageElements = document.querySelectorAll(selector);\n\nvar currentIndex;\n\nfunction toggleClass(index) {",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 20
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 20
        }
      ]
    },
    {
      "snippet": "\nvar currentIndex;\n\nfunction toggleClass(index) {\nmissingCoverageElements",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 21
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 21
        }
      ]
    },
    {
      "snippet": "var currentIndex;\n\nfunction toggleClass(index) {\nmissingCoverageElements\n.item(currentIndex)",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 22
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 22
        }
      ]
    },
    {
      "snippet": "\nfunction toggleClass(index) {\nmissingCoverageElements\n.item(currentIndex)\n.classList.remove('highlighted');",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 23
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 23
        }
      ]
    },
    {
      "snippet": "function toggleClass(index) {\nmissingCoverageElements\n.item(currentIndex)\n.classList.remove('highlighted');\nmissingCoverageElements.item(index).classList.add('highlighted');",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 24
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 24
        }
      ]
    },
    {
      "snippet": "missingCoverageElements\n.item(currentIndex)\n.classList.remove('highlighted');\nmissingCoverageElements.item(index).classList.add('highlighted');\n}",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 25
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 25
        }
      ]
    },
    {
      "snippet": ".item(currentIndex)\n.classList.remove('highlighted');\nmissingCoverageElements.item(index).classList.add('highlighted');\n}\n",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 26
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 26
        }
      ]
    },
    {
      "snippet": ".classList.remove('highlighted');\nmissingCoverageElements.item(index).classList.add('highlighted');\n}\n\nfunction makeCurrent(index) {",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 27
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 27
        }
      ]
    },
    {
      "snippet": "missingCoverageElements.item(index).classList.add('highlighted');\n}\n\nfunction makeCurrent(index) {\ntoggleClass(index);",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 28
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 28
        }
      ]
    },
    {
      "snippet": "}\n\nfunction makeCurrent(index) {\ntoggleClass(index);\ncurrentIndex = index;",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 29
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 29
        }
      ]
    },
    {
      "snippet": "\nfunction makeCurrent(index) {\ntoggleClass(index);\ncurrentIndex = index;\nmissingCoverageElements.item(index).scrollIntoView({",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 30
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 30
        }
      ]
    },
    {
      "snippet": "function makeCurrent(index) {\ntoggleClass(index);\ncurrentIndex = index;\nmissingCoverageElements.item(index).scrollIntoView({\nbehavior: 'smooth',",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 31
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 31
        }
      ]
    },
    {
      "snippet": "toggleClass(index);\ncurrentIndex = index;\nmissingCoverageElements.item(index).scrollIntoView({\nbehavior: 'smooth',\nblock: 'center',",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 32
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 32
        }
      ]
    },
    {
      "snippet": "currentIndex = index;\nmissingCoverageElements.item(index).scrollIntoView({\nbehavior: 'smooth',\nblock: 'center',\ninline: 'center'",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 33
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 33
        }
      ]
    },
    {
      "snippet": "missingCoverageElements.item(index).scrollIntoView({\nbehavior: 'smooth',\nblock: 'center',\ninline: 'center'\n});",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 34
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 34
        }
      ]
    },
    {
      "snippet": "behavior: 'smooth',\nblock: 'center',\ninline: 'center'\n});\n}",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 35
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 35
        }
      ]
    },
    {
      "snippet": "block: 'center',\ninline: 'center'\n});\n}\n",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 36
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 36
        }
      ]
    },
    {
      "snippet": "inline: 'center'\n});\n}\n\nfunction goToPrevious() {",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 37
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 37
        }
      ]
    },
    {
      "snippet": "});\n}\n\nfunction goToPrevious() {\nvar nextIndex = 0;",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 38
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 38
        }
      ]
    },
    {
      "snippet": "}\n\nfunction goToPrevious() {\nvar nextIndex = 0;\nif (typeof currentIndex !== 'number' || currentIndex === 0) {",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 39
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 39
        }
      ]
    },
    {
      "snippet": "\nfunction goToPrevious() {\nvar nextIndex = 0;\nif (typeof currentIndex !== 'number' || currentIndex === 0) {\nnextIndex = missingCoverageElements.length - 1;",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 40
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 40
        }
      ]
    },
    {
      "snippet": "function goToPrevious() {\nvar nextIndex = 0;\nif (typeof currentIndex !== 'number' || currentIndex === 0) {\nnextIndex = missingCoverageElements.length - 1;\n} else if (missingCoverageElements.length > 1",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 41
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 41
        }
      ]
    },
    {
      "snippet": "var nextIndex = 0;\nif (typeof currentIndex !== 'number' || currentIndex === 0) {\nnextIndex = missingCoverageElements.length - 1;\n} else if (missingCoverageElements.length > 1) {\nnextIndex = currentInd",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 42
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 42
        }
      ]
    },
    {
      "snippet": "if (typeof currentIndex !== 'number' || currentIndex === 0) {\nnextIndex = missingCoverageElements.length - 1;\n} else if (missingCoverageElements.length > 1) {\nnextIndex = currentIndex - 1;\n}",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 43
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 43
        }
      ]
    },
    {
      "snippet": "nextIndex = missingCoverageElements.length - 1;\n} else if (missingCoverageElements.length > 1) {\nnextIndex = currentIndex - 1;\n}\n",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 44
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 44
        }
      ]
    },
    {
      "snippet": "} else if (missingCoverageElements.length > 1) {\nnextIndex = currentIndex - 1;\n}\n\nmakeCurrent(nextIndex);",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 45
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 45
        }
      ]
    },
    {
      "snippet": "nextIndex = currentIndex - 1;\n}\n\nmakeCurrent(nextIndex);\n}",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 46
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 46
        }
      ]
    },
    {
      "snippet": "}\n\nmakeCurrent(nextIndex);\n}\n",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 47
        },
        {
          "path": "coverage/block-navigation.js",
          "line": 60
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 47
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 60
        }
      ]
    },
    {
      "snippet": "\nmakeCurrent(nextIndex);\n}\n\nfunction goToNext() {",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 48
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 48
        }
      ]
    },
    {
      "snippet": "makeCurrent(nextIndex);\n}\n\nfunction goToNext() {\nvar nextIndex = 0;",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 49
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 49
        }
      ]
    },
    {
      "snippet": "}\n\nfunction goToNext() {\nvar nextIndex = 0;\n",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 50
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 50
        }
      ]
    },
    {
      "snippet": "\nfunction goToNext() {\nvar nextIndex = 0;\n\nif (",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 51
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 51
        }
      ]
    },
    {
      "snippet": "function goToNext() {\nvar nextIndex = 0;\n\nif (\ntypeof currentIndex === 'number' &&",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 52
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 52
        }
      ]
    },
    {
      "snippet": "var nextIndex = 0;\n\nif (\ntypeof currentIndex === 'number' &&\ncurrentIndex < missingCoverageElements.length - 1",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 53
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 53
        }
      ]
    },
    {
      "snippet": "\nif (\ntypeof currentIndex === 'number' &&\ncurrentIndex < missingCoverageElements.length - 1\n) {",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 54
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 54
        }
      ]
    },
    {
      "snippet": "if (\ntypeof currentIndex === 'number' &&\ncurrentIndex < missingCoverageElements.length - 1\n) {\nnextIndex = currentIndex + 1;",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 55
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 55
        }
      ]
    },
    {
      "snippet": "typeof currentIndex === 'number' &&\ncurrentIndex < missingCoverageElements.length - 1\n) {\nnextIndex = currentIndex + 1;\n}",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 56
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 56
        }
      ]
    },
    {
      "snippet": "currentIndex < missingCoverageElements.length - 1\n) {\nnextIndex = currentIndex + 1;\n}\n",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 57
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 57
        }
      ]
    },
    {
      "snippet": ") {\nnextIndex = currentIndex + 1;\n}\n\nmakeCurrent(nextIndex);",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 58
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 58
        }
      ]
    },
    {
      "snippet": "nextIndex = currentIndex + 1;\n}\n\nmakeCurrent(nextIndex);\n}",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 59
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 59
        }
      ]
    },
    {
      "snippet": "\nmakeCurrent(nextIndex);\n}\n\nreturn function jump(event) {",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 61
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 61
        }
      ]
    },
    {
      "snippet": "makeCurrent(nextIndex);\n}\n\nreturn function jump(event) {\nif (",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 62
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 62
        }
      ]
    },
    {
      "snippet": "}\n\nreturn function jump(event) {\nif (\ndocument.getElementById('fileSearch') === document.activeElement &&",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 63
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 63
        }
      ]
    },
    {
      "snippet": "\nreturn function jump(event) {\nif (\ndocument.getElementById('fileSearch') === document.activeElement &&\ndocument.activeElement != null",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 64
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 64
        }
      ]
    },
    {
      "snippet": "return function jump(event) {\nif (\ndocument.getElementById('fileSearch') === document.activeElement &&\ndocument.activeElement != null\n) {",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 65
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 65
        }
      ]
    },
    {
      "snippet": "if (\ndocument.getElementById('fileSearch') === document.activeElement &&\ndocument.activeElement != null\n) {\n// if we're currently focused on the search input, we don't want to navigate",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 66
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 66
        }
      ]
    },
    {
      "snippet": "document.getElementById('fileSearch') === document.activeElement &&\ndocument.activeElement != null\n) {\n// if we're currently focused on the search input, we don't want to navigate\nreturn;",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 67
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 67
        }
      ]
    },
    {
      "snippet": "document.activeElement != null\n) {\n// if we're currently focused on the search input, we don't want to navigate\nreturn;\n}",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 68
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 68
        }
      ]
    },
    {
      "snippet": ") {\n// if we're currently focused on the search input, we don't want to navigate\nreturn;\n}\n",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 69
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 69
        }
      ]
    },
    {
      "snippet": "// if we're currently focused on the search input, we don't want to navigate\nreturn;\n}\n\nswitch (event.which) {",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 70
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 70
        }
      ]
    },
    {
      "snippet": "return;\n}\n\nswitch (event.which) {\ncase 78: // n",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 71
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 71
        }
      ]
    },
    {
      "snippet": "}\n\nswitch (event.which) {\ncase 78: // n\ncase 74: // j",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 72
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 72
        }
      ]
    },
    {
      "snippet": "\nswitch (event.which) {\ncase 78: // n\ncase 74: // j\ngoToNext();",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 73
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 73
        }
      ]
    },
    {
      "snippet": "switch (event.which) {\ncase 78: // n\ncase 74: // j\ngoToNext();\nbreak;",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 74
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 74
        }
      ]
    },
    {
      "snippet": "case 78: // n\ncase 74: // j\ngoToNext();\nbreak;\ncase 66: // b",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 75
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 75
        }
      ]
    },
    {
      "snippet": "case 74: // j\ngoToNext();\nbreak;\ncase 66: // b\ncase 75: // k",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 76
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 76
        }
      ]
    },
    {
      "snippet": "goToNext();\nbreak;\ncase 66: // b\ncase 75: // k\ncase 80: // p",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 77
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 77
        }
      ]
    },
    {
      "snippet": "break;\ncase 66: // b\ncase 75: // k\ncase 80: // p\ngoToPrevious();",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 78
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 78
        }
      ]
    },
    {
      "snippet": "case 66: // b\ncase 75: // k\ncase 80: // p\ngoToPrevious();\nbreak;",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 79
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 79
        }
      ]
    },
    {
      "snippet": "case 75: // k\ncase 80: // p\ngoToPrevious();\nbreak;\n}",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 80
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 80
        }
      ]
    },
    {
      "snippet": "case 80: // p\ngoToPrevious();\nbreak;\n}\n};",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 81
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 81
        }
      ]
    },
    {
      "snippet": "goToPrevious();\nbreak;\n}\n};\n})();",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 82
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 82
        }
      ]
    },
    {
      "snippet": "break;\n}\n};\n})();\nwindow.addEventListener('keydown', jumpToCode);",
      "occurrences": [
        {
          "path": "coverage/block-navigation.js",
          "line": 83
        },
        {
          "path": "coverage/lcov-report/block-navigation.js",
          "line": 83
        }
      ]
    },
    {
      "snippet": "/* eslint-disable */\nvar addSorting = (function() {\n'use strict';\nvar cols,\ncurrentSort = {",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 1
        },
        {
          "path": "coverage/sorter.js",
          "line": 1
        }
      ]
    },
    {
      "snippet": "var addSorting = (function() {\n'use strict';\nvar cols,\ncurrentSort = {\nindex: 0,",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 2
        },
        {
          "path": "coverage/sorter.js",
          "line": 2
        }
      ]
    },
    {
      "snippet": "'use strict';\nvar cols,\ncurrentSort = {\nindex: 0,\ndesc: false",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 3
        },
        {
          "path": "coverage/sorter.js",
          "line": 3
        }
      ]
    },
    {
      "snippet": "var cols,\ncurrentSort = {\nindex: 0,\ndesc: false\n};",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 4
        },
        {
          "path": "coverage/sorter.js",
          "line": 4
        }
      ]
    },
    {
      "snippet": "currentSort = {\nindex: 0,\ndesc: false\n};\n",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 5
        },
        {
          "path": "coverage/sorter.js",
          "line": 5
        }
      ]
    },
    {
      "snippet": "index: 0,\ndesc: false\n};\n\n// returns the summary table element",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 6
        },
        {
          "path": "coverage/sorter.js",
          "line": 6
        }
      ]
    },
    {
      "snippet": "desc: false\n};\n\n// returns the summary table element\nfunction getTable() {",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 7
        },
        {
          "path": "coverage/sorter.js",
          "line": 7
        }
      ]
    },
    {
      "snippet": "};\n\n// returns the summary table element\nfunction getTable() {\nreturn document.querySelector('.coverage-summary');",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 8
        },
        {
          "path": "coverage/sorter.js",
          "line": 8
        }
      ]
    },
    {
      "snippet": "\n// returns the summary table element\nfunction getTable() {\nreturn document.querySelector('.coverage-summary');\n}",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 9
        },
        {
          "path": "coverage/sorter.js",
          "line": 9
        }
      ]
    },
    {
      "snippet": "// returns the summary table element\nfunction getTable() {\nreturn document.querySelector('.coverage-summary');\n}\n// returns the thead element of the summary table",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 10
        },
        {
          "path": "coverage/sorter.js",
          "line": 10
        }
      ]
    },
    {
      "snippet": "function getTable() {\nreturn document.querySelector('.coverage-summary');\n}\n// returns the thead element of the summary table\nfunction getTableHeader() {",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 11
        },
        {
          "path": "coverage/sorter.js",
          "line": 11
        }
      ]
    },
    {
      "snippet": "return document.querySelector('.coverage-summary');\n}\n// returns the thead element of the summary table\nfunction getTableHeader() {\nreturn getTable().querySelector('thead tr');",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 12
        },
        {
          "path": "coverage/sorter.js",
          "line": 12
        }
      ]
    },
    {
      "snippet": "}\n// returns the thead element of the summary table\nfunction getTableHeader() {\nreturn getTable().querySelector('thead tr');\n}",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 13
        },
        {
          "path": "coverage/sorter.js",
          "line": 13
        }
      ]
    },
    {
      "snippet": "// returns the thead element of the summary table\nfunction getTableHeader() {\nreturn getTable().querySelector('thead tr');\n}\n// returns the tbody element of the summary table",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 14
        },
        {
          "path": "coverage/sorter.js",
          "line": 14
        }
      ]
    },
    {
      "snippet": "function getTableHeader() {\nreturn getTable().querySelector('thead tr');\n}\n// returns the tbody element of the summary table\nfunction getTableBody() {",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 15
        },
        {
          "path": "coverage/sorter.js",
          "line": 15
        }
      ]
    },
    {
      "snippet": "return getTable().querySelector('thead tr');\n}\n// returns the tbody element of the summary table\nfunction getTableBody() {\nreturn getTable().querySelector('tbody');",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 16
        },
        {
          "path": "coverage/sorter.js",
          "line": 16
        }
      ]
    },
    {
      "snippet": "}\n// returns the tbody element of the summary table\nfunction getTableBody() {\nreturn getTable().querySelector('tbody');\n}",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 17
        },
        {
          "path": "coverage/sorter.js",
          "line": 17
        }
      ]
    },
    {
      "snippet": "// returns the tbody element of the summary table\nfunction getTableBody() {\nreturn getTable().querySelector('tbody');\n}\n// returns the th element for nth column",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 18
        },
        {
          "path": "coverage/sorter.js",
          "line": 18
        }
      ]
    },
    {
      "snippet": "function getTableBody() {\nreturn getTable().querySelector('tbody');\n}\n// returns the th element for nth column\nfunction getNthColumn(n) {",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 19
        },
        {
          "path": "coverage/sorter.js",
          "line": 19
        }
      ]
    },
    {
      "snippet": "return getTable().querySelector('tbody');\n}\n// returns the th element for nth column\nfunction getNthColumn(n) {\nreturn getTableHeader().querySelectorAll('th')[n];",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 20
        },
        {
          "path": "coverage/sorter.js",
          "line": 20
        }
      ]
    },
    {
      "snippet": "}\n// returns the th element for nth column\nfunction getNthColumn(n) {\nreturn getTableHeader().querySelectorAll('th')[n];\n}",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 21
        },
        {
          "path": "coverage/sorter.js",
          "line": 21
        }
      ]
    },
    {
      "snippet": "// returns the th element for nth column\nfunction getNthColumn(n) {\nreturn getTableHeader().querySelectorAll('th')[n];\n}\n",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 22
        },
        {
          "path": "coverage/sorter.js",
          "line": 22
        }
      ]
    },
    {
      "snippet": "function getNthColumn(n) {\nreturn getTableHeader().querySelectorAll('th')[n];\n}\n\nfunction onFilterInput() {",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 23
        },
        {
          "path": "coverage/sorter.js",
          "line": 23
        }
      ]
    },
    {
      "snippet": "return getTableHeader().querySelectorAll('th')[n];\n}\n\nfunction onFilterInput() {\nconst searchValue = document.getElementById('fileSearch').value;",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 24
        },
        {
          "path": "coverage/sorter.js",
          "line": 24
        }
      ]
    },
    {
      "snippet": "}\n\nfunction onFilterInput() {\nconst searchValue = document.getElementById('fileSearch').value;\nconst rows = document.getElementsByTagName('tbody')[0].children;",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 25
        },
        {
          "path": "coverage/sorter.js",
          "line": 25
        }
      ]
    },
    {
      "snippet": "\nfunction onFilterInput() {\nconst searchValue = document.getElementById('fileSearch').value;\nconst rows = document.getElementsByTagName('tbody')[0].children;\n",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 26
        },
        {
          "path": "coverage/sorter.js",
          "line": 26
        }
      ]
    },
    {
      "snippet": "function onFilterInput() {\nconst searchValue = document.getElementById('fileSearch').value;\nconst rows = document.getElementsByTagName('tbody')[0].children;\n\n// Try to create a RegExp from the searchV",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 27
        },
        {
          "path": "coverage/sorter.js",
          "line": 27
        }
      ]
    },
    {
      "snippet": "const searchValue = document.getElementById('fileSearch').value;\nconst rows = document.getElementsByTagName('tbody')[0].children;\n\n// Try to create a RegExp from the searchValue. If it fails (invalid ",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 28
        },
        {
          "path": "coverage/sorter.js",
          "line": 28
        }
      ]
    },
    {
      "snippet": "const rows = document.getElementsByTagName('tbody')[0].children;\n\n// Try to create a RegExp from the searchValue. If it fails (invalid regex),\n// it will be treated as a plain text search\nlet searchRe",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 29
        },
        {
          "path": "coverage/sorter.js",
          "line": 29
        }
      ]
    },
    {
      "snippet": "\n// Try to create a RegExp from the searchValue. If it fails (invalid regex),\n// it will be treated as a plain text search\nlet searchRegex;\ntry {",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 30
        },
        {
          "path": "coverage/sorter.js",
          "line": 30
        }
      ]
    },
    {
      "snippet": "// Try to create a RegExp from the searchValue. If it fails (invalid regex),\n// it will be treated as a plain text search\nlet searchRegex;\ntry {\nsearchRegex = new RegExp(searchValue, 'i'); // 'i' for ",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 31
        },
        {
          "path": "coverage/sorter.js",
          "line": 31
        }
      ]
    },
    {
      "snippet": "// it will be treated as a plain text search\nlet searchRegex;\ntry {\nsearchRegex = new RegExp(searchValue, 'i'); // 'i' for case-insensitive\n} catch (error) {",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 32
        },
        {
          "path": "coverage/sorter.js",
          "line": 32
        }
      ]
    },
    {
      "snippet": "let searchRegex;\ntry {\nsearchRegex = new RegExp(searchValue, 'i'); // 'i' for case-insensitive\n} catch (error) {\nsearchRegex = null;",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 33
        },
        {
          "path": "coverage/sorter.js",
          "line": 33
        }
      ]
    },
    {
      "snippet": "try {\nsearchRegex = new RegExp(searchValue, 'i'); // 'i' for case-insensitive\n} catch (error) {\nsearchRegex = null;\n}",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 34
        },
        {
          "path": "coverage/sorter.js",
          "line": 34
        }
      ]
    },
    {
      "snippet": "searchRegex = new RegExp(searchValue, 'i'); // 'i' for case-insensitive\n} catch (error) {\nsearchRegex = null;\n}\n",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 35
        },
        {
          "path": "coverage/sorter.js",
          "line": 35
        }
      ]
    },
    {
      "snippet": "} catch (error) {\nsearchRegex = null;\n}\n\nfor (let i = 0; i < rows.length; i++) {",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 36
        },
        {
          "path": "coverage/sorter.js",
          "line": 36
        }
      ]
    },
    {
      "snippet": "searchRegex = null;\n}\n\nfor (let i = 0; i < rows.length; i++) {\nconst row = rows[i];",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 37
        },
        {
          "path": "coverage/sorter.js",
          "line": 37
        }
      ]
    },
    {
      "snippet": "}\n\nfor (let i = 0; i < rows.length; i++) {\nconst row = rows[i];\nlet isMatch = false;",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 38
        },
        {
          "path": "coverage/sorter.js",
          "line": 38
        }
      ]
    },
    {
      "snippet": "\nfor (let i = 0; i < rows.length; i++) {\nconst row = rows[i];\nlet isMatch = false;\n",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 39
        },
        {
          "path": "coverage/sorter.js",
          "line": 39
        }
      ]
    },
    {
      "snippet": "for (let i = 0; i < rows.length; i++) {\nconst row = rows[i];\nlet isMatch = false;\n\nif (searchRegex) {",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 40
        },
        {
          "path": "coverage/sorter.js",
          "line": 40
        }
      ]
    },
    {
      "snippet": "const row = rows[i];\nlet isMatch = false;\n\nif (searchRegex) {\n// If a valid regex was created, use it for matching",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 41
        },
        {
          "path": "coverage/sorter.js",
          "line": 41
        }
      ]
    },
    {
      "snippet": "let isMatch = false;\n\nif (searchRegex) {\n// If a valid regex was created, use it for matching\nisMatch = searchRegex.test(row.textContent);",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 42
        },
        {
          "path": "coverage/sorter.js",
          "line": 42
        }
      ]
    },
    {
      "snippet": "\nif (searchRegex) {\n// If a valid regex was created, use it for matching\nisMatch = searchRegex.test(row.textContent);\n} else {",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 43
        },
        {
          "path": "coverage/sorter.js",
          "line": 43
        }
      ]
    },
    {
      "snippet": "if (searchRegex) {\n// If a valid regex was created, use it for matching\nisMatch = searchRegex.test(row.textContent);\n} else {\n// Otherwise, fall back to the original plain text search",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 44
        },
        {
          "path": "coverage/sorter.js",
          "line": 44
        }
      ]
    },
    {
      "snippet": "// If a valid regex was created, use it for matching\nisMatch = searchRegex.test(row.textContent);\n} else {\n// Otherwise, fall back to the original plain text search\nisMatch = row.textContent",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 45
        },
        {
          "path": "coverage/sorter.js",
          "line": 45
        }
      ]
    },
    {
      "snippet": "isMatch = searchRegex.test(row.textContent);\n} else {\n// Otherwise, fall back to the original plain text search\nisMatch = row.textContent\n.toLowerCase()",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 46
        },
        {
          "path": "coverage/sorter.js",
          "line": 46
        }
      ]
    },
    {
      "snippet": "} else {\n// Otherwise, fall back to the original plain text search\nisMatch = row.textContent\n.toLowerCase()\n.includes(searchValue.toLowerCase());",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 47
        },
        {
          "path": "coverage/sorter.js",
          "line": 47
        }
      ]
    },
    {
      "snippet": "// Otherwise, fall back to the original plain text search\nisMatch = row.textContent\n.toLowerCase()\n.includes(searchValue.toLowerCase());\n}",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 48
        },
        {
          "path": "coverage/sorter.js",
          "line": 48
        }
      ]
    },
    {
      "snippet": "isMatch = row.textContent\n.toLowerCase()\n.includes(searchValue.toLowerCase());\n}\n",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 49
        },
        {
          "path": "coverage/sorter.js",
          "line": 49
        }
      ]
    },
    {
      "snippet": ".toLowerCase()\n.includes(searchValue.toLowerCase());\n}\n\nrow.style.display = isMatch ? '' : 'none';",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 50
        },
        {
          "path": "coverage/sorter.js",
          "line": 50
        }
      ]
    },
    {
      "snippet": ".includes(searchValue.toLowerCase());\n}\n\nrow.style.display = isMatch ? '' : 'none';\n}",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 51
        },
        {
          "path": "coverage/sorter.js",
          "line": 51
        }
      ]
    },
    {
      "snippet": "}\n\nrow.style.display = isMatch ? '' : 'none';\n}\n}",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 52
        },
        {
          "path": "coverage/sorter.js",
          "line": 52
        }
      ]
    },
    {
      "snippet": "\nrow.style.display = isMatch ? '' : 'none';\n}\n}\n",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 53
        },
        {
          "path": "coverage/sorter.js",
          "line": 53
        }
      ]
    },
    {
      "snippet": "row.style.display = isMatch ? '' : 'none';\n}\n}\n\n// loads the search box",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 54
        },
        {
          "path": "coverage/sorter.js",
          "line": 54
        }
      ]
    },
    {
      "snippet": "}\n}\n\n// loads the search box\nfunction addSearchBox() {",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 55
        },
        {
          "path": "coverage/sorter.js",
          "line": 55
        }
      ]
    },
    {
      "snippet": "}\n\n// loads the search box\nfunction addSearchBox() {\nvar template = document.getElementById('filterTemplate');",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 56
        },
        {
          "path": "coverage/sorter.js",
          "line": 56
        }
      ]
    },
    {
      "snippet": "\n// loads the search box\nfunction addSearchBox() {\nvar template = document.getElementById('filterTemplate');\nvar templateClone = template.content.cloneNode(true);",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 57
        },
        {
          "path": "coverage/sorter.js",
          "line": 57
        }
      ]
    },
    {
      "snippet": "// loads the search box\nfunction addSearchBox() {\nvar template = document.getElementById('filterTemplate');\nvar templateClone = template.content.cloneNode(true);\ntemplateClone.getElementById('fileSear",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 58
        },
        {
          "path": "coverage/sorter.js",
          "line": 58
        }
      ]
    },
    {
      "snippet": "function addSearchBox() {\nvar template = document.getElementById('filterTemplate');\nvar templateClone = template.content.cloneNode(true);\ntemplateClone.getElementById('fileSearch').oninput = onFilterI",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 59
        },
        {
          "path": "coverage/sorter.js",
          "line": 59
        }
      ]
    },
    {
      "snippet": "var template = document.getElementById('filterTemplate');\nvar templateClone = template.content.cloneNode(true);\ntemplateClone.getElementById('fileSearch').oninput = onFilterInput;\ntemplate.parentEleme",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 60
        },
        {
          "path": "coverage/sorter.js",
          "line": 60
        }
      ]
    },
    {
      "snippet": "var templateClone = template.content.cloneNode(true);\ntemplateClone.getElementById('fileSearch').oninput = onFilterInput;\ntemplate.parentElement.appendChild(templateClone);\n}\n",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 61
        },
        {
          "path": "coverage/sorter.js",
          "line": 61
        }
      ]
    },
    {
      "snippet": "templateClone.getElementById('fileSearch').oninput = onFilterInput;\ntemplate.parentElement.appendChild(templateClone);\n}\n\n// loads all columns",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 62
        },
        {
          "path": "coverage/sorter.js",
          "line": 62
        }
      ]
    },
    {
      "snippet": "template.parentElement.appendChild(templateClone);\n}\n\n// loads all columns\nfunction loadColumns() {",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 63
        },
        {
          "path": "coverage/sorter.js",
          "line": 63
        }
      ]
    },
    {
      "snippet": "}\n\n// loads all columns\nfunction loadColumns() {\nvar colNodes = getTableHeader().querySelectorAll('th'),",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 64
        },
        {
          "path": "coverage/sorter.js",
          "line": 64
        }
      ]
    },
    {
      "snippet": "\n// loads all columns\nfunction loadColumns() {\nvar colNodes = getTableHeader().querySelectorAll('th'),\ncolNode,",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 65
        },
        {
          "path": "coverage/sorter.js",
          "line": 65
        }
      ]
    },
    {
      "snippet": "// loads all columns\nfunction loadColumns() {\nvar colNodes = getTableHeader().querySelectorAll('th'),\ncolNode,\ncols = [],",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 66
        },
        {
          "path": "coverage/sorter.js",
          "line": 66
        }
      ]
    },
    {
      "snippet": "function loadColumns() {\nvar colNodes = getTableHeader().querySelectorAll('th'),\ncolNode,\ncols = [],\ncol,",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 67
        },
        {
          "path": "coverage/sorter.js",
          "line": 67
        }
      ]
    },
    {
      "snippet": "var colNodes = getTableHeader().querySelectorAll('th'),\ncolNode,\ncols = [],\ncol,\ni;",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 68
        },
        {
          "path": "coverage/sorter.js",
          "line": 68
        }
      ]
    },
    {
      "snippet": "colNode,\ncols = [],\ncol,\ni;\n",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 69
        },
        {
          "path": "coverage/sorter.js",
          "line": 69
        }
      ]
    },
    {
      "snippet": "cols = [],\ncol,\ni;\n\nfor (i = 0; i < colNodes.length; i += 1) {",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 70
        },
        {
          "path": "coverage/sorter.js",
          "line": 70
        }
      ]
    },
    {
      "snippet": "col,\ni;\n\nfor (i = 0; i < colNodes.length; i += 1) {\ncolNode = colNodes[i];",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 71
        },
        {
          "path": "coverage/sorter.js",
          "line": 71
        }
      ]
    },
    {
      "snippet": "i;\n\nfor (i = 0; i < colNodes.length; i += 1) {\ncolNode = colNodes[i];\ncol = {",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 72
        },
        {
          "path": "coverage/sorter.js",
          "line": 72
        }
      ]
    },
    {
      "snippet": "\nfor (i = 0; i < colNodes.length; i += 1) {\ncolNode = colNodes[i];\ncol = {\nkey: colNode.getAttribute('data-col'),",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 73
        },
        {
          "path": "coverage/sorter.js",
          "line": 73
        }
      ]
    },
    {
      "snippet": "for (i = 0; i < colNodes.length; i += 1) {\ncolNode = colNodes[i];\ncol = {\nkey: colNode.getAttribute('data-col'),\nsortable: !colNode.getAttribute('data-nosort'),",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 74
        },
        {
          "path": "coverage/sorter.js",
          "line": 74
        }
      ]
    },
    {
      "snippet": "colNode = colNodes[i];\ncol = {\nkey: colNode.getAttribute('data-col'),\nsortable: !colNode.getAttribute('data-nosort'),\ntype: colNode.getAttribute('data-type') || 'string'",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 75
        },
        {
          "path": "coverage/sorter.js",
          "line": 75
        }
      ]
    },
    {
      "snippet": "col = {\nkey: colNode.getAttribute('data-col'),\nsortable: !colNode.getAttribute('data-nosort'),\ntype: colNode.getAttribute('data-type') || 'string'\n};",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 76
        },
        {
          "path": "coverage/sorter.js",
          "line": 76
        }
      ]
    },
    {
      "snippet": "key: colNode.getAttribute('data-col'),\nsortable: !colNode.getAttribute('data-nosort'),\ntype: colNode.getAttribute('data-type') || 'string'\n};\ncols.push(col);",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 77
        },
        {
          "path": "coverage/sorter.js",
          "line": 77
        }
      ]
    },
    {
      "snippet": "sortable: !colNode.getAttribute('data-nosort'),\ntype: colNode.getAttribute('data-type') || 'string'\n};\ncols.push(col);\nif (col.sortable) {",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 78
        },
        {
          "path": "coverage/sorter.js",
          "line": 78
        }
      ]
    },
    {
      "snippet": "type: colNode.getAttribute('data-type') || 'string'\n};\ncols.push(col);\nif (col.sortable) {\ncol.defaultDescSort = col.type === 'number';",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 79
        },
        {
          "path": "coverage/sorter.js",
          "line": 79
        }
      ]
    },
    {
      "snippet": "};\ncols.push(col);\nif (col.sortable) {\ncol.defaultDescSort = col.type === 'number';\ncolNode.innerHTML =",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 80
        },
        {
          "path": "coverage/sorter.js",
          "line": 80
        }
      ]
    },
    {
      "snippet": "cols.push(col);\nif (col.sortable) {\ncol.defaultDescSort = col.type === 'number';\ncolNode.innerHTML =\ncolNode.innerHTML + '<span class=\"sorter\"></span>';",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 81
        },
        {
          "path": "coverage/sorter.js",
          "line": 81
        }
      ]
    },
    {
      "snippet": "if (col.sortable) {\ncol.defaultDescSort = col.type === 'number';\ncolNode.innerHTML =\ncolNode.innerHTML + '<span class=\"sorter\"></span>';\n}",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 82
        },
        {
          "path": "coverage/sorter.js",
          "line": 82
        }
      ]
    },
    {
      "snippet": "col.defaultDescSort = col.type === 'number';\ncolNode.innerHTML =\ncolNode.innerHTML + '<span class=\"sorter\"></span>';\n}\n}",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 83
        },
        {
          "path": "coverage/sorter.js",
          "line": 83
        }
      ]
    },
    {
      "snippet": "colNode.innerHTML =\ncolNode.innerHTML + '<span class=\"sorter\"></span>';\n}\n}\nreturn cols;",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 84
        },
        {
          "path": "coverage/sorter.js",
          "line": 84
        }
      ]
    },
    {
      "snippet": "colNode.innerHTML + '<span class=\"sorter\"></span>';\n}\n}\nreturn cols;\n}",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 85
        },
        {
          "path": "coverage/sorter.js",
          "line": 85
        }
      ]
    },
    {
      "snippet": "}\n}\nreturn cols;\n}\n// attaches a data attribute to every tr element with an object",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 86
        },
        {
          "path": "coverage/sorter.js",
          "line": 86
        }
      ]
    },
    {
      "snippet": "}\nreturn cols;\n}\n// attaches a data attribute to every tr element with an object\n// of data values keyed by column name",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 87
        },
        {
          "path": "coverage/sorter.js",
          "line": 87
        }
      ]
    },
    {
      "snippet": "return cols;\n}\n// attaches a data attribute to every tr element with an object\n// of data values keyed by column name\nfunction loadRowData(tableRow) {",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 88
        },
        {
          "path": "coverage/sorter.js",
          "line": 88
        }
      ]
    },
    {
      "snippet": "}\n// attaches a data attribute to every tr element with an object\n// of data values keyed by column name\nfunction loadRowData(tableRow) {\nvar tableCols = tableRow.querySelectorAll('td'),",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 89
        },
        {
          "path": "coverage/sorter.js",
          "line": 89
        }
      ]
    },
    {
      "snippet": "// attaches a data attribute to every tr element with an object\n// of data values keyed by column name\nfunction loadRowData(tableRow) {\nvar tableCols = tableRow.querySelectorAll('td'),\ncolNode,",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 90
        },
        {
          "path": "coverage/sorter.js",
          "line": 90
        }
      ]
    },
    {
      "snippet": "// of data values keyed by column name\nfunction loadRowData(tableRow) {\nvar tableCols = tableRow.querySelectorAll('td'),\ncolNode,\ncol,",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 91
        },
        {
          "path": "coverage/sorter.js",
          "line": 91
        }
      ]
    },
    {
      "snippet": "function loadRowData(tableRow) {\nvar tableCols = tableRow.querySelectorAll('td'),\ncolNode,\ncol,\ndata = {},",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 92
        },
        {
          "path": "coverage/sorter.js",
          "line": 92
        }
      ]
    },
    {
      "snippet": "var tableCols = tableRow.querySelectorAll('td'),\ncolNode,\ncol,\ndata = {},\ni,",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 93
        },
        {
          "path": "coverage/sorter.js",
          "line": 93
        }
      ]
    },
    {
      "snippet": "colNode,\ncol,\ndata = {},\ni,\nval;",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 94
        },
        {
          "path": "coverage/sorter.js",
          "line": 94
        }
      ]
    },
    {
      "snippet": "col,\ndata = {},\ni,\nval;\nfor (i = 0; i < tableCols.length; i += 1) {",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 95
        },
        {
          "path": "coverage/sorter.js",
          "line": 95
        }
      ]
    },
    {
      "snippet": "data = {},\ni,\nval;\nfor (i = 0; i < tableCols.length; i += 1) {\ncolNode = tableCols[i];",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 96
        },
        {
          "path": "coverage/sorter.js",
          "line": 96
        }
      ]
    },
    {
      "snippet": "i,\nval;\nfor (i = 0; i < tableCols.length; i += 1) {\ncolNode = tableCols[i];\ncol = cols[i];",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 97
        },
        {
          "path": "coverage/sorter.js",
          "line": 97
        }
      ]
    },
    {
      "snippet": "val;\nfor (i = 0; i < tableCols.length; i += 1) {\ncolNode = tableCols[i];\ncol = cols[i];\nval = colNode.getAttribute('data-value');",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 98
        },
        {
          "path": "coverage/sorter.js",
          "line": 98
        }
      ]
    },
    {
      "snippet": "for (i = 0; i < tableCols.length; i += 1) {\ncolNode = tableCols[i];\ncol = cols[i];\nval = colNode.getAttribute('data-value');\nif (col.type === 'number') {",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 99
        },
        {
          "path": "coverage/sorter.js",
          "line": 99
        }
      ]
    },
    {
      "snippet": "colNode = tableCols[i];\ncol = cols[i];\nval = colNode.getAttribute('data-value');\nif (col.type === 'number') {\nval = Number(val);",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 100
        },
        {
          "path": "coverage/sorter.js",
          "line": 100
        }
      ]
    },
    {
      "snippet": "col = cols[i];\nval = colNode.getAttribute('data-value');\nif (col.type === 'number') {\nval = Number(val);\n}",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 101
        },
        {
          "path": "coverage/sorter.js",
          "line": 101
        }
      ]
    },
    {
      "snippet": "val = colNode.getAttribute('data-value');\nif (col.type === 'number') {\nval = Number(val);\n}\ndata[col.key] = val;",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 102
        },
        {
          "path": "coverage/sorter.js",
          "line": 102
        }
      ]
    },
    {
      "snippet": "if (col.type === 'number') {\nval = Number(val);\n}\ndata[col.key] = val;\n}",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 103
        },
        {
          "path": "coverage/sorter.js",
          "line": 103
        }
      ]
    },
    {
      "snippet": "val = Number(val);\n}\ndata[col.key] = val;\n}\nreturn data;",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 104
        },
        {
          "path": "coverage/sorter.js",
          "line": 104
        }
      ]
    },
    {
      "snippet": "}\ndata[col.key] = val;\n}\nreturn data;\n}",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 105
        },
        {
          "path": "coverage/sorter.js",
          "line": 105
        }
      ]
    },
    {
      "snippet": "data[col.key] = val;\n}\nreturn data;\n}\n// loads all row data",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 106
        },
        {
          "path": "coverage/sorter.js",
          "line": 106
        }
      ]
    },
    {
      "snippet": "}\nreturn data;\n}\n// loads all row data\nfunction loadData() {",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 107
        },
        {
          "path": "coverage/sorter.js",
          "line": 107
        }
      ]
    },
    {
      "snippet": "return data;\n}\n// loads all row data\nfunction loadData() {\nvar rows = getTableBody().querySelectorAll('tr'),",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 108
        },
        {
          "path": "coverage/sorter.js",
          "line": 108
        }
      ]
    },
    {
      "snippet": "}\n// loads all row data\nfunction loadData() {\nvar rows = getTableBody().querySelectorAll('tr'),\ni;",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 109
        },
        {
          "path": "coverage/sorter.js",
          "line": 109
        }
      ]
    },
    {
      "snippet": "// loads all row data\nfunction loadData() {\nvar rows = getTableBody().querySelectorAll('tr'),\ni;\n",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 110
        },
        {
          "path": "coverage/sorter.js",
          "line": 110
        }
      ]
    },
    {
      "snippet": "function loadData() {\nvar rows = getTableBody().querySelectorAll('tr'),\ni;\n\nfor (i = 0; i < rows.length; i += 1) {",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 111
        },
        {
          "path": "coverage/sorter.js",
          "line": 111
        }
      ]
    },
    {
      "snippet": "var rows = getTableBody().querySelectorAll('tr'),\ni;\n\nfor (i = 0; i < rows.length; i += 1) {\nrows[i].data = loadRowData(rows[i]);",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 112
        },
        {
          "path": "coverage/sorter.js",
          "line": 112
        }
      ]
    },
    {
      "snippet": "i;\n\nfor (i = 0; i < rows.length; i += 1) {\nrows[i].data = loadRowData(rows[i]);\n}",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 113
        },
        {
          "path": "coverage/sorter.js",
          "line": 113
        }
      ]
    },
    {
      "snippet": "\nfor (i = 0; i < rows.length; i += 1) {\nrows[i].data = loadRowData(rows[i]);\n}\n}",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 114
        },
        {
          "path": "coverage/sorter.js",
          "line": 114
        }
      ]
    },
    {
      "snippet": "for (i = 0; i < rows.length; i += 1) {\nrows[i].data = loadRowData(rows[i]);\n}\n}\n// sorts the table using the data for the ith column",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 115
        },
        {
          "path": "coverage/sorter.js",
          "line": 115
        }
      ]
    },
    {
      "snippet": "rows[i].data = loadRowData(rows[i]);\n}\n}\n// sorts the table using the data for the ith column\nfunction sortByIndex(index, desc) {",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 116
        },
        {
          "path": "coverage/sorter.js",
          "line": 116
        }
      ]
    },
    {
      "snippet": "}\n}\n// sorts the table using the data for the ith column\nfunction sortByIndex(index, desc) {\nvar key = cols[index].key,",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 117
        },
        {
          "path": "coverage/sorter.js",
          "line": 117
        }
      ]
    },
    {
      "snippet": "}\n// sorts the table using the data for the ith column\nfunction sortByIndex(index, desc) {\nvar key = cols[index].key,\nsorter = function(a, b) {",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 118
        },
        {
          "path": "coverage/sorter.js",
          "line": 118
        }
      ]
    },
    {
      "snippet": "// sorts the table using the data for the ith column\nfunction sortByIndex(index, desc) {\nvar key = cols[index].key,\nsorter = function(a, b) {\na = a.data[key];",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 119
        },
        {
          "path": "coverage/sorter.js",
          "line": 119
        }
      ]
    },
    {
      "snippet": "function sortByIndex(index, desc) {\nvar key = cols[index].key,\nsorter = function(a, b) {\na = a.data[key];\nb = b.data[key];",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 120
        },
        {
          "path": "coverage/sorter.js",
          "line": 120
        }
      ]
    },
    {
      "snippet": "var key = cols[index].key,\nsorter = function(a, b) {\na = a.data[key];\nb = b.data[key];\nreturn a < b ? -1 : a > b ? 1 : 0;",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 121
        },
        {
          "path": "coverage/sorter.js",
          "line": 121
        }
      ]
    },
    {
      "snippet": "sorter = function(a, b) {\na = a.data[key];\nb = b.data[key];\nreturn a < b ? -1 : a > b ? 1 : 0;\n},",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 122
        },
        {
          "path": "coverage/sorter.js",
          "line": 122
        }
      ]
    },
    {
      "snippet": "a = a.data[key];\nb = b.data[key];\nreturn a < b ? -1 : a > b ? 1 : 0;\n},\nfinalSorter = sorter,",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 123
        },
        {
          "path": "coverage/sorter.js",
          "line": 123
        }
      ]
    },
    {
      "snippet": "b = b.data[key];\nreturn a < b ? -1 : a > b ? 1 : 0;\n},\nfinalSorter = sorter,\ntableBody = document.querySelector('.coverage-summary tbody'),",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 124
        },
        {
          "path": "coverage/sorter.js",
          "line": 124
        }
      ]
    },
    {
      "snippet": "return a < b ? -1 : a > b ? 1 : 0;\n},\nfinalSorter = sorter,\ntableBody = document.querySelector('.coverage-summary tbody'),\nrowNodes = tableBody.querySelectorAll('tr'),",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 125
        },
        {
          "path": "coverage/sorter.js",
          "line": 125
        }
      ]
    },
    {
      "snippet": "},\nfinalSorter = sorter,\ntableBody = document.querySelector('.coverage-summary tbody'),\nrowNodes = tableBody.querySelectorAll('tr'),\nrows = [],",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 126
        },
        {
          "path": "coverage/sorter.js",
          "line": 126
        }
      ]
    },
    {
      "snippet": "finalSorter = sorter,\ntableBody = document.querySelector('.coverage-summary tbody'),\nrowNodes = tableBody.querySelectorAll('tr'),\nrows = [],\ni;",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 127
        },
        {
          "path": "coverage/sorter.js",
          "line": 127
        }
      ]
    },
    {
      "snippet": "tableBody = document.querySelector('.coverage-summary tbody'),\nrowNodes = tableBody.querySelectorAll('tr'),\nrows = [],\ni;\n",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 128
        },
        {
          "path": "coverage/sorter.js",
          "line": 128
        }
      ]
    },
    {
      "snippet": "rowNodes = tableBody.querySelectorAll('tr'),\nrows = [],\ni;\n\nif (desc) {",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 129
        },
        {
          "path": "coverage/sorter.js",
          "line": 129
        }
      ]
    },
    {
      "snippet": "rows = [],\ni;\n\nif (desc) {\nfinalSorter = function(a, b) {",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 130
        },
        {
          "path": "coverage/sorter.js",
          "line": 130
        }
      ]
    },
    {
      "snippet": "i;\n\nif (desc) {\nfinalSorter = function(a, b) {\nreturn -1 * sorter(a, b);",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 131
        },
        {
          "path": "coverage/sorter.js",
          "line": 131
        }
      ]
    },
    {
      "snippet": "\nif (desc) {\nfinalSorter = function(a, b) {\nreturn -1 * sorter(a, b);\n};",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 132
        },
        {
          "path": "coverage/sorter.js",
          "line": 132
        }
      ]
    },
    {
      "snippet": "if (desc) {\nfinalSorter = function(a, b) {\nreturn -1 * sorter(a, b);\n};\n}",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 133
        },
        {
          "path": "coverage/sorter.js",
          "line": 133
        }
      ]
    },
    {
      "snippet": "finalSorter = function(a, b) {\nreturn -1 * sorter(a, b);\n};\n}\n",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 134
        },
        {
          "path": "coverage/sorter.js",
          "line": 134
        }
      ]
    },
    {
      "snippet": "return -1 * sorter(a, b);\n};\n}\n\nfor (i = 0; i < rowNodes.length; i += 1) {",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 135
        },
        {
          "path": "coverage/sorter.js",
          "line": 135
        }
      ]
    },
    {
      "snippet": "};\n}\n\nfor (i = 0; i < rowNodes.length; i += 1) {\nrows.push(rowNodes[i]);",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 136
        },
        {
          "path": "coverage/sorter.js",
          "line": 136
        }
      ]
    },
    {
      "snippet": "}\n\nfor (i = 0; i < rowNodes.length; i += 1) {\nrows.push(rowNodes[i]);\ntableBody.removeChild(rowNodes[i]);",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 137
        },
        {
          "path": "coverage/sorter.js",
          "line": 137
        }
      ]
    },
    {
      "snippet": "\nfor (i = 0; i < rowNodes.length; i += 1) {\nrows.push(rowNodes[i]);\ntableBody.removeChild(rowNodes[i]);\n}",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 138
        },
        {
          "path": "coverage/sorter.js",
          "line": 138
        }
      ]
    },
    {
      "snippet": "for (i = 0; i < rowNodes.length; i += 1) {\nrows.push(rowNodes[i]);\ntableBody.removeChild(rowNodes[i]);\n}\n",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 139
        },
        {
          "path": "coverage/sorter.js",
          "line": 139
        }
      ]
    },
    {
      "snippet": "rows.push(rowNodes[i]);\ntableBody.removeChild(rowNodes[i]);\n}\n\nrows.sort(finalSorter);",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 140
        },
        {
          "path": "coverage/sorter.js",
          "line": 140
        }
      ]
    },
    {
      "snippet": "tableBody.removeChild(rowNodes[i]);\n}\n\nrows.sort(finalSorter);\n",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 141
        },
        {
          "path": "coverage/sorter.js",
          "line": 141
        }
      ]
    },
    {
      "snippet": "}\n\nrows.sort(finalSorter);\n\nfor (i = 0; i < rows.length; i += 1) {",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 142
        },
        {
          "path": "coverage/sorter.js",
          "line": 142
        }
      ]
    },
    {
      "snippet": "\nrows.sort(finalSorter);\n\nfor (i = 0; i < rows.length; i += 1) {\ntableBody.appendChild(rows[i]);",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 143
        },
        {
          "path": "coverage/sorter.js",
          "line": 143
        }
      ]
    },
    {
      "snippet": "rows.sort(finalSorter);\n\nfor (i = 0; i < rows.length; i += 1) {\ntableBody.appendChild(rows[i]);\n}",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 144
        },
        {
          "path": "coverage/sorter.js",
          "line": 144
        }
      ]
    },
    {
      "snippet": "\nfor (i = 0; i < rows.length; i += 1) {\ntableBody.appendChild(rows[i]);\n}\n}",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 145
        },
        {
          "path": "coverage/sorter.js",
          "line": 145
        }
      ]
    },
    {
      "snippet": "for (i = 0; i < rows.length; i += 1) {\ntableBody.appendChild(rows[i]);\n}\n}\n// removes sort indicators for current column being sorted",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 146
        },
        {
          "path": "coverage/sorter.js",
          "line": 146
        }
      ]
    },
    {
      "snippet": "tableBody.appendChild(rows[i]);\n}\n}\n// removes sort indicators for current column being sorted\nfunction removeSortIndicators() {",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 147
        },
        {
          "path": "coverage/sorter.js",
          "line": 147
        }
      ]
    },
    {
      "snippet": "}\n}\n// removes sort indicators for current column being sorted\nfunction removeSortIndicators() {\nvar col = getNthColumn(currentSort.index),",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 148
        },
        {
          "path": "coverage/sorter.js",
          "line": 148
        }
      ]
    },
    {
      "snippet": "}\n// removes sort indicators for current column being sorted\nfunction removeSortIndicators() {\nvar col = getNthColumn(currentSort.index),\ncls = col.className;",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 149
        },
        {
          "path": "coverage/sorter.js",
          "line": 149
        }
      ]
    },
    {
      "snippet": "// removes sort indicators for current column being sorted\nfunction removeSortIndicators() {\nvar col = getNthColumn(currentSort.index),\ncls = col.className;\n",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 150
        },
        {
          "path": "coverage/sorter.js",
          "line": 150
        }
      ]
    },
    {
      "snippet": "function removeSortIndicators() {\nvar col = getNthColumn(currentSort.index),\ncls = col.className;\n\ncls = cls.replace(/ sorted$/, '').replace(/ sorted-desc$/, '');",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 151
        },
        {
          "path": "coverage/sorter.js",
          "line": 151
        }
      ]
    },
    {
      "snippet": "var col = getNthColumn(currentSort.index),\ncls = col.className;\n\ncls = cls.replace(/ sorted$/, '').replace(/ sorted-desc$/, '');\ncol.className = cls;",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 152
        },
        {
          "path": "coverage/sorter.js",
          "line": 152
        }
      ]
    },
    {
      "snippet": "cls = col.className;\n\ncls = cls.replace(/ sorted$/, '').replace(/ sorted-desc$/, '');\ncol.className = cls;\n}",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 153
        },
        {
          "path": "coverage/sorter.js",
          "line": 153
        }
      ]
    },
    {
      "snippet": "\ncls = cls.replace(/ sorted$/, '').replace(/ sorted-desc$/, '');\ncol.className = cls;\n}\n// adds sort indicators for current column being sorted",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 154
        },
        {
          "path": "coverage/sorter.js",
          "line": 154
        }
      ]
    },
    {
      "snippet": "cls = cls.replace(/ sorted$/, '').replace(/ sorted-desc$/, '');\ncol.className = cls;\n}\n// adds sort indicators for current column being sorted\nfunction addSortIndicators() {",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 155
        },
        {
          "path": "coverage/sorter.js",
          "line": 155
        }
      ]
    },
    {
      "snippet": "col.className = cls;\n}\n// adds sort indicators for current column being sorted\nfunction addSortIndicators() {\ngetNthColumn(currentSort.index).className += currentSort.desc",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 156
        },
        {
          "path": "coverage/sorter.js",
          "line": 156
        }
      ]
    },
    {
      "snippet": "}\n// adds sort indicators for current column being sorted\nfunction addSortIndicators() {\ngetNthColumn(currentSort.index).className += currentSort.desc\n? ' sorted-desc'",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 157
        },
        {
          "path": "coverage/sorter.js",
          "line": 157
        }
      ]
    },
    {
      "snippet": "// adds sort indicators for current column being sorted\nfunction addSortIndicators() {\ngetNthColumn(currentSort.index).className += currentSort.desc\n? ' sorted-desc'\n: ' sorted';",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 158
        },
        {
          "path": "coverage/sorter.js",
          "line": 158
        }
      ]
    },
    {
      "snippet": "function addSortIndicators() {\ngetNthColumn(currentSort.index).className += currentSort.desc\n? ' sorted-desc'\n: ' sorted';\n}",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 159
        },
        {
          "path": "coverage/sorter.js",
          "line": 159
        }
      ]
    },
    {
      "snippet": "getNthColumn(currentSort.index).className += currentSort.desc\n? ' sorted-desc'\n: ' sorted';\n}\n// adds event listeners for all sorter widgets",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 160
        },
        {
          "path": "coverage/sorter.js",
          "line": 160
        }
      ]
    },
    {
      "snippet": "? ' sorted-desc'\n: ' sorted';\n}\n// adds event listeners for all sorter widgets\nfunction enableUI() {",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 161
        },
        {
          "path": "coverage/sorter.js",
          "line": 161
        }
      ]
    },
    {
      "snippet": ": ' sorted';\n}\n// adds event listeners for all sorter widgets\nfunction enableUI() {\nvar i,",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 162
        },
        {
          "path": "coverage/sorter.js",
          "line": 162
        }
      ]
    },
    {
      "snippet": "}\n// adds event listeners for all sorter widgets\nfunction enableUI() {\nvar i,\nel,",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 163
        },
        {
          "path": "coverage/sorter.js",
          "line": 163
        }
      ]
    },
    {
      "snippet": "// adds event listeners for all sorter widgets\nfunction enableUI() {\nvar i,\nel,\nithSorter = function ithSorter(i) {",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 164
        },
        {
          "path": "coverage/sorter.js",
          "line": 164
        }
      ]
    },
    {
      "snippet": "function enableUI() {\nvar i,\nel,\nithSorter = function ithSorter(i) {\nvar col = cols[i];",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 165
        },
        {
          "path": "coverage/sorter.js",
          "line": 165
        }
      ]
    },
    {
      "snippet": "var i,\nel,\nithSorter = function ithSorter(i) {\nvar col = cols[i];\n",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 166
        },
        {
          "path": "coverage/sorter.js",
          "line": 166
        }
      ]
    },
    {
      "snippet": "el,\nithSorter = function ithSorter(i) {\nvar col = cols[i];\n\nreturn function() {",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 167
        },
        {
          "path": "coverage/sorter.js",
          "line": 167
        }
      ]
    },
    {
      "snippet": "ithSorter = function ithSorter(i) {\nvar col = cols[i];\n\nreturn function() {\nvar desc = col.defaultDescSort;",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 168
        },
        {
          "path": "coverage/sorter.js",
          "line": 168
        }
      ]
    },
    {
      "snippet": "var col = cols[i];\n\nreturn function() {\nvar desc = col.defaultDescSort;\n",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 169
        },
        {
          "path": "coverage/sorter.js",
          "line": 169
        }
      ]
    },
    {
      "snippet": "\nreturn function() {\nvar desc = col.defaultDescSort;\n\nif (currentSort.index === i) {",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 170
        },
        {
          "path": "coverage/sorter.js",
          "line": 170
        }
      ]
    },
    {
      "snippet": "return function() {\nvar desc = col.defaultDescSort;\n\nif (currentSort.index === i) {\ndesc = !currentSort.desc;",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 171
        },
        {
          "path": "coverage/sorter.js",
          "line": 171
        }
      ]
    },
    {
      "snippet": "var desc = col.defaultDescSort;\n\nif (currentSort.index === i) {\ndesc = !currentSort.desc;\n}",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 172
        },
        {
          "path": "coverage/sorter.js",
          "line": 172
        }
      ]
    },
    {
      "snippet": "\nif (currentSort.index === i) {\ndesc = !currentSort.desc;\n}\nsortByIndex(i, desc);",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 173
        },
        {
          "path": "coverage/sorter.js",
          "line": 173
        }
      ]
    },
    {
      "snippet": "if (currentSort.index === i) {\ndesc = !currentSort.desc;\n}\nsortByIndex(i, desc);\nremoveSortIndicators();",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 174
        },
        {
          "path": "coverage/sorter.js",
          "line": 174
        }
      ]
    },
    {
      "snippet": "desc = !currentSort.desc;\n}\nsortByIndex(i, desc);\nremoveSortIndicators();\ncurrentSort.index = i;",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 175
        },
        {
          "path": "coverage/sorter.js",
          "line": 175
        }
      ]
    },
    {
      "snippet": "}\nsortByIndex(i, desc);\nremoveSortIndicators();\ncurrentSort.index = i;\ncurrentSort.desc = desc;",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 176
        },
        {
          "path": "coverage/sorter.js",
          "line": 176
        }
      ]
    },
    {
      "snippet": "sortByIndex(i, desc);\nremoveSortIndicators();\ncurrentSort.index = i;\ncurrentSort.desc = desc;\naddSortIndicators();",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 177
        },
        {
          "path": "coverage/sorter.js",
          "line": 177
        }
      ]
    },
    {
      "snippet": "removeSortIndicators();\ncurrentSort.index = i;\ncurrentSort.desc = desc;\naddSortIndicators();\n};",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 178
        },
        {
          "path": "coverage/sorter.js",
          "line": 178
        }
      ]
    },
    {
      "snippet": "currentSort.index = i;\ncurrentSort.desc = desc;\naddSortIndicators();\n};\n};",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 179
        },
        {
          "path": "coverage/sorter.js",
          "line": 179
        }
      ]
    },
    {
      "snippet": "currentSort.desc = desc;\naddSortIndicators();\n};\n};\nfor (i = 0; i < cols.length; i += 1) {",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 180
        },
        {
          "path": "coverage/sorter.js",
          "line": 180
        }
      ]
    },
    {
      "snippet": "addSortIndicators();\n};\n};\nfor (i = 0; i < cols.length; i += 1) {\nif (cols[i].sortable) {",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 181
        },
        {
          "path": "coverage/sorter.js",
          "line": 181
        }
      ]
    },
    {
      "snippet": "};\n};\nfor (i = 0; i < cols.length; i += 1) {\nif (cols[i].sortable) {\n// add the click event handler on the th so users",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 182
        },
        {
          "path": "coverage/sorter.js",
          "line": 182
        }
      ]
    },
    {
      "snippet": "};\nfor (i = 0; i < cols.length; i += 1) {\nif (cols[i].sortable) {\n// add the click event handler on the th so users\n// dont have to click on those tiny arrows",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 183
        },
        {
          "path": "coverage/sorter.js",
          "line": 183
        }
      ]
    },
    {
      "snippet": "for (i = 0; i < cols.length; i += 1) {\nif (cols[i].sortable) {\n// add the click event handler on the th so users\n// dont have to click on those tiny arrows\nel = getNthColumn(i).querySelector('.sorter'",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 184
        },
        {
          "path": "coverage/sorter.js",
          "line": 184
        }
      ]
    },
    {
      "snippet": "if (cols[i].sortable) {\n// add the click event handler on the th so users\n// dont have to click on those tiny arrows\nel = getNthColumn(i).querySelector('.sorter').parentElement;\nif (el.addEventListene",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 185
        },
        {
          "path": "coverage/sorter.js",
          "line": 185
        }
      ]
    },
    {
      "snippet": "// add the click event handler on the th so users\n// dont have to click on those tiny arrows\nel = getNthColumn(i).querySelector('.sorter').parentElement;\nif (el.addEventListener) {\nel.addEventListener",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 186
        },
        {
          "path": "coverage/sorter.js",
          "line": 186
        }
      ]
    },
    {
      "snippet": "// dont have to click on those tiny arrows\nel = getNthColumn(i).querySelector('.sorter').parentElement;\nif (el.addEventListener) {\nel.addEventListener('click', ithSorter(i));\n} else {",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 187
        },
        {
          "path": "coverage/sorter.js",
          "line": 187
        }
      ]
    },
    {
      "snippet": "el = getNthColumn(i).querySelector('.sorter').parentElement;\nif (el.addEventListener) {\nel.addEventListener('click', ithSorter(i));\n} else {\nel.attachEvent('onclick', ithSorter(i));",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 188
        },
        {
          "path": "coverage/sorter.js",
          "line": 188
        }
      ]
    },
    {
      "snippet": "if (el.addEventListener) {\nel.addEventListener('click', ithSorter(i));\n} else {\nel.attachEvent('onclick', ithSorter(i));\n}",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 189
        },
        {
          "path": "coverage/sorter.js",
          "line": 189
        }
      ]
    },
    {
      "snippet": "el.addEventListener('click', ithSorter(i));\n} else {\nel.attachEvent('onclick', ithSorter(i));\n}\n}",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 190
        },
        {
          "path": "coverage/sorter.js",
          "line": 190
        }
      ]
    },
    {
      "snippet": "} else {\nel.attachEvent('onclick', ithSorter(i));\n}\n}\n}",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 191
        },
        {
          "path": "coverage/sorter.js",
          "line": 191
        }
      ]
    },
    {
      "snippet": "el.attachEvent('onclick', ithSorter(i));\n}\n}\n}\n}",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 192
        },
        {
          "path": "coverage/sorter.js",
          "line": 192
        }
      ]
    },
    {
      "snippet": "}\n}\n}\n}\n// adds sorting functionality to the UI",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 193
        },
        {
          "path": "coverage/sorter.js",
          "line": 193
        }
      ]
    },
    {
      "snippet": "}\n}\n}\n// adds sorting functionality to the UI\nreturn function() {",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 194
        },
        {
          "path": "coverage/sorter.js",
          "line": 194
        }
      ]
    },
    {
      "snippet": "}\n}\n// adds sorting functionality to the UI\nreturn function() {\nif (!getTable()) {",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 195
        },
        {
          "path": "coverage/sorter.js",
          "line": 195
        }
      ]
    },
    {
      "snippet": "}\n// adds sorting functionality to the UI\nreturn function() {\nif (!getTable()) {\nreturn;",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 196
        },
        {
          "path": "coverage/sorter.js",
          "line": 196
        }
      ]
    },
    {
      "snippet": "// adds sorting functionality to the UI\nreturn function() {\nif (!getTable()) {\nreturn;\n}",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 197
        },
        {
          "path": "coverage/sorter.js",
          "line": 197
        }
      ]
    },
    {
      "snippet": "return function() {\nif (!getTable()) {\nreturn;\n}\ncols = loadColumns();",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 198
        },
        {
          "path": "coverage/sorter.js",
          "line": 198
        }
      ]
    },
    {
      "snippet": "if (!getTable()) {\nreturn;\n}\ncols = loadColumns();\nloadData();",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 199
        },
        {
          "path": "coverage/sorter.js",
          "line": 199
        }
      ]
    },
    {
      "snippet": "return;\n}\ncols = loadColumns();\nloadData();\naddSearchBox();",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 200
        },
        {
          "path": "coverage/sorter.js",
          "line": 200
        }
      ]
    },
    {
      "snippet": "}\ncols = loadColumns();\nloadData();\naddSearchBox();\naddSortIndicators();",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 201
        },
        {
          "path": "coverage/sorter.js",
          "line": 201
        }
      ]
    },
    {
      "snippet": "cols = loadColumns();\nloadData();\naddSearchBox();\naddSortIndicators();\nenableUI();",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 202
        },
        {
          "path": "coverage/sorter.js",
          "line": 202
        }
      ]
    },
    {
      "snippet": "loadData();\naddSearchBox();\naddSortIndicators();\nenableUI();\n};",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 203
        },
        {
          "path": "coverage/sorter.js",
          "line": 203
        }
      ]
    },
    {
      "snippet": "addSearchBox();\naddSortIndicators();\nenableUI();\n};\n})();",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 204
        },
        {
          "path": "coverage/sorter.js",
          "line": 204
        }
      ]
    },
    {
      "snippet": "addSortIndicators();\nenableUI();\n};\n})();\n",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 205
        },
        {
          "path": "coverage/sorter.js",
          "line": 205
        }
      ]
    },
    {
      "snippet": "enableUI();\n};\n})();\n\nwindow.addEventListener('load', addSorting);",
      "occurrences": [
        {
          "path": "coverage/lcov-report/sorter.js",
          "line": 206
        },
        {
          "path": "coverage/sorter.js",
          "line": 206
        }
      ]
    },
    {
      "snippet": "/**\n* Dependency Resolver with Circular Dependency Detection\n*\n* Resolves dependencies between domain packs and performs topological sorting\n* to determine the correct load order. Detects and reports ",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.d.ts",
          "line": 1
        },
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 2
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 1
        }
      ]
    },
    {
      "snippet": "* Dependency Resolver with Circular Dependency Detection\n*\n* Resolves dependencies between domain packs and performs topological sorting\n* to determine the correct load order. Detects and reports circ",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.d.ts",
          "line": 2
        },
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 3
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 2
        }
      ]
    },
    {
      "snippet": "*\n* Resolves dependencies between domain packs and performs topological sorting\n* to determine the correct load order. Detects and reports circular dependencies.\n*\n* Algorithm:",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.d.ts",
          "line": 3
        },
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 4
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 3
        }
      ]
    },
    {
      "snippet": "* Resolves dependencies between domain packs and performs topological sorting\n* to determine the correct load order. Detects and reports circular dependencies.\n*\n* Algorithm:\n* 1. Build dependency gra",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.d.ts",
          "line": 4
        },
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 5
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 4
        }
      ]
    },
    {
      "snippet": "* to determine the correct load order. Detects and reports circular dependencies.\n*\n* Algorithm:\n* 1. Build dependency graph from pack manifests\n* 2. Detect circular dependencies using DFS",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.d.ts",
          "line": 5
        },
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 6
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 5
        }
      ]
    },
    {
      "snippet": "*\n* Algorithm:\n* 1. Build dependency graph from pack manifests\n* 2. Detect circular dependencies using DFS\n* 3. Perform topological sort for load order",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.d.ts",
          "line": 6
        },
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 7
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 6
        }
      ]
    },
    {
      "snippet": "* Algorithm:\n* 1. Build dependency graph from pack manifests\n* 2. Detect circular dependencies using DFS\n* 3. Perform topological sort for load order\n* 4. Return ordered list of packs to load",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.d.ts",
          "line": 7
        },
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 8
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 7
        }
      ]
    },
    {
      "snippet": "* 1. Build dependency graph from pack manifests\n* 2. Detect circular dependencies using DFS\n* 3. Perform topological sort for load order\n* 4. Return ordered list of packs to load\n*",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.d.ts",
          "line": 8
        },
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 9
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 8
        }
      ]
    },
    {
      "snippet": "* 2. Detect circular dependencies using DFS\n* 3. Perform topological sort for load order\n* 4. Return ordered list of packs to load\n*\n* @module combination/dependency-resolver",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.d.ts",
          "line": 9
        },
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 10
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 9
        }
      ]
    },
    {
      "snippet": "* 3. Perform topological sort for load order\n* 4. Return ordered list of packs to load\n*\n* @module combination/dependency-resolver\n*/",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.d.ts",
          "line": 10
        },
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 11
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 10
        }
      ]
    },
    {
      "snippet": "/**\n* DependencyResolver\n*\n* Resolves pack dependencies and determines load order\n*/",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.d.ts",
          "line": 17
        },
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 19
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 24
        }
      ]
    },
    {
      "snippet": "/**\n* Resolve dependencies for a set of packs\n*\n* @param packs - Array of domain packs to resolve\n* @param availablePacks - All available packs (for dependency lookup)",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.d.ts",
          "line": 23
        },
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 25
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 30
        }
      ]
    },
    {
      "snippet": "* Resolve dependencies for a set of packs\n*\n* @param packs - Array of domain packs to resolve\n* @param availablePacks - All available packs (for dependency lookup)\n* @returns Resolved dependencies wit",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.d.ts",
          "line": 24
        },
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 26
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 31
        }
      ]
    },
    {
      "snippet": "*\n* @param packs - Array of domain packs to resolve\n* @param availablePacks - All available packs (for dependency lookup)\n* @returns Resolved dependencies with load order\n*/",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.d.ts",
          "line": 25
        },
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 27
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 32
        }
      ]
    },
    {
      "snippet": "/**\n* Detect circular dependencies using DFS\n*\n* @param graph - Dependency graph\n* @returns Array of circular dependency cycles",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.d.ts",
          "line": 35
        },
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 138
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 164
        }
      ]
    },
    {
      "snippet": "* Detect circular dependencies using DFS\n*\n* @param graph - Dependency graph\n* @returns Array of circular dependency cycles\n*/",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.d.ts",
          "line": 36
        },
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 139
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 165
        }
      ]
    },
    {
      "snippet": "/**\n* Perform topological sort using Kahn's algorithm\n*\n* @param graph - Dependency graph\n* @returns Ordered list of pack names",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.d.ts",
          "line": 42
        },
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 180
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 216
        }
      ]
    },
    {
      "snippet": "* Perform topological sort using Kahn's algorithm\n*\n* @param graph - Dependency graph\n* @returns Ordered list of pack names\n*/",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.d.ts",
          "line": 43
        },
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 181
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 217
        }
      ]
    },
    {
      "snippet": "/**\n* Validate that all dependencies are satisfied\n*\n* @param pack - Pack to validate\n* @param availablePacks - Available packs",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.d.ts",
          "line": 49
        },
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 235
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 281
        }
      ]
    },
    {
      "snippet": "* Validate that all dependencies are satisfied\n*\n* @param pack - Pack to validate\n* @param availablePacks - Available packs\n* @returns Validation result",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.d.ts",
          "line": 50
        },
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 236
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 282
        }
      ]
    },
    {
      "snippet": "*\n* @param pack - Pack to validate\n* @param availablePacks - Available packs\n* @returns Validation result\n*/",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.d.ts",
          "line": 51
        },
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 237
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 283
        }
      ]
    },
    {
      "snippet": "/**\n* Get all transitive dependencies for a pack\n*\n* @param packName - Name of the pack\n* @param availablePacks - All available packs",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.d.ts",
          "line": 60
        },
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 266
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 326
        }
      ]
    },
    {
      "snippet": "* Get all transitive dependencies for a pack\n*\n* @param packName - Name of the pack\n* @param availablePacks - All available packs\n* @returns Array of all dependencies (direct and transitive)",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.d.ts",
          "line": 61
        },
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 267
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 327
        }
      ]
    },
    {
      "snippet": "*\n* @param packName - Name of the pack\n* @param availablePacks - All available packs\n* @returns Array of all dependencies (direct and transitive)\n*/",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.d.ts",
          "line": 62
        },
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 268
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 328
        }
      ]
    },
    {
      "snippet": "}\ncatch (error) {\nif (error instanceof Error) {\nerrors.push(error.message);\n}",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 38
        },
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 74
        }
      ]
    },
    {
      "snippet": "catch (error) {\nif (error instanceof Error) {\nerrors.push(error.message);\n}\nreturn {",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 39
        },
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 75
        }
      ]
    },
    {
      "snippet": "if (error instanceof Error) {\nerrors.push(error.message);\n}\nreturn {\nloadOrder: [],",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 40
        },
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 76
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 48
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 85
        }
      ]
    },
    {
      "snippet": "errors.push(error.message);\n}\nreturn {\nloadOrder: [],\ngraph,",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 41
        },
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 77
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 49
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 86
        }
      ]
    },
    {
      "snippet": "}\nreturn {\nloadOrder: [],\ngraph,\ncircularDependencies: [],",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 42
        },
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 78
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 50
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 87
        }
      ]
    },
    {
      "snippet": "return {\nloadOrder: [],\ngraph,\ncircularDependencies: [],\nsuccess: false,",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 43
        },
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 79
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 51
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 88
        }
      ]
    },
    {
      "snippet": "loadOrder: [],\ngraph,\ncircularDependencies: [],\nsuccess: false,\nerrors,",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 44
        },
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 80
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 52
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 89
        }
      ]
    },
    {
      "snippet": "graph,\ncircularDependencies: [],\nsuccess: false,\nerrors,\n};",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 45
        },
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 81
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 53
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 90
        }
      ]
    },
    {
      "snippet": "circularDependencies: [],\nsuccess: false,\nerrors,\n};\n}",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 46
        },
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 82
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 54
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 91
        }
      ]
    },
    {
      "snippet": "// Step 2: Detect circular dependencies\nconst circularDeps = this.detectCircularDependencies(graph);\nif (circularDeps.length > 0) {\nconst cycles = circularDeps.map(cycle => cycle.join(' -> ')).join(';",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 51
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 60
        }
      ]
    },
    {
      "snippet": "const circularDeps = this.detectCircularDependencies(graph);\nif (circularDeps.length > 0) {\nconst cycles = circularDeps.map(cycle => cycle.join(' -> ')).join('; ');\nerrors.push(`Circular dependencies ",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 52
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 61
        }
      ]
    },
    {
      "snippet": "if (circularDeps.length > 0) {\nconst cycles = circularDeps.map(cycle => cycle.join(' -> ')).join('; ');\nerrors.push(`Circular dependencies detected: ${cycles}`);\nreturn {\nloadOrder: [],",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 53
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 62
        }
      ]
    },
    {
      "snippet": "const cycles = circularDeps.map(cycle => cycle.join(' -> ')).join('; ');\nerrors.push(`Circular dependencies detected: ${cycles}`);\nreturn {\nloadOrder: [],\ngraph,",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 54
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 63
        }
      ]
    },
    {
      "snippet": "errors.push(`Circular dependencies detected: ${cycles}`);\nreturn {\nloadOrder: [],\ngraph,\ncircularDependencies: circularDeps,",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 55
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 64
        }
      ]
    },
    {
      "snippet": "return {\nloadOrder: [],\ngraph,\ncircularDependencies: circularDeps,\nsuccess: false,",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 56
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 65
        }
      ]
    },
    {
      "snippet": "loadOrder: [],\ngraph,\ncircularDependencies: circularDeps,\nsuccess: false,\nerrors,",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 57
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 66
        }
      ]
    },
    {
      "snippet": "graph,\ncircularDependencies: circularDeps,\nsuccess: false,\nerrors,\n};",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 58
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 67
        }
      ]
    },
    {
      "snippet": "circularDependencies: circularDeps,\nsuccess: false,\nerrors,\n};\n}",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 59
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 68
        }
      ]
    },
    {
      "snippet": "// Step 3: Perform topological sort\ntry {\nconst loadOrder = this.topologicalSort(graph);\nreturn {\nloadOrder,",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 64
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 74
        }
      ]
    },
    {
      "snippet": "try {\nconst loadOrder = this.topologicalSort(graph);\nreturn {\nloadOrder,\ngraph,",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 65
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 75
        }
      ]
    },
    {
      "snippet": "const loadOrder = this.topologicalSort(graph);\nreturn {\nloadOrder,\ngraph,\ncircularDependencies: [],",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 66
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 76
        }
      ]
    },
    {
      "snippet": "return {\nloadOrder,\ngraph,\ncircularDependencies: [],\nsuccess: true,",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 67
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 77
        }
      ]
    },
    {
      "snippet": "loadOrder,\ngraph,\ncircularDependencies: [],\nsuccess: true,\nerrors: [],",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 68
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 78
        }
      ]
    },
    {
      "snippet": "graph,\ncircularDependencies: [],\nsuccess: true,\nerrors: [],\n};",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 69
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 79
        }
      ]
    },
    {
      "snippet": "errors: [],\n};\n}\ncatch (error) {\nif (error instanceof Error) {",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 72
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 210
        }
      ]
    },
    {
      "snippet": "success: false,\nerrors,\n};\n}\n}",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 83
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 92
        }
      ]
    },
    {
      "snippet": "name: packName,\nversion: pack.manifest.version,\ndependencies: pack.manifest.dependencies || [],\nresolved: false,\n};",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 113
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 132
        }
      ]
    },
    {
      "snippet": "// Add dependencies to processing queue\nif (pack.manifest.dependencies) {\nfor (const dep of pack.manifest.dependencies) {\nif (!processed.has(dep.name)) {\nconst depPack = packMap.get(dep.name);",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 120
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 141
        }
      ]
    },
    {
      "snippet": "if (pack.manifest.dependencies) {\nfor (const dep of pack.manifest.dependencies) {\nif (!processed.has(dep.name)) {\nconst depPack = packMap.get(dep.name);\nif (!depPack) {",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 121
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 142
        }
      ]
    },
    {
      "snippet": "}\ntoProcess.push(depPack);\n}\n}\n}",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 127
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 151
        }
      ]
    },
    {
      "snippet": "toProcess.push(depPack);\n}\n}\n}\n}",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 128
        },
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 294
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 152
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 367
        }
      ]
    },
    {
      "snippet": "// Mark all nodes as resolved (dependencies exist)\nfor (const node of graph.values()) {\nnode.resolved = true;\n}\n}",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 133
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 158
        }
      ]
    },
    {
      "snippet": "if (recursionStack.has(nodeName)) {\n// Found a cycle\nconst cycleStart = currentPath.indexOf(nodeName);\nconst cycle = [...currentPath.slice(cycleStart), nodeName];\ncycles.push(cycle);",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 150
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 179
        }
      ]
    },
    {
      "snippet": "// Found a cycle\nconst cycleStart = currentPath.indexOf(nodeName);\nconst cycle = [...currentPath.slice(cycleStart), nodeName];\ncycles.push(cycle);\nreturn;",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 151
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 180
        }
      ]
    },
    {
      "snippet": "const cycleStart = currentPath.indexOf(nodeName);\nconst cycle = [...currentPath.slice(cycleStart), nodeName];\ncycles.push(cycle);\nreturn;\n}",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 152
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 181
        }
      ]
    },
    {
      "snippet": "const node = graph.get(nodeName);\nif (node) {\nfor (const dep of node.dependencies) {\ndfs(dep.name);\n}",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 163
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 195
        }
      ]
    },
    {
      "snippet": "if (node) {\nfor (const dep of node.dependencies) {\ndfs(dep.name);\n}\n}",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 164
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 196
        }
      ]
    },
    {
      "snippet": "// Run DFS from each unvisited node\nfor (const nodeName of graph.keys()) {\nif (!visited.has(nodeName)) {\ndfs(nodeName);\n}",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 172
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 206
        }
      ]
    },
    {
      "snippet": "for (const nodeName of graph.keys()) {\nif (!visited.has(nodeName)) {\ndfs(nodeName);\n}\n}",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 173
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 207
        }
      ]
    },
    {
      "snippet": "// Initialize in-degree and adjacency list\nfor (const [name, node] of graph.entries()) {\nif (!inDegree.has(name)) {\ninDegree.set(name, 0);\n}",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 190
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 227
        }
      ]
    },
    {
      "snippet": "for (const [name, node] of graph.entries()) {\nif (!inDegree.has(name)) {\ninDegree.set(name, 0);\n}\nif (!adjList.has(name)) {",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 191
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 228
        }
      ]
    },
    {
      "snippet": "if (!inDegree.has(name)) {\ninDegree.set(name, 0);\n}\nif (!adjList.has(name)) {\nadjList.set(name, []);",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 192
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 229
        }
      ]
    },
    {
      "snippet": "inDegree.set(name, 0);\n}\nif (!adjList.has(name)) {\nadjList.set(name, []);\n}",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 193
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 230
        }
      ]
    },
    {
      "snippet": "for (const dep of node.dependencies) {\n// Add edge from dependency to dependent\nif (!adjList.has(dep.name)) {\nadjList.set(dep.name, []);\n}",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 198
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 236
        }
      ]
    },
    {
      "snippet": "for (const [name, degree] of inDegree.entries()) {\nif (degree === 0) {\nqueue.push(name);\n}\n}",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 210
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 250
        }
      ]
    },
    {
      "snippet": "// Reduce in-degree of dependent nodes\nconst dependents = adjList.get(node) || [];\nfor (const dependent of dependents) {\nconst newDegree = (inDegree.get(dependent) || 0) - 1;\ninDegree.set(dependent, n",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 219
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 261
        }
      ]
    },
    {
      "snippet": "if (newDegree === 0) {\nqueue.push(dependent);\n}\n}\n}",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 224
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 267
        }
      ]
    },
    {
      "snippet": "}\nreturn {\nvalid: errors.length === 0,\nerrors,\n};",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 260
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 225
        },
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 243
        },
        {
          "path": "dist/versioning/version-manager.js",
          "line": 366
        }
      ]
    },
    {
      "snippet": "return {\nvalid: errors.length === 0,\nerrors,\n};\n}",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 261
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 226
        },
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 244
        },
        {
          "path": "dist/versioning/version-manager.js",
          "line": 367
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 320
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 232
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 308
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 451
        }
      ]
    },
    {
      "snippet": "valid: errors.length === 0,\nerrors,\n};\n}\n/**",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 262
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 227
        },
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 245
        },
        {
          "path": "dist/versioning/version-manager.js",
          "line": 368
        }
      ]
    },
    {
      "snippet": "const depPack = packMap.get(dep.name);\nif (depPack && !processed.has(dep.name)) {\ntoProcess.push(depPack);\n}\n}",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 292
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 365
        }
      ]
    },
    {
      "snippet": "if (depPack && !processed.has(dep.name)) {\ntoProcess.push(depPack);\n}\n}\n}",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 293
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 366
        }
      ]
    },
    {
      "snippet": "}\n}\n}\nreturn Array.from(dependencies);\n}",
      "occurrences": [
        {
          "path": "dist/combination/dependency-resolver.js",
          "line": 296
        },
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 156
        }
      ]
    },
    {
      "snippet": "/**\n* Merge strategies for pack combination\n*\n* Provides different strategies for merging domain packs:\n* - Deep Merge: Recursively merge objects and concatenate arrays",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.d.ts",
          "line": 1
        },
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 2
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 1
        }
      ]
    },
    {
      "snippet": "* Merge strategies for pack combination\n*\n* Provides different strategies for merging domain packs:\n* - Deep Merge: Recursively merge objects and concatenate arrays\n* - Override: Later packs completel",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.d.ts",
          "line": 2
        },
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 3
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 2
        }
      ]
    },
    {
      "snippet": "*\n* Provides different strategies for merging domain packs:\n* - Deep Merge: Recursively merge objects and concatenate arrays\n* - Override: Later packs completely override earlier packs\n* - Selective: ",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.d.ts",
          "line": 3
        },
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 4
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 3
        }
      ]
    },
    {
      "snippet": "* Provides different strategies for merging domain packs:\n* - Deep Merge: Recursively merge objects and concatenate arrays\n* - Override: Later packs completely override earlier packs\n* - Selective: Us",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.d.ts",
          "line": 4
        },
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 5
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 4
        }
      ]
    },
    {
      "snippet": "* - Deep Merge: Recursively merge objects and concatenate arrays\n* - Override: Later packs completely override earlier packs\n* - Selective: User controls which fields merge vs override\n*\n* @module com",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.d.ts",
          "line": 5
        },
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 6
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 5
        }
      ]
    },
    {
      "snippet": "* - Override: Later packs completely override earlier packs\n* - Selective: User controls which fields merge vs override\n*\n* @module combination/merge-strategies\n*/",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.d.ts",
          "line": 6
        },
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 7
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 6
        }
      ]
    },
    {
      "snippet": "/**\n* MergeStrategy interface\n* All merge strategies implement this interface\n*/\nexport interface IMergeStrategy {",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.d.ts",
          "line": 12
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 15
        }
      ]
    },
    {
      "snippet": "* MergeStrategy interface\n* All merge strategies implement this interface\n*/\nexport interface IMergeStrategy {\n/**",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.d.ts",
          "line": 13
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 16
        }
      ]
    },
    {
      "snippet": "* All merge strategies implement this interface\n*/\nexport interface IMergeStrategy {\n/**\n* Merge multiple templates according to the strategy",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.d.ts",
          "line": 14
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 17
        }
      ]
    },
    {
      "snippet": "*/\nexport interface IMergeStrategy {\n/**\n* Merge multiple templates according to the strategy\n*",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.d.ts",
          "line": 15
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 18
        }
      ]
    },
    {
      "snippet": "export interface IMergeStrategy {\n/**\n* Merge multiple templates according to the strategy\n*\n* @param templates - Array of templates to merge (order matters)",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.d.ts",
          "line": 16
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 19
        }
      ]
    },
    {
      "snippet": "/**\n* Merge multiple templates according to the strategy\n*\n* @param templates - Array of templates to merge (order matters)\n* @returns Merged template",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.d.ts",
          "line": 17
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 20
        }
      ]
    },
    {
      "snippet": "* Merge multiple templates according to the strategy\n*\n* @param templates - Array of templates to merge (order matters)\n* @returns Merged template\n*/",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.d.ts",
          "line": 18
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 21
        }
      ]
    },
    {
      "snippet": "*\n* @param templates - Array of templates to merge (order matters)\n* @returns Merged template\n*/\nmerge(templates: Record<string, unknown>[]): Record<string, unknown>;",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.d.ts",
          "line": 19
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 22
        }
      ]
    },
    {
      "snippet": "* @param templates - Array of templates to merge (order matters)\n* @returns Merged template\n*/\nmerge(templates: Record<string, unknown>[]): Record<string, unknown>;\n}",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.d.ts",
          "line": 20
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 23
        }
      ]
    },
    {
      "snippet": "/**\n* Deep Merge Strategy\n*\n* Recursively merges objects and concatenates arrays.\n* Later templates override/extend earlier ones.",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.d.ts",
          "line": 25
        },
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 15
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 29
        }
      ]
    },
    {
      "snippet": "* Deep Merge Strategy\n*\n* Recursively merges objects and concatenates arrays.\n* Later templates override/extend earlier ones.\n*/",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.d.ts",
          "line": 26
        },
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 16
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 30
        }
      ]
    },
    {
      "snippet": "/**\n* Override Strategy\n*\n* Each subsequent template completely replaces the previous one.\n* Only the last template's values are used.",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.d.ts",
          "line": 36
        },
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 44
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 64
        }
      ]
    },
    {
      "snippet": "* Override Strategy\n*\n* Each subsequent template completely replaces the previous one.\n* Only the last template's values are used.\n*/",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.d.ts",
          "line": 37
        },
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 45
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 65
        }
      ]
    },
    {
      "snippet": "/**\n* Selective Merge Strategy\n*\n* Allows fine-grained control over which fields are merged vs overridden.\n* Uses path patterns to determine behavior.",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.d.ts",
          "line": 45
        },
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 60
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 81
        }
      ]
    },
    {
      "snippet": "* Selective Merge Strategy\n*\n* Allows fine-grained control over which fields are merged vs overridden.\n* Uses path patterns to determine behavior.\n*/",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.d.ts",
          "line": 46
        },
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 61
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 82
        }
      ]
    },
    {
      "snippet": "/**\n* Strategy Factory\n*\n* Creates the appropriate merge strategy based on configuration\n*/",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.d.ts",
          "line": 79
        },
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 189
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 247
        }
      ]
    },
    {
      "snippet": "}\nmerge(templates) {\nif (templates.length === 0) {\nreturn {};\n}",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 24
        },
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 71
        }
      ]
    },
    {
      "snippet": "merge(templates) {\nif (templates.length === 0) {\nreturn {};\n}\nif (templates.length === 1) {",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 25
        },
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 72
        }
      ]
    },
    {
      "snippet": "if (templates.length === 0) {\nreturn {};\n}\nif (templates.length === 1) {\nreturn { ...templates[0] };",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 26
        },
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 73
        }
      ]
    },
    {
      "snippet": "return {};\n}\nif (templates.length === 1) {\nreturn { ...templates[0] };\n}",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 27
        },
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 74
        }
      ]
    },
    {
      "snippet": "// Merge templates left to right\nlet result = { ...templates[0] };\nfor (let i = 1; i < templates.length; i++) {\nresult = this.merger.merge(result, templates[i], {\narrayStrategy: 'concat',",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 32
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 51
        }
      ]
    },
    {
      "snippet": "let result = { ...templates[0] };\nfor (let i = 1; i < templates.length; i++) {\nresult = this.merger.merge(result, templates[i], {\narrayStrategy: 'concat',\nlistStrategy: 'append'",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 33
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 52
        }
      ]
    },
    {
      "snippet": "for (let i = 1; i < templates.length; i++) {\nresult = this.merger.merge(result, templates[i], {\narrayStrategy: 'concat',\nlistStrategy: 'append'\n});",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 34
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 53
        }
      ]
    },
    {
      "snippet": "result = this.merger.merge(result, templates[i], {\narrayStrategy: 'concat',\nlistStrategy: 'append'\n});\n}",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 35
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 54
        }
      ]
    },
    {
      "snippet": "// Check if this path should be overridden\nif (this.shouldOverride(fieldPath)) {\nresult[key] = value;\ncontinue;\n}",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 94
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 131
        }
      ]
    },
    {
      "snippet": "// Merge arrays by concatenation\nif (Array.isArray(baseValue) && Array.isArray(value)) {\nresult[key] = [...baseValue, ...value];\n}\n// Merge objects recursively",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 102
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 141
        }
      ]
    },
    {
      "snippet": "if (Array.isArray(baseValue) && Array.isArray(value)) {\nresult[key] = [...baseValue, ...value];\n}\n// Merge objects recursively\nelse if (this.isObject(baseValue) && this.isObject(value)) {",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 103
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 142
        }
      ]
    },
    {
      "snippet": "}\n// Scalars: extension overrides\nelse {\nresult[key] = value;\n}",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 109
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 152
        }
      ]
    },
    {
      "snippet": "// Scalars: extension overrides\nelse {\nresult[key] = value;\n}\ncontinue;",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 110
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 153
        }
      ]
    },
    {
      "snippet": "else {\nresult[key] = value;\n}\ncontinue;\n}",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 111
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 154
        }
      ]
    },
    {
      "snippet": "}\n}\nreturn result;\n}\n/**",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 123
        },
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 236
        },
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 256
        },
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 307
        }
      ]
    },
    {
      "snippet": "// Check wildcard patterns (e.g., \"spec.resources.*\")\nfor (const pattern of this.overridePaths) {\nif (this.matchesPattern(path, pattern)) {\nreturn true;\n}",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 135
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 181
        }
      ]
    },
    {
      "snippet": "for (const pattern of this.overridePaths) {\nif (this.matchesPattern(path, pattern)) {\nreturn true;\n}\n}",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 136
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 182
        }
      ]
    },
    {
      "snippet": "if (this.matchesPattern(path, pattern)) {\nreturn true;\n}\n}\nreturn false;",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 137
        },
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 153
        }
      ]
    },
    {
      "snippet": "return true;\n}\n}\nreturn false;\n}",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 138
        },
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 154
        }
      ]
    },
    {
      "snippet": "}\n}\nreturn false;\n}\n/**",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 139
        },
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 155
        }
      ]
    },
    {
      "snippet": "// Check wildcard patterns\nfor (const pattern of this.mergePaths) {\nif (this.matchesPattern(path, pattern)) {\nreturn true;\n}",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 151
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 200
        }
      ]
    },
    {
      "snippet": "for (const pattern of this.mergePaths) {\nif (this.matchesPattern(path, pattern)) {\nreturn true;\n}\n}",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 152
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 201
        }
      ]
    },
    {
      "snippet": "for (let i = 0; i < patternParts.length; i++) {\nif (patternParts[i] !== '*' && patternParts[i] !== pathParts[i]) {\nreturn false;\n}\n}",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 172
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 226
        }
      ]
    },
    {
      "snippet": "}\n}\nreturn true;\n}\n/**",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 175
        },
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 153
        },
        {
          "path": "dist/versioning/version-manager.js",
          "line": 130
        }
      ]
    },
    {
      "snippet": "case 'selective':\nif (!options) {\nthrow new Error('Selective merge strategy requires options with merge/override paths');\n}\nreturn new SelectiveMergeStrategy(options);",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 201
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 264
        }
      ]
    },
    {
      "snippet": "default:\nthrow new Error(`Unknown merge strategy: ${strategy}`);\n}\n}\n}",
      "occurrences": [
        {
          "path": "dist/combination/merge-strategies.js",
          "line": 206
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 270
        }
      ]
    },
    {
      "snippet": "/**\n* Pack Combiner - Combines multiple domain packs into a single cohesive pack\n*\n* Supports multiple merge strategies and handles dependency resolution.\n* Integrates with DependencyResolver for corr",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.d.ts",
          "line": 1
        },
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 2
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 1
        }
      ]
    },
    {
      "snippet": "* Pack Combiner - Combines multiple domain packs into a single cohesive pack\n*\n* Supports multiple merge strategies and handles dependency resolution.\n* Integrates with DependencyResolver for correct ",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.d.ts",
          "line": 2
        },
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 3
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 2
        }
      ]
    },
    {
      "snippet": "*\n* Supports multiple merge strategies and handles dependency resolution.\n* Integrates with DependencyResolver for correct load order and circular\n* dependency detection.\n*",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.d.ts",
          "line": 3
        },
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 4
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 3
        }
      ]
    },
    {
      "snippet": "* Supports multiple merge strategies and handles dependency resolution.\n* Integrates with DependencyResolver for correct load order and circular\n* dependency detection.\n*\n* Algorithm:",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.d.ts",
          "line": 4
        },
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 5
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 4
        }
      ]
    },
    {
      "snippet": "* Integrates with DependencyResolver for correct load order and circular\n* dependency detection.\n*\n* Algorithm:\n* 1. Resolve dependencies and determine load order",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.d.ts",
          "line": 5
        },
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 6
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 5
        }
      ]
    },
    {
      "snippet": "* dependency detection.\n*\n* Algorithm:\n* 1. Resolve dependencies and determine load order\n* 2. Load all required packs in dependency order",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.d.ts",
          "line": 6
        },
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 7
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 6
        }
      ]
    },
    {
      "snippet": "*\n* Algorithm:\n* 1. Resolve dependencies and determine load order\n* 2. Load all required packs in dependency order\n* 3. Merge packs using selected strategy",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.d.ts",
          "line": 7
        },
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 8
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 7
        }
      ]
    },
    {
      "snippet": "* Algorithm:\n* 1. Resolve dependencies and determine load order\n* 2. Load all required packs in dependency order\n* 3. Merge packs using selected strategy\n* 4. Validate combined result",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.d.ts",
          "line": 8
        },
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 9
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 8
        }
      ]
    },
    {
      "snippet": "* 1. Resolve dependencies and determine load order\n* 2. Load all required packs in dependency order\n* 3. Merge packs using selected strategy\n* 4. Validate combined result\n* 5. Return combined pack",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.d.ts",
          "line": 9
        },
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 10
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 9
        }
      ]
    },
    {
      "snippet": "* 2. Load all required packs in dependency order\n* 3. Merge packs using selected strategy\n* 4. Validate combined result\n* 5. Return combined pack\n*",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.d.ts",
          "line": 10
        },
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 11
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 10
        }
      ]
    },
    {
      "snippet": "* 3. Merge packs using selected strategy\n* 4. Validate combined result\n* 5. Return combined pack\n*\n* @module combination/pack-combiner",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.d.ts",
          "line": 11
        },
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 12
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 11
        }
      ]
    },
    {
      "snippet": "* 4. Validate combined result\n* 5. Return combined pack\n*\n* @module combination/pack-combiner\n*/",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.d.ts",
          "line": 12
        },
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 13
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 12
        }
      ]
    },
    {
      "snippet": "/**\n* PackCombiner\n*\n* Combines multiple domain packs with dependency resolution and merge strategies\n*/",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.d.ts",
          "line": 19
        },
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 23
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 29
        }
      ]
    },
    {
      "snippet": "/**\n* Combine multiple domain packs into a single pack\n*\n* @param packs - Array of packs to combine\n* @param availablePacks - All available packs (for dependency resolution)",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.d.ts",
          "line": 27
        },
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 32
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 41
        }
      ]
    },
    {
      "snippet": "* Combine multiple domain packs into a single pack\n*\n* @param packs - Array of packs to combine\n* @param availablePacks - All available packs (for dependency resolution)\n* @param options - Combination",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.d.ts",
          "line": 28
        },
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 33
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 42
        }
      ]
    },
    {
      "snippet": "*\n* @param packs - Array of packs to combine\n* @param availablePacks - All available packs (for dependency resolution)\n* @param options - Combination options\n* @returns Combination result",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.d.ts",
          "line": 29
        },
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 34
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 43
        }
      ]
    },
    {
      "snippet": "* @param packs - Array of packs to combine\n* @param availablePacks - All available packs (for dependency resolution)\n* @param options - Combination options\n* @returns Combination result\n*/",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.d.ts",
          "line": 30
        },
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 35
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 44
        }
      ]
    },
    {
      "snippet": "/**\n* Combine packs by name, looking them up in available packs\n*\n* Convenience method that accepts pack names instead of pack objects\n*",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.d.ts",
          "line": 48
        },
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 207
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 260
        }
      ]
    },
    {
      "snippet": "* Combine packs by name, looking them up in available packs\n*\n* Convenience method that accepts pack names instead of pack objects\n*\n* @param packNames - Names of packs to combine",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.d.ts",
          "line": 49
        },
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 208
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 261
        }
      ]
    },
    {
      "snippet": "*\n* Convenience method that accepts pack names instead of pack objects\n*\n* @param packNames - Names of packs to combine\n* @param availablePacks - All available packs",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.d.ts",
          "line": 50
        },
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 209
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 262
        }
      ]
    },
    {
      "snippet": "* Convenience method that accepts pack names instead of pack objects\n*\n* @param packNames - Names of packs to combine\n* @param availablePacks - All available packs\n* @param options - Combination optio",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.d.ts",
          "line": 51
        },
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 210
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 263
        }
      ]
    },
    {
      "snippet": "*\n* @param packNames - Names of packs to combine\n* @param availablePacks - All available packs\n* @param options - Combination options\n* @returns Combination result",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.d.ts",
          "line": 52
        },
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 211
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 264
        }
      ]
    },
    {
      "snippet": "* @param packNames - Names of packs to combine\n* @param availablePacks - All available packs\n* @param options - Combination options\n* @returns Combination result\n*/",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.d.ts",
          "line": 53
        },
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 212
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 265
        }
      ]
    },
    {
      "snippet": "/**\n* Preview combination without actually performing it\n*\n* Returns what the combination would produce without creating the combined pack\n*",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.d.ts",
          "line": 59
        },
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 239
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 299
        }
      ]
    },
    {
      "snippet": "* Preview combination without actually performing it\n*\n* Returns what the combination would produce without creating the combined pack\n*\n* @param packs - Packs to preview",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.d.ts",
          "line": 60
        },
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 240
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 300
        }
      ]
    },
    {
      "snippet": "*\n* Returns what the combination would produce without creating the combined pack\n*\n* @param packs - Packs to preview\n* @param availablePacks - Available packs",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.d.ts",
          "line": 61
        },
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 241
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 301
        }
      ]
    },
    {
      "snippet": "* Returns what the combination would produce without creating the combined pack\n*\n* @param packs - Packs to preview\n* @param availablePacks - Available packs\n* @param options - Combination options",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.d.ts",
          "line": 62
        },
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 242
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 302
        }
      ]
    },
    {
      "snippet": "*\n* @param packs - Packs to preview\n* @param availablePacks - Available packs\n* @param options - Combination options\n* @returns Preview result with load order and validation",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.d.ts",
          "line": 63
        },
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 243
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 303
        }
      ]
    },
    {
      "snippet": "* @param packs - Packs to preview\n* @param availablePacks - Available packs\n* @param options - Combination options\n* @returns Preview result with load order and validation\n*/",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.d.ts",
          "line": 64
        },
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 244
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 304
        }
      ]
    },
    {
      "snippet": "/**\n* Convenience function for combining packs\n*\n* @param packs - Packs to combine\n* @param availablePacks - Available packs for dependency resolution",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.d.ts",
          "line": 75
        },
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 276
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 348
        }
      ]
    },
    {
      "snippet": "* Convenience function for combining packs\n*\n* @param packs - Packs to combine\n* @param availablePacks - Available packs for dependency resolution\n* @param options - Combination options",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.d.ts",
          "line": 76
        },
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 277
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 349
        }
      ]
    },
    {
      "snippet": "*\n* @param packs - Packs to combine\n* @param availablePacks - Available packs for dependency resolution\n* @param options - Combination options\n* @returns Combination result",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.d.ts",
          "line": 77
        },
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 278
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 350
        }
      ]
    },
    {
      "snippet": "* @param packs - Packs to combine\n* @param availablePacks - Available packs for dependency resolution\n* @param options - Combination options\n* @returns Combination result\n*/",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.d.ts",
          "line": 78
        },
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 279
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 351
        }
      ]
    },
    {
      "snippet": "strategy: options?.strategy || 'deep-merge',\noverridePaths: options?.overridePaths || [],\nmergePaths: options?.mergePaths || [],\nvalidate: options?.validate ?? true,\nresolveDependencies: options?.reso",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 42
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 55
        }
      ]
    },
    {
      "snippet": "overridePaths: options?.overridePaths || [],\nmergePaths: options?.mergePaths || [],\nvalidate: options?.validate ?? true,\nresolveDependencies: options?.resolveDependencies ?? true,\n};",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 43
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 56
        }
      ]
    },
    {
      "snippet": "// Validate inputs\nif (packs.length === 0) {\nreturn {\nsuccess: false,\nerrors: ['No packs provided for combination'],",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 50
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 65
        }
      ]
    },
    {
      "snippet": "if (packs.length === 0) {\nreturn {\nsuccess: false,\nerrors: ['No packs provided for combination'],\nwarnings: [],",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 51
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 66
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: false,\nerrors: ['No packs provided for combination'],\nwarnings: [],\n};",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 52
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 67
        }
      ]
    },
    {
      "snippet": "success: false,\nerrors: ['No packs provided for combination'],\nwarnings: [],\n};\n}",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 53
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 68
        }
      ]
    },
    {
      "snippet": "if (!dependencyResolution.success) {\nreturn {\nsuccess: false,\ndependencyResolution,\nerrors: dependencyResolution.errors,",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 63
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 81
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: false,\ndependencyResolution,\nerrors: dependencyResolution.errors,\nwarnings,",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 64
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 82
        }
      ]
    },
    {
      "snippet": "success: false,\ndependencyResolution,\nerrors: dependencyResolution.errors,\nwarnings,\n};",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 65
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 83
        }
      ]
    },
    {
      "snippet": "dependencyResolution,\nerrors: dependencyResolution.errors,\nwarnings,\n};\n}",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 66
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 84
        }
      ]
    },
    {
      "snippet": "errors.push(`Failed to load packs: ${missing.join(', ')}`);\nreturn {\nsuccess: false,\ndependencyResolution,\nerrors,",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 81
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 104
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: false,\ndependencyResolution,\nerrors,\nwarnings,",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 82
        },
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 117
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 105
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 142
        }
      ]
    },
    {
      "snippet": "success: false,\ndependencyResolution,\nerrors,\nwarnings,\n};",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 83
        },
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 118
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 106
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 143
        }
      ]
    },
    {
      "snippet": "dependencyResolution,\nerrors,\nwarnings,\n};\n}",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 84
        },
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 105
        },
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 119
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 107
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 144
        }
      ]
    },
    {
      "snippet": "errors,\nwarnings,\n};\n}\n}",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 85
        },
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 120
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 108
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 145
        }
      ]
    },
    {
      "snippet": "// Step 3: Validate if requested\nif (opts.validate) {\nconst validationResult = this.validateCombinedPack(combinedPack);\nif (!validationResult.valid) {\nerrors.push(...validationResult.errors);",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 94
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 119
        }
      ]
    },
    {
      "snippet": "if (opts.validate) {\nconst validationResult = this.validateCombinedPack(combinedPack);\nif (!validationResult.valid) {\nerrors.push(...validationResult.errors);\nwarnings.push(...validationResult.warning",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 95
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 120
        }
      ]
    },
    {
      "snippet": "const validationResult = this.validateCombinedPack(combinedPack);\nif (!validationResult.valid) {\nerrors.push(...validationResult.errors);\nwarnings.push(...validationResult.warnings);\n}",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 96
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 121
        }
      ]
    },
    {
      "snippet": "if (!validationResult.valid) {\nerrors.push(...validationResult.errors);\nwarnings.push(...validationResult.warnings);\n}\n}",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 97
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 122
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: errors.length === 0,\ncombinedPack,\ndependencyResolution,\nerrors,",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 102
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 128
        }
      ]
    },
    {
      "snippet": "success: errors.length === 0,\ncombinedPack,\ndependencyResolution,\nerrors,\nwarnings,",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 103
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 129
        }
      ]
    },
    {
      "snippet": "combinedPack,\ndependencyResolution,\nerrors,\nwarnings,\n};",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 104
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 130
        }
      ]
    },
    {
      "snippet": "const combinedManifest = {\nname: `combined-${packNames.join('-')}`,\nversion: '1.0.0', // Combined packs get a new version\ndisplayName: `Combined: ${packs.map(p => p.manifest.displayName).join(' + ')}`",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 137
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 169
        }
      ]
    },
    {
      "snippet": "name: `combined-${packNames.join('-')}`,\nversion: '1.0.0', // Combined packs get a new version\ndisplayName: `Combined: ${packs.map(p => p.manifest.displayName).join(' + ')}`,\ndescription: `Combined pa",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 138
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 170
        }
      ]
    },
    {
      "snippet": "version: '1.0.0', // Combined packs get a new version\ndisplayName: `Combined: ${packs.map(p => p.manifest.displayName).join(' + ')}`,\ndescription: `Combined pack from: ${packNames.join(', ')}`,\nauthor",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 139
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 171
        }
      ]
    },
    {
      "snippet": "displayName: `Combined: ${packs.map(p => p.manifest.displayName).join(' + ')}`,\ndescription: `Combined pack from: ${packNames.join(', ')}`,\nauthor: firstPack.manifest.author || 'System',\ncombinedFrom:",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 140
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 172
        }
      ]
    },
    {
      "snippet": "return {\nmanifest: combinedManifest,\ntemplate: combinedTemplate,\ndependencies: allDependencies,\ncombinationOrder: packNames,",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 145
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 178
        }
      ]
    },
    {
      "snippet": "manifest: combinedManifest,\ntemplate: combinedTemplate,\ndependencies: allDependencies,\ncombinationOrder: packNames,\n};",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 146
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 179
        }
      ]
    },
    {
      "snippet": "template: combinedTemplate,\ndependencies: allDependencies,\ncombinationOrder: packNames,\n};\n}",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 147
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 180
        }
      ]
    },
    {
      "snippet": "for (const pack of packs) {\nif (pack.manifest.dependencies) {\nfor (const dep of pack.manifest.dependencies) {\n// Keep the first version encountered (from dependency order)\nif (!depMap.has(dep.name)) {",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 157
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 194
        }
      ]
    },
    {
      "snippet": "if (pack.manifest.dependencies) {\nfor (const dep of pack.manifest.dependencies) {\n// Keep the first version encountered (from dependency order)\nif (!depMap.has(dep.name)) {\ndepMap.set(dep.name, dep.ve",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 158
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 195
        }
      ]
    },
    {
      "snippet": "for (const dep of pack.manifest.dependencies) {\n// Keep the first version encountered (from dependency order)\nif (!depMap.has(dep.name)) {\ndepMap.set(dep.name, dep.version);\n}",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 159
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 196
        }
      ]
    },
    {
      "snippet": "// Keep the first version encountered (from dependency order)\nif (!depMap.has(dep.name)) {\ndepMap.set(dep.name, dep.version);\n}\n}",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 160
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 197
        }
      ]
    },
    {
      "snippet": "if (!depMap.has(dep.name)) {\ndepMap.set(dep.name, dep.version);\n}\n}\n}",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 161
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 198
        }
      ]
    },
    {
      "snippet": "depMap.set(dep.name, dep.version);\n}\n}\n}\n}",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 162
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 199
        }
      ]
    },
    {
      "snippet": "return Array.from(depMap.entries()).map(([name, version]) => ({\nname,\nversion,\n}));\n}",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 167
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 205
        }
      ]
    },
    {
      "snippet": "return {\nvalid: errors.length === 0,\nerrors,\nwarnings,\n};",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 201
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 253
        }
      ]
    },
    {
      "snippet": "valid: errors.length === 0,\nerrors,\nwarnings,\n};\n}",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 202
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 254
        }
      ]
    },
    {
      "snippet": "if (errors.length > 0) {\nreturn {\nsuccess: false,\nerrors,\nwarnings: [],",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 230
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 288
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: false,\nerrors,\nwarnings: [],\n};",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 231
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 289
        }
      ]
    },
    {
      "snippet": "success: false,\nerrors,\nwarnings: [],\n};\n}",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 232
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 290
        }
      ]
    },
    {
      "snippet": "if (!dependencies.success) {\nwarnings.push(...dependencies.errors);\nreturn {\nloadOrder: [],\ndependencies,",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 253
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 323
        }
      ]
    },
    {
      "snippet": "warnings.push(...dependencies.errors);\nreturn {\nloadOrder: [],\ndependencies,\nwarnings,",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 254
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 324
        }
      ]
    },
    {
      "snippet": "return {\nloadOrder: [],\ndependencies,\nwarnings,\n};",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 255
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 325
        }
      ]
    },
    {
      "snippet": "loadOrder: [],\ndependencies,\nwarnings,\n};\n}",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 256
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 326
        }
      ]
    },
    {
      "snippet": "// Validate each pack's dependencies\nfor (const pack of packs) {\nconst validation = this.resolver.validateDependencies(pack, availablePacks);\nif (!validation.valid) {\nwarnings.push(...validation.error",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 261
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 332
        }
      ]
    },
    {
      "snippet": "for (const pack of packs) {\nconst validation = this.resolver.validateDependencies(pack, availablePacks);\nif (!validation.valid) {\nwarnings.push(...validation.errors.map(e => `${pack.manifest.name}: ${",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 262
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 333
        }
      ]
    },
    {
      "snippet": "const validation = this.resolver.validateDependencies(pack, availablePacks);\nif (!validation.valid) {\nwarnings.push(...validation.errors.map(e => `${pack.manifest.name}: ${e}`));\n}\n}",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 263
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 334
        }
      ]
    },
    {
      "snippet": "return {\nloadOrder: dependencies.loadOrder,\ndependencies,\nwarnings,\n};",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 268
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 340
        }
      ]
    },
    {
      "snippet": "loadOrder: dependencies.loadOrder,\ndependencies,\nwarnings,\n};\n}",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 269
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 341
        }
      ]
    },
    {
      "snippet": "dependencies,\nwarnings,\n};\n}\n}",
      "occurrences": [
        {
          "path": "dist/combination/pack-combiner.js",
          "line": 270
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 342
        }
      ]
    },
    {
      "snippet": "/**\n* Type definitions for pack combination and dependency resolution\n*\n* Enables combining multiple domain packs into cohesive mission configurations\n* with dependency resolution and circular depende",
      "occurrences": [
        {
          "path": "dist/combination/types.d.ts",
          "line": 1
        },
        {
          "path": "dist/combination/types.js",
          "line": 2
        },
        {
          "path": "src/combination/types.ts",
          "line": 1
        }
      ]
    },
    {
      "snippet": "* Type definitions for pack combination and dependency resolution\n*\n* Enables combining multiple domain packs into cohesive mission configurations\n* with dependency resolution and circular dependency ",
      "occurrences": [
        {
          "path": "dist/combination/types.d.ts",
          "line": 2
        },
        {
          "path": "dist/combination/types.js",
          "line": 3
        },
        {
          "path": "src/combination/types.ts",
          "line": 2
        }
      ]
    },
    {
      "snippet": "*\n* Enables combining multiple domain packs into cohesive mission configurations\n* with dependency resolution and circular dependency detection.\n*\n* @module combination/types",
      "occurrences": [
        {
          "path": "dist/combination/types.d.ts",
          "line": 3
        },
        {
          "path": "dist/combination/types.js",
          "line": 4
        },
        {
          "path": "src/combination/types.ts",
          "line": 3
        }
      ]
    },
    {
      "snippet": "* Enables combining multiple domain packs into cohesive mission configurations\n* with dependency resolution and circular dependency detection.\n*\n* @module combination/types\n*/",
      "occurrences": [
        {
          "path": "dist/combination/types.d.ts",
          "line": 4
        },
        {
          "path": "dist/combination/types.js",
          "line": 5
        },
        {
          "path": "src/combination/types.ts",
          "line": 4
        }
      ]
    },
    {
      "snippet": "/**\n* Options for pack combination\n*/\nexport interface CombinationOptions {\n/** Merge strategy to use (default: 'deep-merge') */",
      "occurrences": [
        {
          "path": "dist/combination/types.d.ts",
          "line": 13
        },
        {
          "path": "src/combination/types.ts",
          "line": 20
        }
      ]
    },
    {
      "snippet": "* Options for pack combination\n*/\nexport interface CombinationOptions {\n/** Merge strategy to use (default: 'deep-merge') */\nstrategy?: CombinationStrategy;",
      "occurrences": [
        {
          "path": "dist/combination/types.d.ts",
          "line": 14
        },
        {
          "path": "src/combination/types.ts",
          "line": 21
        }
      ]
    },
    {
      "snippet": "/**\n* Represents a combined domain pack\n*/\nexport interface CombinedPack {\n/** The combined manifest (merged metadata) */",
      "occurrences": [
        {
          "path": "dist/combination/types.d.ts",
          "line": 28
        },
        {
          "path": "src/combination/types.ts",
          "line": 40
        }
      ]
    },
    {
      "snippet": "* Represents a combined domain pack\n*/\nexport interface CombinedPack {\n/** The combined manifest (merged metadata) */\nmanifest: {",
      "occurrences": [
        {
          "path": "dist/combination/types.d.ts",
          "line": 29
        },
        {
          "path": "src/combination/types.ts",
          "line": 41
        }
      ]
    },
    {
      "snippet": "*/\nexport interface CombinedPack {\n/** The combined manifest (merged metadata) */\nmanifest: {\nname: string;",
      "occurrences": [
        {
          "path": "dist/combination/types.d.ts",
          "line": 30
        },
        {
          "path": "src/combination/types.ts",
          "line": 42
        }
      ]
    },
    {
      "snippet": "export interface CombinedPack {\n/** The combined manifest (merged metadata) */\nmanifest: {\nname: string;\nversion: string;",
      "occurrences": [
        {
          "path": "dist/combination/types.d.ts",
          "line": 31
        },
        {
          "path": "src/combination/types.ts",
          "line": 43
        }
      ]
    },
    {
      "snippet": "/** The combined manifest (merged metadata) */\nmanifest: {\nname: string;\nversion: string;\ndisplayName: string;",
      "occurrences": [
        {
          "path": "dist/combination/types.d.ts",
          "line": 32
        },
        {
          "path": "src/combination/types.ts",
          "line": 44
        }
      ]
    },
    {
      "snippet": "manifest: {\nname: string;\nversion: string;\ndisplayName: string;\ndescription: string;",
      "occurrences": [
        {
          "path": "dist/combination/types.d.ts",
          "line": 33
        },
        {
          "path": "src/combination/types.ts",
          "line": 45
        }
      ]
    },
    {
      "snippet": "name: string;\nversion: string;\ndisplayName: string;\ndescription: string;\nauthor?: string;",
      "occurrences": [
        {
          "path": "dist/combination/types.d.ts",
          "line": 34
        },
        {
          "path": "src/combination/types.ts",
          "line": 46
        }
      ]
    },
    {
      "snippet": "/** All dependencies from all packs */\ndependencies: Array<{\nname: string;\nversion: string;\n}>;",
      "occurrences": [
        {
          "path": "dist/combination/types.d.ts",
          "line": 43
        },
        {
          "path": "src/combination/types.ts",
          "line": 57
        }
      ]
    },
    {
      "snippet": "/**\n* Dependency graph node\n*/\nexport interface DependencyNode {\n/** Pack name */",
      "occurrences": [
        {
          "path": "dist/combination/types.d.ts",
          "line": 51
        },
        {
          "path": "src/combination/types.ts",
          "line": 67
        }
      ]
    },
    {
      "snippet": "* Dependency graph node\n*/\nexport interface DependencyNode {\n/** Pack name */\nname: string;",
      "occurrences": [
        {
          "path": "dist/combination/types.d.ts",
          "line": 52
        },
        {
          "path": "src/combination/types.ts",
          "line": 68
        }
      ]
    },
    {
      "snippet": "/** Direct dependencies of this pack */\ndependencies: Array<{\nname: string;\nversion: string;\n}>;",
      "occurrences": [
        {
          "path": "dist/combination/types.d.ts",
          "line": 59
        },
        {
          "path": "src/combination/types.ts",
          "line": 77
        }
      ]
    },
    {
      "snippet": "/**\n* Dependency resolution result\n*/\nexport interface ResolvedDependencies {\n/** Ordered list of packs to load (topologically sorted) */",
      "occurrences": [
        {
          "path": "dist/combination/types.d.ts",
          "line": 67
        },
        {
          "path": "src/combination/types.ts",
          "line": 87
        }
      ]
    },
    {
      "snippet": "* Dependency resolution result\n*/\nexport interface ResolvedDependencies {\n/** Ordered list of packs to load (topologically sorted) */\nloadOrder: string[];",
      "occurrences": [
        {
          "path": "dist/combination/types.d.ts",
          "line": 68
        },
        {
          "path": "src/combination/types.ts",
          "line": 88
        }
      ]
    },
    {
      "snippet": "/**\n* Pack combination result\n*/\nexport interface CombinationResult {\n/** Whether combination was successful */",
      "occurrences": [
        {
          "path": "dist/combination/types.d.ts",
          "line": 82
        },
        {
          "path": "src/combination/types.ts",
          "line": 107
        }
      ]
    },
    {
      "snippet": "* Pack combination result\n*/\nexport interface CombinationResult {\n/** Whether combination was successful */\nsuccess: boolean;",
      "occurrences": [
        {
          "path": "dist/combination/types.d.ts",
          "line": 83
        },
        {
          "path": "src/combination/types.ts",
          "line": 108
        }
      ]
    },
    {
      "snippet": "/**\n* Domain Pack Loader and Validator\n*\n* Loads domain pack manifests, validates schemas, and returns domain-specific\n* fields ready for template merging.",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 1
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 2
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 1
        }
      ]
    },
    {
      "snippet": "* Domain Pack Loader and Validator\n*\n* Loads domain pack manifests, validates schemas, and returns domain-specific\n* fields ready for template merging.\n*",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 2
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 3
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 2
        }
      ]
    },
    {
      "snippet": "*\n* Loads domain pack manifests, validates schemas, and returns domain-specific\n* fields ready for template merging.\n*\n* Security Features:",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 3
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 4
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 3
        }
      ]
    },
    {
      "snippet": "* Loads domain pack manifests, validates schemas, and returns domain-specific\n* fields ready for template merging.\n*\n* Security Features:\n* - Uses SecureYAMLLoader for safe file loading",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 4
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 5
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 4
        }
      ]
    },
    {
      "snippet": "* fields ready for template merging.\n*\n* Security Features:\n* - Uses SecureYAMLLoader for safe file loading\n* - Validates pack manifests against schema",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 5
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 6
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 5
        }
      ]
    },
    {
      "snippet": "*\n* Security Features:\n* - Uses SecureYAMLLoader for safe file loading\n* - Validates pack manifests against schema\n* - Validates domain schemas are valid JSON Schema",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 6
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 7
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 6
        }
      ]
    },
    {
      "snippet": "* Security Features:\n* - Uses SecureYAMLLoader for safe file loading\n* - Validates pack manifests against schema\n* - Validates domain schemas are valid JSON Schema\n* - Integrates with RegistryParser f",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 7
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 8
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 7
        }
      ]
    },
    {
      "snippet": "* - Uses SecureYAMLLoader for safe file loading\n* - Validates pack manifests against schema\n* - Validates domain schemas are valid JSON Schema\n* - Integrates with RegistryParser for pack discovery\n*",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 8
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 9
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 8
        }
      ]
    },
    {
      "snippet": "* - Validates pack manifests against schema\n* - Validates domain schemas are valid JSON Schema\n* - Integrates with RegistryParser for pack discovery\n*\n* @module domains/domain-pack-loader",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 9
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 10
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 9
        }
      ]
    },
    {
      "snippet": "* - Validates domain schemas are valid JSON Schema\n* - Integrates with RegistryParser for pack discovery\n*\n* @module domains/domain-pack-loader\n* @version 1.0",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 10
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 11
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 10
        }
      ]
    },
    {
      "snippet": "* - Integrates with RegistryParser for pack discovery\n*\n* @module domains/domain-pack-loader\n* @version 1.0\n*/",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 11
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 12
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 11
        }
      ]
    },
    {
      "snippet": "/**\n* DomainPackLoader\n*\n* Loads and validates domain packs from the filesystem\n*/",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 21
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 87
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 60
        }
      ]
    },
    {
      "snippet": "/**\n* Load a domain pack by name from the registry\n*\n* Algorithm:\n* 1. Find pack in registry by name",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 32
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 102
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 85
        }
      ]
    },
    {
      "snippet": "* Load a domain pack by name from the registry\n*\n* Algorithm:\n* 1. Find pack in registry by name\n* 2. Load pack.yaml manifest from pack directory",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 33
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 103
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 86
        }
      ]
    },
    {
      "snippet": "*\n* Algorithm:\n* 1. Find pack in registry by name\n* 2. Load pack.yaml manifest from pack directory\n* 3. Validate manifest structure and SemVer",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 34
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 104
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 87
        }
      ]
    },
    {
      "snippet": "* Algorithm:\n* 1. Find pack in registry by name\n* 2. Load pack.yaml manifest from pack directory\n* 3. Validate manifest structure and SemVer\n* 4. Load and validate domain schema",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 35
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 105
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 88
        }
      ]
    },
    {
      "snippet": "* 1. Find pack in registry by name\n* 2. Load pack.yaml manifest from pack directory\n* 3. Validate manifest structure and SemVer\n* 4. Load and validate domain schema\n* 5. Load domain template (domainFi",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 36
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 106
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 89
        }
      ]
    },
    {
      "snippet": "* 2. Load pack.yaml manifest from pack directory\n* 3. Validate manifest structure and SemVer\n* 4. Load and validate domain schema\n* 5. Load domain template (domainFields)\n* 6. Return complete DomainPa",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 37
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 107
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 90
        }
      ]
    },
    {
      "snippet": "* 3. Validate manifest structure and SemVer\n* 4. Load and validate domain schema\n* 5. Load domain template (domainFields)\n* 6. Return complete DomainPack\n*",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 38
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 108
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 91
        }
      ]
    },
    {
      "snippet": "* 4. Load and validate domain schema\n* 5. Load domain template (domainFields)\n* 6. Return complete DomainPack\n*\n* @param packName - Name of the domain pack to load",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 39
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 109
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 92
        }
      ]
    },
    {
      "snippet": "* 5. Load domain template (domainFields)\n* 6. Return complete DomainPack\n*\n* @param packName - Name of the domain pack to load\n* @param registryEntries - Array of registry entries to search",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 40
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 110
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 93
        }
      ]
    },
    {
      "snippet": "* 6. Return complete DomainPack\n*\n* @param packName - Name of the domain pack to load\n* @param registryEntries - Array of registry entries to search\n* @returns Loaded and validated DomainPack",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 41
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 111
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 94
        }
      ]
    },
    {
      "snippet": "*\n* @param packName - Name of the domain pack to load\n* @param registryEntries - Array of registry entries to search\n* @returns Loaded and validated DomainPack\n* @throws Error if pack not found, inval",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 42
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 112
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 95
        }
      ]
    },
    {
      "snippet": "* @param packName - Name of the domain pack to load\n* @param registryEntries - Array of registry entries to search\n* @returns Loaded and validated DomainPack\n* @throws Error if pack not found, invalid",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 43
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 113
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 96
        }
      ]
    },
    {
      "snippet": "/**\n* Load pack.yaml manifest file\n*\n* @param manifestPath - Relative path to pack.yaml\n* @returns Parsed manifest",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 49
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 150
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 144
        }
      ]
    },
    {
      "snippet": "* Load pack.yaml manifest file\n*\n* @param manifestPath - Relative path to pack.yaml\n* @returns Parsed manifest\n* @throws Error if manifest cannot be loaded or is invalid",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 50
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 151
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 145
        }
      ]
    },
    {
      "snippet": "*\n* @param manifestPath - Relative path to pack.yaml\n* @returns Parsed manifest\n* @throws Error if manifest cannot be loaded or is invalid\n*/",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 51
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 152
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 146
        }
      ]
    },
    {
      "snippet": "/**\n* Validate a domain pack manifest\n*\n* Validates:\n* - Required fields are non-empty",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 57
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 169
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 166
        }
      ]
    },
    {
      "snippet": "* Validate a domain pack manifest\n*\n* Validates:\n* - Required fields are non-empty\n* - SemVer format for version",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 58
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 170
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 167
        }
      ]
    },
    {
      "snippet": "*\n* Validates:\n* - Required fields are non-empty\n* - SemVer format for version\n* - Schema path is relative (no traversal)",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 59
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 171
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 168
        }
      ]
    },
    {
      "snippet": "* Validates:\n* - Required fields are non-empty\n* - SemVer format for version\n* - Schema path is relative (no traversal)\n* - Dependencies have valid SemVer versions",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 60
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 172
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 169
        }
      ]
    },
    {
      "snippet": "* - Required fields are non-empty\n* - SemVer format for version\n* - Schema path is relative (no traversal)\n* - Dependencies have valid SemVer versions\n*",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 61
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 173
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 170
        }
      ]
    },
    {
      "snippet": "* - SemVer format for version\n* - Schema path is relative (no traversal)\n* - Dependencies have valid SemVer versions\n*\n* @param manifest - Manifest to validate",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 62
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 174
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 171
        }
      ]
    },
    {
      "snippet": "* - Schema path is relative (no traversal)\n* - Dependencies have valid SemVer versions\n*\n* @param manifest - Manifest to validate\n* @returns Validation result with errors if invalid",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 63
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 175
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 172
        }
      ]
    },
    {
      "snippet": "* - Dependencies have valid SemVer versions\n*\n* @param manifest - Manifest to validate\n* @returns Validation result with errors if invalid\n*/",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 64
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 176
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 173
        }
      ]
    },
    {
      "snippet": "/**\n* Load and validate a domain schema file\n*\n* The schema must be a valid JSON Schema that defines the structure\n* of the domainFields object.",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 73
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 231
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 238
        }
      ]
    },
    {
      "snippet": "* Load and validate a domain schema file\n*\n* The schema must be a valid JSON Schema that defines the structure\n* of the domainFields object.\n*",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 74
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 232
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 239
        }
      ]
    },
    {
      "snippet": "*\n* The schema must be a valid JSON Schema that defines the structure\n* of the domainFields object.\n*\n* @param schemaPath - Relative path to schema file",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 75
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 233
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 240
        }
      ]
    },
    {
      "snippet": "* The schema must be a valid JSON Schema that defines the structure\n* of the domainFields object.\n*\n* @param schemaPath - Relative path to schema file\n* @returns Loaded JSON Schema",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 76
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 234
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 241
        }
      ]
    },
    {
      "snippet": "* of the domainFields object.\n*\n* @param schemaPath - Relative path to schema file\n* @returns Loaded JSON Schema\n* @throws Error if schema cannot be loaded or is invalid",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 77
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 235
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 242
        }
      ]
    },
    {
      "snippet": "*\n* @param schemaPath - Relative path to schema file\n* @returns Loaded JSON Schema\n* @throws Error if schema cannot be loaded or is invalid\n*/",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 78
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 236
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 243
        }
      ]
    },
    {
      "snippet": "/**\n* Load domain template (domainFields structure)\n*\n* @param templatePath - Relative path to template.yaml\n* @returns Domain-specific fields object",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 84
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 258
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 267
        }
      ]
    },
    {
      "snippet": "* Load domain template (domainFields structure)\n*\n* @param templatePath - Relative path to template.yaml\n* @returns Domain-specific fields object\n* @throws Error if template cannot be loaded",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 85
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 259
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 268
        }
      ]
    },
    {
      "snippet": "*\n* @param templatePath - Relative path to template.yaml\n* @returns Domain-specific fields object\n* @throws Error if template cannot be loaded\n*/",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 86
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 260
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 269
        }
      ]
    },
    {
      "snippet": "/**\n* Validate a complete domain pack\n*\n* Validates:\n* - Manifest is valid",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 96
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 298
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 312
        }
      ]
    },
    {
      "snippet": "* Validate a complete domain pack\n*\n* Validates:\n* - Manifest is valid\n* - Schema is valid JSON Schema",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 97
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 299
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 313
        }
      ]
    },
    {
      "snippet": "*\n* Validates:\n* - Manifest is valid\n* - Schema is valid JSON Schema\n* - Template matches schema (if schema validation is enabled)",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 98
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 300
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 314
        }
      ]
    },
    {
      "snippet": "* Validates:\n* - Manifest is valid\n* - Schema is valid JSON Schema\n* - Template matches schema (if schema validation is enabled)\n*",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 99
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 301
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 315
        }
      ]
    },
    {
      "snippet": "* - Manifest is valid\n* - Schema is valid JSON Schema\n* - Template matches schema (if schema validation is enabled)\n*\n* @param pack - Domain pack to validate",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 100
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 302
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 316
        }
      ]
    },
    {
      "snippet": "* - Schema is valid JSON Schema\n* - Template matches schema (if schema validation is enabled)\n*\n* @param pack - Domain pack to validate\n* @returns Validation result",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 101
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 303
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 317
        }
      ]
    },
    {
      "snippet": "* - Template matches schema (if schema validation is enabled)\n*\n* @param pack - Domain pack to validate\n* @returns Validation result\n*/",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 102
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 304
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 318
        }
      ]
    },
    {
      "snippet": "/**\n* Get domain-specific fields from a loaded pack\n*\n* This is the main method for retrieving domainFields that will be\n* merged with the generic mission template.",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 108
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 337
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 360
        }
      ]
    },
    {
      "snippet": "* Get domain-specific fields from a loaded pack\n*\n* This is the main method for retrieving domainFields that will be\n* merged with the generic mission template.\n*",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 109
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 338
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 361
        }
      ]
    },
    {
      "snippet": "*\n* This is the main method for retrieving domainFields that will be\n* merged with the generic mission template.\n*\n* @param packName - Name of the pack",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 110
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 339
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 362
        }
      ]
    },
    {
      "snippet": "* This is the main method for retrieving domainFields that will be\n* merged with the generic mission template.\n*\n* @param packName - Name of the pack\n* @param registryEntries - Registry entries to sea",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 111
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 340
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 363
        }
      ]
    },
    {
      "snippet": "* merged with the generic mission template.\n*\n* @param packName - Name of the pack\n* @param registryEntries - Registry entries to search\n* @returns Domain-specific fields ready for merging",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 112
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 341
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 364
        }
      ]
    },
    {
      "snippet": "*\n* @param packName - Name of the pack\n* @param registryEntries - Registry entries to search\n* @returns Domain-specific fields ready for merging\n*/",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 113
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 342
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 365
        }
      ]
    },
    {
      "snippet": "/**\n* Basic JSON Schema structure validation\n*\n* Checks that the object has the minimum required properties\n* to be considered a JSON Schema.",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 119
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 351
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 375
        }
      ]
    },
    {
      "snippet": "* Basic JSON Schema structure validation\n*\n* Checks that the object has the minimum required properties\n* to be considered a JSON Schema.\n*",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 120
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 352
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 376
        }
      ]
    },
    {
      "snippet": "*\n* Checks that the object has the minimum required properties\n* to be considered a JSON Schema.\n*\n* @param schema - Object to validate as JSON Schema",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 121
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 353
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 377
        }
      ]
    },
    {
      "snippet": "* Checks that the object has the minimum required properties\n* to be considered a JSON Schema.\n*\n* @param schema - Object to validate as JSON Schema\n* @returns True if valid JSON Schema structure",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 122
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 354
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 378
        }
      ]
    },
    {
      "snippet": "* to be considered a JSON Schema.\n*\n* @param schema - Object to validate as JSON Schema\n* @returns True if valid JSON Schema structure\n*/",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 123
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 355
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 379
        }
      ]
    },
    {
      "snippet": "/**\n* Convenience function for loading a domain pack\n*\n* @param packName - Name of the pack to load\n* @param loader - SecureYAMLLoader instance",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 130
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 372
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 398
        }
      ]
    },
    {
      "snippet": "* Convenience function for loading a domain pack\n*\n* @param packName - Name of the pack to load\n* @param loader - SecureYAMLLoader instance\n* @param registry - RegistryParser instance",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 131
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 373
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 399
        }
      ]
    },
    {
      "snippet": "*\n* @param packName - Name of the pack to load\n* @param loader - SecureYAMLLoader instance\n* @param registry - RegistryParser instance\n* @param registryEntries - Registry entries to search",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 132
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 374
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 400
        }
      ]
    },
    {
      "snippet": "* @param packName - Name of the pack to load\n* @param loader - SecureYAMLLoader instance\n* @param registry - RegistryParser instance\n* @param registryEntries - Registry entries to search\n* @param opti",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 133
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 375
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 401
        }
      ]
    },
    {
      "snippet": "* @param loader - SecureYAMLLoader instance\n* @param registry - RegistryParser instance\n* @param registryEntries - Registry entries to search\n* @param options - Optional loader configuration\n* @return",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 134
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 376
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 402
        }
      ]
    },
    {
      "snippet": "* @param registry - RegistryParser instance\n* @param registryEntries - Registry entries to search\n* @param options - Optional loader configuration\n* @returns Loaded DomainPack\n*/",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.d.ts",
          "line": 135
        },
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 377
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 403
        }
      ]
    },
    {
      "snippet": "* @version 1.0\n*/\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\nif (k2 === undefined) k2 = k;\nvar desc = Object.getOwnPropertyDescriptor(m, k);",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 15
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 17
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 15
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 16
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 15
        }
      ]
    },
    {
      "snippet": "*/\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\nif (k2 === undefined) k2 = k;\nvar desc = Object.getOwnPropertyDescriptor(m, k);\nif (!desc || (\"get\"",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 16
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 9
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 15
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 14
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 10
        },
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 10
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 10
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 16
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 18
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 9
        },
        {
          "path": "dist/tools/extract-template.js",
          "line": 7
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 16
        },
        {
          "path": "dist/tools/score-quality.js",
          "line": 5
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 17
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 16
        },
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 5
        }
      ]
    },
    {
      "snippet": "var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\nif (k2 === undefined) k2 = k;\nvar desc = Object.getOwnPropertyDescriptor(m, k);\nif (!desc || (\"get\" in",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 17
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 10
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 16
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 15
        },
        {
          "path": "dist/index.js",
          "line": 4
        },
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 2
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 11
        },
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 11
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 11
        },
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 2
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 17
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 19
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 10
        },
        {
          "path": "dist/tools/extract-template.js",
          "line": 8
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 17
        },
        {
          "path": "dist/tools/score-quality.js",
          "line": 6
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 18
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 17
        },
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 6
        }
      ]
    },
    {
      "snippet": "if (k2 === undefined) k2 = k;\nvar desc = Object.getOwnPropertyDescriptor(m, k);\nif (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\ndesc = { enumerable: true, get: fun",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 18
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 11
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 17
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 16
        },
        {
          "path": "dist/index.js",
          "line": 5
        },
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 3
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 12
        },
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 12
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 12
        },
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 3
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 18
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 20
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 11
        },
        {
          "path": "dist/tools/extract-template.js",
          "line": 9
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 18
        },
        {
          "path": "dist/tools/score-quality.js",
          "line": 7
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 19
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 18
        },
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 7
        }
      ]
    },
    {
      "snippet": "var desc = Object.getOwnPropertyDescriptor(m, k);\nif (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\ndesc = { enumerable: true, get: function() { return m[k]; } };\n}\n",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 19
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 12
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 18
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 17
        },
        {
          "path": "dist/index.js",
          "line": 6
        },
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 4
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 13
        },
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 13
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 13
        },
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 4
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 19
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 21
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 12
        },
        {
          "path": "dist/tools/extract-template.js",
          "line": 10
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 19
        },
        {
          "path": "dist/tools/score-quality.js",
          "line": 8
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 20
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 19
        },
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 8
        }
      ]
    },
    {
      "snippet": "if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\ndesc = { enumerable: true, get: function() { return m[k]; } };\n}\nObject.defineProperty(o, k2, desc);\n}) : (function",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 20
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 13
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 19
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 18
        },
        {
          "path": "dist/index.js",
          "line": 7
        },
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 5
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 14
        },
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 14
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 14
        },
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 5
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 20
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 22
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 13
        },
        {
          "path": "dist/tools/extract-template.js",
          "line": 11
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 20
        },
        {
          "path": "dist/tools/score-quality.js",
          "line": 9
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 21
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 20
        },
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 9
        }
      ]
    },
    {
      "snippet": "desc = { enumerable: true, get: function() { return m[k]; } };\n}\nObject.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\nif (k2 === undefined) k2 = k;",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 21
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 14
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 20
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 19
        },
        {
          "path": "dist/index.js",
          "line": 8
        },
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 6
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 15
        },
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 15
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 15
        },
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 6
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 21
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 23
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 14
        },
        {
          "path": "dist/tools/extract-template.js",
          "line": 12
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 21
        },
        {
          "path": "dist/tools/score-quality.js",
          "line": 10
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 22
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 21
        },
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 10
        }
      ]
    },
    {
      "snippet": "}\nObject.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\nif (k2 === undefined) k2 = k;\no[k2] = m[k];",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 22
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 15
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 21
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 20
        },
        {
          "path": "dist/index.js",
          "line": 9
        },
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 7
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 16
        },
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 16
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 16
        },
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 7
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 22
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 24
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 15
        },
        {
          "path": "dist/tools/extract-template.js",
          "line": 13
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 22
        },
        {
          "path": "dist/tools/score-quality.js",
          "line": 11
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 23
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 22
        },
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 11
        }
      ]
    },
    {
      "snippet": "Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\nif (k2 === undefined) k2 = k;\no[k2] = m[k];\n}));",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 23
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 16
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 22
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 21
        },
        {
          "path": "dist/index.js",
          "line": 10
        },
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 8
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 17
        },
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 17
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 17
        },
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 8
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 23
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 25
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 16
        },
        {
          "path": "dist/tools/extract-template.js",
          "line": 14
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 23
        },
        {
          "path": "dist/tools/score-quality.js",
          "line": 12
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 24
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 23
        },
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 12
        }
      ]
    },
    {
      "snippet": "}) : (function(o, m, k, k2) {\nif (k2 === undefined) k2 = k;\no[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 24
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 17
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 23
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 22
        },
        {
          "path": "dist/index.js",
          "line": 11
        },
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 9
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 18
        },
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 18
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 18
        },
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 9
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 24
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 26
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 17
        },
        {
          "path": "dist/tools/extract-template.js",
          "line": 15
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 24
        },
        {
          "path": "dist/tools/score-quality.js",
          "line": 13
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 25
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 24
        },
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 13
        }
      ]
    },
    {
      "snippet": "if (k2 === undefined) k2 = k;\no[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nObject.defineProperty(o, \"default\", { enumerable: true",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 25
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 18
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 24
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 23
        },
        {
          "path": "dist/index.js",
          "line": 12
        },
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 10
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 19
        },
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 19
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 19
        },
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 10
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 25
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 27
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 18
        },
        {
          "path": "dist/tools/extract-template.js",
          "line": 16
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 25
        },
        {
          "path": "dist/tools/score-quality.js",
          "line": 14
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 26
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 25
        },
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 14
        }
      ]
    },
    {
      "snippet": "o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nObject.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 26
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 19
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 25
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 24
        },
        {
          "path": "dist/index.js",
          "line": 13
        },
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 11
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 20
        },
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 20
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 20
        },
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 11
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 26
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 28
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 19
        },
        {
          "path": "dist/tools/extract-template.js",
          "line": 17
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 26
        },
        {
          "path": "dist/tools/score-quality.js",
          "line": 15
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 27
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 26
        },
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 15
        }
      ]
    },
    {
      "snippet": "}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nObject.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\no[\"defa",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 27
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 20
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 26
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 25
        },
        {
          "path": "dist/index.js",
          "line": 14
        },
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 12
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 21
        },
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 21
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 21
        },
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 12
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 27
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 29
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 20
        },
        {
          "path": "dist/tools/extract-template.js",
          "line": 18
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 27
        },
        {
          "path": "dist/tools/score-quality.js",
          "line": 16
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 28
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 27
        },
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 16
        }
      ]
    },
    {
      "snippet": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nObject.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\no[\"default\"]",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 28
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 21
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 27
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 26
        },
        {
          "path": "dist/index.js",
          "line": 15
        },
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 13
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 22
        },
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 22
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 22
        },
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 13
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 28
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 30
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 21
        },
        {
          "path": "dist/tools/extract-template.js",
          "line": 19
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 28
        },
        {
          "path": "dist/tools/score-quality.js",
          "line": 17
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 29
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 28
        },
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 17
        }
      ]
    },
    {
      "snippet": "Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\no[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 29
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 22
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 28
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 27
        },
        {
          "path": "dist/index.js",
          "line": 16
        },
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 14
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 23
        },
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 23
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 23
        },
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 14
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 29
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 31
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 22
        },
        {
          "path": "dist/tools/extract-template.js",
          "line": 20
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 29
        },
        {
          "path": "dist/tools/score-quality.js",
          "line": 18
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 30
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 29
        },
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 18
        }
      ]
    },
    {
      "snippet": "}) : function(o, v) {\no[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\nvar ownKeys = function(o) {",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 30
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 23
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 29
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 28
        },
        {
          "path": "dist/index.js",
          "line": 17
        },
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 15
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 24
        },
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 24
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 24
        },
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 15
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 30
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 32
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 23
        },
        {
          "path": "dist/tools/extract-template.js",
          "line": 21
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 30
        },
        {
          "path": "dist/tools/score-quality.js",
          "line": 19
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 31
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 30
        },
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 19
        }
      ]
    },
    {
      "snippet": "o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\nvar ownKeys = function(o) {\nownKeys = Object.getOwnPropertyNames || function (o) {",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 31
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 24
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 30
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 29
        },
        {
          "path": "dist/index.js",
          "line": 18
        },
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 16
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 25
        },
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 25
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 25
        },
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 16
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 31
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 33
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 24
        },
        {
          "path": "dist/tools/extract-template.js",
          "line": 22
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 31
        },
        {
          "path": "dist/tools/score-quality.js",
          "line": 20
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 32
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 31
        },
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 20
        }
      ]
    },
    {
      "snippet": "});\nvar __importStar = (this && this.__importStar) || (function () {\nvar ownKeys = function(o) {\nownKeys = Object.getOwnPropertyNames || function (o) {\nvar ar = [];",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 32
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 25
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 31
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 30
        },
        {
          "path": "dist/index.js",
          "line": 19
        },
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 17
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 26
        },
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 26
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 26
        },
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 17
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 32
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 34
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 25
        },
        {
          "path": "dist/tools/extract-template.js",
          "line": 23
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 32
        },
        {
          "path": "dist/tools/score-quality.js",
          "line": 21
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 33
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 32
        },
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 21
        }
      ]
    },
    {
      "snippet": "var __importStar = (this && this.__importStar) || (function () {\nvar ownKeys = function(o) {\nownKeys = Object.getOwnPropertyNames || function (o) {\nvar ar = [];\nfor (var k in o) if (Object.prototype.h",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 33
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 26
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 32
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 31
        },
        {
          "path": "dist/index.js",
          "line": 20
        },
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 18
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 27
        },
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 27
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 27
        },
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 18
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 33
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 35
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 26
        },
        {
          "path": "dist/tools/extract-template.js",
          "line": 24
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 33
        },
        {
          "path": "dist/tools/score-quality.js",
          "line": 22
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 34
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 33
        },
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 22
        }
      ]
    },
    {
      "snippet": "var ownKeys = function(o) {\nownKeys = Object.getOwnPropertyNames || function (o) {\nvar ar = [];\nfor (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\nreturn ar;",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 34
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 27
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 33
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 32
        },
        {
          "path": "dist/index.js",
          "line": 21
        },
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 19
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 28
        },
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 28
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 28
        },
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 19
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 34
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 36
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 27
        },
        {
          "path": "dist/tools/extract-template.js",
          "line": 25
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 34
        },
        {
          "path": "dist/tools/score-quality.js",
          "line": 23
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 35
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 34
        },
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 23
        }
      ]
    },
    {
      "snippet": "ownKeys = Object.getOwnPropertyNames || function (o) {\nvar ar = [];\nfor (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\nreturn ar;\n};",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 35
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 28
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 34
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 33
        },
        {
          "path": "dist/index.js",
          "line": 22
        },
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 20
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 29
        },
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 29
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 29
        },
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 20
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 35
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 37
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 28
        },
        {
          "path": "dist/tools/extract-template.js",
          "line": 26
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 35
        },
        {
          "path": "dist/tools/score-quality.js",
          "line": 24
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 36
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 35
        },
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 24
        }
      ]
    },
    {
      "snippet": "var ar = [];\nfor (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\nreturn ar;\n};\nreturn ownKeys(o);",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 36
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 29
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 35
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 34
        },
        {
          "path": "dist/index.js",
          "line": 23
        },
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 21
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 30
        },
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 30
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 30
        },
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 21
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 36
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 38
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 29
        },
        {
          "path": "dist/tools/extract-template.js",
          "line": 27
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 36
        },
        {
          "path": "dist/tools/score-quality.js",
          "line": 25
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 37
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 36
        },
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 25
        }
      ]
    },
    {
      "snippet": "for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\nreturn ar;\n};\nreturn ownKeys(o);\n};",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 37
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 30
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 36
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 35
        },
        {
          "path": "dist/index.js",
          "line": 24
        },
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 22
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 31
        },
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 31
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 31
        },
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 22
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 37
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 39
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 30
        },
        {
          "path": "dist/tools/extract-template.js",
          "line": 28
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 37
        },
        {
          "path": "dist/tools/score-quality.js",
          "line": 26
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 38
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 37
        },
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 26
        }
      ]
    },
    {
      "snippet": "return ar;\n};\nreturn ownKeys(o);\n};\nreturn function (mod) {",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 38
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 31
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 37
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 36
        },
        {
          "path": "dist/index.js",
          "line": 25
        },
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 23
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 32
        },
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 32
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 32
        },
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 23
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 38
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 40
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 31
        },
        {
          "path": "dist/tools/extract-template.js",
          "line": 29
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 38
        },
        {
          "path": "dist/tools/score-quality.js",
          "line": 27
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 39
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 38
        },
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 27
        }
      ]
    },
    {
      "snippet": "};\nreturn ownKeys(o);\n};\nreturn function (mod) {\nif (mod && mod.__esModule) return mod;",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 39
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 32
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 38
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 37
        },
        {
          "path": "dist/index.js",
          "line": 26
        },
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 24
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 33
        },
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 33
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 33
        },
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 24
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 39
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 41
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 32
        },
        {
          "path": "dist/tools/extract-template.js",
          "line": 30
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 39
        },
        {
          "path": "dist/tools/score-quality.js",
          "line": 28
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 40
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 39
        },
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 28
        }
      ]
    },
    {
      "snippet": "return ownKeys(o);\n};\nreturn function (mod) {\nif (mod && mod.__esModule) return mod;\nvar result = {};",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 40
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 33
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 39
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 38
        },
        {
          "path": "dist/index.js",
          "line": 27
        },
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 25
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 34
        },
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 34
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 34
        },
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 25
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 40
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 42
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 33
        },
        {
          "path": "dist/tools/extract-template.js",
          "line": 31
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 40
        },
        {
          "path": "dist/tools/score-quality.js",
          "line": 29
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 41
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 40
        },
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 29
        }
      ]
    },
    {
      "snippet": "};\nreturn function (mod) {\nif (mod && mod.__esModule) return mod;\nvar result = {};\nif (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result,",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 41
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 34
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 40
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 39
        },
        {
          "path": "dist/index.js",
          "line": 28
        },
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 26
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 35
        },
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 35
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 35
        },
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 26
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 41
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 43
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 34
        },
        {
          "path": "dist/tools/extract-template.js",
          "line": 32
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 41
        },
        {
          "path": "dist/tools/score-quality.js",
          "line": 30
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 42
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 41
        },
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 30
        }
      ]
    },
    {
      "snippet": "return function (mod) {\nif (mod && mod.__esModule) return mod;\nvar result = {};\nif (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mo",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 42
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 35
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 41
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 40
        },
        {
          "path": "dist/index.js",
          "line": 29
        },
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 27
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 36
        },
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 36
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 36
        },
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 27
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 42
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 44
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 35
        },
        {
          "path": "dist/tools/extract-template.js",
          "line": 33
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 42
        },
        {
          "path": "dist/tools/score-quality.js",
          "line": 31
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 43
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 42
        },
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 31
        }
      ]
    },
    {
      "snippet": "if (mod && mod.__esModule) return mod;\nvar result = {};\nif (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n__setModuleDef",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 43
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 36
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 42
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 41
        },
        {
          "path": "dist/index.js",
          "line": 30
        },
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 28
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 37
        },
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 37
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 37
        },
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 28
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 43
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 45
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 36
        },
        {
          "path": "dist/tools/extract-template.js",
          "line": 34
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 43
        },
        {
          "path": "dist/tools/score-quality.js",
          "line": 32
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 44
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 43
        },
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 32
        }
      ]
    },
    {
      "snippet": "var result = {};\nif (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n__setModuleDefault(result, mod);\nreturn result;\n};",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 44
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 37
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 43
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 42
        },
        {
          "path": "dist/index.js",
          "line": 31
        },
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 29
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 38
        },
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 38
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 38
        },
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 29
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 44
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 46
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 37
        },
        {
          "path": "dist/tools/extract-template.js",
          "line": 35
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 44
        },
        {
          "path": "dist/tools/score-quality.js",
          "line": 33
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 45
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 44
        },
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 33
        }
      ]
    },
    {
      "snippet": "if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n__setModuleDefault(result, mod);\nreturn result;\n};\n})();",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 45
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 38
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 44
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 43
        },
        {
          "path": "dist/index.js",
          "line": 32
        },
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 30
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 39
        },
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 39
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 39
        },
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 30
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 45
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 47
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 38
        },
        {
          "path": "dist/tools/extract-template.js",
          "line": 36
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 45
        },
        {
          "path": "dist/tools/score-quality.js",
          "line": 34
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 46
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 45
        },
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 34
        }
      ]
    },
    {
      "snippet": "__setModuleDefault(result, mod);\nreturn result;\n};\n})();\nvar __importDefault = (this && this.__importDefault) || function (mod) {",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 46
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 40
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 48
        }
      ]
    },
    {
      "snippet": "return result;\n};\n})();\nvar __importDefault = (this && this.__importDefault) || function (mod) {\nreturn (mod && mod.__esModule) ? mod : { \"default\": mod };",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 47
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 41
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 49
        }
      ]
    },
    {
      "snippet": "};\n})();\nvar __importDefault = (this && this.__importDefault) || function (mod) {\nreturn (mod && mod.__esModule) ? mod : { \"default\": mod };\n};",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 48
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 42
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 50
        }
      ]
    },
    {
      "snippet": "})();\nvar __importDefault = (this && this.__importDefault) || function (mod) {\nreturn (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true ",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 49
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 43
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 51
        }
      ]
    },
    {
      "snippet": "type: 'object',\nproperties: {\nname: { type: 'string', minLength: 1 },\nversion: { type: 'string', minLength: 1 },\ndisplayName: { type: 'string', minLength: 1 },",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 63
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 35
        }
      ]
    },
    {
      "snippet": "properties: {\nname: { type: 'string', minLength: 1 },\nversion: { type: 'string', minLength: 1 },\ndisplayName: { type: 'string', minLength: 1 },\ndescription: { type: 'string', minLength: 1 },",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 64
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 36
        }
      ]
    },
    {
      "snippet": "name: { type: 'string', minLength: 1 },\nversion: { type: 'string', minLength: 1 },\ndisplayName: { type: 'string', minLength: 1 },\ndescription: { type: 'string', minLength: 1 },\nauthor: { type: 'string",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 65
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 37
        }
      ]
    },
    {
      "snippet": "version: { type: 'string', minLength: 1 },\ndisplayName: { type: 'string', minLength: 1 },\ndescription: { type: 'string', minLength: 1 },\nauthor: { type: 'string' },\nschema: { type: 'string', minLength",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 66
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 38
        }
      ]
    },
    {
      "snippet": "displayName: { type: 'string', minLength: 1 },\ndescription: { type: 'string', minLength: 1 },\nauthor: { type: 'string' },\nschema: { type: 'string', minLength: 1 },\ndependencies: {",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 67
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 39
        }
      ]
    },
    {
      "snippet": "description: { type: 'string', minLength: 1 },\nauthor: { type: 'string' },\nschema: { type: 'string', minLength: 1 },\ndependencies: {\ntype: 'array',",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 68
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 40
        }
      ]
    },
    {
      "snippet": "author: { type: 'string' },\nschema: { type: 'string', minLength: 1 },\ndependencies: {\ntype: 'array',\nitems: {",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 69
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 41
        }
      ]
    },
    {
      "snippet": "schema: { type: 'string', minLength: 1 },\ndependencies: {\ntype: 'array',\nitems: {\ntype: 'object',",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 70
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 42
        }
      ]
    },
    {
      "snippet": "dependencies: {\ntype: 'array',\nitems: {\ntype: 'object',\nproperties: {",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 71
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 43
        }
      ]
    },
    {
      "snippet": "type: 'array',\nitems: {\ntype: 'object',\nproperties: {\nname: { type: 'string', minLength: 1 },",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 72
        },
        {
          "path": "dist/registry/registry-parser.js",
          "line": 20
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 44
        },
        {
          "path": "src/registry/registry-parser.ts",
          "line": 22
        }
      ]
    },
    {
      "snippet": "items: {\ntype: 'object',\nproperties: {\nname: { type: 'string', minLength: 1 },\nversion: { type: 'string', minLength: 1 },",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 73
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 45
        }
      ]
    },
    {
      "snippet": "type: 'object',\nproperties: {\nname: { type: 'string', minLength: 1 },\nversion: { type: 'string', minLength: 1 },\n},",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 74
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 46
        }
      ]
    },
    {
      "snippet": "properties: {\nname: { type: 'string', minLength: 1 },\nversion: { type: 'string', minLength: 1 },\n},\nrequired: ['name', 'version'],",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 75
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 47
        }
      ]
    },
    {
      "snippet": "name: { type: 'string', minLength: 1 },\nversion: { type: 'string', minLength: 1 },\n},\nrequired: ['name', 'version'],\nadditionalProperties: false,",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 76
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 48
        }
      ]
    },
    {
      "snippet": "version: { type: 'string', minLength: 1 },\n},\nrequired: ['name', 'version'],\nadditionalProperties: false,\n},",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 77
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 49
        }
      ]
    },
    {
      "snippet": "},\nrequired: ['name', 'version'],\nadditionalProperties: false,\n},\n},",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 78
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 50
        }
      ]
    },
    {
      "snippet": "required: ['name', 'version'],\nadditionalProperties: false,\n},\n},\n},",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 79
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 51
        }
      ]
    },
    {
      "snippet": "additionalProperties: false,\n},\n},\n},\nrequired: ['name', 'version', 'displayName', 'description', 'schema'],",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 80
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 52
        }
      ]
    },
    {
      "snippet": "},\n},\n},\nrequired: ['name', 'version', 'displayName', 'description', 'schema'],\nadditionalProperties: false,",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 81
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 53
        }
      ]
    },
    {
      "snippet": "},\n},\nrequired: ['name', 'version', 'displayName', 'description', 'schema'],\nadditionalProperties: false,\n};",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 82
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 54
        }
      ]
    },
    {
      "snippet": "this.loader = loader;\nthis.registry = registry;\nthis.options = {\nmaxSchemaSize: options?.maxSchemaSize ?? 1024 * 1024, // 1MB default\nmaxTemplateSize: options?.maxTemplateSize ?? 1024 * 1024, // 1MB d",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 94
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 76
        }
      ]
    },
    {
      "snippet": "this.registry = registry;\nthis.options = {\nmaxSchemaSize: options?.maxSchemaSize ?? 1024 * 1024, // 1MB default\nmaxTemplateSize: options?.maxTemplateSize ?? 1024 * 1024, // 1MB default\n};",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 95
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 77
        }
      ]
    },
    {
      "snippet": "// Step 1: Find pack in registry\nconst registryEntry = this.registry.findByName(registryEntries, packName);\nif (!registryEntry) {\nthrow new Error(`Domain pack \"${packName}\" not found in registry`);\n}",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 119
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 102
        }
      ]
    },
    {
      "snippet": "// Step 6: Return complete pack\nreturn {\nmanifest,\nschema,\ntemplate,",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 143
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 136
        }
      ]
    },
    {
      "snippet": "return {\nmanifest,\nschema,\ntemplate,\n};",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 144
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 137
        }
      ]
    },
    {
      "snippet": "manifest,\nschema,\ntemplate,\n};\n}",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 145
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 138
        }
      ]
    },
    {
      "snippet": "if (error instanceof Error) {\nthrow new Error(`Failed to load pack manifest: ${error.message}`);\n}\nthrow new Error('Failed to load pack manifest: Unknown error');\n}",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 163
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 159
        }
      ]
    },
    {
      "snippet": "throw new Error(`Failed to load pack manifest: ${error.message}`);\n}\nthrow new Error('Failed to load pack manifest: Unknown error');\n}\n}",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 164
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 160
        }
      ]
    },
    {
      "snippet": "// Validate schema path is relative (no traversal)\nif (manifest.schema.includes('..') || path.isAbsolute(manifest.schema)) {\nerrors.push('schema path must be relative and cannot contain \"..\"');\n}\n}",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 203
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 205
        }
      ]
    },
    {
      "snippet": "// Validate dependencies if present\nif (manifest.dependencies) {\nmanifest.dependencies.forEach((dep, index) => {\nif (!dep.name || dep.name.trim().length === 0) {\nerrors.push(`dependency ${index}: name",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 212
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 216
        }
      ]
    },
    {
      "snippet": "if (manifest.dependencies) {\nmanifest.dependencies.forEach((dep, index) => {\nif (!dep.name || dep.name.trim().length === 0) {\nerrors.push(`dependency ${index}: name is required`);\n}",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 213
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 217
        }
      ]
    },
    {
      "snippet": "manifest.dependencies.forEach((dep, index) => {\nif (!dep.name || dep.name.trim().length === 0) {\nerrors.push(`dependency ${index}: name is required`);\n}\nif (!dep.version || dep.version.trim().length =",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 214
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 218
        }
      ]
    },
    {
      "snippet": "if (!dep.name || dep.name.trim().length === 0) {\nerrors.push(`dependency ${index}: name is required`);\n}\nif (!dep.version || dep.version.trim().length === 0) {\nerrors.push(`dependency ${index}: versio",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 215
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 219
        }
      ]
    },
    {
      "snippet": "if (error instanceof Error) {\nthrow new Error(`Failed to load domain schema: ${error.message}`);\n}\nthrow new Error('Failed to load domain schema: Unknown error');\n}",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 252
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 260
        }
      ]
    },
    {
      "snippet": "throw new Error(`Failed to load domain schema: ${error.message}`);\n}\nthrow new Error('Failed to load domain schema: Unknown error');\n}\n}",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 253
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 261
        }
      ]
    },
    {
      "snippet": "}\nreturn template;\n}\ncatch (error) {\nif (error instanceof Error) {",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 271
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 182
        }
      ]
    },
    {
      "snippet": "if (error instanceof Error) {\nthrow new Error(`Failed to load domain template: ${error.message}`);\n}\nthrow new Error('Failed to load domain template: Unknown error');\n}",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 275
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 285
        }
      ]
    },
    {
      "snippet": "throw new Error(`Failed to load domain template: ${error.message}`);\n}\nthrow new Error('Failed to load domain template: Unknown error');\n}\n}",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 276
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 286
        }
      ]
    },
    {
      "snippet": "try {\nconst validate = this.ajv.compile(schema);\nconst ok = validate(template);\nif (!ok) {\nconst errs = (validate.errors || []).map(e => this.ajv.errorsText([e]));",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 285
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 299
        }
      ]
    },
    {
      "snippet": "const validate = this.ajv.compile(schema);\nconst ok = validate(template);\nif (!ok) {\nconst errs = (validate.errors || []).map(e => this.ajv.errorsText([e]));\nreturn { valid: false, errors: errs };",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 286
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 300
        }
      ]
    },
    {
      "snippet": "const ok = validate(template);\nif (!ok) {\nconst errs = (validate.errors || []).map(e => this.ajv.errorsText([e]));\nreturn { valid: false, errors: errs };\n}",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 287
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 301
        }
      ]
    },
    {
      "snippet": "if (!ok) {\nconst errs = (validate.errors || []).map(e => this.ajv.errorsText([e]));\nreturn { valid: false, errors: errs };\n}\nreturn { valid: true, errors: [] };",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 288
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 302
        }
      ]
    },
    {
      "snippet": "// Validate manifest\nconst manifestValidation = this.validateManifest(pack.manifest);\nif (!manifestValidation.valid) {\nerrors.push(...manifestValidation.errors);\n}",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 311
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 326
        }
      ]
    },
    {
      "snippet": "// Could add template validation against schema here if needed\n// Validate template conforms to schema\nconst schemaValidation = this.validateTemplateAgainstSchema(pack.template, pack.schema);\nif (!sch",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 326
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 346
        }
      ]
    },
    {
      "snippet": "// Validate template conforms to schema\nconst schemaValidation = this.validateTemplateAgainstSchema(pack.template, pack.schema);\nif (!schemaValidation.valid) {\nerrors.push(...schemaValidation.errors.m",
      "occurrences": [
        {
          "path": "dist/domains/domain-pack-loader.js",
          "line": 327
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 347
        }
      ]
    },
    {
      "snippet": "/**\n* Domain Pack Type Definitions\n*\n* Defines interfaces for domain pack manifests, schemas, and loaded packs.\n*",
      "occurrences": [
        {
          "path": "dist/domains/types.d.ts",
          "line": 1
        },
        {
          "path": "dist/domains/types.js",
          "line": 2
        },
        {
          "path": "src/domains/types.ts",
          "line": 1
        }
      ]
    },
    {
      "snippet": "* Domain Pack Type Definitions\n*\n* Defines interfaces for domain pack manifests, schemas, and loaded packs.\n*\n* @module domains/types",
      "occurrences": [
        {
          "path": "dist/domains/types.d.ts",
          "line": 2
        },
        {
          "path": "dist/domains/types.js",
          "line": 3
        },
        {
          "path": "src/domains/types.ts",
          "line": 2
        }
      ]
    },
    {
      "snippet": "*\n* Defines interfaces for domain pack manifests, schemas, and loaded packs.\n*\n* @module domains/types\n*/",
      "occurrences": [
        {
          "path": "dist/domains/types.d.ts",
          "line": 3
        },
        {
          "path": "dist/domains/types.js",
          "line": 4
        },
        {
          "path": "src/domains/types.ts",
          "line": 3
        }
      ]
    },
    {
      "snippet": "/**\n* Domain Pack Manifest (pack.yaml)\n* Metadata and configuration for a domain-specific pack\n*/\nexport interface DomainPackManifest {",
      "occurrences": [
        {
          "path": "dist/domains/types.d.ts",
          "line": 9
        },
        {
          "path": "src/domains/types.ts",
          "line": 11
        }
      ]
    },
    {
      "snippet": "* Domain Pack Manifest (pack.yaml)\n* Metadata and configuration for a domain-specific pack\n*/\nexport interface DomainPackManifest {\n/** Globally unique identifier for the pack */",
      "occurrences": [
        {
          "path": "dist/domains/types.d.ts",
          "line": 10
        },
        {
          "path": "src/domains/types.ts",
          "line": 12
        }
      ]
    },
    {
      "snippet": "* Metadata and configuration for a domain-specific pack\n*/\nexport interface DomainPackManifest {\n/** Globally unique identifier for the pack */\nname: string;",
      "occurrences": [
        {
          "path": "dist/domains/types.d.ts",
          "line": 11
        },
        {
          "path": "src/domains/types.ts",
          "line": 13
        }
      ]
    },
    {
      "snippet": "/** Optional pack dependencies */\ndependencies?: Array<{\nname: string;\nversion: string;\n}>;",
      "occurrences": [
        {
          "path": "dist/domains/types.d.ts",
          "line": 26
        },
        {
          "path": "src/domains/types.ts",
          "line": 34
        }
      ]
    },
    {
      "snippet": "dependencies?: Array<{\nname: string;\nversion: string;\n}>;\n}",
      "occurrences": [
        {
          "path": "dist/domains/types.d.ts",
          "line": 27
        },
        {
          "path": "src/domains/types.ts",
          "line": 35
        }
      ]
    },
    {
      "snippet": "/**\n* Loaded Domain Pack\n* Complete pack with manifest, schema, and template data\n*/\nexport interface DomainPack {",
      "occurrences": [
        {
          "path": "dist/domains/types.d.ts",
          "line": 32
        },
        {
          "path": "src/domains/types.ts",
          "line": 41
        }
      ]
    },
    {
      "snippet": "* Loaded Domain Pack\n* Complete pack with manifest, schema, and template data\n*/\nexport interface DomainPack {\n/** Pack manifest metadata */",
      "occurrences": [
        {
          "path": "dist/domains/types.d.ts",
          "line": 33
        },
        {
          "path": "src/domains/types.ts",
          "line": 42
        }
      ]
    },
    {
      "snippet": "* Complete pack with manifest, schema, and template data\n*/\nexport interface DomainPack {\n/** Pack manifest metadata */\nmanifest: DomainPackManifest;",
      "occurrences": [
        {
          "path": "dist/domains/types.d.ts",
          "line": 34
        },
        {
          "path": "src/domains/types.ts",
          "line": 43
        }
      ]
    },
    {
      "snippet": "/**\n* Domain Pack Validation Result\n*/\nexport interface DomainPackValidationResult {\n/** Whether validation passed */",
      "occurrences": [
        {
          "path": "dist/domains/types.d.ts",
          "line": 44
        },
        {
          "path": "src/domains/types.ts",
          "line": 56
        }
      ]
    },
    {
      "snippet": "* Domain Pack Validation Result\n*/\nexport interface DomainPackValidationResult {\n/** Whether validation passed */\nvalid: boolean;",
      "occurrences": [
        {
          "path": "dist/domains/types.d.ts",
          "line": 45
        },
        {
          "path": "src/domains/types.ts",
          "line": 57
        }
      ]
    },
    {
      "snippet": "/**\n* Domain Pack Loader Options\n*/\nexport interface DomainPackLoaderOptions {\n/** Maximum schema file size in bytes (default: 1MB) */",
      "occurrences": [
        {
          "path": "dist/domains/types.d.ts",
          "line": 55
        },
        {
          "path": "src/domains/types.ts",
          "line": 70
        }
      ]
    },
    {
      "snippet": "* Domain Pack Loader Options\n*/\nexport interface DomainPackLoaderOptions {\n/** Maximum schema file size in bytes (default: 1MB) */\nmaxSchemaSize?: number;",
      "occurrences": [
        {
          "path": "dist/domains/types.d.ts",
          "line": 56
        },
        {
          "path": "src/domains/types.ts",
          "line": 71
        }
      ]
    },
    {
      "snippet": "/**\n* Template Extractor - Three-Stage Hybrid Extraction Algorithm\n*\n* Implements the algorithm defined in research mission R3.1:\n* 1. Stage 1: Automated Candidate Identification",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.d.ts",
          "line": 1
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 2
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 1
        }
      ]
    },
    {
      "snippet": "* Template Extractor - Three-Stage Hybrid Extraction Algorithm\n*\n* Implements the algorithm defined in research mission R3.1:\n* 1. Stage 1: Automated Candidate Identification\n* 2. Stage 2: Automated P",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.d.ts",
          "line": 2
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 3
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 2
        }
      ]
    },
    {
      "snippet": "*\n* Implements the algorithm defined in research mission R3.1:\n* 1. Stage 1: Automated Candidate Identification\n* 2. Stage 2: Automated Parameterization & Logic Inference\n* 3. Stage 3: Human-in-the-Lo",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.d.ts",
          "line": 3
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 4
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 3
        }
      ]
    },
    {
      "snippet": "* Implements the algorithm defined in research mission R3.1:\n* 1. Stage 1: Automated Candidate Identification\n* 2. Stage 2: Automated Parameterization & Logic Inference\n* 3. Stage 3: Human-in-the-Loop",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.d.ts",
          "line": 4
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 5
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 4
        }
      ]
    },
    {
      "snippet": "/**\n* Stage 1: Automated Candidate Identification\n*\n* Analyzes the source mission to identify potential parameters using:\n* - Literal differencing & frequency analysis",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.d.ts",
          "line": 19
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 92
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 79
        }
      ]
    },
    {
      "snippet": "* Stage 1: Automated Candidate Identification\n*\n* Analyzes the source mission to identify potential parameters using:\n* - Literal differencing & frequency analysis\n* - Structural hashing and clone det",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.d.ts",
          "line": 20
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 93
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 80
        }
      ]
    },
    {
      "snippet": "*\n* Analyzes the source mission to identify potential parameters using:\n* - Literal differencing & frequency analysis\n* - Structural hashing and clone detection (AST-based)\n*/",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.d.ts",
          "line": 21
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 94
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 81
        }
      ]
    },
    {
      "snippet": "/**\n* Stage 2: Automated Parameterization & Logic Inference\n*\n* Transforms candidates into a structured template with:\n* - Rule-based parameter generation",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.d.ts",
          "line": 27
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 165
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 167
        }
      ]
    },
    {
      "snippet": "* Stage 2: Automated Parameterization & Logic Inference\n*\n* Transforms candidates into a structured template with:\n* - Rule-based parameter generation\n* - Conditional block inference",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.d.ts",
          "line": 28
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 166
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 168
        }
      ]
    },
    {
      "snippet": "*\n* Transforms candidates into a structured template with:\n* - Rule-based parameter generation\n* - Conditional block inference\n*/",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.d.ts",
          "line": 29
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 167
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 169
        }
      ]
    },
    {
      "snippet": "__setModuleDefault(result, mod);\nreturn result;\n};\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 39
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 45
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 44
        },
        {
          "path": "dist/index.js",
          "line": 33
        },
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 31
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 40
        },
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 40
        },
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 31
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 46
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 39
        },
        {
          "path": "dist/tools/extract-template.js",
          "line": 37
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 46
        },
        {
          "path": "dist/tools/score-quality.js",
          "line": 35
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 47
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 46
        },
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 35
        }
      ]
    },
    {
      "snippet": "this.config = {\nconfidenceThreshold: 0.6,\nenableASTAnalysis: true,\nexcludePatterns: ['node_modules/**', '.git/**', 'dist/**', 'build/**', '*.log'],\n...config",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 52
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 33
        }
      ]
    },
    {
      "snippet": "confidenceThreshold: 0.6,\nenableASTAnalysis: true,\nexcludePatterns: ['node_modules/**', '.git/**', 'dist/**', 'build/**', '*.log'],\n...config\n};",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 53
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 34
        }
      ]
    },
    {
      "snippet": "enableASTAnalysis: true,\nexcludePatterns: ['node_modules/**', '.git/**', 'dist/**', 'build/**', '*.log'],\n...config\n};\n}",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 54
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 35
        }
      ]
    },
    {
      "snippet": "try {\n// Validate source mission exists\nif (!fs.existsSync(this.config.sourceMissionPath)) {\nthrow new Error(`Source mission path does not exist: ${this.config.sourceMissionPath}`);\n}",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 65
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 48
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: true,\ntemplate: stage2Result.template,\nstage1: stage1Result,\nstage2: stage2Result,",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 75
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 62
        }
      ]
    },
    {
      "snippet": "success: true,\ntemplate: stage2Result.template,\nstage1: stage1Result,\nstage2: stage2Result,\ntotalTime",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 76
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 63
        }
      ]
    },
    {
      "snippet": "template: stage2Result.template,\nstage1: stage1Result,\nstage2: stage2Result,\ntotalTime\n};",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 77
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 64
        }
      ]
    },
    {
      "snippet": "errors.push(error instanceof Error ? error.message : String(error));\nreturn {\nsuccess: false,\nerrors,\ntotalTime: Math.round(performance.now() - totalStartTime)",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 84
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 70
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: false,\nerrors,\ntotalTime: Math.round(performance.now() - totalStartTime)\n};",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 85
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 71
        }
      ]
    },
    {
      "snippet": "success: false,\nerrors,\ntotalTime: Math.round(performance.now() - totalStartTime)\n};\n}",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 86
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 72
        }
      ]
    },
    {
      "snippet": "errors,\ntotalTime: Math.round(performance.now() - totalStartTime)\n};\n}\n}",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 87
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 73
        }
      ]
    },
    {
      "snippet": "const paramName = this.suggestParameterName(literal, locations[0]);\nif (!candidates[paramName]) {\ncandidates[paramName] = [];\n}\ncandidates[paramName].push(...locations.map(loc => ({",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 130
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 146
        }
      ]
    },
    {
      "snippet": "if (!candidates[paramName]) {\ncandidates[paramName] = [];\n}\ncandidates[paramName].push(...locations.map(loc => ({\n...loc,",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 131
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 147
        }
      ]
    },
    {
      "snippet": "candidates[paramName] = [];\n}\ncandidates[paramName].push(...locations.map(loc => ({\n...loc,\nfrequency,",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 132
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 148
        }
      ]
    },
    {
      "snippet": "}\ncandidates[paramName].push(...locations.map(loc => ({\n...loc,\nfrequency,\nconfidence",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 133
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 149
        }
      ]
    },
    {
      "snippet": "candidates[paramName].push(...locations.map(loc => ({\n...loc,\nfrequency,\nconfidence\n})));",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 134
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 150
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 129
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 149
        }
      ]
    },
    {
      "snippet": "...loc,\nfrequency,\nconfidence\n})));\n}",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 135
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 151
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 130
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 150
        }
      ]
    },
    {
      "snippet": "frequency,\nconfidence\n})));\n}\n}",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 136
        },
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 152
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 131
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 151
        }
      ]
    },
    {
      "snippet": "// If no candidates found, lower threshold to ensure we get some results\nif (Object.keys(candidates).length === 0 && literalLocations.size > 0) {\nfor (const [literal, locations] of literalLocations) {",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 141
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 137
        }
      ]
    },
    {
      "snippet": "return {\ncandidates,\nexecutionTime,\nfilesAnalyzed\n};",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 159
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 160
        }
      ]
    },
    {
      "snippet": "candidates,\nexecutionTime,\nfilesAnalyzed\n};\n}",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 160
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 161
        }
      ]
    },
    {
      "snippet": "// Generate parameters from candidates\nlet parametersGenerated = 0;\nfor (const [paramName, candidateList] of Object.entries(candidates)) {\nconst param = this.generateParameter(paramName, candidateList",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 176
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 180
        }
      ]
    },
    {
      "snippet": "let parametersGenerated = 0;\nfor (const [paramName, candidateList] of Object.entries(candidates)) {\nconst param = this.generateParameter(paramName, candidateList);\nparameters[paramName] = param;\nparam",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 177
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 181
        }
      ]
    },
    {
      "snippet": "for (const [paramName, candidateList] of Object.entries(candidates)) {\nconst param = this.generateParameter(paramName, candidateList);\nparameters[paramName] = param;\nparametersGenerated++;\n}",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 178
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 182
        }
      ]
    },
    {
      "snippet": "// Apply parameterization to content\nfor (const [paramName, candidateList] of Object.entries(candidates)) {\nfor (const candidate of candidateList) {\nif (candidate.filePath === relativePath && candidat",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 199
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 210
        }
      ]
    },
    {
      "snippet": "for (const [paramName, candidateList] of Object.entries(candidates)) {\nfor (const candidate of candidateList) {\nif (candidate.filePath === relativePath && candidate.type !== 'path-segment') {\n// Use w",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 200
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 211
        }
      ]
    },
    {
      "snippet": "for (const candidate of candidateList) {\nif (candidate.filePath === relativePath && candidate.type !== 'path-segment') {\n// Use word boundaries for safer replacement\nconst valueStr = String(candidate.",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 201
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 212
        }
      ]
    },
    {
      "snippet": "if (candidate.filePath === relativePath && candidate.type !== 'path-segment') {\n// Use word boundaries for safer replacement\nconst valueStr = String(candidate.value);\nconst regex = new RegExp(`\\\\b${th",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 202
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 213
        }
      ]
    },
    {
      "snippet": "// Use word boundaries for safer replacement\nconst valueStr = String(candidate.value);\nconst regex = new RegExp(`\\\\b${this.escapeRegex(valueStr)}\\\\b`, 'g');\ncontent = content.replace(regex, `{{ ${para",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 203
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 214
        }
      ]
    },
    {
      "snippet": "const valueStr = String(candidate.value);\nconst regex = new RegExp(`\\\\b${this.escapeRegex(valueStr)}\\\\b`, 'g');\ncontent = content.replace(regex, `{{ ${paramName} }}`);\n}\n}",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 204
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 215
        }
      ]
    },
    {
      "snippet": "const regex = new RegExp(`\\\\b${this.escapeRegex(valueStr)}\\\\b`, 'g');\ncontent = content.replace(regex, `{{ ${paramName} }}`);\n}\n}\n}",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 205
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 216
        }
      ]
    },
    {
      "snippet": "fileStructure.push({\npath: templatePath,\ncontent\n});\n}",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 210
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 222
        }
      ]
    },
    {
      "snippet": "return {\ntemplate,\nexecutionTime,\nparametersGenerated\n};",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 223
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 242
        }
      ]
    },
    {
      "snippet": "template,\nexecutionTime,\nparametersGenerated\n};\n}",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 224
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 243
        }
      ]
    },
    {
      "snippet": "return {\ntemplateId,\ntemplateVersion: '1.0.0',\nname: this.generateTemplateName(missionName),\ndescription: `Template extracted from ${missionName}`,",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 236
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 260
        }
      ]
    },
    {
      "snippet": "templateId,\ntemplateVersion: '1.0.0',\nname: this.generateTemplateName(missionName),\ndescription: `Template extracted from ${missionName}`,\nauthor: this.config.author,",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 237
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 261
        }
      ]
    },
    {
      "snippet": "templateVersion: '1.0.0',\nname: this.generateTemplateName(missionName),\ndescription: `Template extracted from ${missionName}`,\nauthor: this.config.author,\ntags: this.generateTags(sourcePath),",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 238
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 262
        }
      ]
    },
    {
      "snippet": "name: this.generateTemplateName(missionName),\ndescription: `Template extracted from ${missionName}`,\nauthor: this.config.author,\ntags: this.generateTags(sourcePath),\nparameters,",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 239
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 263
        }
      ]
    },
    {
      "snippet": "description: `Template extracted from ${missionName}`,\nauthor: this.config.author,\ntags: this.generateTags(sourcePath),\nparameters,\nsourceMissionId: missionName,",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 240
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 264
        }
      ]
    },
    {
      "snippet": "author: this.config.author,\ntags: this.generateTags(sourcePath),\nparameters,\nsourceMissionId: missionName,\ncreationDate: now,",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 241
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 265
        }
      ]
    },
    {
      "snippet": "tags: this.generateTags(sourcePath),\nparameters,\nsourceMissionId: missionName,\ncreationDate: now,\nlastUpdatedDate: now,",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 242
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 266
        }
      ]
    },
    {
      "snippet": "parameters,\nsourceMissionId: missionName,\ncreationDate: now,\nlastUpdatedDate: now,\nusageCount: 0,",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 243
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 267
        }
      ]
    },
    {
      "snippet": "sourceMissionId: missionName,\ncreationDate: now,\nlastUpdatedDate: now,\nusageCount: 0,\ngeneratedSuccessRate: 0",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 244
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 268
        }
      ]
    },
    {
      "snippet": "creationDate: now,\nlastUpdatedDate: now,\nusageCount: 0,\ngeneratedSuccessRate: 0\n};",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 245
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 269
        }
      ]
    },
    {
      "snippet": "lastUpdatedDate: now,\nusageCount: 0,\ngeneratedSuccessRate: 0\n};\n}",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 246
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 270
        }
      ]
    },
    {
      "snippet": "const patterns = this.config.excludePatterns || [];\nreturn patterns.some(pattern => {\nconst regex = new RegExp(pattern.replace('**', '.*').replace('*', '[^/]*'));\nreturn regex.test(filePath);\n});",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 267
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 296
        }
      ]
    },
    {
      "snippet": "return patterns.some(pattern => {\nconst regex = new RegExp(pattern.replace('**', '.*').replace('*', '[^/]*'));\nreturn regex.test(filePath);\n});\n}",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 268
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 297
        }
      ]
    },
    {
      "snippet": "type: 'config-value',\nvalue: actualValue, // Store original type\nfilePath: relativePath,\nlineNumber: 0, // Would need line-aware parser for exact line\nfrequency: 0,",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 310
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 361
        }
      ]
    },
    {
      "snippet": "value: actualValue, // Store original type\nfilePath: relativePath,\nlineNumber: 0, // Would need line-aware parser for exact line\nfrequency: 0,\nconfidence: 0,",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 311
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 362
        }
      ]
    },
    {
      "snippet": "filePath: relativePath,\nlineNumber: 0, // Would need line-aware parser for exact line\nfrequency: 0,\nconfidence: 0,\ncontext: currentPath",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 312
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 363
        }
      ]
    },
    {
      "snippet": "lineNumber: 0, // Would need line-aware parser for exact line\nfrequency: 0,\nconfidence: 0,\ncontext: currentPath\n});",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 313
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 364
        }
      ]
    },
    {
      "snippet": "type: 'literal',\nvalue: literal,\nfilePath: relativePath,\nlineNumber,\nfrequency: 0,",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 342
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 405
        }
      ]
    },
    {
      "snippet": "value: literal,\nfilePath: relativePath,\nlineNumber,\nfrequency: 0,\nconfidence: 0,",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 343
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 406
        }
      ]
    },
    {
      "snippet": "filePath: relativePath,\nlineNumber,\nfrequency: 0,\nconfidence: 0,\ncontext: line.trim()",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 344
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 407
        }
      ]
    },
    {
      "snippet": "lineNumber,\nfrequency: 0,\nconfidence: 0,\ncontext: line.trim()\n});",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 345
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 408
        }
      ]
    },
    {
      "snippet": "frequency: 0,\nconfidence: 0,\ncontext: line.trim()\n});\n}",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 346
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 409
        }
      ]
    },
    {
      "snippet": "confidence: 0,\ncontext: line.trim()\n});\n}\n}",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 347
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 410
        }
      ]
    },
    {
      "snippet": "context: line.trim()\n});\n}\n}\n}",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 348
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 411
        }
      ]
    },
    {
      "snippet": "});\n}\n}\n}\n}",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 349
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 412
        }
      ]
    },
    {
      "snippet": "type: 'path-segment',\nvalue: segment,\nfilePath: relativePath,\nlineNumber: 0,\nfrequency: 0,",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 368
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 440
        }
      ]
    },
    {
      "snippet": "value: segment,\nfilePath: relativePath,\nlineNumber: 0,\nfrequency: 0,\nconfidence: 0,",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 369
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 441
        }
      ]
    },
    {
      "snippet": "filePath: relativePath,\nlineNumber: 0,\nfrequency: 0,\nconfidence: 0,\ncontext: 'file-path'",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 370
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 442
        }
      ]
    },
    {
      "snippet": "lineNumber: 0,\nfrequency: 0,\nconfidence: 0,\ncontext: 'file-path'\n});",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 371
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 443
        }
      ]
    },
    {
      "snippet": "frequency: 0,\nconfidence: 0,\ncontext: 'file-path'\n});\n}",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 372
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 444
        }
      ]
    },
    {
      "snippet": "confidence: 0,\ncontext: 'file-path'\n});\n}\n}",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 373
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 445
        }
      ]
    },
    {
      "snippet": "context: 'file-path'\n});\n}\n}\n}",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 374
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 446
        }
      ]
    },
    {
      "snippet": "// Use context to suggest better parameter names\nif (candidate.type === 'config-value' && candidate.context) {\nconst parts = candidate.context.split('.').filter(p => p.length > 0);\nreturn parts[parts.",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 389
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 466
        }
      ]
    },
    {
      "snippet": "// Generate from literal value\nreturn literal\n.replace(/[^a-zA-Z0-9]+/g, '_')\n.replace(/^_+|_+$/g, '')\n.toLowerCase() || 'param';",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 397
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 476
        }
      ]
    },
    {
      "snippet": "return literal\n.replace(/[^a-zA-Z0-9]+/g, '_')\n.replace(/^_+|_+$/g, '')\n.toLowerCase() || 'param';\n}",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 398
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 477
        }
      ]
    },
    {
      "snippet": "return {\ntype,\ndescription: `Parameter for ${paramName}`,\ndefault: defaultValue,\nrequired: true",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 421
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 504
        }
      ]
    },
    {
      "snippet": "type,\ndescription: `Parameter for ${paramName}`,\ndefault: defaultValue,\nrequired: true\n};",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 422
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 505
        }
      ]
    },
    {
      "snippet": "description: `Parameter for ${paramName}`,\ndefault: defaultValue,\nrequired: true\n};\n}",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 423
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 506
        }
      ]
    },
    {
      "snippet": "return missionName\n.toLowerCase()\n.replace(/[^a-z0-9]+/g, '-')\n.replace(/^-+|-+$/g, '');\n}",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 429
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 513
        }
      ]
    },
    {
      "snippet": "return missionName\n.split(/[-_]/)\n.map(word => word.charAt(0).toUpperCase() + word.slice(1))\n.join(' ');\n}",
      "occurrences": [
        {
          "path": "dist/extraction/template-extractor.js",
          "line": 435
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 520
        }
      ]
    },
    {
      "snippet": "/**\n* Defines a single configurable parameter for a template.\n*/\nexport interface TemplateParameter {\n/** The data type of the parameter, used for UI generation and validation. */",
      "occurrences": [
        {
          "path": "dist/extraction/types.d.ts",
          "line": 5
        },
        {
          "path": "src/extraction/types.ts",
          "line": 6
        }
      ]
    },
    {
      "snippet": "* Defines a single configurable parameter for a template.\n*/\nexport interface TemplateParameter {\n/** The data type of the parameter, used for UI generation and validation. */\ntype: 'string' | 'number",
      "occurrences": [
        {
          "path": "dist/extraction/types.d.ts",
          "line": 6
        },
        {
          "path": "src/extraction/types.ts",
          "line": 7
        }
      ]
    },
    {
      "snippet": "/**\n* The root metadata object for an extracted mission template.\n* This file (template-metadata.json) lives at the root of the template directory.\n*/\nexport interface TemplateMetadata {",
      "occurrences": [
        {
          "path": "dist/extraction/types.d.ts",
          "line": 22
        },
        {
          "path": "src/extraction/types.ts",
          "line": 29
        }
      ]
    },
    {
      "snippet": "/**\n* Represents a candidate element identified for potential parameterization.\n*/\nexport interface Candidate {\n/** The type of candidate identified */",
      "occurrences": [
        {
          "path": "dist/extraction/types.d.ts",
          "line": 54
        },
        {
          "path": "src/extraction/types.ts",
          "line": 77
        }
      ]
    },
    {
      "snippet": "* Represents a candidate element identified for potential parameterization.\n*/\nexport interface Candidate {\n/** The type of candidate identified */\ntype: 'literal' | 'identifier' | 'config-value' | 'p",
      "occurrences": [
        {
          "path": "dist/extraction/types.d.ts",
          "line": 55
        },
        {
          "path": "src/extraction/types.ts",
          "line": 78
        }
      ]
    },
    {
      "snippet": "/**\n* Map of candidates organized by suggested parameter name.\n*/\nexport interface CandidateMap {\n[parameterName: string]: Candidate[];",
      "occurrences": [
        {
          "path": "dist/extraction/types.d.ts",
          "line": 73
        },
        {
          "path": "src/extraction/types.ts",
          "line": 103
        }
      ]
    },
    {
      "snippet": "* Map of candidates organized by suggested parameter name.\n*/\nexport interface CandidateMap {\n[parameterName: string]: Candidate[];\n}",
      "occurrences": [
        {
          "path": "dist/extraction/types.d.ts",
          "line": 74
        },
        {
          "path": "src/extraction/types.ts",
          "line": 104
        }
      ]
    },
    {
      "snippet": "/**\n* Represents a partially extracted template with placeholders.\n*/\nexport interface ExtractedTemplate {\n/** The file structure with Jinja2 placeholders */",
      "occurrences": [
        {
          "path": "dist/extraction/types.d.ts",
          "line": 79
        },
        {
          "path": "src/extraction/types.ts",
          "line": 110
        }
      ]
    },
    {
      "snippet": "* Represents a partially extracted template with placeholders.\n*/\nexport interface ExtractedTemplate {\n/** The file structure with Jinja2 placeholders */\nfileStructure: TemplateFile[];",
      "occurrences": [
        {
          "path": "dist/extraction/types.d.ts",
          "line": 80
        },
        {
          "path": "src/extraction/types.ts",
          "line": 111
        }
      ]
    },
    {
      "snippet": "/** Optional hooks for pre/post generation */\nhooks?: {\npreGenerate?: string;\npostGenerate?: string;\n};",
      "occurrences": [
        {
          "path": "dist/extraction/types.d.ts",
          "line": 87
        },
        {
          "path": "src/extraction/types.ts",
          "line": 120
        }
      ]
    },
    {
      "snippet": "hooks?: {\npreGenerate?: string;\npostGenerate?: string;\n};\n}",
      "occurrences": [
        {
          "path": "dist/extraction/types.d.ts",
          "line": 88
        },
        {
          "path": "src/extraction/types.ts",
          "line": 121
        }
      ]
    },
    {
      "snippet": "/**\n* Represents a single file in the template structure.\n*/\nexport interface TemplateFile {\n/** Original file path (may contain Jinja2 placeholders) */",
      "occurrences": [
        {
          "path": "dist/extraction/types.d.ts",
          "line": 93
        },
        {
          "path": "src/extraction/types.ts",
          "line": 127
        }
      ]
    },
    {
      "snippet": "* Represents a single file in the template structure.\n*/\nexport interface TemplateFile {\n/** Original file path (may contain Jinja2 placeholders) */\npath: string;",
      "occurrences": [
        {
          "path": "dist/extraction/types.d.ts",
          "line": 94
        },
        {
          "path": "src/extraction/types.ts",
          "line": 128
        }
      ]
    },
    {
      "snippet": "/**\n* Configuration for the extraction process.\n*/\nexport interface ExtractionConfig {\n/** Path to the source mission directory */",
      "occurrences": [
        {
          "path": "dist/extraction/types.d.ts",
          "line": 106
        },
        {
          "path": "src/extraction/types.ts",
          "line": 144
        }
      ]
    },
    {
      "snippet": "* Configuration for the extraction process.\n*/\nexport interface ExtractionConfig {\n/** Path to the source mission directory */\nsourceMissionPath: string;",
      "occurrences": [
        {
          "path": "dist/extraction/types.d.ts",
          "line": 107
        },
        {
          "path": "src/extraction/types.ts",
          "line": 145
        }
      ]
    },
    {
      "snippet": "/**\n* Result of Stage 1: Candidate Identification\n*/\nexport interface Stage1Result {\n/** Annotated candidates for parameterization */",
      "occurrences": [
        {
          "path": "dist/extraction/types.d.ts",
          "line": 121
        },
        {
          "path": "src/extraction/types.ts",
          "line": 164
        }
      ]
    },
    {
      "snippet": "* Result of Stage 1: Candidate Identification\n*/\nexport interface Stage1Result {\n/** Annotated candidates for parameterization */\ncandidates: CandidateMap;",
      "occurrences": [
        {
          "path": "dist/extraction/types.d.ts",
          "line": 122
        },
        {
          "path": "src/extraction/types.ts",
          "line": 165
        }
      ]
    },
    {
      "snippet": "/**\n* Result of Stage 2: Automated Parameterization\n*/\nexport interface Stage2Result {\n/** The draft template */",
      "occurrences": [
        {
          "path": "dist/extraction/types.d.ts",
          "line": 132
        },
        {
          "path": "src/extraction/types.ts",
          "line": 178
        }
      ]
    },
    {
      "snippet": "* Result of Stage 2: Automated Parameterization\n*/\nexport interface Stage2Result {\n/** The draft template */\ntemplate: ExtractedTemplate;",
      "occurrences": [
        {
          "path": "dist/extraction/types.d.ts",
          "line": 133
        },
        {
          "path": "src/extraction/types.ts",
          "line": 179
        }
      ]
    },
    {
      "snippet": "/**\n* Complete extraction result returned to the user.\n*/\nexport interface ExtractionResult {\n/** Whether the extraction was successful */",
      "occurrences": [
        {
          "path": "dist/extraction/types.d.ts",
          "line": 143
        },
        {
          "path": "src/extraction/types.ts",
          "line": 192
        }
      ]
    },
    {
      "snippet": "* Complete extraction result returned to the user.\n*/\nexport interface ExtractionResult {\n/** Whether the extraction was successful */\nsuccess: boolean;",
      "occurrences": [
        {
          "path": "dist/extraction/types.d.ts",
          "line": 144
        },
        {
          "path": "src/extraction/types.ts",
          "line": 193
        }
      ]
    },
    {
      "snippet": "/**\n* Security Validator: 6-Layer Defense-in-Depth Architecture\n*\n* Implements the security architecture defined in R3.2_import-export-security.md:\n*",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.d.ts",
          "line": 1
        },
        {
          "path": "dist/import-export/security-validator.js",
          "line": 2
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 1
        }
      ]
    },
    {
      "snippet": "* Security Validator: 6-Layer Defense-in-Depth Architecture\n*\n* Implements the security architecture defined in R3.2_import-export-security.md:\n*\n* Layer 1: Path Sanitization (inherited from SecureYAM",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.d.ts",
          "line": 2
        },
        {
          "path": "dist/import-export/security-validator.js",
          "line": 3
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 2
        }
      ]
    },
    {
      "snippet": "*\n* Implements the security architecture defined in R3.2_import-export-security.md:\n*\n* Layer 1: Path Sanitization (inherited from SecureYAMLLoader)\n* Layer 2: Safe Parsing (inherited from SecureYAMLL",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.d.ts",
          "line": 3
        },
        {
          "path": "dist/import-export/security-validator.js",
          "line": 4
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 3
        }
      ]
    },
    {
      "snippet": "* Implements the security architecture defined in R3.2_import-export-security.md:\n*\n* Layer 1: Path Sanitization (inherited from SecureYAMLLoader)\n* Layer 2: Safe Parsing (inherited from SecureYAMLLoa",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.d.ts",
          "line": 4
        },
        {
          "path": "dist/import-export/security-validator.js",
          "line": 5
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 4
        }
      ]
    },
    {
      "snippet": "*\n* Layer 1: Path Sanitization (inherited from SecureYAMLLoader)\n* Layer 2: Safe Parsing (inherited from SecureYAMLLoader)\n* Layer 3: Schema Validation (inherited from SecureYAMLLoader)\n* Layer 4: Cry",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.d.ts",
          "line": 5
        },
        {
          "path": "dist/import-export/security-validator.js",
          "line": 6
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 5
        }
      ]
    },
    {
      "snippet": "* Layer 1: Path Sanitization (inherited from SecureYAMLLoader)\n* Layer 2: Safe Parsing (inherited from SecureYAMLLoader)\n* Layer 3: Schema Validation (inherited from SecureYAMLLoader)\n* Layer 4: Crypt",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.d.ts",
          "line": 6
        },
        {
          "path": "dist/import-export/security-validator.js",
          "line": 7
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 6
        }
      ]
    },
    {
      "snippet": "* Layer 2: Safe Parsing (inherited from SecureYAMLLoader)\n* Layer 3: Schema Validation (inherited from SecureYAMLLoader)\n* Layer 4: Cryptographic Signature Verification\n* Layer 5: Semantic and Busines",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.d.ts",
          "line": 7
        },
        {
          "path": "dist/import-export/security-validator.js",
          "line": 8
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 7
        }
      ]
    },
    {
      "snippet": "* Layer 3: Schema Validation (inherited from SecureYAMLLoader)\n* Layer 4: Cryptographic Signature Verification\n* Layer 5: Semantic and Business Logic Validation\n* Layer 6: Sandboxed Dependency Resolut",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.d.ts",
          "line": 8
        },
        {
          "path": "dist/import-export/security-validator.js",
          "line": 9
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 8
        }
      ]
    },
    {
      "snippet": "* Layer 4: Cryptographic Signature Verification\n* Layer 5: Semantic and Business Logic Validation\n* Layer 6: Sandboxed Dependency Resolution\n*\n* @module import-export/security-validator",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.d.ts",
          "line": 9
        },
        {
          "path": "dist/import-export/security-validator.js",
          "line": 10
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 9
        }
      ]
    },
    {
      "snippet": "* Layer 5: Semantic and Business Logic Validation\n* Layer 6: Sandboxed Dependency Resolution\n*\n* @module import-export/security-validator\n*/",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.d.ts",
          "line": 10
        },
        {
          "path": "dist/import-export/security-validator.js",
          "line": 11
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 10
        }
      ]
    },
    {
      "snippet": "/**\n* Trusted key registry for signature verification (Layer 4)\n* In production, this would be loaded from a secure key store\n*/\ninterface PublicKey {",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.d.ts",
          "line": 17
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 102
        }
      ]
    },
    {
      "snippet": "* Trusted key registry for signature verification (Layer 4)\n* In production, this would be loaded from a secure key store\n*/\ninterface PublicKey {\nkeyId: string;",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.d.ts",
          "line": 18
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 103
        }
      ]
    },
    {
      "snippet": "* In production, this would be loaded from a secure key store\n*/\ninterface PublicKey {\nkeyId: string;\nalgorithm: string;",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.d.ts",
          "line": 19
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 104
        }
      ]
    },
    {
      "snippet": "*/\ninterface PublicKey {\nkeyId: string;\nalgorithm: string;\npublicKey: string;",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.d.ts",
          "line": 20
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 105
        }
      ]
    },
    {
      "snippet": "interface PublicKey {\nkeyId: string;\nalgorithm: string;\npublicKey: string;\nowner: string;",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.d.ts",
          "line": 21
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 106
        }
      ]
    },
    {
      "snippet": "keyId: string;\nalgorithm: string;\npublicKey: string;\nowner: string;\ntrustLevel: 'verified-internal' | 'signed-known';",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.d.ts",
          "line": 22
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 107
        }
      ]
    },
    {
      "snippet": "algorithm: string;\npublicKey: string;\nowner: string;\ntrustLevel: 'verified-internal' | 'signed-known';\n}",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.d.ts",
          "line": 23
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 108
        }
      ]
    },
    {
      "snippet": "/**\n* Execute the complete 6-layer validation pipeline\n* Designed to fail fast - cheaper checks first\n*\n* @param template - Parsed template object (already passed Layers 1-3)",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.d.ts",
          "line": 34
        },
        {
          "path": "dist/import-export/security-validator.js",
          "line": 98
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 126
        }
      ]
    },
    {
      "snippet": "* Execute the complete 6-layer validation pipeline\n* Designed to fail fast - cheaper checks first\n*\n* @param template - Parsed template object (already passed Layers 1-3)\n* @param skipSignature - Skip",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.d.ts",
          "line": 35
        },
        {
          "path": "dist/import-export/security-validator.js",
          "line": 99
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 127
        }
      ]
    },
    {
      "snippet": "* Designed to fail fast - cheaper checks first\n*\n* @param template - Parsed template object (already passed Layers 1-3)\n* @param skipSignature - Skip signature verification (for testing only)\n* @retur",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.d.ts",
          "line": 36
        },
        {
          "path": "dist/import-export/security-validator.js",
          "line": 100
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 128
        }
      ]
    },
    {
      "snippet": "*\n* @param template - Parsed template object (already passed Layers 1-3)\n* @param skipSignature - Skip signature verification (for testing only)\n* @returns Security validation report\n*/",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.d.ts",
          "line": 37
        },
        {
          "path": "dist/import-export/security-validator.js",
          "line": 101
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 129
        }
      ]
    },
    {
      "snippet": "/**\n* Layer 4: Cryptographic Signature Verification\n* Verifies template authenticity and integrity using digital signatures\n*\n* @param template - Template to verify",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.d.ts",
          "line": 43
        },
        {
          "path": "dist/import-export/security-validator.js",
          "line": 154
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 191
        }
      ]
    },
    {
      "snippet": "* Layer 4: Cryptographic Signature Verification\n* Verifies template authenticity and integrity using digital signatures\n*\n* @param template - Template to verify\n* @param skip - Skip verification (test",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.d.ts",
          "line": 44
        },
        {
          "path": "dist/import-export/security-validator.js",
          "line": 155
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 192
        }
      ]
    },
    {
      "snippet": "* Verifies template authenticity and integrity using digital signatures\n*\n* @param template - Template to verify\n* @param skip - Skip verification (testing only)\n*/",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.d.ts",
          "line": 45
        },
        {
          "path": "dist/import-export/security-validator.js",
          "line": 156
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 193
        }
      ]
    },
    {
      "snippet": "/**\n* Layer 5: Semantic and Business Logic Validation\n* Validates business logic constraints that cannot be expressed in schema\n*\n* @param template - Template to validate",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.d.ts",
          "line": 60
        },
        {
          "path": "dist/import-export/security-validator.js",
          "line": 231
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 295
        }
      ]
    },
    {
      "snippet": "* Layer 5: Semantic and Business Logic Validation\n* Validates business logic constraints that cannot be expressed in schema\n*\n* @param template - Template to validate\n*/",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.d.ts",
          "line": 61
        },
        {
          "path": "dist/import-export/security-validator.js",
          "line": 232
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 296
        }
      ]
    },
    {
      "snippet": "/**\n* Layer 6: Dependency Validation (not resolution)\n* Validates dependency declarations against security policies\n*\n* @param template - Template to validate",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.d.ts",
          "line": 67
        },
        {
          "path": "dist/import-export/security-validator.js",
          "line": 299
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 374
        }
      ]
    },
    {
      "snippet": "* Layer 6: Dependency Validation (not resolution)\n* Validates dependency declarations against security policies\n*\n* @param template - Template to validate\n*/",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.d.ts",
          "line": 68
        },
        {
          "path": "dist/import-export/security-validator.js",
          "line": 300
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 375
        }
      ]
    },
    {
      "snippet": "type: 'object',\nrequired: ['apiVersion', 'kind', 'metadata', 'spec'],\nproperties: {\napiVersion: {\ntype: 'string',",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 23
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 33
        }
      ]
    },
    {
      "snippet": "required: ['apiVersion', 'kind', 'metadata', 'spec'],\nproperties: {\napiVersion: {\ntype: 'string',\nconst: 'mission-template.v1',",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 24
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 146
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 34
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 177
        }
      ]
    },
    {
      "snippet": "properties: {\napiVersion: {\ntype: 'string',\nconst: 'mission-template.v1',\n},",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 25
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 147
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 35
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 178
        }
      ]
    },
    {
      "snippet": "apiVersion: {\ntype: 'string',\nconst: 'mission-template.v1',\n},\nkind: {",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 26
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 148
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 36
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 179
        }
      ]
    },
    {
      "snippet": "type: 'string',\nconst: 'mission-template.v1',\n},\nkind: {\ntype: 'string',",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 27
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 149
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 37
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 180
        }
      ]
    },
    {
      "snippet": "const: 'mission-template.v1',\n},\nkind: {\ntype: 'string',\nconst: 'MissionTemplate',",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 28
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 150
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 38
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 181
        }
      ]
    },
    {
      "snippet": "},\nkind: {\ntype: 'string',\nconst: 'MissionTemplate',\n},",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 29
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 151
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 39
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 182
        }
      ]
    },
    {
      "snippet": "kind: {\ntype: 'string',\nconst: 'MissionTemplate',\n},\nmetadata: {",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 30
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 152
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 40
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 183
        }
      ]
    },
    {
      "snippet": "type: 'string',\nconst: 'MissionTemplate',\n},\nmetadata: {\ntype: 'object',",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 31
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 153
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 41
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 184
        }
      ]
    },
    {
      "snippet": "const: 'MissionTemplate',\n},\nmetadata: {\ntype: 'object',\nrequired: ['name', 'version', 'author', 'signature'],",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 32
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 42
        }
      ]
    },
    {
      "snippet": "},\nmetadata: {\ntype: 'object',\nrequired: ['name', 'version', 'author', 'signature'],\nproperties: {",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 33
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 43
        }
      ]
    },
    {
      "snippet": "metadata: {\ntype: 'object',\nrequired: ['name', 'version', 'author', 'signature'],\nproperties: {\nname: { type: 'string', minLength: 1 },",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 34
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 44
        }
      ]
    },
    {
      "snippet": "type: 'object',\nrequired: ['name', 'version', 'author', 'signature'],\nproperties: {\nname: { type: 'string', minLength: 1 },\nversion: { type: 'string', pattern: '^\\\\d+\\\\.\\\\d+\\\\.\\\\d+$' },",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 35
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 45
        }
      ]
    },
    {
      "snippet": "required: ['name', 'version', 'author', 'signature'],\nproperties: {\nname: { type: 'string', minLength: 1 },\nversion: { type: 'string', pattern: '^\\\\d+\\\\.\\\\d+\\\\.\\\\d+$' },\nauthor: { type: 'string', minL",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 36
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 46
        }
      ]
    },
    {
      "snippet": "properties: {\nname: { type: 'string', minLength: 1 },\nversion: { type: 'string', pattern: '^\\\\d+\\\\.\\\\d+\\\\.\\\\d+$' },\nauthor: { type: 'string', minLength: 1 },\nsignature: {",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 37
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 47
        }
      ]
    },
    {
      "snippet": "name: { type: 'string', minLength: 1 },\nversion: { type: 'string', pattern: '^\\\\d+\\\\.\\\\d+\\\\.\\\\d+$' },\nauthor: { type: 'string', minLength: 1 },\nsignature: {\ntype: 'object',",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 38
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 48
        }
      ]
    },
    {
      "snippet": "version: { type: 'string', pattern: '^\\\\d+\\\\.\\\\d+\\\\.\\\\d+$' },\nauthor: { type: 'string', minLength: 1 },\nsignature: {\ntype: 'object',\nrequired: ['keyId', 'algorithm', 'value'],",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 39
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 49
        }
      ]
    },
    {
      "snippet": "author: { type: 'string', minLength: 1 },\nsignature: {\ntype: 'object',\nrequired: ['keyId', 'algorithm', 'value'],\nproperties: {",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 40
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 50
        }
      ]
    },
    {
      "snippet": "signature: {\ntype: 'object',\nrequired: ['keyId', 'algorithm', 'value'],\nproperties: {\nkeyId: { type: 'string', minLength: 1 },",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 41
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 51
        }
      ]
    },
    {
      "snippet": "type: 'object',\nrequired: ['keyId', 'algorithm', 'value'],\nproperties: {\nkeyId: { type: 'string', minLength: 1 },\nalgorithm: { type: 'string', enum: ['PGP-SHA256', 'RS256', 'ES256'] },",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 42
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 52
        }
      ]
    },
    {
      "snippet": "required: ['keyId', 'algorithm', 'value'],\nproperties: {\nkeyId: { type: 'string', minLength: 1 },\nalgorithm: { type: 'string', enum: ['PGP-SHA256', 'RS256', 'ES256'] },\nvalue: { type: 'string', minLen",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 43
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 53
        }
      ]
    },
    {
      "snippet": "properties: {\nkeyId: { type: 'string', minLength: 1 },\nalgorithm: { type: 'string', enum: ['PGP-SHA256', 'RS256', 'ES256'] },\nvalue: { type: 'string', minLength: 1 },\n},",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 44
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 54
        }
      ]
    },
    {
      "snippet": "keyId: { type: 'string', minLength: 1 },\nalgorithm: { type: 'string', enum: ['PGP-SHA256', 'RS256', 'ES256'] },\nvalue: { type: 'string', minLength: 1 },\n},\n},",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 45
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 55
        }
      ]
    },
    {
      "snippet": "algorithm: { type: 'string', enum: ['PGP-SHA256', 'RS256', 'ES256'] },\nvalue: { type: 'string', minLength: 1 },\n},\n},\n},",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 46
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 56
        }
      ]
    },
    {
      "snippet": "value: { type: 'string', minLength: 1 },\n},\n},\n},\n},",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 47
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 57
        }
      ]
    },
    {
      "snippet": "},\n},\n},\n},\nspec: {",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 48
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 58
        }
      ]
    },
    {
      "snippet": "},\n},\n},\nspec: {\ntype: 'object',",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 49
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 59
        }
      ]
    },
    {
      "snippet": "},\n},\nspec: {\ntype: 'object',\n},",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 50
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 60
        }
      ]
    },
    {
      "snippet": "},\nspec: {\ntype: 'object',\n},\ndependencies: {",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 51
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 61
        }
      ]
    },
    {
      "snippet": "spec: {\ntype: 'object',\n},\ndependencies: {\ntype: 'array',",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 52
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 62
        }
      ]
    },
    {
      "snippet": "type: 'object',\n},\ndependencies: {\ntype: 'array',\nitems: {",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 53
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 63
        }
      ]
    },
    {
      "snippet": "},\ndependencies: {\ntype: 'array',\nitems: {\ntype: 'object',",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 54
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 64
        }
      ]
    },
    {
      "snippet": "dependencies: {\ntype: 'array',\nitems: {\ntype: 'object',\nrequired: ['name', 'sourceUrl', 'version', 'checksum'],",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 55
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 65
        }
      ]
    },
    {
      "snippet": "type: 'array',\nitems: {\ntype: 'object',\nrequired: ['name', 'sourceUrl', 'version', 'checksum'],\nproperties: {",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 56
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 66
        }
      ]
    },
    {
      "snippet": "items: {\ntype: 'object',\nrequired: ['name', 'sourceUrl', 'version', 'checksum'],\nproperties: {\nname: { type: 'string', minLength: 1 },",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 57
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 67
        }
      ]
    },
    {
      "snippet": "type: 'object',\nrequired: ['name', 'sourceUrl', 'version', 'checksum'],\nproperties: {\nname: { type: 'string', minLength: 1 },\nsourceUrl: { type: 'string' },",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 58
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 68
        }
      ]
    },
    {
      "snippet": "required: ['name', 'sourceUrl', 'version', 'checksum'],\nproperties: {\nname: { type: 'string', minLength: 1 },\nsourceUrl: { type: 'string' },\nversion: { type: 'string', pattern: '^\\\\d+\\\\.\\\\d+\\\\.\\\\d+$' ",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 59
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 69
        }
      ]
    },
    {
      "snippet": "properties: {\nname: { type: 'string', minLength: 1 },\nsourceUrl: { type: 'string' },\nversion: { type: 'string', pattern: '^\\\\d+\\\\.\\\\d+\\\\.\\\\d+$' },\nchecksum: { type: 'string', pattern: '^sha256:[a-f0-9",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 60
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 70
        }
      ]
    },
    {
      "snippet": "name: { type: 'string', minLength: 1 },\nsourceUrl: { type: 'string' },\nversion: { type: 'string', pattern: '^\\\\d+\\\\.\\\\d+\\\\.\\\\d+$' },\nchecksum: { type: 'string', pattern: '^sha256:[a-f0-9]{64}$' },\n},",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 61
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 71
        }
      ]
    },
    {
      "snippet": "sourceUrl: { type: 'string' },\nversion: { type: 'string', pattern: '^\\\\d+\\\\.\\\\d+\\\\.\\\\d+$' },\nchecksum: { type: 'string', pattern: '^sha256:[a-f0-9]{64}$' },\n},\n},",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 62
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 72
        }
      ]
    },
    {
      "snippet": "version: { type: 'string', pattern: '^\\\\d+\\\\.\\\\d+\\\\.\\\\d+$' },\nchecksum: { type: 'string', pattern: '^sha256:[a-f0-9]{64}$' },\n},\n},\n},",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 63
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 73
        }
      ]
    },
    {
      "snippet": "checksum: { type: 'string', pattern: '^sha256:[a-f0-9]{64}$' },\n},\n},\n},\n},",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 64
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 74
        }
      ]
    },
    {
      "snippet": "},\n},\n},\n},\n};",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 65
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 75
        }
      ]
    },
    {
      "snippet": "},\n},\n},\n};\n/**",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 66
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 100
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 87
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 88
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 89
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 79
        }
      ]
    },
    {
      "snippet": "maxResourceMemory: 8192, // 8GB in MB\nmaxResourceCpu: 16, // Max CPU cores\nallowedActions: [], // Empty means all allowed (will be enforced if populated)\ndeniedKeywords: [\n'!!python',",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 74
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 85
        }
      ]
    },
    {
      "snippet": "maxResourceCpu: 16, // Max CPU cores\nallowedActions: [], // Empty means all allowed (will be enforced if populated)\ndeniedKeywords: [\n'!!python',\n'!!java',",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 75
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 86
        }
      ]
    },
    {
      "snippet": "allowedActions: [], // Empty means all allowed (will be enforced if populated)\ndeniedKeywords: [\n'!!python',\n'!!java',\n'eval',",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 76
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 87
        }
      ]
    },
    {
      "snippet": "deniedKeywords: [\n'!!python',\n'!!java',\n'eval',\n'exec',",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 77
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 88
        }
      ]
    },
    {
      "snippet": "'!!python',\n'!!java',\n'eval',\n'exec',\n'subprocess',",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 78
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 89
        }
      ]
    },
    {
      "snippet": "'!!java',\n'eval',\n'exec',\n'subprocess',\n'__import__',",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 79
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 90
        }
      ]
    },
    {
      "snippet": "'eval',\n'exec',\n'subprocess',\n'__import__',\n'system',",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 80
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 91
        }
      ]
    },
    {
      "snippet": "'exec',\n'subprocess',\n'__import__',\n'system',\n'os.system',",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 81
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 92
        }
      ]
    },
    {
      "snippet": "'subprocess',\n'__import__',\n'system',\n'os.system',\n],",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 82
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 93
        }
      ]
    },
    {
      "snippet": "'__import__',\n'system',\n'os.system',\n],\nmaxDependencies: 10,",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 83
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 94
        }
      ]
    },
    {
      "snippet": "'system',\n'os.system',\n],\nmaxDependencies: 10,\nurlAllowlist: [], // Empty means deny all external URLs",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 84
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 95
        }
      ]
    },
    {
      "snippet": "'os.system',\n],\nmaxDependencies: 10,\nurlAllowlist: [], // Empty means deny all external URLs\n};",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 85
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 96
        }
      ]
    },
    {
      "snippet": "};\n}\ncatch (error) {\nconst performanceMs = Date.now() - startTime;\nreturn {",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 141
        },
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 105
        }
      ]
    },
    {
      "snippet": "const performanceMs = Date.now() - startTime;\nreturn {\nvalid: false,\nlayers,\nerrors: [...errors, error instanceof Error ? error.message : 'Unknown error'],",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 144
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 180
        }
      ]
    },
    {
      "snippet": "return {\nvalid: false,\nlayers,\nerrors: [...errors, error instanceof Error ? error.message : 'Unknown error'],\nwarnings,",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 145
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 181
        }
      ]
    },
    {
      "snippet": "valid: false,\nlayers,\nerrors: [...errors, error instanceof Error ? error.message : 'Unknown error'],\nwarnings,\nperformanceMs,",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 146
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 182
        }
      ]
    },
    {
      "snippet": "layers,\nerrors: [...errors, error instanceof Error ? error.message : 'Unknown error'],\nwarnings,\nperformanceMs,\n};",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 147
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 183
        }
      ]
    },
    {
      "snippet": "errors: [...errors, error instanceof Error ? error.message : 'Unknown error'],\nwarnings,\nperformanceMs,\n};\n}",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 148
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 184
        }
      ]
    },
    {
      "snippet": "warnings,\nperformanceMs,\n};\n}\n}",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 149
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 185
        }
      ]
    },
    {
      "snippet": "if (skip) {\nreturn {\nlayer: 'Layer 4: Signature Verification',\npassed: true,\nmessage: 'Skipped (testing mode)',",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 162
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 202
        }
      ]
    },
    {
      "snippet": "return {\nlayer: 'Layer 4: Signature Verification',\npassed: true,\nmessage: 'Skipped (testing mode)',\n};",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 163
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 203
        }
      ]
    },
    {
      "snippet": "layer: 'Layer 4: Signature Verification',\npassed: true,\nmessage: 'Skipped (testing mode)',\n};\n}",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 164
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 204
        }
      ]
    },
    {
      "snippet": "return {\nlayer: 'Layer 4: Signature Verification',\npassed: true,\nmessage: `Verified signature from ${publicKey.owner}`,\ndetails: {",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 189
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 246
        }
      ]
    },
    {
      "snippet": "layer: 'Layer 4: Signature Verification',\npassed: true,\nmessage: `Verified signature from ${publicKey.owner}`,\ndetails: {\nkeyId: signature.keyId,",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 190
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 247
        }
      ]
    },
    {
      "snippet": "passed: true,\nmessage: `Verified signature from ${publicKey.owner}`,\ndetails: {\nkeyId: signature.keyId,\ntrustLevel: publicKey.trustLevel,",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 191
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 248
        }
      ]
    },
    {
      "snippet": "message: `Verified signature from ${publicKey.owner}`,\ndetails: {\nkeyId: signature.keyId,\ntrustLevel: publicKey.trustLevel,\nowner: publicKey.owner,",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 192
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 249
        }
      ]
    },
    {
      "snippet": "details: {\nkeyId: signature.keyId,\ntrustLevel: publicKey.trustLevel,\nowner: publicKey.owner,\n},",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 193
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 250
        }
      ]
    },
    {
      "snippet": "keyId: signature.keyId,\ntrustLevel: publicKey.trustLevel,\nowner: publicKey.owner,\n},\n};",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 194
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 251
        }
      ]
    },
    {
      "snippet": "},\n};\n}\ncatch (error) {\nreturn {",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 197
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 153
        }
      ]
    },
    {
      "snippet": "return {\nlayer: 'Layer 4: Signature Verification',\npassed: false,\nmessage: error instanceof Error ? error.message : 'Signature verification failed',\n};",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 201
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 257
        }
      ]
    },
    {
      "snippet": "layer: 'Layer 4: Signature Verification',\npassed: false,\nmessage: error instanceof Error ? error.message : 'Signature verification failed',\n};\n}",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 202
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 258
        }
      ]
    },
    {
      "snippet": "passed: false,\nmessage: error instanceof Error ? error.message : 'Signature verification failed',\n};\n}\n}",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 203
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 259
        }
      ]
    },
    {
      "snippet": "// Deterministic JSON serialization\nconst content = {\nspec,\ndependencies: dependencies || [],\n};",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 212
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 269
        }
      ]
    },
    {
      "snippet": "const content = {\nspec,\ndependencies: dependencies || [],\n};\nreturn JSON.stringify(content, Object.keys(content).sort());",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 213
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 270
        }
      ]
    },
    {
      "snippet": "spec,\ndependencies: dependencies || [],\n};\nreturn JSON.stringify(content, Object.keys(content).sort());\n}",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 214
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 271
        }
      ]
    },
    {
      "snippet": "// Simplified implementation - in production use proper crypto\n// For now, just check that signature is non-empty\n// Real implementation would use:\n// - crypto.verify() for RS256/ES256\n// - GPG librar",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 224
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 287
        }
      ]
    },
    {
      "snippet": "// For now, just check that signature is non-empty\n// Real implementation would use:\n// - crypto.verify() for RS256/ES256\n// - GPG libraries for PGP-SHA256\nreturn signature.length > 0 && publicKey.len",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 225
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 288
        }
      ]
    },
    {
      "snippet": "// Real implementation would use:\n// - crypto.verify() for RS256/ES256\n// - GPG libraries for PGP-SHA256\nreturn signature.length > 0 && publicKey.length > 0;\n}",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 226
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 289
        }
      ]
    },
    {
      "snippet": "// Check for denied keywords (anti-RCE)\nconst specString = JSON.stringify(spec).toLowerCase();\nfor (const keyword of this.semanticRules.deniedKeywords) {\nif (specString.includes(keyword.toLowerCase())",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 241
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 307
        }
      ]
    },
    {
      "snippet": "const specString = JSON.stringify(spec).toLowerCase();\nfor (const keyword of this.semanticRules.deniedKeywords) {\nif (specString.includes(keyword.toLowerCase())) {\nerrors.push(`Denied keyword detected",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 242
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 308
        }
      ]
    },
    {
      "snippet": "for (const keyword of this.semanticRules.deniedKeywords) {\nif (specString.includes(keyword.toLowerCase())) {\nerrors.push(`Denied keyword detected: ${keyword}`);\n}\n}",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 243
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 309
        }
      ]
    },
    {
      "snippet": "// Validate allowed actions (if allowlist is populated)\nif (this.semanticRules.allowedActions.length > 0 && spec.phases) {\nfor (const phase of spec.phases) {\nif (phase.steps) {\nfor (const step of phas",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 257
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 329
        }
      ]
    },
    {
      "snippet": "if (this.semanticRules.allowedActions.length > 0 && spec.phases) {\nfor (const phase of spec.phases) {\nif (phase.steps) {\nfor (const step of phase.steps) {\nif (step.action && !this.semanticRules.allowe",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 258
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 330
        }
      ]
    },
    {
      "snippet": "for (const phase of spec.phases) {\nif (phase.steps) {\nfor (const step of phase.steps) {\nif (step.action && !this.semanticRules.allowedActions.includes(step.action)) {\nerrors.push(`Disallowed action: $",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 259
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 331
        }
      ]
    },
    {
      "snippet": "if (phase.steps) {\nfor (const step of phase.steps) {\nif (step.action && !this.semanticRules.allowedActions.includes(step.action)) {\nerrors.push(`Disallowed action: ${step.action}`);\n}",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 260
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 332
        }
      ]
    },
    {
      "snippet": "for (const step of phase.steps) {\nif (step.action && !this.semanticRules.allowedActions.includes(step.action)) {\nerrors.push(`Disallowed action: ${step.action}`);\n}\n}",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 261
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 333
        }
      ]
    },
    {
      "snippet": "if (step.action && !this.semanticRules.allowedActions.includes(step.action)) {\nerrors.push(`Disallowed action: ${step.action}`);\n}\n}\n}",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 262
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 334
        }
      ]
    },
    {
      "snippet": "errors.push(`Disallowed action: ${step.action}`);\n}\n}\n}\n}",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 263
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 335
        }
      ]
    },
    {
      "snippet": "}\n}\n}\n}\n}",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 264
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 336
        }
      ]
    },
    {
      "snippet": "// Cross-field consistency checks\nif (spec.startDate && spec.endDate) {\nconst start = new Date(spec.startDate);\nconst end = new Date(spec.endDate);\nif (end <= start) {",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 269
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 342
        }
      ]
    },
    {
      "snippet": "if (spec.startDate && spec.endDate) {\nconst start = new Date(spec.startDate);\nconst end = new Date(spec.endDate);\nif (end <= start) {\nerrors.push('End date must be after start date');",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 270
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 343
        }
      ]
    },
    {
      "snippet": "const start = new Date(spec.startDate);\nconst end = new Date(spec.endDate);\nif (end <= start) {\nerrors.push('End date must be after start date');\n}",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 271
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 344
        }
      ]
    },
    {
      "snippet": "const end = new Date(spec.endDate);\nif (end <= start) {\nerrors.push('End date must be after start date');\n}\n}",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 272
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 345
        }
      ]
    },
    {
      "snippet": "if (errors.length > 0) {\nreturn {\nlayer: 'Layer 5: Semantic Validation',\npassed: false,\nmessage: `Semantic validation failed: ${errors.join('; ')}`,",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 277
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 351
        }
      ]
    },
    {
      "snippet": "return {\nlayer: 'Layer 5: Semantic Validation',\npassed: false,\nmessage: `Semantic validation failed: ${errors.join('; ')}`,\ndetails: { errors },",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 278
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 352
        }
      ]
    },
    {
      "snippet": "layer: 'Layer 5: Semantic Validation',\npassed: false,\nmessage: `Semantic validation failed: ${errors.join('; ')}`,\ndetails: { errors },\n};",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 279
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 353
        }
      ]
    },
    {
      "snippet": "passed: false,\nmessage: `Semantic validation failed: ${errors.join('; ')}`,\ndetails: { errors },\n};\n}",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 280
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 354
        }
      ]
    },
    {
      "snippet": "return {\nlayer: 'Layer 5: Semantic Validation',\npassed: true,\nmessage: 'All semantic rules passed',\n};",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 285
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 360
        }
      ]
    },
    {
      "snippet": "return {\nlayer: 'Layer 5: Semantic Validation',\npassed: false,\nmessage: error instanceof Error ? error.message : 'Semantic validation error',\n};",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 292
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 366
        }
      ]
    },
    {
      "snippet": "layer: 'Layer 5: Semantic Validation',\npassed: false,\nmessage: error instanceof Error ? error.message : 'Semantic validation error',\n};\n}",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 293
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 367
        }
      ]
    },
    {
      "snippet": "passed: false,\nmessage: error instanceof Error ? error.message : 'Semantic validation error',\n};\n}\n}",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 294
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 368
        }
      ]
    },
    {
      "snippet": "// No dependencies is valid\nif (!dependencies || dependencies.length === 0) {\nreturn {\nlayer: 'Layer 6: Dependency Validation',\npassed: true,",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 309
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 386
        }
      ]
    },
    {
      "snippet": "if (!dependencies || dependencies.length === 0) {\nreturn {\nlayer: 'Layer 6: Dependency Validation',\npassed: true,\nmessage: 'No dependencies to validate',",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 310
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 387
        }
      ]
    },
    {
      "snippet": "return {\nlayer: 'Layer 6: Dependency Validation',\npassed: true,\nmessage: 'No dependencies to validate',\n};",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 311
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 388
        }
      ]
    },
    {
      "snippet": "layer: 'Layer 6: Dependency Validation',\npassed: true,\nmessage: 'No dependencies to validate',\n};\n}",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 312
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 389
        }
      ]
    },
    {
      "snippet": "// Validate each dependency\nfor (const dep of dependencies) {\n// Check URL allowlist\nconst isAllowed = this.isUrlAllowed(dep.sourceUrl);\nif (!isAllowed) {",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 321
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 402
        }
      ]
    },
    {
      "snippet": "for (const dep of dependencies) {\n// Check URL allowlist\nconst isAllowed = this.isUrlAllowed(dep.sourceUrl);\nif (!isAllowed) {\nerrors.push(`Dependency URL not in allowlist: ${dep.sourceUrl}`);",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 322
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 403
        }
      ]
    },
    {
      "snippet": "// Check URL allowlist\nconst isAllowed = this.isUrlAllowed(dep.sourceUrl);\nif (!isAllowed) {\nerrors.push(`Dependency URL not in allowlist: ${dep.sourceUrl}`);\n}",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 323
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 404
        }
      ]
    },
    {
      "snippet": "// Validate version format (semver)\nif (!dep.version.match(/^\\d+\\.\\d+\\.\\d+$/)) {\nerrors.push(`Invalid version format for dependency ${dep.name}: ${dep.version}`);\n}\n}",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 332
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 415
        }
      ]
    },
    {
      "snippet": "if (errors.length > 0) {\nreturn {\nlayer: 'Layer 6: Dependency Validation',\npassed: false,\nmessage: `Dependency validation failed: ${errors.join('; ')}`,",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 337
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 421
        }
      ]
    },
    {
      "snippet": "return {\nlayer: 'Layer 6: Dependency Validation',\npassed: false,\nmessage: `Dependency validation failed: ${errors.join('; ')}`,\ndetails: { errors },",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 338
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 422
        }
      ]
    },
    {
      "snippet": "layer: 'Layer 6: Dependency Validation',\npassed: false,\nmessage: `Dependency validation failed: ${errors.join('; ')}`,\ndetails: { errors },\n};",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 339
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 423
        }
      ]
    },
    {
      "snippet": "passed: false,\nmessage: `Dependency validation failed: ${errors.join('; ')}`,\ndetails: { errors },\n};\n}",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 340
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 424
        }
      ]
    },
    {
      "snippet": "return {\nlayer: 'Layer 6: Dependency Validation',\npassed: true,\nmessage: `Validated ${dependencies.length} dependencies`,\n};",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 345
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 430
        }
      ]
    },
    {
      "snippet": "return {\nlayer: 'Layer 6: Dependency Validation',\npassed: false,\nmessage: error instanceof Error ? error.message : 'Dependency validation error',\n};",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 352
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 436
        }
      ]
    },
    {
      "snippet": "layer: 'Layer 6: Dependency Validation',\npassed: false,\nmessage: error instanceof Error ? error.message : 'Dependency validation error',\n};\n}",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 353
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 437
        }
      ]
    },
    {
      "snippet": "passed: false,\nmessage: error instanceof Error ? error.message : 'Dependency validation error',\n};\n}\n}",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 354
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 438
        }
      ]
    },
    {
      "snippet": "// Check against allowlist patterns\nreturn this.semanticRules.urlAllowlist.some((pattern) => {\n// Support wildcards like *.example.com\nif (pattern.startsWith('*.')) {\nconst domain = pattern.slice(2);",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 371
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 458
        }
      ]
    },
    {
      "snippet": "return this.semanticRules.urlAllowlist.some((pattern) => {\n// Support wildcards like *.example.com\nif (pattern.startsWith('*.')) {\nconst domain = pattern.slice(2);\nreturn hostname.endsWith(domain);",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 372
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 459
        }
      ]
    },
    {
      "snippet": "// Support wildcards like *.example.com\nif (pattern.startsWith('*.')) {\nconst domain = pattern.slice(2);\nreturn hostname.endsWith(domain);\n}",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 373
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 460
        }
      ]
    },
    {
      "snippet": "if (pattern.startsWith('*.')) {\nconst domain = pattern.slice(2);\nreturn hostname.endsWith(domain);\n}\nreturn hostname === pattern;",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 374
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 461
        }
      ]
    },
    {
      "snippet": "const domain = pattern.slice(2);\nreturn hostname.endsWith(domain);\n}\nreturn hostname === pattern;\n});",
      "occurrences": [
        {
          "path": "dist/import-export/security-validator.js",
          "line": 375
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 462
        }
      ]
    },
    {
      "snippet": "/**\n* TemplateExporter: Export mission templates in Strict YAML format\n*\n* Exports templates using safe YAML serialization that produces\n* data-only output compatible with safe parsers.",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.d.ts",
          "line": 1
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 2
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 1
        }
      ]
    },
    {
      "snippet": "* TemplateExporter: Export mission templates in Strict YAML format\n*\n* Exports templates using safe YAML serialization that produces\n* data-only output compatible with safe parsers.\n*",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.d.ts",
          "line": 2
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 3
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 2
        }
      ]
    },
    {
      "snippet": "*\n* Exports templates using safe YAML serialization that produces\n* data-only output compatible with safe parsers.\n*\n* Features:",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.d.ts",
          "line": 3
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 4
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 3
        }
      ]
    },
    {
      "snippet": "* Exports templates using safe YAML serialization that produces\n* data-only output compatible with safe parsers.\n*\n* Features:\n* - Strict YAML output (no language-specific tags)",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.d.ts",
          "line": 4
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 5
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 4
        }
      ]
    },
    {
      "snippet": "* data-only output compatible with safe parsers.\n*\n* Features:\n* - Strict YAML output (no language-specific tags)\n* - Optional JSON export for machine-to-machine communication",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.d.ts",
          "line": 5
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 6
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 5
        }
      ]
    },
    {
      "snippet": "*\n* Features:\n* - Strict YAML output (no language-specific tags)\n* - Optional JSON export for machine-to-machine communication\n* - Metadata preservation",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.d.ts",
          "line": 6
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 7
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 6
        }
      ]
    },
    {
      "snippet": "* Features:\n* - Strict YAML output (no language-specific tags)\n* - Optional JSON export for machine-to-machine communication\n* - Metadata preservation\n* - Comment support for documentation",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.d.ts",
          "line": 7
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 8
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 7
        }
      ]
    },
    {
      "snippet": "* - Strict YAML output (no language-specific tags)\n* - Optional JSON export for machine-to-machine communication\n* - Metadata preservation\n* - Comment support for documentation\n*",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.d.ts",
          "line": 8
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 9
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 8
        }
      ]
    },
    {
      "snippet": "* - Optional JSON export for machine-to-machine communication\n* - Metadata preservation\n* - Comment support for documentation\n*\n* @module import-export/template-exporter",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.d.ts",
          "line": 9
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 10
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 9
        }
      ]
    },
    {
      "snippet": "* - Metadata preservation\n* - Comment support for documentation\n*\n* @module import-export/template-exporter\n*/",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.d.ts",
          "line": 10
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 11
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 10
        }
      ]
    },
    {
      "snippet": "/**\n* Create a new TemplateExporter\n*\n* @param baseDir - Base directory for export operations\n*/",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.d.ts",
          "line": 21
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 59
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 27
        }
      ]
    },
    {
      "snippet": "/**\n* Export a mission template to a file\n*\n* @param template - Mission template to export\n* @param outputPath - Output file path (relative to baseDir)",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.d.ts",
          "line": 27
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 67
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 36
        }
      ]
    },
    {
      "snippet": "* Export a mission template to a file\n*\n* @param template - Mission template to export\n* @param outputPath - Output file path (relative to baseDir)\n* @param options - Export options",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.d.ts",
          "line": 28
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 68
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 37
        }
      ]
    },
    {
      "snippet": "*\n* @param template - Mission template to export\n* @param outputPath - Output file path (relative to baseDir)\n* @param options - Export options\n* @returns true if export succeeded",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.d.ts",
          "line": 29
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 69
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 38
        }
      ]
    },
    {
      "snippet": "* @param template - Mission template to export\n* @param outputPath - Output file path (relative to baseDir)\n* @param options - Export options\n* @returns true if export succeeded\n* @throws ImportExport",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.d.ts",
          "line": 30
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 70
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 39
        }
      ]
    },
    {
      "snippet": "* @param outputPath - Output file path (relative to baseDir)\n* @param options - Export options\n* @returns true if export succeeded\n* @throws ImportExportError if export fails\n*/",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.d.ts",
          "line": 31
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 71
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 40
        }
      ]
    },
    {
      "snippet": "/**\n* Export template to string (no file I/O)\n*\n* @param template - Mission template to export\n* @param options - Export options",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.d.ts",
          "line": 37
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 99
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 78
        }
      ]
    },
    {
      "snippet": "* Export template to string (no file I/O)\n*\n* @param template - Mission template to export\n* @param options - Export options\n* @returns Serialized template string",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.d.ts",
          "line": 38
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 100
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 79
        }
      ]
    },
    {
      "snippet": "*\n* @param template - Mission template to export\n* @param options - Export options\n* @returns Serialized template string\n*/",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.d.ts",
          "line": 39
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 101
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 80
        }
      ]
    },
    {
      "snippet": "/**\n* Validate template has required fields for export\n*\n* @param template - Template to validate\n*/",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.d.ts",
          "line": 45
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 111
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 91
        }
      ]
    },
    {
      "snippet": "/**\n* Serialize template to YAML or JSON\n*\n* @param template - Template to serialize\n* @param format - Output format",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.d.ts",
          "line": 51
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 130
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 117
        }
      ]
    },
    {
      "snippet": "* Serialize template to YAML or JSON\n*\n* @param template - Template to serialize\n* @param format - Output format\n* @param options - Export options",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.d.ts",
          "line": 52
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 131
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 118
        }
      ]
    },
    {
      "snippet": "*\n* @param template - Template to serialize\n* @param format - Output format\n* @param options - Export options\n* @returns Serialized string",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.d.ts",
          "line": 53
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 132
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 119
        }
      ]
    },
    {
      "snippet": "* @param template - Template to serialize\n* @param format - Output format\n* @param options - Export options\n* @returns Serialized string\n*/",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.d.ts",
          "line": 54
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 133
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 120
        }
      ]
    },
    {
      "snippet": "/**\n* Serialize to Strict YAML format\n* Uses safe serialization - no language-specific tags\n*\n* @param template - Template to serialize",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.d.ts",
          "line": 60
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 144
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 136
        }
      ]
    },
    {
      "snippet": "* Serialize to Strict YAML format\n* Uses safe serialization - no language-specific tags\n*\n* @param template - Template to serialize\n* @param options - Export options",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.d.ts",
          "line": 61
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 145
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 137
        }
      ]
    },
    {
      "snippet": "* Uses safe serialization - no language-specific tags\n*\n* @param template - Template to serialize\n* @param options - Export options\n* @returns YAML string",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.d.ts",
          "line": 62
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 146
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 138
        }
      ]
    },
    {
      "snippet": "*\n* @param template - Template to serialize\n* @param options - Export options\n* @returns YAML string\n*/",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.d.ts",
          "line": 63
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 147
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 139
        }
      ]
    },
    {
      "snippet": "/**\n* Serialize to JSON format\n* Used for machine-to-machine communication\n*\n* @param template - Template to serialize",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.d.ts",
          "line": 69
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 166
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 162
        }
      ]
    },
    {
      "snippet": "* Serialize to JSON format\n* Used for machine-to-machine communication\n*\n* @param template - Template to serialize\n* @param options - Export options",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.d.ts",
          "line": 70
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 167
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 163
        }
      ]
    },
    {
      "snippet": "* Used for machine-to-machine communication\n*\n* @param template - Template to serialize\n* @param options - Export options\n* @returns JSON string",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.d.ts",
          "line": 71
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 168
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 164
        }
      ]
    },
    {
      "snippet": "*\n* @param template - Template to serialize\n* @param options - Export options\n* @returns JSON string\n*/",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.d.ts",
          "line": 72
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 169
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 165
        }
      ]
    },
    {
      "snippet": "/**\n* Generate header comment for YAML export\n*\n* @param template - Template to document\n* @returns Comment string",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.d.ts",
          "line": 78
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 181
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 179
        }
      ]
    },
    {
      "snippet": "* Generate header comment for YAML export\n*\n* @param template - Template to document\n* @returns Comment string\n*/",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.d.ts",
          "line": 79
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 182
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 180
        }
      ]
    },
    {
      "snippet": "/**\n* Resolve output path and ensure it's within baseDir\n*\n* @param outputPath - Relative or absolute output path\n* @returns Resolved absolute path",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.d.ts",
          "line": 85
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 200
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 199
        }
      ]
    },
    {
      "snippet": "* Resolve output path and ensure it's within baseDir\n*\n* @param outputPath - Relative or absolute output path\n* @returns Resolved absolute path\n*/",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.d.ts",
          "line": 86
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 201
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 200
        }
      ]
    },
    {
      "snippet": "/**\n* Export multiple templates\n*\n* @param templates - Templates to export\n* @param outputDir - Output directory",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.d.ts",
          "line": 92
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 215
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 220
        }
      ]
    },
    {
      "snippet": "* Export multiple templates\n*\n* @param templates - Templates to export\n* @param outputDir - Output directory\n* @param options - Export options",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.d.ts",
          "line": 93
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 216
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 221
        }
      ]
    },
    {
      "snippet": "*\n* @param templates - Templates to export\n* @param outputDir - Output directory\n* @param options - Export options\n* @returns Number of successfully exported templates",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.d.ts",
          "line": 94
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 217
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 222
        }
      ]
    },
    {
      "snippet": "* @param templates - Templates to export\n* @param outputDir - Output directory\n* @param options - Export options\n* @returns Number of successfully exported templates\n*/",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.d.ts",
          "line": 95
        },
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 218
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 223
        }
      ]
    },
    {
      "snippet": "/**\n* Get the base directory\n*/\ngetBaseDir(): string;\n}",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.d.ts",
          "line": 101
        },
        {
          "path": "dist/import-export/template-importer.d.ts",
          "line": 88
        },
        {
          "path": "dist/loaders/yaml-loader.d.ts",
          "line": 87
        }
      ]
    },
    {
      "snippet": "// Ensure output directory exists\nconst outputDir = path.dirname(resolvedPath);\nif (!fs.existsSync(outputDir)) {\nfs.mkdirSync(outputDir, { recursive: true });\n}",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 86
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 59
        }
      ]
    },
    {
      "snippet": "if (format === 'json') {\nreturn this.serializeToJSON(template, options);\n}\nreturn this.serializeToYAML(template, options);\n}",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 139
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 130
        }
      ]
    },
    {
      "snippet": "// Add header comment if enabled\nif (includeComments) {\nconst header = this.generateHeaderComment(template);\nyamlContent = header + '\\n' + yamlContent;\n}",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 159
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 153
        }
      ]
    },
    {
      "snippet": "if (pretty) {\nreturn JSON.stringify(template, null, 2);\n}\nreturn JSON.stringify(template);\n}",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 176
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 173
        }
      ]
    },
    {
      "snippet": "const { metadata } = template;\nconst lines = [\n'# Mission Template',\n`# Name: ${metadata.name}`,\n`# Version: ${metadata.version}`,",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 188
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 186
        }
      ]
    },
    {
      "snippet": "const lines = [\n'# Mission Template',\n`# Name: ${metadata.name}`,\n`# Version: ${metadata.version}`,\n`# Author: ${metadata.author}`,",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 189
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 187
        }
      ]
    },
    {
      "snippet": "'# Mission Template',\n`# Name: ${metadata.name}`,\n`# Version: ${metadata.version}`,\n`# Author: ${metadata.author}`,\n'#',",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 190
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 188
        }
      ]
    },
    {
      "snippet": "`# Name: ${metadata.name}`,\n`# Version: ${metadata.version}`,\n`# Author: ${metadata.author}`,\n'#',\n'# This template uses Strict YAML format - safe for import.',",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 191
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 189
        }
      ]
    },
    {
      "snippet": "`# Version: ${metadata.version}`,\n`# Author: ${metadata.author}`,\n'#',\n'# This template uses Strict YAML format - safe for import.',\n'# Signature verification required for import.',",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 192
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 190
        }
      ]
    },
    {
      "snippet": "`# Author: ${metadata.author}`,\n'#',\n'# This template uses Strict YAML format - safe for import.',\n'# Signature verification required for import.',\n];",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 193
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 191
        }
      ]
    },
    {
      "snippet": "'#',\n'# This template uses Strict YAML format - safe for import.',\n'# Signature verification required for import.',\n];\nreturn lines.join('\\n');",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 194
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 192
        }
      ]
    },
    {
      "snippet": "'# This template uses Strict YAML format - safe for import.',\n'# Signature verification required for import.',\n];\nreturn lines.join('\\n');\n}",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 195
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 193
        }
      ]
    },
    {
      "snippet": "for (const template of templates) {\ntry {\nconst filename = `${template.metadata.name}-${template.metadata.version}.${options?.format || 'yaml'}`;\nconst outputPath = path.join(outputDir, filename);\nthi",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 225
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 235
        }
      ]
    },
    {
      "snippet": "try {\nconst filename = `${template.metadata.name}-${template.metadata.version}.${options?.format || 'yaml'}`;\nconst outputPath = path.join(outputDir, filename);\nthis.export(template, outputPath, optio",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 226
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 236
        }
      ]
    },
    {
      "snippet": "}\n/**\n* Get the base directory\n*/\ngetBaseDir() {",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 237
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 229
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 191
        }
      ]
    },
    {
      "snippet": "/**\n* Get the base directory\n*/\ngetBaseDir() {\nreturn this.baseDir;",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 238
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 230
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 192
        }
      ]
    },
    {
      "snippet": "* Get the base directory\n*/\ngetBaseDir() {\nreturn this.baseDir;\n}",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 239
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 231
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 193
        }
      ]
    },
    {
      "snippet": "*/\ngetBaseDir() {\nreturn this.baseDir;\n}\n}",
      "occurrences": [
        {
          "path": "dist/import-export/template-exporter.js",
          "line": 240
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 232
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 194
        }
      ]
    },
    {
      "snippet": "/**\n* TemplateImporter: Secure mission template import with 6-layer validation\n*\n* Implements the complete validation pipeline from R3.2:\n* 1. Path Sanitization (via SecureYAMLLoader)",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.d.ts",
          "line": 1
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 2
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 1
        }
      ]
    },
    {
      "snippet": "* TemplateImporter: Secure mission template import with 6-layer validation\n*\n* Implements the complete validation pipeline from R3.2:\n* 1. Path Sanitization (via SecureYAMLLoader)\n* 2. Safe Parsing (v",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.d.ts",
          "line": 2
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 3
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 2
        }
      ]
    },
    {
      "snippet": "*\n* Implements the complete validation pipeline from R3.2:\n* 1. Path Sanitization (via SecureYAMLLoader)\n* 2. Safe Parsing (via SecureYAMLLoader)\n* 3. Schema Validation (via SecureYAMLLoader)",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.d.ts",
          "line": 3
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 4
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 3
        }
      ]
    },
    {
      "snippet": "* Implements the complete validation pipeline from R3.2:\n* 1. Path Sanitization (via SecureYAMLLoader)\n* 2. Safe Parsing (via SecureYAMLLoader)\n* 3. Schema Validation (via SecureYAMLLoader)\n* 4. Signa",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.d.ts",
          "line": 4
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 5
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 4
        }
      ]
    },
    {
      "snippet": "* 1. Path Sanitization (via SecureYAMLLoader)\n* 2. Safe Parsing (via SecureYAMLLoader)\n* 3. Schema Validation (via SecureYAMLLoader)\n* 4. Signature Verification (via SecurityValidator)\n* 5. Semantic V",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.d.ts",
          "line": 5
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 6
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 5
        }
      ]
    },
    {
      "snippet": "* 2. Safe Parsing (via SecureYAMLLoader)\n* 3. Schema Validation (via SecureYAMLLoader)\n* 4. Signature Verification (via SecurityValidator)\n* 5. Semantic Validation (via SecurityValidator)\n* 6. Depende",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.d.ts",
          "line": 6
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 7
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 6
        }
      ]
    },
    {
      "snippet": "* 3. Schema Validation (via SecureYAMLLoader)\n* 4. Signature Verification (via SecurityValidator)\n* 5. Semantic Validation (via SecurityValidator)\n* 6. Dependency Resolution (recursive validation)\n*",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.d.ts",
          "line": 7
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 8
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 7
        }
      ]
    },
    {
      "snippet": "* 4. Signature Verification (via SecurityValidator)\n* 5. Semantic Validation (via SecurityValidator)\n* 6. Dependency Resolution (recursive validation)\n*\n* @module import-export/template-importer",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.d.ts",
          "line": 8
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 9
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 8
        }
      ]
    },
    {
      "snippet": "* 5. Semantic Validation (via SecurityValidator)\n* 6. Dependency Resolution (recursive validation)\n*\n* @module import-export/template-importer\n*/",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.d.ts",
          "line": 9
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 10
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 9
        }
      ]
    },
    {
      "snippet": "/**\n* Result of a successful import operation\n*/\nexport interface ImportResult {\ntemplate: MissionTemplate;",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.d.ts",
          "line": 15
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 29
        }
      ]
    },
    {
      "snippet": "* Result of a successful import operation\n*/\nexport interface ImportResult {\ntemplate: MissionTemplate;\nvalidationReport: SecurityValidationReport;",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.d.ts",
          "line": 16
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 30
        }
      ]
    },
    {
      "snippet": "*/\nexport interface ImportResult {\ntemplate: MissionTemplate;\nvalidationReport: SecurityValidationReport;\nresolvedDependencies: Map<string, MissionTemplate>;",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.d.ts",
          "line": 17
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 31
        }
      ]
    },
    {
      "snippet": "export interface ImportResult {\ntemplate: MissionTemplate;\nvalidationReport: SecurityValidationReport;\nresolvedDependencies: Map<string, MissionTemplate>;\n}",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.d.ts",
          "line": 18
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 32
        }
      ]
    },
    {
      "snippet": "/**\n* Create a new TemplateImporter\n*\n* @param baseDir - Base directory for template operations\n* @param options - Import options",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.d.ts",
          "line": 30
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 60
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 46
        }
      ]
    },
    {
      "snippet": "* Create a new TemplateImporter\n*\n* @param baseDir - Base directory for template operations\n* @param options - Import options\n*/",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.d.ts",
          "line": 31
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 61
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 47
        }
      ]
    },
    {
      "snippet": "/**\n* Import a mission template from a file path\n* Executes the complete 6-layer validation pipeline\n*\n* @param templatePath - Path to template file (relative to baseDir)",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.d.ts",
          "line": 37
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 77
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 66
        }
      ]
    },
    {
      "snippet": "* Import a mission template from a file path\n* Executes the complete 6-layer validation pipeline\n*\n* @param templatePath - Path to template file (relative to baseDir)\n* @param options - Import options",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.d.ts",
          "line": 38
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 78
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 67
        }
      ]
    },
    {
      "snippet": "* Executes the complete 6-layer validation pipeline\n*\n* @param templatePath - Path to template file (relative to baseDir)\n* @param options - Import options\n* @returns Import result with validated temp",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.d.ts",
          "line": 39
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 79
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 68
        }
      ]
    },
    {
      "snippet": "*\n* @param templatePath - Path to template file (relative to baseDir)\n* @param options - Import options\n* @returns Import result with validated template and dependencies\n* @throws ImportExportError if",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.d.ts",
          "line": 40
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 80
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 69
        }
      ]
    },
    {
      "snippet": "* @param templatePath - Path to template file (relative to baseDir)\n* @param options - Import options\n* @returns Import result with validated template and dependencies\n* @throws ImportExportError if v",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.d.ts",
          "line": 41
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 81
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 70
        }
      ]
    },
    {
      "snippet": "/**\n* Layers 1-3: Load template with secure YAML loader\n* Handles path sanitization, safe parsing, and schema validation\n*\n* @param templatePath - Path to template file",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.d.ts",
          "line": 47
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 118
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 131
        }
      ]
    },
    {
      "snippet": "* Layers 1-3: Load template with secure YAML loader\n* Handles path sanitization, safe parsing, and schema validation\n*\n* @param templatePath - Path to template file\n* @returns Parsed template object",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.d.ts",
          "line": 48
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 119
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 132
        }
      ]
    },
    {
      "snippet": "* Handles path sanitization, safe parsing, and schema validation\n*\n* @param templatePath - Path to template file\n* @returns Parsed template object\n*/",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.d.ts",
          "line": 49
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 120
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 133
        }
      ]
    },
    {
      "snippet": "/**\n* Layer 6: Resolve and validate dependencies\n* Each dependency is recursively validated through the full pipeline\n*\n* @param dependencies - Array of dependency declarations",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.d.ts",
          "line": 55
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 136
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 154
        }
      ]
    },
    {
      "snippet": "* Layer 6: Resolve and validate dependencies\n* Each dependency is recursively validated through the full pipeline\n*\n* @param dependencies - Array of dependency declarations\n* @param options - Import o",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.d.ts",
          "line": 56
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 137
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 155
        }
      ]
    },
    {
      "snippet": "* Each dependency is recursively validated through the full pipeline\n*\n* @param dependencies - Array of dependency declarations\n* @param options - Import options\n* @returns Map of dependency name to r",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.d.ts",
          "line": 57
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 138
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 156
        }
      ]
    },
    {
      "snippet": "*\n* @param dependencies - Array of dependency declarations\n* @param options - Import options\n* @returns Map of dependency name to resolved template\n*/",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.d.ts",
          "line": 58
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 139
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 157
        }
      ]
    },
    {
      "snippet": "/**\n* Fetch a dependency from its source URL\n* In Phase 1, this only supports local file paths\n* Future: Support HTTPS URLs with allowlist enforcement\n*",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.d.ts",
          "line": 64
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 167
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 197
        }
      ]
    },
    {
      "snippet": "* Fetch a dependency from its source URL\n* In Phase 1, this only supports local file paths\n* Future: Support HTTPS URLs with allowlist enforcement\n*\n* @param dependency - Dependency specification",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.d.ts",
          "line": 65
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 168
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 198
        }
      ]
    },
    {
      "snippet": "* In Phase 1, this only supports local file paths\n* Future: Support HTTPS URLs with allowlist enforcement\n*\n* @param dependency - Dependency specification\n* @returns Fetched template",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.d.ts",
          "line": 66
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 169
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 199
        }
      ]
    },
    {
      "snippet": "* Future: Support HTTPS URLs with allowlist enforcement\n*\n* @param dependency - Dependency specification\n* @returns Fetched template\n*/",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.d.ts",
          "line": 67
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 170
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 200
        }
      ]
    },
    {
      "snippet": "/**\n* Verify dependency checksum for integrity\n*\n* @param content - Dependency content\n* @param expectedChecksum - Expected SHA-256 checksum (format: \"sha256:hash\")",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.d.ts",
          "line": 73
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 195
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 233
        }
      ]
    },
    {
      "snippet": "* Verify dependency checksum for integrity\n*\n* @param content - Dependency content\n* @param expectedChecksum - Expected SHA-256 checksum (format: \"sha256:hash\")\n*/",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.d.ts",
          "line": 74
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 196
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 234
        }
      ]
    },
    {
      "snippet": "/**\n* Import from raw YAML string (for testing)\n*\n* @param yamlContent - YAML content string\n* @param options - Import options",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.d.ts",
          "line": 80
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 209
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 252
        }
      ]
    },
    {
      "snippet": "* Import from raw YAML string (for testing)\n*\n* @param yamlContent - YAML content string\n* @param options - Import options\n* @returns Import result",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.d.ts",
          "line": 81
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 210
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 253
        }
      ]
    },
    {
      "snippet": "*\n* @param yamlContent - YAML content string\n* @param options - Import options\n* @returns Import result\n*/",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.d.ts",
          "line": 82
        },
        {
          "path": "dist/import-export/template-importer.js",
          "line": 211
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 254
        }
      ]
    },
    {
      "snippet": "return {\ntemplate,\nvalidationReport,\nresolvedDependencies,\n};",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.js",
          "line": 105
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 114
        }
      ]
    },
    {
      "snippet": "* @param dependencies - Array of dependency declarations\n* @param options - Import options\n* @returns Map of dependency name to resolved template\n*/\n/* istanbul ignore next */",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.js",
          "line": 140
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 158
        }
      ]
    },
    {
      "snippet": "// Process dependencies sequentially (could be parallelized in production)\nfor (const dep of dependencies) {\ntry {\n// Fetch dependency (simplified - in production would handle URLs)\nconst depTemplate ",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.js",
          "line": 150
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 173
        }
      ]
    },
    {
      "snippet": "*\n* @param dependency - Dependency specification\n* @returns Fetched template\n*/\n/* istanbul ignore next */",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.js",
          "line": 171
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 201
        }
      ]
    },
    {
      "snippet": "try {\n// For now, treat sourceUrl as a local file path\n// In production, this would:\n// 1. Check URL against allowlist\n// 2. Use HTTPS to fetch from approved domains",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.js",
          "line": 177
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 207
        }
      ]
    },
    {
      "snippet": "// For now, treat sourceUrl as a local file path\n// In production, this would:\n// 1. Check URL against allowlist\n// 2. Use HTTPS to fetch from approved domains\n// 3. Implement retry logic and timeout",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.js",
          "line": 178
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 208
        }
      ]
    },
    {
      "snippet": "// In production, this would:\n// 1. Check URL against allowlist\n// 2. Use HTTPS to fetch from approved domains\n// 3. Implement retry logic and timeout\nconst url = new URL(dependency.sourceUrl);",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.js",
          "line": 179
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 209
        }
      ]
    },
    {
      "snippet": "if (url.protocol === 'file:') {\nconst filePath = url.pathname;\nconst sanitizedPath = this.yamlLoader.sanitizePath(filePath);\nreturn fs.readFileSync(sanitizedPath, 'utf-8');\n}",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.js",
          "line": 184
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 215
        }
      ]
    },
    {
      "snippet": "*\n* @param content - Dependency content\n* @param expectedChecksum - Expected SHA-256 checksum (format: \"sha256:hash\")\n*/\n/* istanbul ignore next */",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.js",
          "line": 197
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 235
        }
      ]
    },
    {
      "snippet": "// Write to temporary file and import\nconst tempFile = path.join(this.baseDir, `.temp-${Date.now()}.yaml`);\ntry {\nfs.writeFileSync(tempFile, yamlContent);\nreturn await this.import(path.basename(tempFi",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.js",
          "line": 217
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 260
        }
      ]
    },
    {
      "snippet": "// Clean up temp file\nif (fs.existsSync(tempFile)) {\nfs.unlinkSync(tempFile);\n}\n}",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.js",
          "line": 224
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 266
        }
      ]
    },
    {
      "snippet": "if (fs.existsSync(tempFile)) {\nfs.unlinkSync(tempFile);\n}\n}\n}",
      "occurrences": [
        {
          "path": "dist/import-export/template-importer.js",
          "line": 225
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 267
        }
      ]
    },
    {
      "snippet": "/**\n* Template metadata structure\n*/\nexport interface TemplateMetadata {\nname: string;",
      "occurrences": [
        {
          "path": "dist/import-export/types.d.ts",
          "line": 5
        },
        {
          "path": "src/import-export/types.ts",
          "line": 6
        }
      ]
    },
    {
      "snippet": "* Template metadata structure\n*/\nexport interface TemplateMetadata {\nname: string;\nversion: string;",
      "occurrences": [
        {
          "path": "dist/import-export/types.d.ts",
          "line": 6
        },
        {
          "path": "src/import-export/types.ts",
          "line": 7
        }
      ]
    },
    {
      "snippet": "*/\nexport interface TemplateMetadata {\nname: string;\nversion: string;\nauthor: string;",
      "occurrences": [
        {
          "path": "dist/import-export/types.d.ts",
          "line": 7
        },
        {
          "path": "src/import-export/types.ts",
          "line": 8
        }
      ]
    },
    {
      "snippet": "export interface TemplateMetadata {\nname: string;\nversion: string;\nauthor: string;\nsignature: TemplateSignature;",
      "occurrences": [
        {
          "path": "dist/import-export/types.d.ts",
          "line": 8
        },
        {
          "path": "src/import-export/types.ts",
          "line": 9
        }
      ]
    },
    {
      "snippet": "name: string;\nversion: string;\nauthor: string;\nsignature: TemplateSignature;\n}",
      "occurrences": [
        {
          "path": "dist/import-export/types.d.ts",
          "line": 9
        },
        {
          "path": "src/import-export/types.ts",
          "line": 10
        }
      ]
    },
    {
      "snippet": "/**\n* Digital signature for template verification (Layer 4)\n*/\nexport interface TemplateSignature {\nkeyId: string;",
      "occurrences": [
        {
          "path": "dist/import-export/types.d.ts",
          "line": 14
        },
        {
          "path": "src/import-export/types.ts",
          "line": 16
        }
      ]
    },
    {
      "snippet": "/**\n* Template dependency specification (Layer 6)\n*/\nexport interface TemplateDependency {\nname: string;",
      "occurrences": [
        {
          "path": "dist/import-export/types.d.ts",
          "line": 22
        },
        {
          "path": "src/import-export/types.ts",
          "line": 25
        }
      ]
    },
    {
      "snippet": "* Template dependency specification (Layer 6)\n*/\nexport interface TemplateDependency {\nname: string;\nsourceUrl: string;",
      "occurrences": [
        {
          "path": "dist/import-export/types.d.ts",
          "line": 23
        },
        {
          "path": "src/import-export/types.ts",
          "line": 26
        }
      ]
    },
    {
      "snippet": "*/\nexport interface TemplateDependency {\nname: string;\nsourceUrl: string;\nversion: string;",
      "occurrences": [
        {
          "path": "dist/import-export/types.d.ts",
          "line": 24
        },
        {
          "path": "src/import-export/types.ts",
          "line": 27
        }
      ]
    },
    {
      "snippet": "/**\n* Complete mission template structure\n*/\nexport interface MissionTemplate {\napiVersion: string;",
      "occurrences": [
        {
          "path": "dist/import-export/types.d.ts",
          "line": 31
        },
        {
          "path": "src/import-export/types.ts",
          "line": 35
        }
      ]
    },
    {
      "snippet": "* Complete mission template structure\n*/\nexport interface MissionTemplate {\napiVersion: string;\nkind: string;",
      "occurrences": [
        {
          "path": "dist/import-export/types.d.ts",
          "line": 32
        },
        {
          "path": "src/import-export/types.ts",
          "line": 36
        }
      ]
    },
    {
      "snippet": "*/\nexport interface MissionTemplate {\napiVersion: string;\nkind: string;\nmetadata: TemplateMetadata;",
      "occurrences": [
        {
          "path": "dist/import-export/types.d.ts",
          "line": 33
        },
        {
          "path": "src/import-export/types.ts",
          "line": 37
        }
      ]
    },
    {
      "snippet": "export interface MissionTemplate {\napiVersion: string;\nkind: string;\nmetadata: TemplateMetadata;\nspec: Record<string, any>;",
      "occurrences": [
        {
          "path": "dist/import-export/types.d.ts",
          "line": 34
        },
        {
          "path": "src/import-export/types.ts",
          "line": 38
        }
      ]
    },
    {
      "snippet": "apiVersion: string;\nkind: string;\nmetadata: TemplateMetadata;\nspec: Record<string, any>;\ndependencies?: TemplateDependency[];",
      "occurrences": [
        {
          "path": "dist/import-export/types.d.ts",
          "line": 35
        },
        {
          "path": "src/import-export/types.ts",
          "line": 39
        }
      ]
    },
    {
      "snippet": "kind: string;\nmetadata: TemplateMetadata;\nspec: Record<string, any>;\ndependencies?: TemplateDependency[];\n}",
      "occurrences": [
        {
          "path": "dist/import-export/types.d.ts",
          "line": 36
        },
        {
          "path": "src/import-export/types.ts",
          "line": 40
        }
      ]
    },
    {
      "snippet": "/**\n* Validation result for each security layer\n*/\nexport interface ValidationResult {\nlayer: string;",
      "occurrences": [
        {
          "path": "dist/import-export/types.d.ts",
          "line": 41
        },
        {
          "path": "src/import-export/types.ts",
          "line": 46
        }
      ]
    },
    {
      "snippet": "* Validation result for each security layer\n*/\nexport interface ValidationResult {\nlayer: string;\npassed: boolean;",
      "occurrences": [
        {
          "path": "dist/import-export/types.d.ts",
          "line": 42
        },
        {
          "path": "src/import-export/types.ts",
          "line": 47
        }
      ]
    },
    {
      "snippet": "*/\nexport interface ValidationResult {\nlayer: string;\npassed: boolean;\nmessage?: string;",
      "occurrences": [
        {
          "path": "dist/import-export/types.d.ts",
          "line": 43
        },
        {
          "path": "src/import-export/types.ts",
          "line": 48
        }
      ]
    },
    {
      "snippet": "export interface ValidationResult {\nlayer: string;\npassed: boolean;\nmessage?: string;\ndetails?: any;",
      "occurrences": [
        {
          "path": "dist/import-export/types.d.ts",
          "line": 44
        },
        {
          "path": "src/import-export/types.ts",
          "line": 49
        }
      ]
    },
    {
      "snippet": "layer: string;\npassed: boolean;\nmessage?: string;\ndetails?: any;\n}",
      "occurrences": [
        {
          "path": "dist/import-export/types.d.ts",
          "line": 45
        },
        {
          "path": "src/import-export/types.ts",
          "line": 50
        }
      ]
    },
    {
      "snippet": "/**\n* Complete validation report\n*/\nexport interface SecurityValidationReport {\nvalid: boolean;",
      "occurrences": [
        {
          "path": "dist/import-export/types.d.ts",
          "line": 50
        },
        {
          "path": "src/import-export/types.ts",
          "line": 56
        }
      ]
    },
    {
      "snippet": "* Complete validation report\n*/\nexport interface SecurityValidationReport {\nvalid: boolean;\nlayers: ValidationResult[];",
      "occurrences": [
        {
          "path": "dist/import-export/types.d.ts",
          "line": 51
        },
        {
          "path": "src/import-export/types.ts",
          "line": 57
        }
      ]
    },
    {
      "snippet": "*/\nexport interface SecurityValidationReport {\nvalid: boolean;\nlayers: ValidationResult[];\ntemplate?: MissionTemplate;",
      "occurrences": [
        {
          "path": "dist/import-export/types.d.ts",
          "line": 52
        },
        {
          "path": "src/import-export/types.ts",
          "line": 58
        }
      ]
    },
    {
      "snippet": "export interface SecurityValidationReport {\nvalid: boolean;\nlayers: ValidationResult[];\ntemplate?: MissionTemplate;\nerrors: string[];",
      "occurrences": [
        {
          "path": "dist/import-export/types.d.ts",
          "line": 53
        },
        {
          "path": "src/import-export/types.ts",
          "line": 59
        }
      ]
    },
    {
      "snippet": "valid: boolean;\nlayers: ValidationResult[];\ntemplate?: MissionTemplate;\nerrors: string[];\nwarnings: string[];",
      "occurrences": [
        {
          "path": "dist/import-export/types.d.ts",
          "line": 54
        },
        {
          "path": "src/import-export/types.ts",
          "line": 60
        }
      ]
    },
    {
      "snippet": "layers: ValidationResult[];\ntemplate?: MissionTemplate;\nerrors: string[];\nwarnings: string[];\nperformanceMs: number;",
      "occurrences": [
        {
          "path": "dist/import-export/types.d.ts",
          "line": 55
        },
        {
          "path": "src/import-export/types.ts",
          "line": 61
        }
      ]
    },
    {
      "snippet": "template?: MissionTemplate;\nerrors: string[];\nwarnings: string[];\nperformanceMs: number;\n}",
      "occurrences": [
        {
          "path": "dist/import-export/types.d.ts",
          "line": 56
        },
        {
          "path": "src/import-export/types.ts",
          "line": 62
        }
      ]
    },
    {
      "snippet": "errors: string[];\nwarnings: string[];\nperformanceMs: number;\n}\n/**",
      "occurrences": [
        {
          "path": "dist/import-export/types.d.ts",
          "line": 57
        },
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 26
        }
      ]
    },
    {
      "snippet": "/**\n* Configuration for semantic validation rules (Layer 5)\n*/\nexport interface SemanticValidationRules {\nmaxResourceMemory?: number;",
      "occurrences": [
        {
          "path": "dist/import-export/types.d.ts",
          "line": 61
        },
        {
          "path": "src/import-export/types.ts",
          "line": 68
        }
      ]
    },
    {
      "snippet": "* Configuration for semantic validation rules (Layer 5)\n*/\nexport interface SemanticValidationRules {\nmaxResourceMemory?: number;\nmaxResourceCpu?: number;",
      "occurrences": [
        {
          "path": "dist/import-export/types.d.ts",
          "line": 62
        },
        {
          "path": "src/import-export/types.ts",
          "line": 69
        }
      ]
    },
    {
      "snippet": "*/\nexport interface SemanticValidationRules {\nmaxResourceMemory?: number;\nmaxResourceCpu?: number;\nallowedActions?: string[];",
      "occurrences": [
        {
          "path": "dist/import-export/types.d.ts",
          "line": 63
        },
        {
          "path": "src/import-export/types.ts",
          "line": 70
        }
      ]
    },
    {
      "snippet": "export interface SemanticValidationRules {\nmaxResourceMemory?: number;\nmaxResourceCpu?: number;\nallowedActions?: string[];\ndeniedKeywords?: string[];",
      "occurrences": [
        {
          "path": "dist/import-export/types.d.ts",
          "line": 64
        },
        {
          "path": "src/import-export/types.ts",
          "line": 71
        }
      ]
    },
    {
      "snippet": "maxResourceMemory?: number;\nmaxResourceCpu?: number;\nallowedActions?: string[];\ndeniedKeywords?: string[];\nmaxDependencies?: number;",
      "occurrences": [
        {
          "path": "dist/import-export/types.d.ts",
          "line": 65
        },
        {
          "path": "src/import-export/types.ts",
          "line": 72
        }
      ]
    },
    {
      "snippet": "maxResourceCpu?: number;\nallowedActions?: string[];\ndeniedKeywords?: string[];\nmaxDependencies?: number;\nurlAllowlist?: string[];",
      "occurrences": [
        {
          "path": "dist/import-export/types.d.ts",
          "line": 66
        },
        {
          "path": "src/import-export/types.ts",
          "line": 73
        }
      ]
    },
    {
      "snippet": "allowedActions?: string[];\ndeniedKeywords?: string[];\nmaxDependencies?: number;\nurlAllowlist?: string[];\n}",
      "occurrences": [
        {
          "path": "dist/import-export/types.d.ts",
          "line": 67
        },
        {
          "path": "src/import-export/types.ts",
          "line": 74
        }
      ]
    },
    {
      "snippet": "/**\n* Export options\n*/\nexport interface ExportOptions {\nformat?: 'yaml' | 'json';",
      "occurrences": [
        {
          "path": "dist/import-export/types.d.ts",
          "line": 80
        },
        {
          "path": "src/import-export/types.ts",
          "line": 89
        }
      ]
    },
    {
      "snippet": "* Export options\n*/\nexport interface ExportOptions {\nformat?: 'yaml' | 'json';\nincludeComments?: boolean;",
      "occurrences": [
        {
          "path": "dist/import-export/types.d.ts",
          "line": 81
        },
        {
          "path": "src/import-export/types.ts",
          "line": 90
        }
      ]
    },
    {
      "snippet": "*/\nexport interface ExportOptions {\nformat?: 'yaml' | 'json';\nincludeComments?: boolean;\npretty?: boolean;",
      "occurrences": [
        {
          "path": "dist/import-export/types.d.ts",
          "line": 82
        },
        {
          "path": "src/import-export/types.ts",
          "line": 91
        }
      ]
    },
    {
      "snippet": "export interface ExportOptions {\nformat?: 'yaml' | 'json';\nincludeComments?: boolean;\npretty?: boolean;\n}",
      "occurrences": [
        {
          "path": "dist/import-export/types.d.ts",
          "line": 83
        },
        {
          "path": "src/import-export/types.ts",
          "line": 92
        }
      ]
    },
    {
      "snippet": "/**\n* Mission Protocol server context shared across handlers\n*/\nexport interface MissionProtocolContext {\nbaseDir: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 15
        },
        {
          "path": "src/index.ts",
          "line": 67
        }
      ]
    },
    {
      "snippet": "* Mission Protocol server context shared across handlers\n*/\nexport interface MissionProtocolContext {\nbaseDir: string;\ndefaultModel: SupportedModel;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 16
        },
        {
          "path": "src/index.ts",
          "line": 68
        }
      ]
    },
    {
      "snippet": "*/\nexport interface MissionProtocolContext {\nbaseDir: string;\ndefaultModel: SupportedModel;\nloader: SecureYAMLLoader;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 17
        },
        {
          "path": "src/index.ts",
          "line": 69
        }
      ]
    },
    {
      "snippet": "export interface MissionProtocolContext {\nbaseDir: string;\ndefaultModel: SupportedModel;\nloader: SecureYAMLLoader;\nregistryParser: RegistryParser;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 18
        },
        {
          "path": "src/index.ts",
          "line": 70
        }
      ]
    },
    {
      "snippet": "baseDir: string;\ndefaultModel: SupportedModel;\nloader: SecureYAMLLoader;\nregistryParser: RegistryParser;\npackCombiner: PackCombiner;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 19
        },
        {
          "path": "src/index.ts",
          "line": 71
        }
      ]
    },
    {
      "snippet": "defaultModel: SupportedModel;\nloader: SecureYAMLLoader;\nregistryParser: RegistryParser;\npackCombiner: PackCombiner;\nlistDomainsTool: ListDomainsToolImpl;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 20
        },
        {
          "path": "src/index.ts",
          "line": 72
        }
      ]
    },
    {
      "snippet": "loader: SecureYAMLLoader;\nregistryParser: RegistryParser;\npackCombiner: PackCombiner;\nlistDomainsTool: ListDomainsToolImpl;\ncreateMissionTool: CreateMissionToolImpl;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 21
        },
        {
          "path": "src/index.ts",
          "line": 73
        }
      ]
    },
    {
      "snippet": "registryParser: RegistryParser;\npackCombiner: PackCombiner;\nlistDomainsTool: ListDomainsToolImpl;\ncreateMissionTool: CreateMissionToolImpl;\ncombinePacksTool: CombinePacksToolImpl;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 22
        },
        {
          "path": "src/index.ts",
          "line": 74
        }
      ]
    },
    {
      "snippet": "packCombiner: PackCombiner;\nlistDomainsTool: ListDomainsToolImpl;\ncreateMissionTool: CreateMissionToolImpl;\ncombinePacksTool: CombinePacksToolImpl;\noptimizeTokensTool: OptimizeTokensToolImpl;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 23
        },
        {
          "path": "src/index.ts",
          "line": 75
        }
      ]
    },
    {
      "snippet": "listDomainsTool: ListDomainsToolImpl;\ncreateMissionTool: CreateMissionToolImpl;\ncombinePacksTool: CombinePacksToolImpl;\noptimizeTokensTool: OptimizeTokensToolImpl;\nsplitMissionTool: SplitMissionToolIm",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 24
        },
        {
          "path": "src/index.ts",
          "line": 76
        }
      ]
    },
    {
      "snippet": "createMissionTool: CreateMissionToolImpl;\ncombinePacksTool: CombinePacksToolImpl;\noptimizeTokensTool: OptimizeTokensToolImpl;\nsplitMissionTool: SplitMissionToolImpl;\nsuggestSplitsTool: SuggestSplitsTo",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 25
        },
        {
          "path": "src/index.ts",
          "line": 77
        }
      ]
    },
    {
      "snippet": "combinePacksTool: CombinePacksToolImpl;\noptimizeTokensTool: OptimizeTokensToolImpl;\nsplitMissionTool: SplitMissionToolImpl;\nsuggestSplitsTool: SuggestSplitsToolImpl;\ntokenCounter: TokenCounter;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 26
        },
        {
          "path": "src/index.ts",
          "line": 78
        }
      ]
    },
    {
      "snippet": "optimizeTokensTool: OptimizeTokensToolImpl;\nsplitMissionTool: SplitMissionToolImpl;\nsuggestSplitsTool: SuggestSplitsToolImpl;\ntokenCounter: TokenCounter;\n}",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 27
        },
        {
          "path": "src/index.ts",
          "line": 79
        }
      ]
    },
    {
      "snippet": "name: string;\ndescription: string;\ninputSchema: {\ntype: string;\nproperties: {};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 33
        },
        {
          "path": "dist/tools/list-domains.d.ts",
          "line": 50
        }
      ]
    },
    {
      "snippet": "description: string;\ninputSchema: {\ntype: string;\nproperties: {};\nadditionalProperties: boolean;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 34
        },
        {
          "path": "dist/tools/list-domains.d.ts",
          "line": 51
        }
      ]
    },
    {
      "snippet": "inputSchema: {\ntype: string;\nproperties: {};\nadditionalProperties: boolean;\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 35
        },
        {
          "path": "dist/tools/list-domains.d.ts",
          "line": 52
        }
      ]
    },
    {
      "snippet": "readonly name: \"create_mission\";\nreadonly description: \"Use this tool to create a new mission based on a user's request. You must provide a clear and concise objective. You can optionally specify a do",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 41
        },
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 40
        }
      ]
    },
    {
      "snippet": "readonly description: \"Use this tool to create a new mission based on a user's request. You must provide a clear and concise objective. You can optionally specify a domain from the list provided by li",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 42
        },
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 41
        }
      ]
    },
    {
      "snippet": "readonly inputSchema: {\nreadonly type: \"object\";\nreadonly required: readonly [\"objective\"];\nreadonly properties: {\nreadonly objective: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 43
        },
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 42
        }
      ]
    },
    {
      "snippet": "readonly type: \"object\";\nreadonly required: readonly [\"objective\"];\nreadonly properties: {\nreadonly objective: {\nreadonly type: \"string\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 44
        },
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 43
        }
      ]
    },
    {
      "snippet": "readonly required: readonly [\"objective\"];\nreadonly properties: {\nreadonly objective: {\nreadonly type: \"string\";\nreadonly description: \"Clear, concise mission goal describing what success looks like\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 45
        },
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 44
        }
      ]
    },
    {
      "snippet": "readonly properties: {\nreadonly objective: {\nreadonly type: \"string\";\nreadonly description: \"Clear, concise mission goal describing what success looks like\";\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 46
        },
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 45
        }
      ]
    },
    {
      "snippet": "readonly objective: {\nreadonly type: \"string\";\nreadonly description: \"Clear, concise mission goal describing what success looks like\";\n};\nreadonly domain: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 47
        },
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 46
        }
      ]
    },
    {
      "snippet": "readonly type: \"string\";\nreadonly description: \"Clear, concise mission goal describing what success looks like\";\n};\nreadonly domain: {\nreadonly type: \"string\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 48
        },
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 47
        }
      ]
    },
    {
      "snippet": "readonly description: \"Clear, concise mission goal describing what success looks like\";\n};\nreadonly domain: {\nreadonly type: \"string\";\nreadonly description: \"Optional domain pack name (use list_availa",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 49
        },
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 48
        }
      ]
    },
    {
      "snippet": "};\nreadonly domain: {\nreadonly type: \"string\";\nreadonly description: \"Optional domain pack name (use list_available_domains to see available options)\";\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 50
        },
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 49
        }
      ]
    },
    {
      "snippet": "readonly domain: {\nreadonly type: \"string\";\nreadonly description: \"Optional domain pack name (use list_available_domains to see available options)\";\n};\nreadonly successCriteria: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 51
        },
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 50
        }
      ]
    },
    {
      "snippet": "readonly type: \"string\";\nreadonly description: \"Optional domain pack name (use list_available_domains to see available options)\";\n};\nreadonly successCriteria: {\nreadonly type: \"array\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 52
        },
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 51
        }
      ]
    },
    {
      "snippet": "readonly description: \"Optional domain pack name (use list_available_domains to see available options)\";\n};\nreadonly successCriteria: {\nreadonly type: \"array\";\nreadonly items: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 53
        },
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 52
        }
      ]
    },
    {
      "snippet": "};\nreadonly successCriteria: {\nreadonly type: \"array\";\nreadonly items: {\nreadonly type: \"string\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 54
        },
        {
          "path": "dist/schemas/generic-mission.d.ts",
          "line": 92
        },
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 53
        }
      ]
    },
    {
      "snippet": "readonly successCriteria: {\nreadonly type: \"array\";\nreadonly items: {\nreadonly type: \"string\";\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 55
        },
        {
          "path": "dist/schemas/generic-mission.d.ts",
          "line": 93
        },
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 54
        }
      ]
    },
    {
      "snippet": "readonly type: \"array\";\nreadonly items: {\nreadonly type: \"string\";\n};\nreadonly description: \"Optional array of measurable success conditions\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 56
        },
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 55
        }
      ]
    },
    {
      "snippet": "readonly items: {\nreadonly type: \"string\";\n};\nreadonly description: \"Optional array of measurable success conditions\";\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 57
        },
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 56
        }
      ]
    },
    {
      "snippet": "readonly type: \"string\";\n};\nreadonly description: \"Optional array of measurable success conditions\";\n};\nreadonly constraints: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 58
        },
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 57
        }
      ]
    },
    {
      "snippet": "};\nreadonly description: \"Optional array of measurable success conditions\";\n};\nreadonly constraints: {\nreadonly type: \"array\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 59
        },
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 58
        }
      ]
    },
    {
      "snippet": "readonly description: \"Optional array of measurable success conditions\";\n};\nreadonly constraints: {\nreadonly type: \"array\";\nreadonly items: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 60
        },
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 59
        }
      ]
    },
    {
      "snippet": "};\nreadonly constraints: {\nreadonly type: \"array\";\nreadonly items: {\nreadonly type: \"string\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 61
        },
        {
          "path": "dist/schemas/generic-mission.d.ts",
          "line": 82
        },
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 60
        }
      ]
    },
    {
      "snippet": "readonly constraints: {\nreadonly type: \"array\";\nreadonly items: {\nreadonly type: \"string\";\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 62
        },
        {
          "path": "dist/schemas/generic-mission.d.ts",
          "line": 83
        },
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 61
        }
      ]
    },
    {
      "snippet": "readonly type: \"array\";\nreadonly items: {\nreadonly type: \"string\";\n};\nreadonly description: \"Optional array of limitations or boundaries\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 63
        },
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 62
        }
      ]
    },
    {
      "snippet": "readonly items: {\nreadonly type: \"string\";\n};\nreadonly description: \"Optional array of limitations or boundaries\";\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 64
        },
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 63
        }
      ]
    },
    {
      "snippet": "readonly type: \"string\";\n};\nreadonly description: \"Optional array of limitations or boundaries\";\n};\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 65
        },
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 64
        }
      ]
    },
    {
      "snippet": "};\nreadonly description: \"Optional array of limitations or boundaries\";\n};\n};\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 66
        },
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 65
        }
      ]
    },
    {
      "snippet": "};\n};\n};\n}, {\nname: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 68
        },
        {
          "path": "dist/index.d.ts",
          "line": 252
        }
      ]
    },
    {
      "snippet": "};\n};\n}, {\nname: string;\ndescription: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 69
        },
        {
          "path": "dist/index.d.ts",
          "line": 253
        }
      ]
    },
    {
      "snippet": "};\n}, {\nname: string;\ndescription: string;\ninputSchema: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 70
        },
        {
          "path": "dist/index.d.ts",
          "line": 101
        },
        {
          "path": "dist/index.d.ts",
          "line": 149
        },
        {
          "path": "dist/index.d.ts",
          "line": 254
        },
        {
          "path": "dist/index.d.ts",
          "line": 278
        }
      ]
    },
    {
      "snippet": "}, {\nname: string;\ndescription: string;\ninputSchema: {\ntype: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 71
        },
        {
          "path": "dist/index.d.ts",
          "line": 102
        },
        {
          "path": "dist/index.d.ts",
          "line": 150
        },
        {
          "path": "dist/index.d.ts",
          "line": 255
        },
        {
          "path": "dist/index.d.ts",
          "line": 279
        }
      ]
    },
    {
      "snippet": "name: string;\ndescription: string;\ninputSchema: {\ntype: string;\nproperties: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 72
        },
        {
          "path": "dist/index.d.ts",
          "line": 103
        },
        {
          "path": "dist/index.d.ts",
          "line": 151
        },
        {
          "path": "dist/index.d.ts",
          "line": 256
        },
        {
          "path": "dist/index.d.ts",
          "line": 280
        },
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 43
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 60
        },
        {
          "path": "dist/tools/extract-template.d.ts",
          "line": 40
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 70
        },
        {
          "path": "dist/tools/score-quality.d.ts",
          "line": 24
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 25
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 77
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 123
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 173
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 203
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 221
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 242
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 271
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 288
        }
      ]
    },
    {
      "snippet": "description: string;\ninputSchema: {\ntype: string;\nproperties: {\nmissionFile: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 73
        },
        {
          "path": "dist/index.d.ts",
          "line": 281
        },
        {
          "path": "dist/tools/extract-template.d.ts",
          "line": 41
        },
        {
          "path": "dist/tools/score-quality.d.ts",
          "line": 25
        }
      ]
    },
    {
      "snippet": "inputSchema: {\ntype: string;\nproperties: {\nmissionFile: {\ntype: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 74
        },
        {
          "path": "dist/index.d.ts",
          "line": 282
        },
        {
          "path": "dist/tools/extract-template.d.ts",
          "line": 42
        },
        {
          "path": "dist/tools/score-quality.d.ts",
          "line": 26
        }
      ]
    },
    {
      "snippet": "type: string;\nproperties: {\nmissionFile: {\ntype: string;\ndescription: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 75
        },
        {
          "path": "dist/index.d.ts",
          "line": 283
        },
        {
          "path": "dist/tools/extract-template.d.ts",
          "line": 43
        },
        {
          "path": "dist/tools/score-quality.d.ts",
          "line": 27
        }
      ]
    },
    {
      "snippet": "properties: {\nmissionFile: {\ntype: string;\ndescription: string;\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 76
        },
        {
          "path": "dist/index.d.ts",
          "line": 284
        },
        {
          "path": "dist/tools/extract-template.d.ts",
          "line": 44
        },
        {
          "path": "dist/tools/score-quality.d.ts",
          "line": 28
        }
      ]
    },
    {
      "snippet": "missionFile: {\ntype: string;\ndescription: string;\n};\ntemplateName: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 77
        },
        {
          "path": "dist/tools/extract-template.d.ts",
          "line": 45
        }
      ]
    },
    {
      "snippet": "type: string;\ndescription: string;\n};\ntemplateName: {\ntype: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 78
        },
        {
          "path": "dist/tools/extract-template.d.ts",
          "line": 46
        }
      ]
    },
    {
      "snippet": "description: string;\n};\ntemplateName: {\ntype: string;\ndescription: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 79
        },
        {
          "path": "dist/tools/extract-template.d.ts",
          "line": 47
        }
      ]
    },
    {
      "snippet": "};\ntemplateName: {\ntype: string;\ndescription: string;\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 80
        },
        {
          "path": "dist/tools/extract-template.d.ts",
          "line": 48
        }
      ]
    },
    {
      "snippet": "templateName: {\ntype: string;\ndescription: string;\n};\nauthor: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 81
        },
        {
          "path": "dist/tools/extract-template.d.ts",
          "line": 49
        }
      ]
    },
    {
      "snippet": "type: string;\ndescription: string;\n};\nauthor: {\ntype: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 82
        },
        {
          "path": "dist/tools/extract-template.d.ts",
          "line": 50
        }
      ]
    },
    {
      "snippet": "description: string;\n};\nauthor: {\ntype: string;\ndescription: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 83
        },
        {
          "path": "dist/tools/extract-template.d.ts",
          "line": 51
        }
      ]
    },
    {
      "snippet": "};\nauthor: {\ntype: string;\ndescription: string;\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 84
        },
        {
          "path": "dist/tools/extract-template.d.ts",
          "line": 52
        }
      ]
    },
    {
      "snippet": "author: {\ntype: string;\ndescription: string;\n};\noutputDir: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 85
        },
        {
          "path": "dist/tools/extract-template.d.ts",
          "line": 53
        }
      ]
    },
    {
      "snippet": "type: string;\ndescription: string;\n};\noutputDir: {\ntype: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 86
        },
        {
          "path": "dist/tools/extract-template.d.ts",
          "line": 54
        }
      ]
    },
    {
      "snippet": "description: string;\n};\noutputDir: {\ntype: string;\ndescription: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 87
        },
        {
          "path": "dist/tools/extract-template.d.ts",
          "line": 55
        }
      ]
    },
    {
      "snippet": "};\noutputDir: {\ntype: string;\ndescription: string;\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 88
        },
        {
          "path": "dist/tools/extract-template.d.ts",
          "line": 56
        }
      ]
    },
    {
      "snippet": "outputDir: {\ntype: string;\ndescription: string;\n};\nconfidenceThreshold: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 89
        },
        {
          "path": "dist/tools/extract-template.d.ts",
          "line": 57
        }
      ]
    },
    {
      "snippet": "type: string;\ndescription: string;\n};\nconfidenceThreshold: {\ntype: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 90
        },
        {
          "path": "dist/tools/extract-template.d.ts",
          "line": 58
        }
      ]
    },
    {
      "snippet": "description: string;\n};\nconfidenceThreshold: {\ntype: string;\ndescription: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 91
        },
        {
          "path": "dist/tools/extract-template.d.ts",
          "line": 59
        }
      ]
    },
    {
      "snippet": "};\nconfidenceThreshold: {\ntype: string;\ndescription: string;\nminimum: number;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 92
        },
        {
          "path": "dist/tools/extract-template.d.ts",
          "line": 60
        }
      ]
    },
    {
      "snippet": "confidenceThreshold: {\ntype: string;\ndescription: string;\nminimum: number;\nmaximum: number;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 93
        },
        {
          "path": "dist/tools/extract-template.d.ts",
          "line": 61
        }
      ]
    },
    {
      "snippet": "type: string;\ndescription: string;\nminimum: number;\nmaximum: number;\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 94
        },
        {
          "path": "dist/tools/extract-template.d.ts",
          "line": 62
        }
      ]
    },
    {
      "snippet": "description: string;\nminimum: number;\nmaximum: number;\n};\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 95
        },
        {
          "path": "dist/tools/extract-template.d.ts",
          "line": 63
        }
      ]
    },
    {
      "snippet": "minimum: number;\nmaximum: number;\n};\n};\nrequired: string[];",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 96
        },
        {
          "path": "dist/tools/extract-template.d.ts",
          "line": 64
        }
      ]
    },
    {
      "snippet": "maximum: number;\n};\n};\nrequired: string[];\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 97
        },
        {
          "path": "dist/tools/extract-template.d.ts",
          "line": 65
        }
      ]
    },
    {
      "snippet": "};\n};\nrequired: string[];\n};\n}, {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 98
        },
        {
          "path": "dist/index.d.ts",
          "line": 146
        },
        {
          "path": "dist/index.d.ts",
          "line": 203
        }
      ]
    },
    {
      "snippet": "};\nrequired: string[];\n};\n}, {\nname: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 99
        },
        {
          "path": "dist/index.d.ts",
          "line": 147
        }
      ]
    },
    {
      "snippet": "required: string[];\n};\n}, {\nname: string;\ndescription: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 100
        },
        {
          "path": "dist/index.d.ts",
          "line": 148
        }
      ]
    },
    {
      "snippet": "description: string;\ninputSchema: {\ntype: string;\nproperties: {\ntemplatePath: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 104
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 71
        }
      ]
    },
    {
      "snippet": "inputSchema: {\ntype: string;\nproperties: {\ntemplatePath: {\ntype: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 105
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 72
        }
      ]
    },
    {
      "snippet": "type: string;\nproperties: {\ntemplatePath: {\ntype: string;\ndescription: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 106
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 73
        }
      ]
    },
    {
      "snippet": "properties: {\ntemplatePath: {\ntype: string;\ndescription: string;\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 107
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 74
        }
      ]
    },
    {
      "snippet": "templatePath: {\ntype: string;\ndescription: string;\n};\nbaseDir: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 108
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 75
        }
      ]
    },
    {
      "snippet": "type: string;\ndescription: string;\n};\nbaseDir: {\ntype: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 109
        },
        {
          "path": "dist/index.d.ts",
          "line": 184
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 93
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 76
        }
      ]
    },
    {
      "snippet": "description: string;\n};\nbaseDir: {\ntype: string;\ndescription: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 110
        },
        {
          "path": "dist/index.d.ts",
          "line": 185
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 94
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 77
        }
      ]
    },
    {
      "snippet": "};\nbaseDir: {\ntype: string;\ndescription: string;\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 111
        },
        {
          "path": "dist/index.d.ts",
          "line": 186
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 95
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 78
        }
      ]
    },
    {
      "snippet": "baseDir: {\ntype: string;\ndescription: string;\n};\nskipSignatureVerification: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 112
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 79
        }
      ]
    },
    {
      "snippet": "type: string;\ndescription: string;\n};\nskipSignatureVerification: {\ntype: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 113
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 80
        }
      ]
    },
    {
      "snippet": "description: string;\n};\nskipSignatureVerification: {\ntype: string;\ndescription: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 114
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 81
        }
      ]
    },
    {
      "snippet": "};\nskipSignatureVerification: {\ntype: string;\ndescription: string;\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 115
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 82
        }
      ]
    },
    {
      "snippet": "skipSignatureVerification: {\ntype: string;\ndescription: string;\n};\ntrustLevel: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 116
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 83
        }
      ]
    },
    {
      "snippet": "type: string;\ndescription: string;\n};\ntrustLevel: {\ntype: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 117
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 84
        }
      ]
    },
    {
      "snippet": "description: string;\n};\ntrustLevel: {\ntype: string;\nenum: string[];",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 118
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 85
        }
      ]
    },
    {
      "snippet": "};\ntrustLevel: {\ntype: string;\nenum: string[];\ndescription: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 119
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 86
        }
      ]
    },
    {
      "snippet": "trustLevel: {\ntype: string;\nenum: string[];\ndescription: string;\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 120
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 87
        }
      ]
    },
    {
      "snippet": "type: string;\nenum: string[];\ndescription: string;\n};\nmaxResourceMemory: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 121
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 88
        }
      ]
    },
    {
      "snippet": "enum: string[];\ndescription: string;\n};\nmaxResourceMemory: {\ntype: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 122
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 89
        }
      ]
    },
    {
      "snippet": "description: string;\n};\nmaxResourceMemory: {\ntype: string;\ndescription: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 123
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 90
        }
      ]
    },
    {
      "snippet": "};\nmaxResourceMemory: {\ntype: string;\ndescription: string;\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 124
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 91
        }
      ]
    },
    {
      "snippet": "maxResourceMemory: {\ntype: string;\ndescription: string;\n};\nmaxResourceCpu: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 125
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 92
        }
      ]
    },
    {
      "snippet": "type: string;\ndescription: string;\n};\nmaxResourceCpu: {\ntype: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 126
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 93
        }
      ]
    },
    {
      "snippet": "description: string;\n};\nmaxResourceCpu: {\ntype: string;\ndescription: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 127
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 94
        }
      ]
    },
    {
      "snippet": "};\nmaxResourceCpu: {\ntype: string;\ndescription: string;\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 128
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 95
        }
      ]
    },
    {
      "snippet": "maxResourceCpu: {\ntype: string;\ndescription: string;\n};\nallowedActions: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 129
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 96
        }
      ]
    },
    {
      "snippet": "type: string;\ndescription: string;\n};\nallowedActions: {\ntype: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 130
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 97
        }
      ]
    },
    {
      "snippet": "description: string;\n};\nallowedActions: {\ntype: string;\nitems: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 131
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 98
        }
      ]
    },
    {
      "snippet": "};\nallowedActions: {\ntype: string;\nitems: {\ntype: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 132
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 99
        }
      ]
    },
    {
      "snippet": "allowedActions: {\ntype: string;\nitems: {\ntype: string;\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 133
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 100
        }
      ]
    },
    {
      "snippet": "type: string;\nitems: {\ntype: string;\n};\ndescription: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 134
        },
        {
          "path": "dist/index.d.ts",
          "line": 141
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 101
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 108
        }
      ]
    },
    {
      "snippet": "items: {\ntype: string;\n};\ndescription: string;\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 135
        },
        {
          "path": "dist/index.d.ts",
          "line": 142
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 102
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 109
        }
      ]
    },
    {
      "snippet": "type: string;\n};\ndescription: string;\n};\nurlAllowlist: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 136
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 103
        }
      ]
    },
    {
      "snippet": "};\ndescription: string;\n};\nurlAllowlist: {\ntype: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 137
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 104
        }
      ]
    },
    {
      "snippet": "description: string;\n};\nurlAllowlist: {\ntype: string;\nitems: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 138
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 105
        }
      ]
    },
    {
      "snippet": "};\nurlAllowlist: {\ntype: string;\nitems: {\ntype: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 139
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 106
        }
      ]
    },
    {
      "snippet": "urlAllowlist: {\ntype: string;\nitems: {\ntype: string;\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 140
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 107
        }
      ]
    },
    {
      "snippet": "type: string;\n};\ndescription: string;\n};\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 143
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 110
        }
      ]
    },
    {
      "snippet": "};\ndescription: string;\n};\n};\nrequired: string[];",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 144
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 111
        }
      ]
    },
    {
      "snippet": "description: string;\n};\n};\nrequired: string[];\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 145
        },
        {
          "path": "dist/index.d.ts",
          "line": 202
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 111
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 112
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 40
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 92
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 146
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 184
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 214
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 236
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 265
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 282
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 299
        }
      ]
    },
    {
      "snippet": "description: string;\ninputSchema: {\ntype: string;\nproperties: {\ntemplate: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 152
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 61
        }
      ]
    },
    {
      "snippet": "inputSchema: {\ntype: string;\nproperties: {\ntemplate: {\ntype: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 153
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 62
        }
      ]
    },
    {
      "snippet": "type: string;\nproperties: {\ntemplate: {\ntype: string;\ndescription: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 154
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 63
        }
      ]
    },
    {
      "snippet": "properties: {\ntemplate: {\ntype: string;\ndescription: string;\nrequired: string[];",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 155
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 64
        }
      ]
    },
    {
      "snippet": "template: {\ntype: string;\ndescription: string;\nrequired: string[];\nproperties: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 156
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 65
        }
      ]
    },
    {
      "snippet": "type: string;\ndescription: string;\nrequired: string[];\nproperties: {\napiVersion: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 157
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 66
        }
      ]
    },
    {
      "snippet": "description: string;\nrequired: string[];\nproperties: {\napiVersion: {\ntype: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 158
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 67
        }
      ]
    },
    {
      "snippet": "required: string[];\nproperties: {\napiVersion: {\ntype: string;\nconst: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 159
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 68
        }
      ]
    },
    {
      "snippet": "properties: {\napiVersion: {\ntype: string;\nconst: string;\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 160
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 69
        }
      ]
    },
    {
      "snippet": "apiVersion: {\ntype: string;\nconst: string;\n};\nkind: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 161
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 70
        }
      ]
    },
    {
      "snippet": "type: string;\nconst: string;\n};\nkind: {\ntype: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 162
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 71
        }
      ]
    },
    {
      "snippet": "const: string;\n};\nkind: {\ntype: string;\nconst: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 163
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 72
        }
      ]
    },
    {
      "snippet": "};\nkind: {\ntype: string;\nconst: string;\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 164
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 73
        }
      ]
    },
    {
      "snippet": "kind: {\ntype: string;\nconst: string;\n};\nmetadata: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 165
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 74
        }
      ]
    },
    {
      "snippet": "type: string;\nconst: string;\n};\nmetadata: {\ntype: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 166
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 75
        }
      ]
    },
    {
      "snippet": "const: string;\n};\nmetadata: {\ntype: string;\ndescription: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 167
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 76
        }
      ]
    },
    {
      "snippet": "};\nmetadata: {\ntype: string;\ndescription: string;\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 168
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 77
        }
      ]
    },
    {
      "snippet": "metadata: {\ntype: string;\ndescription: string;\n};\nspec: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 169
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 78
        }
      ]
    },
    {
      "snippet": "type: string;\ndescription: string;\n};\nspec: {\ntype: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 170
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 79
        }
      ]
    },
    {
      "snippet": "description: string;\n};\nspec: {\ntype: string;\ndescription: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 171
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 80
        }
      ]
    },
    {
      "snippet": "};\nspec: {\ntype: string;\ndescription: string;\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 172
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 81
        }
      ]
    },
    {
      "snippet": "spec: {\ntype: string;\ndescription: string;\n};\ndependencies: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 173
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 82
        }
      ]
    },
    {
      "snippet": "type: string;\ndescription: string;\n};\ndependencies: {\ntype: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 174
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 83
        }
      ]
    },
    {
      "snippet": "description: string;\n};\ndependencies: {\ntype: string;\ndescription: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 175
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 84
        }
      ]
    },
    {
      "snippet": "};\ndependencies: {\ntype: string;\ndescription: string;\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 176
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 85
        }
      ]
    },
    {
      "snippet": "dependencies: {\ntype: string;\ndescription: string;\n};\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 177
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 86
        }
      ]
    },
    {
      "snippet": "type: string;\ndescription: string;\n};\n};\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 178
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 87
        }
      ]
    },
    {
      "snippet": "description: string;\n};\n};\n};\noutputPath: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 179
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 88
        }
      ]
    },
    {
      "snippet": "};\n};\n};\noutputPath: {\ntype: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 180
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 89
        }
      ]
    },
    {
      "snippet": "};\n};\noutputPath: {\ntype: string;\ndescription: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 181
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 90
        }
      ]
    },
    {
      "snippet": "};\noutputPath: {\ntype: string;\ndescription: string;\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 182
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 91
        }
      ]
    },
    {
      "snippet": "outputPath: {\ntype: string;\ndescription: string;\n};\nbaseDir: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 183
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 92
        }
      ]
    },
    {
      "snippet": "baseDir: {\ntype: string;\ndescription: string;\n};\nformat: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 187
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 96
        }
      ]
    },
    {
      "snippet": "type: string;\ndescription: string;\n};\nformat: {\ntype: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 188
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 97
        }
      ]
    },
    {
      "snippet": "description: string;\n};\nformat: {\ntype: string;\nenum: string[];",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 189
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 98
        }
      ]
    },
    {
      "snippet": "};\nformat: {\ntype: string;\nenum: string[];\ndescription: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 190
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 99
        }
      ]
    },
    {
      "snippet": "format: {\ntype: string;\nenum: string[];\ndescription: string;\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 191
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 100
        }
      ]
    },
    {
      "snippet": "type: string;\nenum: string[];\ndescription: string;\n};\nincludeComments: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 192
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 101
        }
      ]
    },
    {
      "snippet": "enum: string[];\ndescription: string;\n};\nincludeComments: {\ntype: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 193
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 102
        }
      ]
    },
    {
      "snippet": "description: string;\n};\nincludeComments: {\ntype: string;\ndescription: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 194
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 103
        }
      ]
    },
    {
      "snippet": "};\nincludeComments: {\ntype: string;\ndescription: string;\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 195
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 104
        }
      ]
    },
    {
      "snippet": "includeComments: {\ntype: string;\ndescription: string;\n};\npretty: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 196
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 105
        }
      ]
    },
    {
      "snippet": "type: string;\ndescription: string;\n};\npretty: {\ntype: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 197
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 106
        }
      ]
    },
    {
      "snippet": "description: string;\n};\npretty: {\ntype: string;\ndescription: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 198
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 107
        }
      ]
    },
    {
      "snippet": "};\npretty: {\ntype: string;\ndescription: string;\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 199
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 108
        }
      ]
    },
    {
      "snippet": "pretty: {\ntype: string;\ndescription: string;\n};\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 200
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 109
        }
      ]
    },
    {
      "snippet": "type: string;\ndescription: string;\n};\n};\nrequired: string[];",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 201
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 110
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 39
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 91
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 145
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 183
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 213
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 235
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 264
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 281
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 298
        }
      ]
    },
    {
      "snippet": "readonly name: \"combine_packs\";\nreadonly description: string;\nreadonly inputSchema: {\nreadonly type: \"object\";\nreadonly required: readonly [\"packNames\"];",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 208
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 42
        }
      ]
    },
    {
      "snippet": "readonly description: string;\nreadonly inputSchema: {\nreadonly type: \"object\";\nreadonly required: readonly [\"packNames\"];\nreadonly properties: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 209
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 43
        }
      ]
    },
    {
      "snippet": "readonly inputSchema: {\nreadonly type: \"object\";\nreadonly required: readonly [\"packNames\"];\nreadonly properties: {\nreadonly packNames: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 210
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 44
        }
      ]
    },
    {
      "snippet": "readonly type: \"object\";\nreadonly required: readonly [\"packNames\"];\nreadonly properties: {\nreadonly packNames: {\nreadonly type: \"array\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 211
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 45
        }
      ]
    },
    {
      "snippet": "readonly required: readonly [\"packNames\"];\nreadonly properties: {\nreadonly packNames: {\nreadonly type: \"array\";\nreadonly items: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 212
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 46
        }
      ]
    },
    {
      "snippet": "readonly properties: {\nreadonly packNames: {\nreadonly type: \"array\";\nreadonly items: {\nreadonly type: \"string\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 213
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 47
        }
      ]
    },
    {
      "snippet": "readonly packNames: {\nreadonly type: \"array\";\nreadonly items: {\nreadonly type: \"string\";\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 214
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 48
        }
      ]
    },
    {
      "snippet": "readonly type: \"array\";\nreadonly items: {\nreadonly type: \"string\";\n};\nreadonly minItems: 1;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 215
        },
        {
          "path": "dist/schemas/generic-mission.d.ts",
          "line": 94
        },
        {
          "path": "dist/schemas/generic-mission.d.ts",
          "line": 102
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 49
        }
      ]
    },
    {
      "snippet": "readonly items: {\nreadonly type: \"string\";\n};\nreadonly minItems: 1;\nreadonly description: \"Array of domain pack names to combine (use list_available_domains to see options)\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 216
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 50
        }
      ]
    },
    {
      "snippet": "readonly type: \"string\";\n};\nreadonly minItems: 1;\nreadonly description: \"Array of domain pack names to combine (use list_available_domains to see options)\";\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 217
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 51
        }
      ]
    },
    {
      "snippet": "};\nreadonly minItems: 1;\nreadonly description: \"Array of domain pack names to combine (use list_available_domains to see options)\";\n};\nreadonly strategy: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 218
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 52
        }
      ]
    },
    {
      "snippet": "readonly minItems: 1;\nreadonly description: \"Array of domain pack names to combine (use list_available_domains to see options)\";\n};\nreadonly strategy: {\nreadonly type: \"string\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 219
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 53
        }
      ]
    },
    {
      "snippet": "readonly description: \"Array of domain pack names to combine (use list_available_domains to see options)\";\n};\nreadonly strategy: {\nreadonly type: \"string\";\nreadonly enum: readonly [\"deep-merge\", \"over",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 220
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 54
        }
      ]
    },
    {
      "snippet": "};\nreadonly strategy: {\nreadonly type: \"string\";\nreadonly enum: readonly [\"deep-merge\", \"override\", \"selective\"];\nreadonly default: \"deep-merge\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 221
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 55
        }
      ]
    },
    {
      "snippet": "readonly strategy: {\nreadonly type: \"string\";\nreadonly enum: readonly [\"deep-merge\", \"override\", \"selective\"];\nreadonly default: \"deep-merge\";\nreadonly description: \"Merge strategy: \\\"deep-merge\\\" (re",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 222
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 56
        }
      ]
    },
    {
      "snippet": "readonly type: \"string\";\nreadonly enum: readonly [\"deep-merge\", \"override\", \"selective\"];\nreadonly default: \"deep-merge\";\nreadonly description: \"Merge strategy: \\\"deep-merge\\\" (recursive merge), \\\"ove",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 223
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 57
        }
      ]
    },
    {
      "snippet": "readonly enum: readonly [\"deep-merge\", \"override\", \"selective\"];\nreadonly default: \"deep-merge\";\nreadonly description: \"Merge strategy: \\\"deep-merge\\\" (recursive merge), \\\"override\\\" (last wins), or \\",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 224
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 58
        }
      ]
    },
    {
      "snippet": "readonly default: \"deep-merge\";\nreadonly description: \"Merge strategy: \\\"deep-merge\\\" (recursive merge), \\\"override\\\" (last wins), or \\\"selective\\\" (user-controlled)\";\n};\nreadonly overridePaths: {\nrea",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 225
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 59
        }
      ]
    },
    {
      "snippet": "readonly description: \"Merge strategy: \\\"deep-merge\\\" (recursive merge), \\\"override\\\" (last wins), or \\\"selective\\\" (user-controlled)\";\n};\nreadonly overridePaths: {\nreadonly type: \"array\";\nreadonly it",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 226
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 60
        }
      ]
    },
    {
      "snippet": "};\nreadonly overridePaths: {\nreadonly type: \"array\";\nreadonly items: {\nreadonly type: \"string\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 227
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 61
        }
      ]
    },
    {
      "snippet": "readonly overridePaths: {\nreadonly type: \"array\";\nreadonly items: {\nreadonly type: \"string\";\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 228
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 62
        }
      ]
    },
    {
      "snippet": "readonly type: \"array\";\nreadonly items: {\nreadonly type: \"string\";\n};\nreadonly description: \"For selective strategy: field paths to override (e.g., [\\\"spec.resources\\\"])\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 229
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 63
        }
      ]
    },
    {
      "snippet": "readonly items: {\nreadonly type: \"string\";\n};\nreadonly description: \"For selective strategy: field paths to override (e.g., [\\\"spec.resources\\\"])\";\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 230
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 64
        }
      ]
    },
    {
      "snippet": "readonly type: \"string\";\n};\nreadonly description: \"For selective strategy: field paths to override (e.g., [\\\"spec.resources\\\"])\";\n};\nreadonly mergePaths: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 231
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 65
        }
      ]
    },
    {
      "snippet": "};\nreadonly description: \"For selective strategy: field paths to override (e.g., [\\\"spec.resources\\\"])\";\n};\nreadonly mergePaths: {\nreadonly type: \"array\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 232
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 66
        }
      ]
    },
    {
      "snippet": "readonly description: \"For selective strategy: field paths to override (e.g., [\\\"spec.resources\\\"])\";\n};\nreadonly mergePaths: {\nreadonly type: \"array\";\nreadonly items: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 233
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 67
        }
      ]
    },
    {
      "snippet": "};\nreadonly mergePaths: {\nreadonly type: \"array\";\nreadonly items: {\nreadonly type: \"string\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 234
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 68
        }
      ]
    },
    {
      "snippet": "readonly mergePaths: {\nreadonly type: \"array\";\nreadonly items: {\nreadonly type: \"string\";\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 235
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 69
        }
      ]
    },
    {
      "snippet": "readonly type: \"array\";\nreadonly items: {\nreadonly type: \"string\";\n};\nreadonly description: \"For selective strategy: field paths to merge (e.g., [\\\"spec.dependencies\\\"])\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 236
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 70
        }
      ]
    },
    {
      "snippet": "readonly items: {\nreadonly type: \"string\";\n};\nreadonly description: \"For selective strategy: field paths to merge (e.g., [\\\"spec.dependencies\\\"])\";\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 237
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 71
        }
      ]
    },
    {
      "snippet": "readonly type: \"string\";\n};\nreadonly description: \"For selective strategy: field paths to merge (e.g., [\\\"spec.dependencies\\\"])\";\n};\nreadonly resolveDependencies: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 238
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 72
        }
      ]
    },
    {
      "snippet": "};\nreadonly description: \"For selective strategy: field paths to merge (e.g., [\\\"spec.dependencies\\\"])\";\n};\nreadonly resolveDependencies: {\nreadonly type: \"boolean\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 239
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 73
        }
      ]
    },
    {
      "snippet": "readonly description: \"For selective strategy: field paths to merge (e.g., [\\\"spec.dependencies\\\"])\";\n};\nreadonly resolveDependencies: {\nreadonly type: \"boolean\";\nreadonly default: true;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 240
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 74
        }
      ]
    },
    {
      "snippet": "};\nreadonly resolveDependencies: {\nreadonly type: \"boolean\";\nreadonly default: true;\nreadonly description: \"Whether to automatically resolve and include dependencies\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 241
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 75
        }
      ]
    },
    {
      "snippet": "readonly resolveDependencies: {\nreadonly type: \"boolean\";\nreadonly default: true;\nreadonly description: \"Whether to automatically resolve and include dependencies\";\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 242
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 76
        }
      ]
    },
    {
      "snippet": "readonly type: \"boolean\";\nreadonly default: true;\nreadonly description: \"Whether to automatically resolve and include dependencies\";\n};\nreadonly format: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 243
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 77
        }
      ]
    },
    {
      "snippet": "readonly default: true;\nreadonly description: \"Whether to automatically resolve and include dependencies\";\n};\nreadonly format: {\nreadonly type: \"string\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 244
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 78
        }
      ]
    },
    {
      "snippet": "readonly description: \"Whether to automatically resolve and include dependencies\";\n};\nreadonly format: {\nreadonly type: \"string\";\nreadonly enum: readonly [\"yaml\", \"json\"];",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 245
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 79
        }
      ]
    },
    {
      "snippet": "};\nreadonly format: {\nreadonly type: \"string\";\nreadonly enum: readonly [\"yaml\", \"json\"];\nreadonly default: \"yaml\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 246
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 80
        }
      ]
    },
    {
      "snippet": "readonly format: {\nreadonly type: \"string\";\nreadonly enum: readonly [\"yaml\", \"json\"];\nreadonly default: \"yaml\";\nreadonly description: \"Output format for the combined pack\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 247
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 81
        }
      ]
    },
    {
      "snippet": "readonly type: \"string\";\nreadonly enum: readonly [\"yaml\", \"json\"];\nreadonly default: \"yaml\";\nreadonly description: \"Output format for the combined pack\";\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 248
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 82
        }
      ]
    },
    {
      "snippet": "readonly enum: readonly [\"yaml\", \"json\"];\nreadonly default: \"yaml\";\nreadonly description: \"Output format for the combined pack\";\n};\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 249
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 83
        }
      ]
    },
    {
      "snippet": "readonly default: \"yaml\";\nreadonly description: \"Output format for the combined pack\";\n};\n};\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 250
        },
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 84
        }
      ]
    },
    {
      "snippet": "description: string;\ninputSchema: {\ntype: string;\nproperties: {\nmissionDirectory: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 257
        },
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 44
        }
      ]
    },
    {
      "snippet": "inputSchema: {\ntype: string;\nproperties: {\nmissionDirectory: {\ntype: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 258
        },
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 45
        }
      ]
    },
    {
      "snippet": "type: string;\nproperties: {\nmissionDirectory: {\ntype: string;\ndescription: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 259
        },
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 46
        }
      ]
    },
    {
      "snippet": "properties: {\nmissionDirectory: {\ntype: string;\ndescription: string;\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 260
        },
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 47
        }
      ]
    },
    {
      "snippet": "missionDirectory: {\ntype: string;\ndescription: string;\n};\nincludeInferred: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 261
        },
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 48
        }
      ]
    },
    {
      "snippet": "type: string;\ndescription: string;\n};\nincludeInferred: {\ntype: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 262
        },
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 49
        }
      ]
    },
    {
      "snippet": "description: string;\n};\nincludeInferred: {\ntype: string;\ndescription: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 263
        },
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 50
        }
      ]
    },
    {
      "snippet": "};\nincludeInferred: {\ntype: string;\ndescription: string;\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 264
        },
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 51
        }
      ]
    },
    {
      "snippet": "includeInferred: {\ntype: string;\ndescription: string;\n};\nminConfidence: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 265
        },
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 52
        }
      ]
    },
    {
      "snippet": "type: string;\ndescription: string;\n};\nminConfidence: {\ntype: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 266
        },
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 53
        }
      ]
    },
    {
      "snippet": "description: string;\n};\nminConfidence: {\ntype: string;\nminimum: number;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 267
        },
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 54
        }
      ]
    },
    {
      "snippet": "};\nminConfidence: {\ntype: string;\nminimum: number;\nmaximum: number;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 268
        },
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 55
        }
      ]
    },
    {
      "snippet": "minConfidence: {\ntype: string;\nminimum: number;\nmaximum: number;\ndescription: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 269
        },
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 56
        }
      ]
    },
    {
      "snippet": "type: string;\nminimum: number;\nmaximum: number;\ndescription: string;\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 270
        },
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 57
        }
      ]
    },
    {
      "snippet": "minimum: number;\nmaximum: number;\ndescription: string;\n};\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 271
        },
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 58
        }
      ]
    },
    {
      "snippet": "maximum: number;\ndescription: string;\n};\n};\nrequired: string[];",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 272
        },
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 59
        }
      ]
    },
    {
      "snippet": "description: string;\n};\n};\nrequired: string[];\nadditionalProperties: boolean;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 273
        },
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 60
        }
      ]
    },
    {
      "snippet": "};\n};\nrequired: string[];\nadditionalProperties: boolean;\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 274
        },
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 61
        }
      ]
    },
    {
      "snippet": "missionFile: {\ntype: string;\ndescription: string;\n};\nverbose: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 285
        },
        {
          "path": "dist/tools/score-quality.d.ts",
          "line": 29
        }
      ]
    },
    {
      "snippet": "type: string;\ndescription: string;\n};\nverbose: {\ntype: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 286
        },
        {
          "path": "dist/tools/score-quality.d.ts",
          "line": 30
        }
      ]
    },
    {
      "snippet": "description: string;\n};\nverbose: {\ntype: string;\ndescription: string;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 287
        },
        {
          "path": "dist/tools/score-quality.d.ts",
          "line": 31
        }
      ]
    },
    {
      "snippet": "};\nverbose: {\ntype: string;\ndescription: string;\ndefault: boolean;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 288
        },
        {
          "path": "dist/tools/score-quality.d.ts",
          "line": 32
        }
      ]
    },
    {
      "snippet": "verbose: {\ntype: string;\ndescription: string;\ndefault: boolean;\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 289
        },
        {
          "path": "dist/tools/score-quality.d.ts",
          "line": 33
        }
      ]
    },
    {
      "snippet": "type: string;\ndescription: string;\ndefault: boolean;\n};\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 290
        },
        {
          "path": "dist/tools/score-quality.d.ts",
          "line": 34
        }
      ]
    },
    {
      "snippet": "description: string;\ndefault: boolean;\n};\n};\nrequired: string[];",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 291
        },
        {
          "path": "dist/tools/score-quality.d.ts",
          "line": 35
        }
      ]
    },
    {
      "snippet": "default: boolean;\n};\n};\nrequired: string[];\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 292
        },
        {
          "path": "dist/tools/score-quality.d.ts",
          "line": 36
        }
      ]
    },
    {
      "snippet": "};\n};\nrequired: string[];\n};\nhandler: typeof scoreQuality;",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 293
        },
        {
          "path": "dist/tools/score-quality.d.ts",
          "line": 37
        }
      ]
    },
    {
      "snippet": "readonly name: \"optimize_tokens\";\nreadonly description: \"Optimize mission content for token efficiency. Applies model-aware compression using a 4-pass pipeline: sanitization, structural refactoring, l",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 299
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 37
        }
      ]
    },
    {
      "snippet": "readonly description: \"Optimize mission content for token efficiency. Applies model-aware compression using a 4-pass pipeline: sanitization, structural refactoring, linguistic simplification, and mode",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 300
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 38
        }
      ]
    },
    {
      "snippet": "readonly inputSchema: {\nreadonly type: \"object\";\nreadonly required: readonly [\"missionFile\", \"targetModel\"];\nreadonly properties: {\nreadonly missionFile: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 301
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 39
        }
      ]
    },
    {
      "snippet": "readonly type: \"object\";\nreadonly required: readonly [\"missionFile\", \"targetModel\"];\nreadonly properties: {\nreadonly missionFile: {\nreadonly type: \"string\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 302
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 40
        }
      ]
    },
    {
      "snippet": "readonly required: readonly [\"missionFile\", \"targetModel\"];\nreadonly properties: {\nreadonly missionFile: {\nreadonly type: \"string\";\nreadonly description: \"Path to the mission file to optimize (YAML fo",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 303
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 41
        }
      ]
    },
    {
      "snippet": "readonly properties: {\nreadonly missionFile: {\nreadonly type: \"string\";\nreadonly description: \"Path to the mission file to optimize (YAML format)\";\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 304
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 42
        }
      ]
    },
    {
      "snippet": "readonly missionFile: {\nreadonly type: \"string\";\nreadonly description: \"Path to the mission file to optimize (YAML format)\";\n};\nreadonly targetModel: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 305
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 43
        }
      ]
    },
    {
      "snippet": "readonly type: \"string\";\nreadonly description: \"Path to the mission file to optimize (YAML format)\";\n};\nreadonly targetModel: {\nreadonly type: \"string\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 306
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 44
        }
      ]
    },
    {
      "snippet": "readonly description: \"Path to the mission file to optimize (YAML format)\";\n};\nreadonly targetModel: {\nreadonly type: \"string\";\nreadonly enum: readonly [\"claude\", \"gpt\", \"gemini\"];",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 307
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 45
        }
      ]
    },
    {
      "snippet": "};\nreadonly targetModel: {\nreadonly type: \"string\";\nreadonly enum: readonly [\"claude\", \"gpt\", \"gemini\"];\nreadonly description: \"Target AI model for optimization (determines output format)\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 308
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 46
        }
      ]
    },
    {
      "snippet": "readonly targetModel: {\nreadonly type: \"string\";\nreadonly enum: readonly [\"claude\", \"gpt\", \"gemini\"];\nreadonly description: \"Target AI model for optimization (determines output format)\";\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 309
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 47
        }
      ]
    },
    {
      "snippet": "readonly type: \"string\";\nreadonly enum: readonly [\"claude\", \"gpt\", \"gemini\"];\nreadonly description: \"Target AI model for optimization (determines output format)\";\n};\nreadonly compressionLevel: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 310
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 48
        }
      ]
    },
    {
      "snippet": "readonly enum: readonly [\"claude\", \"gpt\", \"gemini\"];\nreadonly description: \"Target AI model for optimization (determines output format)\";\n};\nreadonly compressionLevel: {\nreadonly type: \"string\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 311
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 49
        }
      ]
    },
    {
      "snippet": "readonly description: \"Target AI model for optimization (determines output format)\";\n};\nreadonly compressionLevel: {\nreadonly type: \"string\";\nreadonly enum: readonly [\"conservative\", \"balanced\", \"aggr",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 312
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 50
        }
      ]
    },
    {
      "snippet": "};\nreadonly compressionLevel: {\nreadonly type: \"string\";\nreadonly enum: readonly [\"conservative\", \"balanced\", \"aggressive\"];\nreadonly description: \"Compression level (default: balanced)\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 313
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 51
        }
      ]
    },
    {
      "snippet": "readonly compressionLevel: {\nreadonly type: \"string\";\nreadonly enum: readonly [\"conservative\", \"balanced\", \"aggressive\"];\nreadonly description: \"Compression level (default: balanced)\";\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 314
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 52
        }
      ]
    },
    {
      "snippet": "readonly type: \"string\";\nreadonly enum: readonly [\"conservative\", \"balanced\", \"aggressive\"];\nreadonly description: \"Compression level (default: balanced)\";\n};\nreadonly dryRun: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 315
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 53
        }
      ]
    },
    {
      "snippet": "readonly enum: readonly [\"conservative\", \"balanced\", \"aggressive\"];\nreadonly description: \"Compression level (default: balanced)\";\n};\nreadonly dryRun: {\nreadonly type: \"boolean\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 316
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 54
        }
      ]
    },
    {
      "snippet": "readonly description: \"Compression level (default: balanced)\";\n};\nreadonly dryRun: {\nreadonly type: \"boolean\";\nreadonly description: \"Preview mode - shows stats without applying changes (default: fals",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 317
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 55
        }
      ]
    },
    {
      "snippet": "};\nreadonly dryRun: {\nreadonly type: \"boolean\";\nreadonly description: \"Preview mode - shows stats without applying changes (default: false)\";\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 318
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 56
        }
      ]
    },
    {
      "snippet": "readonly dryRun: {\nreadonly type: \"boolean\";\nreadonly description: \"Preview mode - shows stats without applying changes (default: false)\";\n};\nreadonly preserveTags: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 319
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 57
        }
      ]
    },
    {
      "snippet": "readonly type: \"boolean\";\nreadonly description: \"Preview mode - shows stats without applying changes (default: false)\";\n};\nreadonly preserveTags: {\nreadonly type: \"array\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 320
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 58
        }
      ]
    },
    {
      "snippet": "readonly description: \"Preview mode - shows stats without applying changes (default: false)\";\n};\nreadonly preserveTags: {\nreadonly type: \"array\";\nreadonly items: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 321
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 59
        }
      ]
    },
    {
      "snippet": "};\nreadonly preserveTags: {\nreadonly type: \"array\";\nreadonly items: {\nreadonly type: \"string\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 322
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 60
        }
      ]
    },
    {
      "snippet": "readonly preserveTags: {\nreadonly type: \"array\";\nreadonly items: {\nreadonly type: \"string\";\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 323
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 61
        }
      ]
    },
    {
      "snippet": "readonly type: \"array\";\nreadonly items: {\nreadonly type: \"string\";\n};\nreadonly description: \"Custom XML tags to preserve from compression (e.g., [\\\"critical\\\", \\\"exact\\\"])\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 324
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 62
        }
      ]
    },
    {
      "snippet": "readonly items: {\nreadonly type: \"string\";\n};\nreadonly description: \"Custom XML tags to preserve from compression (e.g., [\\\"critical\\\", \\\"exact\\\"])\";\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 325
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 63
        }
      ]
    },
    {
      "snippet": "readonly type: \"string\";\n};\nreadonly description: \"Custom XML tags to preserve from compression (e.g., [\\\"critical\\\", \\\"exact\\\"])\";\n};\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 326
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 64
        }
      ]
    },
    {
      "snippet": "};\nreadonly description: \"Custom XML tags to preserve from compression (e.g., [\\\"critical\\\", \\\"exact\\\"])\";\n};\n};\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 327
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 65
        }
      ]
    },
    {
      "snippet": "readonly name: \"split_mission\";\nreadonly description: \"Automatically splits a large or complex mission into smaller, coherent sub-missions. This tool analyzes mission complexity and decomposes it usin",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 333
        },
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 63
        }
      ]
    },
    {
      "snippet": "readonly description: \"Automatically splits a large or complex mission into smaller, coherent sub-missions. This tool analyzes mission complexity and decomposes it using semantic-structural analysis w",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 334
        },
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 64
        }
      ]
    },
    {
      "snippet": "readonly inputSchema: {\nreadonly type: \"object\";\nreadonly required: readonly [\"missionFile\"];\nreadonly properties: {\nreadonly missionFile: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 335
        },
        {
          "path": "dist/index.d.ts",
          "line": 365
        },
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 65
        },
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 64
        }
      ]
    },
    {
      "snippet": "readonly type: \"object\";\nreadonly required: readonly [\"missionFile\"];\nreadonly properties: {\nreadonly missionFile: {\nreadonly type: \"string\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 336
        },
        {
          "path": "dist/index.d.ts",
          "line": 366
        },
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 66
        },
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 65
        }
      ]
    },
    {
      "snippet": "readonly required: readonly [\"missionFile\"];\nreadonly properties: {\nreadonly missionFile: {\nreadonly type: \"string\";\nreadonly description: \"Path to the mission file (YAML) to analyze and split\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 337
        },
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 67
        }
      ]
    },
    {
      "snippet": "readonly properties: {\nreadonly missionFile: {\nreadonly type: \"string\";\nreadonly description: \"Path to the mission file (YAML) to analyze and split\";\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 338
        },
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 68
        }
      ]
    },
    {
      "snippet": "readonly missionFile: {\nreadonly type: \"string\";\nreadonly description: \"Path to the mission file (YAML) to analyze and split\";\n};\nreadonly model: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 339
        },
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 69
        }
      ]
    },
    {
      "snippet": "readonly type: \"string\";\nreadonly description: \"Path to the mission file (YAML) to analyze and split\";\n};\nreadonly model: {\nreadonly type: \"string\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 340
        },
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 70
        }
      ]
    },
    {
      "snippet": "readonly description: \"Path to the mission file (YAML) to analyze and split\";\n};\nreadonly model: {\nreadonly type: \"string\";\nreadonly enum: readonly [\"claude\", \"gpt\", \"gemini\"];",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 341
        },
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 71
        }
      ]
    },
    {
      "snippet": "};\nreadonly model: {\nreadonly type: \"string\";\nreadonly enum: readonly [\"claude\", \"gpt\", \"gemini\"];\nreadonly description: \"Target AI model for token optimization (default: claude)\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 342
        },
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 72
        }
      ]
    },
    {
      "snippet": "readonly model: {\nreadonly type: \"string\";\nreadonly enum: readonly [\"claude\", \"gpt\", \"gemini\"];\nreadonly description: \"Target AI model for token optimization (default: claude)\";\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 343
        },
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 73
        }
      ]
    },
    {
      "snippet": "readonly type: \"string\";\nreadonly enum: readonly [\"claude\", \"gpt\", \"gemini\"];\nreadonly description: \"Target AI model for token optimization (default: claude)\";\n};\nreadonly maxSubMissions: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 344
        },
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 74
        }
      ]
    },
    {
      "snippet": "readonly enum: readonly [\"claude\", \"gpt\", \"gemini\"];\nreadonly description: \"Target AI model for token optimization (default: claude)\";\n};\nreadonly maxSubMissions: {\nreadonly type: \"number\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 345
        },
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 75
        }
      ]
    },
    {
      "snippet": "readonly description: \"Target AI model for token optimization (default: claude)\";\n};\nreadonly maxSubMissions: {\nreadonly type: \"number\";\nreadonly description: \"Maximum number of sub-missions to create",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 346
        },
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 76
        }
      ]
    },
    {
      "snippet": "};\nreadonly maxSubMissions: {\nreadonly type: \"number\";\nreadonly description: \"Maximum number of sub-missions to create (default: 10)\";\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 347
        },
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 77
        }
      ]
    },
    {
      "snippet": "readonly maxSubMissions: {\nreadonly type: \"number\";\nreadonly description: \"Maximum number of sub-missions to create (default: 10)\";\n};\nreadonly outputDir: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 348
        },
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 78
        }
      ]
    },
    {
      "snippet": "readonly type: \"number\";\nreadonly description: \"Maximum number of sub-missions to create (default: 10)\";\n};\nreadonly outputDir: {\nreadonly type: \"string\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 349
        },
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 79
        }
      ]
    },
    {
      "snippet": "readonly description: \"Maximum number of sub-missions to create (default: 10)\";\n};\nreadonly outputDir: {\nreadonly type: \"string\";\nreadonly description: \"Directory to save sub-mission files (default: s",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 350
        },
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 80
        }
      ]
    },
    {
      "snippet": "};\nreadonly outputDir: {\nreadonly type: \"string\";\nreadonly description: \"Directory to save sub-mission files (default: same as mission file)\";\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 351
        },
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 81
        }
      ]
    },
    {
      "snippet": "readonly outputDir: {\nreadonly type: \"string\";\nreadonly description: \"Directory to save sub-mission files (default: same as mission file)\";\n};\nreadonly preserveStructure: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 352
        },
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 82
        }
      ]
    },
    {
      "snippet": "readonly type: \"string\";\nreadonly description: \"Directory to save sub-mission files (default: same as mission file)\";\n};\nreadonly preserveStructure: {\nreadonly type: \"boolean\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 353
        },
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 83
        }
      ]
    },
    {
      "snippet": "readonly description: \"Directory to save sub-mission files (default: same as mission file)\";\n};\nreadonly preserveStructure: {\nreadonly type: \"boolean\";\nreadonly description: \"Preserve original mission",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 354
        },
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 84
        }
      ]
    },
    {
      "snippet": "};\nreadonly preserveStructure: {\nreadonly type: \"boolean\";\nreadonly description: \"Preserve original mission structure in sub-missions (default: true)\";\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 355
        },
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 85
        }
      ]
    },
    {
      "snippet": "readonly preserveStructure: {\nreadonly type: \"boolean\";\nreadonly description: \"Preserve original mission structure in sub-missions (default: true)\";\n};\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 356
        },
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 86
        }
      ]
    },
    {
      "snippet": "readonly type: \"boolean\";\nreadonly description: \"Preserve original mission structure in sub-missions (default: true)\";\n};\n};\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 357
        },
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 87
        }
      ]
    },
    {
      "snippet": "readonly name: \"suggest_splits\";\nreadonly description: \"Analyzes a mission for complexity and suggests optimal split points without actually splitting it. Use this to evaluate whether a mission should",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 363
        },
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 62
        }
      ]
    },
    {
      "snippet": "readonly description: \"Analyzes a mission for complexity and suggests optimal split points without actually splitting it. Use this to evaluate whether a mission should be split and where the natural b",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 364
        },
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 63
        }
      ]
    },
    {
      "snippet": "readonly required: readonly [\"missionFile\"];\nreadonly properties: {\nreadonly missionFile: {\nreadonly type: \"string\";\nreadonly description: \"Path to the mission file (YAML) to analyze\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 367
        },
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 66
        }
      ]
    },
    {
      "snippet": "readonly properties: {\nreadonly missionFile: {\nreadonly type: \"string\";\nreadonly description: \"Path to the mission file (YAML) to analyze\";\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 368
        },
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 67
        }
      ]
    },
    {
      "snippet": "readonly missionFile: {\nreadonly type: \"string\";\nreadonly description: \"Path to the mission file (YAML) to analyze\";\n};\nreadonly model: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 369
        },
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 68
        }
      ]
    },
    {
      "snippet": "readonly type: \"string\";\nreadonly description: \"Path to the mission file (YAML) to analyze\";\n};\nreadonly model: {\nreadonly type: \"string\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 370
        },
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 69
        }
      ]
    },
    {
      "snippet": "readonly description: \"Path to the mission file (YAML) to analyze\";\n};\nreadonly model: {\nreadonly type: \"string\";\nreadonly enum: readonly [\"claude\", \"gpt\", \"gemini\"];",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 371
        },
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 70
        }
      ]
    },
    {
      "snippet": "};\nreadonly model: {\nreadonly type: \"string\";\nreadonly enum: readonly [\"claude\", \"gpt\", \"gemini\"];\nreadonly description: \"Target AI model for analysis (default: claude)\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 372
        },
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 71
        }
      ]
    },
    {
      "snippet": "readonly model: {\nreadonly type: \"string\";\nreadonly enum: readonly [\"claude\", \"gpt\", \"gemini\"];\nreadonly description: \"Target AI model for analysis (default: claude)\";\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 373
        },
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 72
        }
      ]
    },
    {
      "snippet": "readonly type: \"string\";\nreadonly enum: readonly [\"claude\", \"gpt\", \"gemini\"];\nreadonly description: \"Target AI model for analysis (default: claude)\";\n};\nreadonly detailed: {",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 374
        },
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 73
        }
      ]
    },
    {
      "snippet": "readonly enum: readonly [\"claude\", \"gpt\", \"gemini\"];\nreadonly description: \"Target AI model for analysis (default: claude)\";\n};\nreadonly detailed: {\nreadonly type: \"boolean\";",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 375
        },
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 74
        }
      ]
    },
    {
      "snippet": "readonly description: \"Target AI model for analysis (default: claude)\";\n};\nreadonly detailed: {\nreadonly type: \"boolean\";\nreadonly description: \"Show detailed breakdown of all complexity components (d",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 376
        },
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 75
        }
      ]
    },
    {
      "snippet": "};\nreadonly detailed: {\nreadonly type: \"boolean\";\nreadonly description: \"Show detailed breakdown of all complexity components (default: false)\";\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 377
        },
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 76
        }
      ]
    },
    {
      "snippet": "readonly detailed: {\nreadonly type: \"boolean\";\nreadonly description: \"Show detailed breakdown of all complexity components (default: false)\";\n};\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 378
        },
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 77
        }
      ]
    },
    {
      "snippet": "readonly type: \"boolean\";\nreadonly description: \"Show detailed breakdown of all complexity components (default: false)\";\n};\n};\n};",
      "occurrences": [
        {
          "path": "dist/index.d.ts",
          "line": 379
        },
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 78
        }
      ]
    },
    {
      "snippet": "/**\n* Mission Protocol v2 MCP Server\n*\n* Main entry point for the MCP server that exposes domain discovery tools.\n* Uses stdio transport for Claude Desktop integration.",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 41
        },
        {
          "path": "src/index.ts",
          "line": 5
        }
      ]
    },
    {
      "snippet": "* Mission Protocol v2 MCP Server\n*\n* Main entry point for the MCP server that exposes domain discovery tools.\n* Uses stdio transport for Claude Desktop integration.\n*",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 42
        },
        {
          "path": "src/index.ts",
          "line": 6
        }
      ]
    },
    {
      "snippet": "*\n* Main entry point for the MCP server that exposes domain discovery tools.\n* Uses stdio transport for Claude Desktop integration.\n*\n* @module index",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 43
        },
        {
          "path": "src/index.ts",
          "line": 7
        }
      ]
    },
    {
      "snippet": "* Main entry point for the MCP server that exposes domain discovery tools.\n* Uses stdio transport for Claude Desktop integration.\n*\n* @module index\n*/",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 44
        },
        {
          "path": "src/index.ts",
          "line": 8
        }
      ]
    },
    {
      "snippet": "/**\n* MCP Server Configuration\n*/\nconst SERVER_CONFIG = {\nname: 'mission-protocol',",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 70
        },
        {
          "path": "src/index.ts",
          "line": 44
        }
      ]
    },
    {
      "snippet": "* MCP Server Configuration\n*/\nconst SERVER_CONFIG = {\nname: 'mission-protocol',\nversion: '2.0.0',",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 71
        },
        {
          "path": "src/index.ts",
          "line": 45
        }
      ]
    },
    {
      "snippet": "return {\nbaseDir,\ndefaultModel,\nloader,\nregistryParser: registry,",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 132
        },
        {
          "path": "src/index.ts",
          "line": 141
        }
      ]
    },
    {
      "snippet": "baseDir,\ndefaultModel,\nloader,\nregistryParser: registry,\npackCombiner,",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 133
        },
        {
          "path": "src/index.ts",
          "line": 142
        }
      ]
    },
    {
      "snippet": "defaultModel,\nloader,\nregistryParser: registry,\npackCombiner,\nlistDomainsTool,",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 134
        },
        {
          "path": "src/index.ts",
          "line": 143
        }
      ]
    },
    {
      "snippet": "loader,\nregistryParser: registry,\npackCombiner,\nlistDomainsTool,\ncreateMissionTool,",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 135
        },
        {
          "path": "src/index.ts",
          "line": 144
        }
      ]
    },
    {
      "snippet": "registryParser: registry,\npackCombiner,\nlistDomainsTool,\ncreateMissionTool,\ncombinePacksTool,",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 136
        },
        {
          "path": "src/index.ts",
          "line": 145
        }
      ]
    },
    {
      "snippet": "packCombiner,\nlistDomainsTool,\ncreateMissionTool,\ncombinePacksTool,\noptimizeTokensTool,",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 137
        },
        {
          "path": "src/index.ts",
          "line": 146
        }
      ]
    },
    {
      "snippet": "listDomainsTool,\ncreateMissionTool,\ncombinePacksTool,\noptimizeTokensTool,\nsplitMissionTool,",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 138
        },
        {
          "path": "src/index.ts",
          "line": 147
        }
      ]
    },
    {
      "snippet": "createMissionTool,\ncombinePacksTool,\noptimizeTokensTool,\nsplitMissionTool,\nsuggestSplitsTool,",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 139
        },
        {
          "path": "src/index.ts",
          "line": 148
        }
      ]
    },
    {
      "snippet": "combinePacksTool,\noptimizeTokensTool,\nsplitMissionTool,\nsuggestSplitsTool,\ntokenCounter,",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 140
        },
        {
          "path": "src/index.ts",
          "line": 149
        }
      ]
    },
    {
      "snippet": "optimizeTokensTool,\nsplitMissionTool,\nsuggestSplitsTool,\ntokenCounter,\n};",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 141
        },
        {
          "path": "src/index.ts",
          "line": 150
        }
      ]
    },
    {
      "snippet": "splitMissionTool,\nsuggestSplitsTool,\ntokenCounter,\n};\n}",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 142
        },
        {
          "path": "src/index.ts",
          "line": 151
        }
      ]
    },
    {
      "snippet": "return {\ncontent: [\n{\ntype: 'text',\ntext: formatted,",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 181
        },
        {
          "path": "dist/index.js",
          "line": 199
        },
        {
          "path": "dist/index.js",
          "line": 425
        },
        {
          "path": "dist/index.js",
          "line": 455
        },
        {
          "path": "src/index.ts",
          "line": 208
        },
        {
          "path": "src/index.ts",
          "line": 228
        },
        {
          "path": "src/index.ts",
          "line": 487
        },
        {
          "path": "src/index.ts",
          "line": 522
        }
      ]
    },
    {
      "snippet": "content: [\n{\ntype: 'text',\ntext: formatted,\n},",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 182
        },
        {
          "path": "dist/index.js",
          "line": 200
        },
        {
          "path": "dist/index.js",
          "line": 426
        },
        {
          "path": "dist/index.js",
          "line": 456
        },
        {
          "path": "src/index.ts",
          "line": 209
        },
        {
          "path": "src/index.ts",
          "line": 229
        },
        {
          "path": "src/index.ts",
          "line": 488
        },
        {
          "path": "src/index.ts",
          "line": 523
        }
      ]
    },
    {
      "snippet": "{\ntype: 'text',\ntext: formatted,\n},\n],",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 183
        },
        {
          "path": "dist/index.js",
          "line": 201
        },
        {
          "path": "dist/index.js",
          "line": 427
        },
        {
          "path": "dist/index.js",
          "line": 457
        },
        {
          "path": "src/index.ts",
          "line": 210
        },
        {
          "path": "src/index.ts",
          "line": 230
        },
        {
          "path": "src/index.ts",
          "line": 489
        },
        {
          "path": "src/index.ts",
          "line": 524
        }
      ]
    },
    {
      "snippet": "type: 'text',\ntext: formatted,\n},\n],\nstructuredContent: {",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 184
        },
        {
          "path": "dist/index.js",
          "line": 202
        },
        {
          "path": "dist/index.js",
          "line": 428
        },
        {
          "path": "dist/index.js",
          "line": 458
        },
        {
          "path": "src/index.ts",
          "line": 211
        },
        {
          "path": "src/index.ts",
          "line": 231
        },
        {
          "path": "src/index.ts",
          "line": 490
        },
        {
          "path": "src/index.ts",
          "line": 525
        }
      ]
    },
    {
      "snippet": "text: formatted,\n},\n],\nstructuredContent: {\nsuccess: true,",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 185
        },
        {
          "path": "dist/index.js",
          "line": 203
        },
        {
          "path": "dist/index.js",
          "line": 429
        },
        {
          "path": "dist/index.js",
          "line": 459
        },
        {
          "path": "src/index.ts",
          "line": 212
        },
        {
          "path": "src/index.ts",
          "line": 232
        },
        {
          "path": "src/index.ts",
          "line": 491
        },
        {
          "path": "src/index.ts",
          "line": 526
        }
      ]
    },
    {
      "snippet": "},\n],\nstructuredContent: {\nsuccess: true,\ndomains,",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 186
        },
        {
          "path": "src/index.ts",
          "line": 213
        }
      ]
    },
    {
      "snippet": "],\nstructuredContent: {\nsuccess: true,\ndomains,\n},",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 187
        },
        {
          "path": "src/index.ts",
          "line": 214
        }
      ]
    },
    {
      "snippet": "structuredContent: {\nsuccess: true,\ndomains,\n},\n};",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 188
        },
        {
          "path": "src/index.ts",
          "line": 215
        }
      ]
    },
    {
      "snippet": "success: true,\ndomains,\n},\n};\n}",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 189
        },
        {
          "path": "src/index.ts",
          "line": 216
        }
      ]
    },
    {
      "snippet": "},\n],\nstructuredContent: {\nsuccess: true,\nmission: missionYaml,",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 204
        },
        {
          "path": "src/index.ts",
          "line": 233
        }
      ]
    },
    {
      "snippet": "],\nstructuredContent: {\nsuccess: true,\nmission: missionYaml,\n},",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 205
        },
        {
          "path": "src/index.ts",
          "line": 234
        }
      ]
    },
    {
      "snippet": "structuredContent: {\nsuccess: true,\nmission: missionYaml,\n},\n};",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 206
        },
        {
          "path": "src/index.ts",
          "line": 235
        }
      ]
    },
    {
      "snippet": "success: true,\nmission: missionYaml,\n},\n};\n}",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 207
        },
        {
          "path": "src/index.ts",
          "line": 236
        }
      ]
    },
    {
      "snippet": "return {\ncontent: [\n{\ntype: 'text',\ntext: summary,",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 218
        },
        {
          "path": "dist/index.js",
          "line": 234
        },
        {
          "path": "dist/index.js",
          "line": 253
        },
        {
          "path": "dist/index.js",
          "line": 293
        },
        {
          "path": "dist/index.js",
          "line": 306
        },
        {
          "path": "dist/index.js",
          "line": 325
        },
        {
          "path": "dist/index.js",
          "line": 392
        },
        {
          "path": "src/index.ts",
          "line": 250
        },
        {
          "path": "src/index.ts",
          "line": 269
        },
        {
          "path": "src/index.ts",
          "line": 291
        },
        {
          "path": "src/index.ts",
          "line": 336
        },
        {
          "path": "src/index.ts",
          "line": 350
        },
        {
          "path": "src/index.ts",
          "line": 372
        },
        {
          "path": "src/index.ts",
          "line": 449
        }
      ]
    },
    {
      "snippet": "content: [\n{\ntype: 'text',\ntext: summary,\n},",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 219
        },
        {
          "path": "dist/index.js",
          "line": 235
        },
        {
          "path": "dist/index.js",
          "line": 254
        },
        {
          "path": "dist/index.js",
          "line": 294
        },
        {
          "path": "dist/index.js",
          "line": 307
        },
        {
          "path": "dist/index.js",
          "line": 326
        },
        {
          "path": "dist/index.js",
          "line": 393
        },
        {
          "path": "src/index.ts",
          "line": 251
        },
        {
          "path": "src/index.ts",
          "line": 270
        },
        {
          "path": "src/index.ts",
          "line": 292
        },
        {
          "path": "src/index.ts",
          "line": 337
        },
        {
          "path": "src/index.ts",
          "line": 351
        },
        {
          "path": "src/index.ts",
          "line": 373
        },
        {
          "path": "src/index.ts",
          "line": 450
        }
      ]
    },
    {
      "snippet": "{\ntype: 'text',\ntext: summary,\n},\n],",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 220
        },
        {
          "path": "dist/index.js",
          "line": 236
        },
        {
          "path": "dist/index.js",
          "line": 255
        },
        {
          "path": "dist/index.js",
          "line": 295
        },
        {
          "path": "dist/index.js",
          "line": 308
        },
        {
          "path": "dist/index.js",
          "line": 327
        },
        {
          "path": "dist/index.js",
          "line": 394
        },
        {
          "path": "src/index.ts",
          "line": 252
        },
        {
          "path": "src/index.ts",
          "line": 271
        },
        {
          "path": "src/index.ts",
          "line": 293
        },
        {
          "path": "src/index.ts",
          "line": 338
        },
        {
          "path": "src/index.ts",
          "line": 352
        },
        {
          "path": "src/index.ts",
          "line": 374
        },
        {
          "path": "src/index.ts",
          "line": 451
        }
      ]
    },
    {
      "snippet": "type: 'text',\ntext: summary,\n},\n],\nstructuredContent: { ...result },",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 221
        },
        {
          "path": "dist/index.js",
          "line": 296
        },
        {
          "path": "src/index.ts",
          "line": 253
        },
        {
          "path": "src/index.ts",
          "line": 339
        }
      ]
    },
    {
      "snippet": "text: summary,\n},\n],\nstructuredContent: { ...result },\n};",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 222
        },
        {
          "path": "dist/index.js",
          "line": 297
        },
        {
          "path": "src/index.ts",
          "line": 254
        },
        {
          "path": "src/index.ts",
          "line": 340
        }
      ]
    },
    {
      "snippet": "},\n],\nstructuredContent: { ...result },\n};\n}",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 223
        },
        {
          "path": "dist/index.js",
          "line": 298
        },
        {
          "path": "src/index.ts",
          "line": 255
        },
        {
          "path": "src/index.ts",
          "line": 341
        }
      ]
    },
    {
      "snippet": "type: 'text',\ntext: summary,\n},\n],\nstructuredContent: {",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 237
        },
        {
          "path": "dist/index.js",
          "line": 256
        },
        {
          "path": "dist/index.js",
          "line": 309
        },
        {
          "path": "dist/index.js",
          "line": 328
        },
        {
          "path": "dist/index.js",
          "line": 395
        },
        {
          "path": "src/index.ts",
          "line": 272
        },
        {
          "path": "src/index.ts",
          "line": 294
        },
        {
          "path": "src/index.ts",
          "line": 353
        },
        {
          "path": "src/index.ts",
          "line": 375
        },
        {
          "path": "src/index.ts",
          "line": 452
        }
      ]
    },
    {
      "snippet": "text: summary,\n},\n],\nstructuredContent: {\nsuccess: result.success,",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 238
        },
        {
          "path": "dist/index.js",
          "line": 257
        },
        {
          "path": "dist/index.js",
          "line": 329
        },
        {
          "path": "src/index.ts",
          "line": 273
        },
        {
          "path": "src/index.ts",
          "line": 295
        },
        {
          "path": "src/index.ts",
          "line": 376
        }
      ]
    },
    {
      "snippet": "},\n],\nstructuredContent: {\nsuccess: result.success,\nmessage: result.message,",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 239
        },
        {
          "path": "dist/index.js",
          "line": 258
        },
        {
          "path": "src/index.ts",
          "line": 274
        },
        {
          "path": "src/index.ts",
          "line": 296
        }
      ]
    },
    {
      "snippet": "],\nstructuredContent: {\nsuccess: result.success,\nmessage: result.message,\n},",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 240
        },
        {
          "path": "dist/index.js",
          "line": 259
        },
        {
          "path": "src/index.ts",
          "line": 275
        },
        {
          "path": "src/index.ts",
          "line": 297
        }
      ]
    },
    {
      "snippet": "structuredContent: {\nsuccess: result.success,\nmessage: result.message,\n},\n};",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 241
        },
        {
          "path": "dist/index.js",
          "line": 260
        },
        {
          "path": "src/index.ts",
          "line": 276
        },
        {
          "path": "src/index.ts",
          "line": 298
        }
      ]
    },
    {
      "snippet": "success: result.success,\nmessage: result.message,\n},\n};\n}",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 242
        },
        {
          "path": "dist/index.js",
          "line": 261
        },
        {
          "path": "src/index.ts",
          "line": 277
        },
        {
          "path": "src/index.ts",
          "line": 299
        }
      ]
    },
    {
      "snippet": "}\nreturn {\ncontent: [\n{\ntype: 'text',",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 292
        },
        {
          "path": "dist/index.js",
          "line": 391
        },
        {
          "path": "dist/index.js",
          "line": 424
        },
        {
          "path": "dist/index.js",
          "line": 454
        }
      ]
    },
    {
      "snippet": "text: summary,\n},\n],\nstructuredContent: {\nsuccess: true,",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 310
        },
        {
          "path": "dist/index.js",
          "line": 396
        },
        {
          "path": "src/index.ts",
          "line": 354
        },
        {
          "path": "src/index.ts",
          "line": 453
        }
      ]
    },
    {
      "snippet": "},\n],\nstructuredContent: {\nsuccess: true,\nsummary,",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 311
        },
        {
          "path": "src/index.ts",
          "line": 355
        }
      ]
    },
    {
      "snippet": "],\nstructuredContent: {\nsuccess: true,\nsummary,\n},",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 312
        },
        {
          "path": "src/index.ts",
          "line": 356
        }
      ]
    },
    {
      "snippet": "structuredContent: {\nsuccess: true,\nsummary,\n},\n};",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 313
        },
        {
          "path": "src/index.ts",
          "line": 357
        }
      ]
    },
    {
      "snippet": "success: true,\nsummary,\n},\n};\n}",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 314
        },
        {
          "path": "src/index.ts",
          "line": 358
        }
      ]
    },
    {
      "snippet": "},\n],\nstructuredContent: {\nsuccess: result.success,\nresult,",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 330
        },
        {
          "path": "src/index.ts",
          "line": 377
        }
      ]
    },
    {
      "snippet": "],\nstructuredContent: {\nsuccess: result.success,\nresult,\n},",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 331
        },
        {
          "path": "src/index.ts",
          "line": 378
        }
      ]
    },
    {
      "snippet": "structuredContent: {\nsuccess: result.success,\nresult,\n},\n};",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 332
        },
        {
          "path": "src/index.ts",
          "line": 379
        }
      ]
    },
    {
      "snippet": "success: result.success,\nresult,\n},\n};\n}",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 333
        },
        {
          "path": "src/index.ts",
          "line": 380
        }
      ]
    },
    {
      "snippet": "if (!result.success) {\nconst errorText = result.error || 'Token optimization failed';\nreturn {\ncontent: [\n{",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 341
        },
        {
          "path": "src/index.ts",
          "line": 390
        }
      ]
    },
    {
      "snippet": "const errorText = result.error || 'Token optimization failed';\nreturn {\ncontent: [\n{\ntype: 'text',",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 342
        },
        {
          "path": "src/index.ts",
          "line": 391
        }
      ]
    },
    {
      "snippet": "return {\ncontent: [\n{\ntype: 'text',\ntext: `Token optimization failed: ${errorText}`,",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 343
        },
        {
          "path": "src/index.ts",
          "line": 392
        }
      ]
    },
    {
      "snippet": "content: [\n{\ntype: 'text',\ntext: `Token optimization failed: ${errorText}`,\n},",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 344
        },
        {
          "path": "src/index.ts",
          "line": 393
        }
      ]
    },
    {
      "snippet": "{\ntype: 'text',\ntext: `Token optimization failed: ${errorText}`,\n},\n],",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 345
        },
        {
          "path": "src/index.ts",
          "line": 394
        }
      ]
    },
    {
      "snippet": "type: 'text',\ntext: `Token optimization failed: ${errorText}`,\n},\n],\nstructuredContent: {",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 346
        },
        {
          "path": "src/index.ts",
          "line": 395
        }
      ]
    },
    {
      "snippet": "text: `Token optimization failed: ${errorText}`,\n},\n],\nstructuredContent: {\nsuccess: false,",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 347
        },
        {
          "path": "src/index.ts",
          "line": 396
        }
      ]
    },
    {
      "snippet": "},\n],\nstructuredContent: {\nsuccess: false,\nerror: errorText,",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 348
        },
        {
          "path": "src/index.ts",
          "line": 397
        }
      ]
    },
    {
      "snippet": "],\nstructuredContent: {\nsuccess: false,\nerror: errorText,\n},",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 349
        },
        {
          "path": "src/index.ts",
          "line": 398
        }
      ]
    },
    {
      "snippet": "structuredContent: {\nsuccess: false,\nerror: errorText,\n},\nisError: true,",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 350
        },
        {
          "path": "src/index.ts",
          "line": 399
        }
      ]
    },
    {
      "snippet": "success: false,\nerror: errorText,\n},\nisError: true,\n};",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 351
        },
        {
          "path": "src/index.ts",
          "line": 400
        }
      ]
    },
    {
      "snippet": "error: errorText,\n},\nisError: true,\n};\n}",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 352
        },
        {
          "path": "src/index.ts",
          "line": 401
        }
      ]
    },
    {
      "snippet": "const tokenUsage = result.tokenUsage;\nif (!tokenUsage) {\nthrow new Error('optimize_tokens succeeded without token usage metrics');\n}\nlet summary = '';",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 358
        },
        {
          "path": "src/index.ts",
          "line": 408
        }
      ]
    },
    {
      "snippet": "summary += `\u2713 Token optimization completed for ${params.missionFile}\\n\\n`;\nsummary += `**Statistics:**\\n`;\nsummary += `- Original tokens: ${stats.originalTokens}\\n`;\nsummary += `- Compressed tokens: $",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 363
        },
        {
          "path": "src/index.ts",
          "line": 414
        }
      ]
    },
    {
      "snippet": "summary += `**Statistics:**\\n`;\nsummary += `- Original tokens: ${stats.originalTokens}\\n`;\nsummary += `- Compressed tokens: ${stats.compressedTokens}\\n`;\nsummary += `- Savings: ${tokenUsage.savings} t",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 364
        },
        {
          "path": "src/index.ts",
          "line": 415
        }
      ]
    },
    {
      "snippet": "summary += `- Original tokens: ${stats.originalTokens}\\n`;\nsummary += `- Compressed tokens: ${stats.compressedTokens}\\n`;\nsummary += `- Savings: ${tokenUsage.savings} tokens (${stats.reductionPercenta",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 365
        },
        {
          "path": "src/index.ts",
          "line": 416
        }
      ]
    },
    {
      "snippet": "if (result.warnings && result.warnings.length > 0) {\nsummary += `\\n**Warnings:**\\n`;\nresult.warnings.forEach((w) => {\nsummary += `  \u26a0 ${w}\\n`;\n});",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 374
        },
        {
          "path": "src/index.ts",
          "line": 427
        }
      ]
    },
    {
      "snippet": "summary += `\\n**Warnings:**\\n`;\nresult.warnings.forEach((w) => {\nsummary += `  \u26a0 ${w}\\n`;\n});\n}",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 375
        },
        {
          "path": "src/index.ts",
          "line": 428
        }
      ]
    },
    {
      "snippet": "},\n],\nstructuredContent: {\nsuccess: true,\nstats,",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 397
        },
        {
          "path": "src/index.ts",
          "line": 454
        }
      ]
    },
    {
      "snippet": "],\nstructuredContent: {\nsuccess: true,\nstats,\nwarnings: result.warnings,",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 398
        },
        {
          "path": "src/index.ts",
          "line": 455
        }
      ]
    },
    {
      "snippet": "structuredContent: {\nsuccess: true,\nstats,\nwarnings: result.warnings,\noptimizedContent: result.optimizedContent,",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 399
        },
        {
          "path": "src/index.ts",
          "line": 456
        }
      ]
    },
    {
      "snippet": "success: true,\nstats,\nwarnings: result.warnings,\noptimizedContent: result.optimizedContent,\ntokenUsage: {",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 400
        },
        {
          "path": "src/index.ts",
          "line": 457
        }
      ]
    },
    {
      "snippet": "stats,\nwarnings: result.warnings,\noptimizedContent: result.optimizedContent,\ntokenUsage: {\nmodel: tokenUsage.model,",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 401
        },
        {
          "path": "src/index.ts",
          "line": 458
        }
      ]
    },
    {
      "snippet": "warnings: result.warnings,\noptimizedContent: result.optimizedContent,\ntokenUsage: {\nmodel: tokenUsage.model,\noriginal: tokenUsage.original,",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 402
        },
        {
          "path": "src/index.ts",
          "line": 459
        }
      ]
    },
    {
      "snippet": "optimizedContent: result.optimizedContent,\ntokenUsage: {\nmodel: tokenUsage.model,\noriginal: tokenUsage.original,\noptimized: tokenUsage.optimized,",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 403
        },
        {
          "path": "src/index.ts",
          "line": 460
        }
      ]
    },
    {
      "snippet": "tokenUsage: {\nmodel: tokenUsage.model,\noriginal: tokenUsage.original,\noptimized: tokenUsage.optimized,\nsavings: tokenUsage.savings,",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 404
        },
        {
          "path": "src/index.ts",
          "line": 461
        }
      ]
    },
    {
      "snippet": "model: tokenUsage.model,\noriginal: tokenUsage.original,\noptimized: tokenUsage.optimized,\nsavings: tokenUsage.savings,\ncompressionRatio: tokenUsage.compressionRatio,",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 405
        },
        {
          "path": "src/index.ts",
          "line": 462
        }
      ]
    },
    {
      "snippet": "original: tokenUsage.original,\noptimized: tokenUsage.optimized,\nsavings: tokenUsage.savings,\ncompressionRatio: tokenUsage.compressionRatio,\nheuristicWarning,",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 406
        },
        {
          "path": "src/index.ts",
          "line": 463
        }
      ]
    },
    {
      "snippet": "optimized: tokenUsage.optimized,\nsavings: tokenUsage.savings,\ncompressionRatio: tokenUsage.compressionRatio,\nheuristicWarning,\n},",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 407
        },
        {
          "path": "src/index.ts",
          "line": 464
        }
      ]
    },
    {
      "snippet": "savings: tokenUsage.savings,\ncompressionRatio: tokenUsage.compressionRatio,\nheuristicWarning,\n},\n},",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 408
        },
        {
          "path": "src/index.ts",
          "line": 465
        }
      ]
    },
    {
      "snippet": "compressionRatio: tokenUsage.compressionRatio,\nheuristicWarning,\n},\n},\n};",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 409
        },
        {
          "path": "src/index.ts",
          "line": 466
        }
      ]
    },
    {
      "snippet": "heuristicWarning,\n},\n},\n};\n}",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 410
        },
        {
          "path": "src/index.ts",
          "line": 467
        }
      ]
    },
    {
      "snippet": "const heuristicWarning = result.tokenUsage?.model === 'gemini'\n? 'Gemini token counts use a conservative 1.5x heuristic and may overestimate usage.'\n: undefined;\nif (heuristicWarning) {\nformatted += `",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 419
        },
        {
          "path": "dist/index.js",
          "line": 449
        }
      ]
    },
    {
      "snippet": "? 'Gemini token counts use a conservative 1.5x heuristic and may overestimate usage.'\n: undefined;\nif (heuristicWarning) {\nformatted += `\\n\\n\u26a0 ${heuristicWarning}`;\n}",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 420
        },
        {
          "path": "dist/index.js",
          "line": 450
        }
      ]
    },
    {
      "snippet": ": undefined;\nif (heuristicWarning) {\nformatted += `\\n\\n\u26a0 ${heuristicWarning}`;\n}\nreturn {",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 421
        },
        {
          "path": "dist/index.js",
          "line": 451
        }
      ]
    },
    {
      "snippet": "if (heuristicWarning) {\nformatted += `\\n\\n\u26a0 ${heuristicWarning}`;\n}\nreturn {\ncontent: [",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 422
        },
        {
          "path": "dist/index.js",
          "line": 452
        }
      ]
    },
    {
      "snippet": "formatted += `\\n\\n\u26a0 ${heuristicWarning}`;\n}\nreturn {\ncontent: [\n{",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 423
        },
        {
          "path": "dist/index.js",
          "line": 453
        }
      ]
    },
    {
      "snippet": "},\n],\nstructuredContent: {\nsuccess: true,\nresult,",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 430
        },
        {
          "path": "dist/index.js",
          "line": 460
        },
        {
          "path": "src/index.ts",
          "line": 492
        },
        {
          "path": "src/index.ts",
          "line": 527
        }
      ]
    },
    {
      "snippet": "],\nstructuredContent: {\nsuccess: true,\nresult,\ntokenUsage: result.tokenUsage",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 431
        },
        {
          "path": "dist/index.js",
          "line": 461
        },
        {
          "path": "src/index.ts",
          "line": 493
        },
        {
          "path": "src/index.ts",
          "line": 528
        }
      ]
    },
    {
      "snippet": "structuredContent: {\nsuccess: true,\nresult,\ntokenUsage: result.tokenUsage\n? {",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 432
        },
        {
          "path": "dist/index.js",
          "line": 462
        },
        {
          "path": "src/index.ts",
          "line": 494
        },
        {
          "path": "src/index.ts",
          "line": 529
        }
      ]
    },
    {
      "snippet": "success: true,\nresult,\ntokenUsage: result.tokenUsage\n? {\n...result.tokenUsage,",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 433
        },
        {
          "path": "dist/index.js",
          "line": 463
        },
        {
          "path": "src/index.ts",
          "line": 495
        },
        {
          "path": "src/index.ts",
          "line": 530
        }
      ]
    },
    {
      "snippet": "result,\ntokenUsage: result.tokenUsage\n? {\n...result.tokenUsage,\nheuristicWarning,",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 434
        },
        {
          "path": "dist/index.js",
          "line": 464
        },
        {
          "path": "src/index.ts",
          "line": 496
        },
        {
          "path": "src/index.ts",
          "line": 531
        }
      ]
    },
    {
      "snippet": "tokenUsage: result.tokenUsage\n? {\n...result.tokenUsage,\nheuristicWarning,\n}",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 435
        },
        {
          "path": "dist/index.js",
          "line": 465
        },
        {
          "path": "src/index.ts",
          "line": 497
        },
        {
          "path": "src/index.ts",
          "line": 532
        }
      ]
    },
    {
      "snippet": "? {\n...result.tokenUsage,\nheuristicWarning,\n}\n: undefined,",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 436
        },
        {
          "path": "dist/index.js",
          "line": 466
        },
        {
          "path": "src/index.ts",
          "line": 498
        },
        {
          "path": "src/index.ts",
          "line": 533
        }
      ]
    },
    {
      "snippet": "...result.tokenUsage,\nheuristicWarning,\n}\n: undefined,\nheuristicWarning,",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 437
        },
        {
          "path": "dist/index.js",
          "line": 467
        },
        {
          "path": "src/index.ts",
          "line": 499
        },
        {
          "path": "src/index.ts",
          "line": 534
        }
      ]
    },
    {
      "snippet": "heuristicWarning,\n}\n: undefined,\nheuristicWarning,\n},",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 438
        },
        {
          "path": "dist/index.js",
          "line": 468
        },
        {
          "path": "src/index.ts",
          "line": 500
        },
        {
          "path": "src/index.ts",
          "line": 535
        }
      ]
    },
    {
      "snippet": "}\n: undefined,\nheuristicWarning,\n},\n};",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 439
        },
        {
          "path": "dist/index.js",
          "line": 469
        },
        {
          "path": "src/index.ts",
          "line": 501
        },
        {
          "path": "src/index.ts",
          "line": 536
        }
      ]
    },
    {
      "snippet": ": undefined,\nheuristicWarning,\n},\n};\n}",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 440
        },
        {
          "path": "dist/index.js",
          "line": 470
        },
        {
          "path": "src/index.ts",
          "line": 502
        },
        {
          "path": "src/index.ts",
          "line": 537
        }
      ]
    },
    {
      "snippet": "const errorMessage = error instanceof Error ? error.message : 'Unknown error';\nconsole.error(`[ERROR] Failed to initialize server: ${errorMessage}`);\nthrow error;\n}\n}",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 493
        },
        {
          "path": "src/index.ts",
          "line": 566
        }
      ]
    },
    {
      "snippet": "const errorMessage = error instanceof Error ? error.message : 'Unknown error';\nconsole.error(`[FATAL] Server startup failed: ${errorMessage}`);\nprocess.exit(1);\n}\n}",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 515
        },
        {
          "path": "src/index.ts",
          "line": 592
        }
      ]
    },
    {
      "snippet": "// Handle graceful shutdown\nprocess.on('SIGINT', async () => {\nconsole.error(`[INFO] Received SIGINT, shutting down gracefully...`);\nawait server.close();\nprocess.exit(0);",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 520
        },
        {
          "path": "src/index.ts",
          "line": 598
        }
      ]
    },
    {
      "snippet": "process.on('SIGINT', async () => {\nconsole.error(`[INFO] Received SIGINT, shutting down gracefully...`);\nawait server.close();\nprocess.exit(0);\n});",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 521
        },
        {
          "path": "src/index.ts",
          "line": 599
        }
      ]
    },
    {
      "snippet": "process.on('SIGTERM', async () => {\nconsole.error(`[INFO] Received SIGTERM, shutting down gracefully...`);\nawait server.close();\nprocess.exit(0);\n});",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 526
        },
        {
          "path": "src/index.ts",
          "line": 605
        }
      ]
    },
    {
      "snippet": "// Start the server\nif (require.main === module) {\nmain().catch((error) => {\nconsole.error(`[FATAL] Unhandled error:`, error);\nprocess.exit(1);",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 531
        },
        {
          "path": "src/index.ts",
          "line": 611
        }
      ]
    },
    {
      "snippet": "if (require.main === module) {\nmain().catch((error) => {\nconsole.error(`[FATAL] Unhandled error:`, error);\nprocess.exit(1);\n});",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 532
        },
        {
          "path": "src/index.ts",
          "line": 612
        }
      ]
    },
    {
      "snippet": "main().catch((error) => {\nconsole.error(`[FATAL] Unhandled error:`, error);\nprocess.exit(1);\n});\n}",
      "occurrences": [
        {
          "path": "dist/index.js",
          "line": 533
        },
        {
          "path": "src/index.ts",
          "line": 613
        }
      ]
    },
    {
      "snippet": "/**\n* Mission Complexity Scorer\n*\n* Implements the Composite Complexity Score (CCS) framework from research mission R4.2.\n* Combines Token Score, Structural Score, Time Horizon Score, and Computationa",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.d.ts",
          "line": 1
        },
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 2
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 1
        }
      ]
    },
    {
      "snippet": "* Mission Complexity Scorer\n*\n* Implements the Composite Complexity Score (CCS) framework from research mission R4.2.\n* Combines Token Score, Structural Score, Time Horizon Score, and Computational Co",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.d.ts",
          "line": 2
        },
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 3
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 2
        }
      ]
    },
    {
      "snippet": "*\n* Implements the Composite Complexity Score (CCS) framework from research mission R4.2.\n* Combines Token Score, Structural Score, Time Horizon Score, and Computational Complexity\n* to determine when",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.d.ts",
          "line": 3
        },
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 4
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 3
        }
      ]
    },
    {
      "snippet": "/**\n* Complexity score components\n*/\nexport interface ComplexityComponents {\ntokenScore: number;",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.d.ts",
          "line": 10
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 12
        }
      ]
    },
    {
      "snippet": "* Complexity score components\n*/\nexport interface ComplexityComponents {\ntokenScore: number;\nstructuralScore: number;",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.d.ts",
          "line": 11
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 13
        }
      ]
    },
    {
      "snippet": "*/\nexport interface ComplexityComponents {\ntokenScore: number;\nstructuralScore: number;\ntimeHorizonScore: number;",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.d.ts",
          "line": 12
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 14
        }
      ]
    },
    {
      "snippet": "export interface ComplexityComponents {\ntokenScore: number;\nstructuralScore: number;\ntimeHorizonScore: number;\ncomputationalScore: number;",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.d.ts",
          "line": 13
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 15
        }
      ]
    },
    {
      "snippet": "tokenScore: number;\nstructuralScore: number;\ntimeHorizonScore: number;\ncomputationalScore: number;\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.d.ts",
          "line": 14
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 16
        }
      ]
    },
    {
      "snippet": "/**\n* Complete complexity analysis result\n*/\nexport interface ComplexityAnalysis {\ncompositeScore: number;",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.d.ts",
          "line": 19
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 22
        }
      ]
    },
    {
      "snippet": "* Complete complexity analysis result\n*/\nexport interface ComplexityAnalysis {\ncompositeScore: number;\ncomponents: ComplexityComponents;",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.d.ts",
          "line": 20
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 23
        }
      ]
    },
    {
      "snippet": "*/\nexport interface ComplexityAnalysis {\ncompositeScore: number;\ncomponents: ComplexityComponents;\nshouldSplit: boolean;",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.d.ts",
          "line": 21
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 24
        }
      ]
    },
    {
      "snippet": "export interface ComplexityAnalysis {\ncompositeScore: number;\ncomponents: ComplexityComponents;\nshouldSplit: boolean;\nreasons: string[];",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.d.ts",
          "line": 22
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 25
        }
      ]
    },
    {
      "snippet": "compositeScore: number;\ncomponents: ComplexityComponents;\nshouldSplit: boolean;\nreasons: string[];\nestimatedHumanHours?: number;",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.d.ts",
          "line": 23
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 26
        }
      ]
    },
    {
      "snippet": "components: ComplexityComponents;\nshouldSplit: boolean;\nreasons: string[];\nestimatedHumanHours?: number;\ntokenDetails: TokenCount;",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.d.ts",
          "line": 24
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 27
        }
      ]
    },
    {
      "snippet": "shouldSplit: boolean;\nreasons: string[];\nestimatedHumanHours?: number;\ntokenDetails: TokenCount;\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.d.ts",
          "line": 25
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 28
        }
      ]
    },
    {
      "snippet": "/**\n* Configuration for complexity scoring\n*/\nexport interface ComplexityScorerConfig {\nmodel: SupportedModel;",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.d.ts",
          "line": 30
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 34
        }
      ]
    },
    {
      "snippet": "weights?: {\ntoken: number;\nstructural: number;\ntimeHorizon: number;\ncomputational: number;",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.d.ts",
          "line": 37
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 41
        }
      ]
    },
    {
      "snippet": "token: number;\nstructural: number;\ntimeHorizon: number;\ncomputational: number;\n};",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.d.ts",
          "line": 38
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 42
        }
      ]
    },
    {
      "snippet": "structural: number;\ntimeHorizon: number;\ncomputational: number;\n};\nthresholds?: {",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.d.ts",
          "line": 39
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 43
        }
      ]
    },
    {
      "snippet": "timeHorizon: number;\ncomputational: number;\n};\nthresholds?: {\ncompositeScore: number;",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.d.ts",
          "line": 40
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 44
        }
      ]
    },
    {
      "snippet": "computational: number;\n};\nthresholds?: {\ncompositeScore: number;\ntokenPercentage: number;",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.d.ts",
          "line": 41
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 45
        }
      ]
    },
    {
      "snippet": "};\nthresholds?: {\ncompositeScore: number;\ntokenPercentage: number;\ntimeHorizonMultiplier: number;",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.d.ts",
          "line": 42
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 46
        }
      ]
    },
    {
      "snippet": "thresholds?: {\ncompositeScore: number;\ntokenPercentage: number;\ntimeHorizonMultiplier: number;\n};",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.d.ts",
          "line": 43
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 47
        }
      ]
    },
    {
      "snippet": "compositeScore: number;\ntokenPercentage: number;\ntimeHorizonMultiplier: number;\n};\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.d.ts",
          "line": 44
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 48
        }
      ]
    },
    {
      "snippet": "/**\n* ComplexityScorer class\n*\n* Calculates the Composite Complexity Score (CCS) for missions\n*/",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.d.ts",
          "line": 49
        },
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 52
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 99
        }
      ]
    },
    {
      "snippet": "/**\n* Default configuration values\n*/\nconst DEFAULT_WEIGHTS = {\ntoken: 0.35,",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 11
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 54
        }
      ]
    },
    {
      "snippet": "* Default configuration values\n*/\nconst DEFAULT_WEIGHTS = {\ntoken: 0.35,\nstructural: 0.25,",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 12
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 55
        }
      ]
    },
    {
      "snippet": "*/\nconst DEFAULT_WEIGHTS = {\ntoken: 0.35,\nstructural: 0.25,\ntimeHorizon: 0.30,",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 13
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 56
        }
      ]
    },
    {
      "snippet": "const DEFAULT_WEIGHTS = {\ntoken: 0.35,\nstructural: 0.25,\ntimeHorizon: 0.30,\ncomputational: 0.10,",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 14
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 57
        }
      ]
    },
    {
      "snippet": "token: 0.35,\nstructural: 0.25,\ntimeHorizon: 0.30,\ncomputational: 0.10,\n};",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 15
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 58
        }
      ]
    },
    {
      "snippet": "const DEFAULT_THRESHOLDS = {\ncompositeScore: 8.0, // On a scale of 1-10\ntokenPercentage: 0.80, // 80% of context window\ntimeHorizonMultiplier: 1.5, // 150% of agent's capability\n};",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 20
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 64
        }
      ]
    },
    {
      "snippet": "/**\n* Procedural dependency keywords that signal atomic operations\n*/\nconst DEPENDENCY_KEYWORDS = [\n'then',",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 25
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 70
        }
      ]
    },
    {
      "snippet": "* Procedural dependency keywords that signal atomic operations\n*/\nconst DEPENDENCY_KEYWORDS = [\n'then',\n'next',",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 26
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 71
        }
      ]
    },
    {
      "snippet": "*/\nconst DEPENDENCY_KEYWORDS = [\n'then',\n'next',\n'after',",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 27
        },
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 12
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 72
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 76
        }
      ]
    },
    {
      "snippet": "const DEPENDENCY_KEYWORDS = [\n'then',\n'next',\n'after',\n'once',",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 28
        },
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 13
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 73
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 77
        }
      ]
    },
    {
      "snippet": "'then',\n'next',\n'after',\n'once',\n'before',",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 29
        },
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 14
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 74
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 78
        }
      ]
    },
    {
      "snippet": "'next',\n'after',\n'once',\n'before',\n'first',",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 30
        },
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 15
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 75
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 79
        }
      ]
    },
    {
      "snippet": "'after',\n'once',\n'before',\n'first',\n'second',",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 31
        },
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 16
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 76
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 80
        }
      ]
    },
    {
      "snippet": "'once',\n'before',\n'first',\n'second',\n'third',",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 32
        },
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 17
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 77
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 81
        }
      ]
    },
    {
      "snippet": "'before',\n'first',\n'second',\n'third',\n'finally',",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 33
        },
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 18
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 78
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 82
        }
      ]
    },
    {
      "snippet": "'first',\n'second',\n'third',\n'finally',\n'subsequently',",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 34
        },
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 19
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 79
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 83
        }
      ]
    },
    {
      "snippet": "'second',\n'third',\n'finally',\n'subsequently',\n'following',",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 35
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 80
        }
      ]
    },
    {
      "snippet": "'third',\n'finally',\n'subsequently',\n'following',\n'preceding',",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 36
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 81
        }
      ]
    },
    {
      "snippet": "'finally',\n'subsequently',\n'following',\n'preceding',\n];",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 37
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 82
        }
      ]
    },
    {
      "snippet": "/**\n* Complexity indicators in mission text\n*/\nconst COMPLEXITY_INDICATORS = {\nloops: /\\b(for each|while|iterate|loop|repeat)\\b/gi,",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 42
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 88
        }
      ]
    },
    {
      "snippet": "* Complexity indicators in mission text\n*/\nconst COMPLEXITY_INDICATORS = {\nloops: /\\b(for each|while|iterate|loop|repeat)\\b/gi,\nconditionals: /\\b(if|else|when|unless|depending|whether)\\b/gi,",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 43
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 89
        }
      ]
    },
    {
      "snippet": "*/\nconst COMPLEXITY_INDICATORS = {\nloops: /\\b(for each|while|iterate|loop|repeat)\\b/gi,\nconditionals: /\\b(if|else|when|unless|depending|whether)\\b/gi,\nnested: /\\b(nested|hierarchical|multi-level|recur",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 44
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 90
        }
      ]
    },
    {
      "snippet": "const COMPLEXITY_INDICATORS = {\nloops: /\\b(for each|while|iterate|loop|repeat)\\b/gi,\nconditionals: /\\b(if|else|when|unless|depending|whether)\\b/gi,\nnested: /\\b(nested|hierarchical|multi-level|recursiv",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 45
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 91
        }
      ]
    },
    {
      "snippet": "loops: /\\b(for each|while|iterate|loop|repeat)\\b/gi,\nconditionals: /\\b(if|else|when|unless|depending|whether)\\b/gi,\nnested: /\\b(nested|hierarchical|multi-level|recursive)\\b/gi,\nintegration: /\\b(integr",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 46
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 92
        }
      ]
    },
    {
      "snippet": "conditionals: /\\b(if|else|when|unless|depending|whether)\\b/gi,\nnested: /\\b(nested|hierarchical|multi-level|recursive)\\b/gi,\nintegration: /\\b(integrate|connect|combine|merge|sync)\\b/gi,\noptimization: /",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 47
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 93
        }
      ]
    },
    {
      "snippet": "this.tokenCounter = tokenCounter;\nthis.config = {\n...config,\nweights: config.weights || DEFAULT_WEIGHTS,\nthresholds: config.thresholds || DEFAULT_THRESHOLDS,",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 59
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 109
        }
      ]
    },
    {
      "snippet": "this.config = {\n...config,\nweights: config.weights || DEFAULT_WEIGHTS,\nthresholds: config.thresholds || DEFAULT_THRESHOLDS,\n};",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 60
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 110
        }
      ]
    },
    {
      "snippet": "...config,\nweights: config.weights || DEFAULT_WEIGHTS,\nthresholds: config.thresholds || DEFAULT_THRESHOLDS,\n};\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 61
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 111
        }
      ]
    },
    {
      "snippet": "// Calculate individual components\nconst tokenCount = await this.tokenCounter.count(missionText, this.config.model);\nconst tokenScore = this.calculateTokenScoreFromCount(tokenCount.count);\nconst struc",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 72
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 124
        }
      ]
    },
    {
      "snippet": "const tokenCount = await this.tokenCounter.count(missionText, this.config.model);\nconst tokenScore = this.calculateTokenScoreFromCount(tokenCount.count);\nconst structuralScore = this.calculateStructur",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 73
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 125
        }
      ]
    },
    {
      "snippet": "tokenScore,\nstructuralScore,\ntimeHorizonScore,\ncomputationalScore,\n};",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 79
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 132
        }
      ]
    },
    {
      "snippet": "return {\ncompositeScore,\ncomponents,\nshouldSplit,\nreasons,",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 88
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 144
        }
      ]
    },
    {
      "snippet": "compositeScore,\ncomponents,\nshouldSplit,\nreasons,\nestimatedHumanHours: this.estimateHumanHours(missionText, missionObj),",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 89
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 145
        }
      ]
    },
    {
      "snippet": "components,\nshouldSplit,\nreasons,\nestimatedHumanHours: this.estimateHumanHours(missionText, missionObj),\ntokenDetails: tokenCount,",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 90
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 146
        }
      ]
    },
    {
      "snippet": "shouldSplit,\nreasons,\nestimatedHumanHours: this.estimateHumanHours(missionText, missionObj),\ntokenDetails: tokenCount,\n};",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 91
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 147
        }
      ]
    },
    {
      "snippet": "reasons,\nestimatedHumanHours: this.estimateHumanHours(missionText, missionObj),\ntokenDetails: tokenCount,\n};\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 92
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 148
        }
      ]
    },
    {
      "snippet": "// Check for complexity indicators\nfor (const [type, pattern] of Object.entries(COMPLEXITY_INDICATORS)) {\nconst matches = (missionText.match(pattern) || []).length;\nif (type === 'nested' || type === '",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 147
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 216
        }
      ]
    },
    {
      "snippet": "// Check composite score threshold\nif (compositeScore > this.config.thresholds.compositeScore) {\nshouldSplit = true;\nreasons.push(`Composite complexity score (${compositeScore.toFixed(2)}) exceeds thr",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 180
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 259
        }
      ]
    },
    {
      "snippet": "// Check token threshold\nconst tokenRatio = components.tokenScore / 10; // Convert back to ratio\nif (tokenRatio > this.config.thresholds.tokenPercentage) {\nshouldSplit = true;\nreasons.push(`Token coun",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 185
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 265
        }
      ]
    },
    {
      "snippet": "const tokenRatio = components.tokenScore / 10; // Convert back to ratio\nif (tokenRatio > this.config.thresholds.tokenPercentage) {\nshouldSplit = true;\nreasons.push(`Token count at ${(tokenRatio * 100)",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 186
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 266
        }
      ]
    },
    {
      "snippet": "// Check time horizon threshold\nconst timeRatio = components.timeHorizonScore / 5; // Convert back to ratio\nif (timeRatio > this.config.thresholds.timeHorizonMultiplier) {\nshouldSplit = true;\nreasons.",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 191
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 272
        }
      ]
    },
    {
      "snippet": "const timeRatio = components.timeHorizonScore / 5; // Convert back to ratio\nif (timeRatio > this.config.thresholds.timeHorizonMultiplier) {\nshouldSplit = true;\nreasons.push(`Estimated duration exceeds",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 192
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 273
        }
      ]
    },
    {
      "snippet": "// Adjust for complexity indicators\nfor (const pattern of Object.values(COMPLEXITY_INDICATORS)) {\nconst matches = (missionText.match(pattern) || []).length;\nhours += matches * 0.5; // 30 min per compl",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 214
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 300
        }
      ]
    },
    {
      "snippet": "// Count dependency keywords\nfor (const keyword of DEPENDENCY_KEYWORDS) {\nconst regex = new RegExp(`\\\\b${keyword}\\\\b`, 'gi');\ncount += (text.match(regex) || []).length;\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 244
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 339
        }
      ]
    },
    {
      "snippet": "for (const line of lines) {\n// Count leading spaces/tabs\nconst leadingWhitespace = line.match(/^[\\s\\t]*/)?.[0] || '';\nconst spaces = leadingWhitespace.replace(/\\t/g, '  ').length;\nconst nestingLevel =",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 257
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 355
        }
      ]
    },
    {
      "snippet": "*/\nserializeMission(mission) {\nconst parts = [\n`Mission ID: ${mission.missionId}`,\n`\\nObjective: ${mission.objective}`,",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 268
        },
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 390
        }
      ]
    },
    {
      "snippet": "serializeMission(mission) {\nconst parts = [\n`Mission ID: ${mission.missionId}`,\n`\\nObjective: ${mission.objective}`,\n];",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 269
        },
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 391
        }
      ]
    },
    {
      "snippet": "if (mission.context) {\nif (mission.context.background) {\nparts.push(`\\nContext: ${mission.context.background}`);\n}\nif (mission.context.dependencies?.length) {",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 274
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 376
        }
      ]
    },
    {
      "snippet": "if (mission.context.background) {\nparts.push(`\\nContext: ${mission.context.background}`);\n}\nif (mission.context.dependencies?.length) {\nparts.push(`\\nDependencies: ${mission.context.dependencies.join(",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 275
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 377
        }
      ]
    },
    {
      "snippet": "parts.push(`\\nContext: ${mission.context.background}`);\n}\nif (mission.context.dependencies?.length) {\nparts.push(`\\nDependencies: ${mission.context.dependencies.join(', ')}`);\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 276
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 378
        }
      ]
    },
    {
      "snippet": "}\nif (mission.context.dependencies?.length) {\nparts.push(`\\nDependencies: ${mission.context.dependencies.join(', ')}`);\n}\nif (mission.context.constraints?.length) {",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 277
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 379
        }
      ]
    },
    {
      "snippet": "if (mission.context.dependencies?.length) {\nparts.push(`\\nDependencies: ${mission.context.dependencies.join(', ')}`);\n}\nif (mission.context.constraints?.length) {\nparts.push(`\\nConstraints: ${mission.",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 278
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 380
        }
      ]
    },
    {
      "snippet": "parts.push(`\\nDependencies: ${mission.context.dependencies.join(', ')}`);\n}\nif (mission.context.constraints?.length) {\nparts.push(`\\nConstraints: ${mission.context.constraints.join(', ')}`);\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 279
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 381
        }
      ]
    },
    {
      "snippet": "}\nif (mission.context.constraints?.length) {\nparts.push(`\\nConstraints: ${mission.context.constraints.join(', ')}`);\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 280
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 382
        }
      ]
    },
    {
      "snippet": "}\nparts.push(`\\nSuccess Criteria:\\n${mission.successCriteria.map((c, i) => `${i + 1}. ${c}`).join('\\n')}`);\nparts.push(`\\nDeliverables:\\n${mission.deliverables.map((d, i) => `${i + 1}. ${d}`).join('\\n",
      "occurrences": [
        {
          "path": "dist/intelligence/complexity-scorer.js",
          "line": 284
        },
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 398
        }
      ]
    },
    {
      "snippet": "/**\n* Compression Rules\n*\n* Implements the multi-pass compression pipeline from R4.1:\n* Pass 1: Sanitization (remove fillers and redundancy)",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.d.ts",
          "line": 1
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 3
        }
      ]
    },
    {
      "snippet": "* Compression Rules\n*\n* Implements the multi-pass compression pipeline from R4.1:\n* Pass 1: Sanitization (remove fillers and redundancy)\n* Pass 2: Structural Refactoring (prose to lists/structured dat",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.d.ts",
          "line": 2
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 4
        }
      ]
    },
    {
      "snippet": "*\n* Implements the multi-pass compression pipeline from R4.1:\n* Pass 1: Sanitization (remove fillers and redundancy)\n* Pass 2: Structural Refactoring (prose to lists/structured data)\n* Pass 3: Linguis",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.d.ts",
          "line": 3
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 5
        }
      ]
    },
    {
      "snippet": "* Implements the multi-pass compression pipeline from R4.1:\n* Pass 1: Sanitization (remove fillers and redundancy)\n* Pass 2: Structural Refactoring (prose to lists/structured data)\n* Pass 3: Linguisti",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.d.ts",
          "line": 4
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 6
        }
      ]
    },
    {
      "snippet": "// Remove conversational fillers\n{\ntype: 'regex_replace',\npattern: /could you (please )?(explain|generate|provide|create|write|implement)/gi,\nreplacement: '$2',",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 18
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 18
        }
      ]
    },
    {
      "snippet": "{\ntype: 'regex_replace',\npattern: /could you (please )?(explain|generate|provide|create|write|implement)/gi,\nreplacement: '$2',\nenabled: true,",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 19
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 19
        }
      ]
    },
    {
      "snippet": "type: 'regex_replace',\npattern: /could you (please )?(explain|generate|provide|create|write|implement)/gi,\nreplacement: '$2',\nenabled: true,\n},",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 20
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 20
        }
      ]
    },
    {
      "snippet": "pattern: /could you (please )?(explain|generate|provide|create|write|implement)/gi,\nreplacement: '$2',\nenabled: true,\n},\n{",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 21
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 21
        }
      ]
    },
    {
      "snippet": "replacement: '$2',\nenabled: true,\n},\n{\ntype: 'regex_replace',",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 22
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 22
        }
      ]
    },
    {
      "snippet": "enabled: true,\n},\n{\ntype: 'regex_replace',\npattern: /I (was wondering|would like|need you to)/gi,",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 23
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 23
        }
      ]
    },
    {
      "snippet": "},\n{\ntype: 'regex_replace',\npattern: /I (was wondering|would like|need you to)/gi,\nreplacement: '',",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 24
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 24
        }
      ]
    },
    {
      "snippet": "{\ntype: 'regex_replace',\npattern: /I (was wondering|would like|need you to)/gi,\nreplacement: '',\nenabled: true,",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 25
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 25
        }
      ]
    },
    {
      "snippet": "type: 'regex_replace',\npattern: /I (was wondering|would like|need you to)/gi,\nreplacement: '',\nenabled: true,\n},",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 26
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 26
        }
      ]
    },
    {
      "snippet": "pattern: /I (was wondering|would like|need you to)/gi,\nreplacement: '',\nenabled: true,\n},\n{",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 27
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 27
        }
      ]
    },
    {
      "snippet": "replacement: '',\nenabled: true,\n},\n{\ntype: 'regex_replace',",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 28
        },
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 59
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 28
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 59
        }
      ]
    },
    {
      "snippet": "enabled: true,\n},\n{\ntype: 'regex_replace',\npattern: /in order to/gi,",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 29
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 29
        }
      ]
    },
    {
      "snippet": "},\n{\ntype: 'regex_replace',\npattern: /in order to/gi,\nreplacement: 'to',",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 30
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 30
        }
      ]
    },
    {
      "snippet": "{\ntype: 'regex_replace',\npattern: /in order to/gi,\nreplacement: 'to',\nenabled: true,",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 31
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 31
        }
      ]
    },
    {
      "snippet": "type: 'regex_replace',\npattern: /in order to/gi,\nreplacement: 'to',\nenabled: true,\n},",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 32
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 32
        }
      ]
    },
    {
      "snippet": "pattern: /in order to/gi,\nreplacement: 'to',\nenabled: true,\n},\n{",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 33
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 33
        }
      ]
    },
    {
      "snippet": "replacement: 'to',\nenabled: true,\n},\n{\ntype: 'regex_replace',",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 34
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 34
        }
      ]
    },
    {
      "snippet": "enabled: true,\n},\n{\ntype: 'regex_replace',\npattern: /it would be great if you could/gi,",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 35
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 35
        }
      ]
    },
    {
      "snippet": "},\n{\ntype: 'regex_replace',\npattern: /it would be great if you could/gi,\nreplacement: '',",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 36
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 36
        }
      ]
    },
    {
      "snippet": "{\ntype: 'regex_replace',\npattern: /it would be great if you could/gi,\nreplacement: '',\nenabled: true,",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 37
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 37
        }
      ]
    },
    {
      "snippet": "type: 'regex_replace',\npattern: /it would be great if you could/gi,\nreplacement: '',\nenabled: true,\n},",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 38
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 38
        }
      ]
    },
    {
      "snippet": "pattern: /it would be great if you could/gi,\nreplacement: '',\nenabled: true,\n},\n// Remove redundant phrases",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 39
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 39
        }
      ]
    },
    {
      "snippet": "replacement: '',\nenabled: true,\n},\n// Remove redundant phrases\n{",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 40
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 40
        }
      ]
    },
    {
      "snippet": "enabled: true,\n},\n// Remove redundant phrases\n{\ntype: 'regex_replace',",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 41
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 41
        }
      ]
    },
    {
      "snippet": "},\n// Remove redundant phrases\n{\ntype: 'regex_replace',\npattern: /provide a detailed explanation of/gi,",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 42
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 42
        }
      ]
    },
    {
      "snippet": "// Remove redundant phrases\n{\ntype: 'regex_replace',\npattern: /provide a detailed explanation of/gi,\nreplacement: 'explain',",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 43
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 43
        }
      ]
    },
    {
      "snippet": "{\ntype: 'regex_replace',\npattern: /provide a detailed explanation of/gi,\nreplacement: 'explain',\nenabled: true,",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 44
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 44
        }
      ]
    },
    {
      "snippet": "type: 'regex_replace',\npattern: /provide a detailed explanation of/gi,\nreplacement: 'explain',\nenabled: true,\n},",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 45
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 45
        }
      ]
    },
    {
      "snippet": "pattern: /provide a detailed explanation of/gi,\nreplacement: 'explain',\nenabled: true,\n},\n{",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 46
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 46
        }
      ]
    },
    {
      "snippet": "replacement: 'explain',\nenabled: true,\n},\n{\ntype: 'regex_replace',",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 47
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 47
        }
      ]
    },
    {
      "snippet": "enabled: true,\n},\n{\ntype: 'regex_replace',\npattern: /the purpose of this is to/gi,",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 48
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 48
        }
      ]
    },
    {
      "snippet": "},\n{\ntype: 'regex_replace',\npattern: /the purpose of this is to/gi,\nreplacement: 'purpose:',",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 49
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 49
        }
      ]
    },
    {
      "snippet": "{\ntype: 'regex_replace',\npattern: /the purpose of this is to/gi,\nreplacement: 'purpose:',\nenabled: true,",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 50
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 50
        }
      ]
    },
    {
      "snippet": "type: 'regex_replace',\npattern: /the purpose of this is to/gi,\nreplacement: 'purpose:',\nenabled: true,\n},",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 51
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 51
        }
      ]
    },
    {
      "snippet": "pattern: /the purpose of this is to/gi,\nreplacement: 'purpose:',\nenabled: true,\n},\n{",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 52
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 52
        }
      ]
    },
    {
      "snippet": "replacement: 'purpose:',\nenabled: true,\n},\n{\ntype: 'regex_replace',",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 53
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 53
        }
      ]
    },
    {
      "snippet": "enabled: true,\n},\n{\ntype: 'regex_replace',\npattern: /as you can see/gi,",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 54
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 54
        }
      ]
    },
    {
      "snippet": "},\n{\ntype: 'regex_replace',\npattern: /as you can see/gi,\nreplacement: '',",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 55
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 55
        }
      ]
    },
    {
      "snippet": "{\ntype: 'regex_replace',\npattern: /as you can see/gi,\nreplacement: '',\nenabled: true,",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 56
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 56
        }
      ]
    },
    {
      "snippet": "type: 'regex_replace',\npattern: /as you can see/gi,\nreplacement: '',\nenabled: true,\n},",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 57
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 57
        }
      ]
    },
    {
      "snippet": "pattern: /as you can see/gi,\nreplacement: '',\nenabled: true,\n},\n{",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 58
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 58
        }
      ]
    },
    {
      "snippet": "enabled: true,\n},\n{\ntype: 'regex_replace',\npattern: /it is important to note that/gi,",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 60
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 60
        }
      ]
    },
    {
      "snippet": "},\n{\ntype: 'regex_replace',\npattern: /it is important to note that/gi,\nreplacement: 'note:',",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 61
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 61
        }
      ]
    },
    {
      "snippet": "{\ntype: 'regex_replace',\npattern: /it is important to note that/gi,\nreplacement: 'note:',\nenabled: true,",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 62
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 62
        }
      ]
    },
    {
      "snippet": "type: 'regex_replace',\npattern: /it is important to note that/gi,\nreplacement: 'note:',\nenabled: true,\n},",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 63
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 63
        }
      ]
    },
    {
      "snippet": "pattern: /it is important to note that/gi,\nreplacement: 'note:',\nenabled: true,\n},\n// Normalize whitespace",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 64
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 64
        }
      ]
    },
    {
      "snippet": "replacement: 'note:',\nenabled: true,\n},\n// Normalize whitespace\n{",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 65
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 65
        }
      ]
    },
    {
      "snippet": "enabled: true,\n},\n// Normalize whitespace\n{\ntype: 'regex_replace',",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 66
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 66
        }
      ]
    },
    {
      "snippet": "},\n// Normalize whitespace\n{\ntype: 'regex_replace',\npattern: /\\s+/g,",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 67
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 67
        }
      ]
    },
    {
      "snippet": "// Normalize whitespace\n{\ntype: 'regex_replace',\npattern: /\\s+/g,\nreplacement: ' ',",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 68
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 68
        }
      ]
    },
    {
      "snippet": "{\ntype: 'regex_replace',\npattern: /\\s+/g,\nreplacement: ' ',\nenabled: true,",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 69
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 69
        }
      ]
    },
    {
      "snippet": "type: 'regex_replace',\npattern: /\\s+/g,\nreplacement: ' ',\nenabled: true,\n},",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 70
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 70
        }
      ]
    },
    {
      "snippet": "pattern: /\\s+/g,\nreplacement: ' ',\nenabled: true,\n},\n{",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 71
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 71
        }
      ]
    },
    {
      "snippet": "replacement: ' ',\nenabled: true,\n},\n{\ntype: 'regex_replace',",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 72
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 72
        }
      ]
    },
    {
      "snippet": "enabled: true,\n},\n{\ntype: 'regex_replace',\npattern: /\\n{3,}/g,",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 73
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 73
        }
      ]
    },
    {
      "snippet": "},\n{\ntype: 'regex_replace',\npattern: /\\n{3,}/g,\nreplacement: '\\n\\n',",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 74
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 74
        }
      ]
    },
    {
      "snippet": "{\ntype: 'regex_replace',\npattern: /\\n{3,}/g,\nreplacement: '\\n\\n',\nenabled: true,",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 75
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 75
        }
      ]
    },
    {
      "snippet": "type: 'regex_replace',\npattern: /\\n{3,}/g,\nreplacement: '\\n\\n',\nenabled: true,\n},",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 76
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 76
        }
      ]
    },
    {
      "snippet": "pattern: /\\n{3,}/g,\nreplacement: '\\n\\n',\nenabled: true,\n},\n];",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 77
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 77
        }
      ]
    },
    {
      "snippet": "{\ntype: 'convert_prose_to_list',\nenabled: true,\ndelimiters: ['First,', 'Then,', 'Next,', 'Finally,', 'Lastly,'],\n},",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 86
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 87
        }
      ]
    },
    {
      "snippet": "type: 'convert_prose_to_list',\nenabled: true,\ndelimiters: ['First,', 'Then,', 'Next,', 'Finally,', 'Lastly,'],\n},\n{",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 87
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 88
        }
      ]
    },
    {
      "snippet": "enabled: true,\ndelimiters: ['First,', 'Then,', 'Next,', 'Finally,', 'Lastly,'],\n},\n{\ntype: 'convert_prose_to_list',",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 88
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 89
        }
      ]
    },
    {
      "snippet": "delimiters: ['First,', 'Then,', 'Next,', 'Finally,', 'Lastly,'],\n},\n{\ntype: 'convert_prose_to_list',\nenabled: true,",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 89
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 90
        }
      ]
    },
    {
      "snippet": "},\n{\ntype: 'convert_prose_to_list',\nenabled: true,\ndelimiters: ['1.', '2.', '3.', '4.', '5.'],",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 90
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 91
        }
      ]
    },
    {
      "snippet": "{\ntype: 'convert_prose_to_list',\nenabled: true,\ndelimiters: ['1.', '2.', '3.', '4.', '5.'],\n},",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 91
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 92
        }
      ]
    },
    {
      "snippet": "type: 'convert_prose_to_list',\nenabled: true,\ndelimiters: ['1.', '2.', '3.', '4.', '5.'],\n},\n];",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 92
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 93
        }
      ]
    },
    {
      "snippet": "{\ntype: 'convert_passive_to_active',\nenabled: true,\n},\n// Simplify verbose constructions",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 101
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 103
        }
      ]
    },
    {
      "snippet": "type: 'convert_passive_to_active',\nenabled: true,\n},\n// Simplify verbose constructions\n{",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 102
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 104
        }
      ]
    },
    {
      "snippet": "enabled: true,\n},\n// Simplify verbose constructions\n{\ntype: 'regex_replace',",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 103
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 105
        }
      ]
    },
    {
      "snippet": "},\n// Simplify verbose constructions\n{\ntype: 'regex_replace',\npattern: /is able to/gi,",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 104
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 106
        }
      ]
    },
    {
      "snippet": "// Simplify verbose constructions\n{\ntype: 'regex_replace',\npattern: /is able to/gi,\nreplacement: 'can',",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 105
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 107
        }
      ]
    },
    {
      "snippet": "{\ntype: 'regex_replace',\npattern: /is able to/gi,\nreplacement: 'can',\nenabled: true,",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 106
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 108
        }
      ]
    },
    {
      "snippet": "type: 'regex_replace',\npattern: /is able to/gi,\nreplacement: 'can',\nenabled: true,\n},",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 107
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 109
        }
      ]
    },
    {
      "snippet": "pattern: /is able to/gi,\nreplacement: 'can',\nenabled: true,\n},\n{",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 108
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 110
        }
      ]
    },
    {
      "snippet": "replacement: 'can',\nenabled: true,\n},\n{\ntype: 'regex_replace',",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 109
        },
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 115
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 111
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 117
        }
      ]
    },
    {
      "snippet": "enabled: true,\n},\n{\ntype: 'regex_replace',\npattern: /has the ability to/gi,",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 110
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 112
        }
      ]
    },
    {
      "snippet": "},\n{\ntype: 'regex_replace',\npattern: /has the ability to/gi,\nreplacement: 'can',",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 111
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 113
        }
      ]
    },
    {
      "snippet": "{\ntype: 'regex_replace',\npattern: /has the ability to/gi,\nreplacement: 'can',\nenabled: true,",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 112
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 114
        }
      ]
    },
    {
      "snippet": "type: 'regex_replace',\npattern: /has the ability to/gi,\nreplacement: 'can',\nenabled: true,\n},",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 113
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 115
        }
      ]
    },
    {
      "snippet": "pattern: /has the ability to/gi,\nreplacement: 'can',\nenabled: true,\n},\n{",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 114
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 116
        }
      ]
    },
    {
      "snippet": "enabled: true,\n},\n{\ntype: 'regex_replace',\npattern: /at this point in time/gi,",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 116
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 118
        }
      ]
    },
    {
      "snippet": "},\n{\ntype: 'regex_replace',\npattern: /at this point in time/gi,\nreplacement: 'now',",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 117
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 119
        }
      ]
    },
    {
      "snippet": "{\ntype: 'regex_replace',\npattern: /at this point in time/gi,\nreplacement: 'now',\nenabled: true,",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 118
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 120
        }
      ]
    },
    {
      "snippet": "type: 'regex_replace',\npattern: /at this point in time/gi,\nreplacement: 'now',\nenabled: true,\n},",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 119
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 121
        }
      ]
    },
    {
      "snippet": "pattern: /at this point in time/gi,\nreplacement: 'now',\nenabled: true,\n},\n{",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 120
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 122
        }
      ]
    },
    {
      "snippet": "replacement: 'now',\nenabled: true,\n},\n{\ntype: 'regex_replace',",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 121
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 123
        }
      ]
    },
    {
      "snippet": "enabled: true,\n},\n{\ntype: 'regex_replace',\npattern: /due to the fact that/gi,",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 122
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 124
        }
      ]
    },
    {
      "snippet": "},\n{\ntype: 'regex_replace',\npattern: /due to the fact that/gi,\nreplacement: 'because',",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 123
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 125
        }
      ]
    },
    {
      "snippet": "{\ntype: 'regex_replace',\npattern: /due to the fact that/gi,\nreplacement: 'because',\nenabled: true,",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 124
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 126
        }
      ]
    },
    {
      "snippet": "type: 'regex_replace',\npattern: /due to the fact that/gi,\nreplacement: 'because',\nenabled: true,\n},",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 125
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 127
        }
      ]
    },
    {
      "snippet": "pattern: /due to the fact that/gi,\nreplacement: 'because',\nenabled: true,\n},\n];",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 126
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 128
        }
      ]
    },
    {
      "snippet": "const pattern = rule.pattern instanceof RegExp\n? rule.pattern\n: new RegExp(rule.pattern, rule.flags || undefined);\nresult = result.replace(pattern, rule.replacement || '');\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 179
        },
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 249
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 187
        }
      ]
    },
    {
      "snippet": "// Check if text contains sequential delimiters\nlet delimiterCount = 0;\nfor (const delimiter of delimiters) {\nif (text.includes(delimiter)) {\ndelimiterCount++;",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 190
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 200
        }
      ]
    },
    {
      "snippet": "let delimiterCount = 0;\nfor (const delimiter of delimiters) {\nif (text.includes(delimiter)) {\ndelimiterCount++;\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 191
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 201
        }
      ]
    },
    {
      "snippet": "for (const delimiter of delimiters) {\nif (text.includes(delimiter)) {\ndelimiterCount++;\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 192
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 202
        }
      ]
    },
    {
      "snippet": "// Split by delimiters and create a list\nlet result = text;\nfor (const delimiter of delimiters) {\n// Create list item format\nconst delimiterRegex = new RegExp(`\\\\s*${delimiter.replace(/[.*+?^${}()|[\\]",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 201
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 213
        }
      ]
    },
    {
      "snippet": "let result = text;\nfor (const delimiter of delimiters) {\n// Create list item format\nconst delimiterRegex = new RegExp(`\\\\s*${delimiter.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')}\\\\s*`, 'gi');\nresult = res",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 202
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 214
        }
      ]
    },
    {
      "snippet": "for (const delimiter of delimiters) {\n// Create list item format\nconst delimiterRegex = new RegExp(`\\\\s*${delimiter.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')}\\\\s*`, 'gi');\nresult = result.replace(delimit",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 203
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 215
        }
      ]
    },
    {
      "snippet": "// Simple pattern matching for common passive constructions\nconst passivePatterns = [\n{ pattern: /(\\w+) should be (\\w+ed) by (\\w+)/gi, replacement: '$3 should $2 $1' },\n{ pattern: /(\\w+) will be (\\w+e",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 214
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 228
        }
      ]
    },
    {
      "snippet": "const passivePatterns = [\n{ pattern: /(\\w+) should be (\\w+ed) by (\\w+)/gi, replacement: '$3 should $2 $1' },\n{ pattern: /(\\w+) will be (\\w+ed) by (\\w+)/gi, replacement: '$3 will $2 $1' },\n{ pattern: /",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 215
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 229
        }
      ]
    },
    {
      "snippet": "if (rule.type === 'regex_replace' && rule.pattern) {\nconst pattern = rule.pattern instanceof RegExp\n? rule.pattern\n: new RegExp(rule.pattern, rule.flags || undefined);\nresult = result.replace(pattern,",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 248
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 269
        }
      ]
    },
    {
      "snippet": "for (const pattern of patterns) {\nconst matches = text.matchAll(pattern);\nfor (const match of matches) {\nconst placeholder = `__PRESERVED_${index}__`;\npreserved.set(placeholder, match[0]);",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 266
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 289
        }
      ]
    },
    {
      "snippet": "const matches = text.matchAll(pattern);\nfor (const match of matches) {\nconst placeholder = `__PRESERVED_${index}__`;\npreserved.set(placeholder, match[0]);\nindex++;",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 267
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 290
        }
      ]
    },
    {
      "snippet": "for (const match of matches) {\nconst placeholder = `__PRESERVED_${index}__`;\npreserved.set(placeholder, match[0]);\nindex++;\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 268
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 291
        }
      ]
    },
    {
      "snippet": "const placeholder = `__PRESERVED_${index}__`;\npreserved.set(placeholder, match[0]);\nindex++;\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/compression-rules.js",
          "line": 269
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 292
        }
      ]
    },
    {
      "snippet": "/**\n* Context Propagation System\n*\n* Implements context preservation mechanisms from research mission R4.2.\n* Manages LLM context window for mission chains using summarization strategies.",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.d.ts",
          "line": 1
        },
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 2
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 1
        }
      ]
    },
    {
      "snippet": "* Context Propagation System\n*\n* Implements context preservation mechanisms from research mission R4.2.\n* Manages LLM context window for mission chains using summarization strategies.\n*/",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.d.ts",
          "line": 2
        },
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 3
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 2
        }
      ]
    },
    {
      "snippet": "/**\n* Sub-mission execution result\n*/\nexport interface SubMissionResult {\nmissionId: string;",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.d.ts",
          "line": 11
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 13
        }
      ]
    },
    {
      "snippet": "* Sub-mission execution result\n*/\nexport interface SubMissionResult {\nmissionId: string;\ninput: string;",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.d.ts",
          "line": 12
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 14
        }
      ]
    },
    {
      "snippet": "*/\nexport interface SubMissionResult {\nmissionId: string;\ninput: string;\noutput: string;",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.d.ts",
          "line": 13
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 15
        }
      ]
    },
    {
      "snippet": "export interface SubMissionResult {\nmissionId: string;\ninput: string;\noutput: string;\nstatus: 'success' | 'failed';",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.d.ts",
          "line": 14
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 16
        }
      ]
    },
    {
      "snippet": "missionId: string;\ninput: string;\noutput: string;\nstatus: 'success' | 'failed';\ntimestamp: Date;",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.d.ts",
          "line": 15
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 17
        }
      ]
    },
    {
      "snippet": "input: string;\noutput: string;\nstatus: 'success' | 'failed';\ntimestamp: Date;\nmetadata?: Record<string, unknown>;",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.d.ts",
          "line": 16
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 18
        }
      ]
    },
    {
      "snippet": "output: string;\nstatus: 'success' | 'failed';\ntimestamp: Date;\nmetadata?: Record<string, unknown>;\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.d.ts",
          "line": 17
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 19
        }
      ]
    },
    {
      "snippet": "/**\n* Context summary\n*/\nexport interface ContextSummary {\noriginalMission: string;",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.d.ts",
          "line": 22
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 25
        }
      ]
    },
    {
      "snippet": "* Context summary\n*/\nexport interface ContextSummary {\noriginalMission: string;\ncompletedSteps: SubMissionResult[];",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.d.ts",
          "line": 23
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 26
        }
      ]
    },
    {
      "snippet": "*/\nexport interface ContextSummary {\noriginalMission: string;\ncompletedSteps: SubMissionResult[];\nsummary: string;",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.d.ts",
          "line": 24
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 27
        }
      ]
    },
    {
      "snippet": "export interface ContextSummary {\noriginalMission: string;\ncompletedSteps: SubMissionResult[];\nsummary: string;\ntokenCount: number;",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.d.ts",
          "line": 25
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 28
        }
      ]
    },
    {
      "snippet": "originalMission: string;\ncompletedSteps: SubMissionResult[];\nsummary: string;\ntokenCount: number;\nstrategy: ContextStrategy;",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.d.ts",
          "line": 26
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 29
        }
      ]
    },
    {
      "snippet": "completedSteps: SubMissionResult[];\nsummary: string;\ntokenCount: number;\nstrategy: ContextStrategy;\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.d.ts",
          "line": 27
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 30
        }
      ]
    },
    {
      "snippet": "/**\n* ContextPropagator class\n*\n* Manages context across mission chains to prevent context window overflow\n*/",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.d.ts",
          "line": 40
        },
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 10
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 54
        }
      ]
    },
    {
      "snippet": "this.config = {\nstrategy: config.strategy || 'map-reduce',\nsummaryModel: config.summaryModel || 'claude',\n...config,\n};",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 17
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 63
        }
      ]
    },
    {
      "snippet": "strategy: config.strategy || 'map-reduce',\nsummaryModel: config.summaryModel || 'claude',\n...config,\n};\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 18
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 64
        }
      ]
    },
    {
      "snippet": "switch (strategy) {\ncase 'full':\nsummary = this.fullContextStuffing(originalMission, completedResults);\nbreak;\ncase 'extractive':",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 29
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 81
        }
      ]
    },
    {
      "snippet": "case 'full':\nsummary = this.fullContextStuffing(originalMission, completedResults);\nbreak;\ncase 'extractive':\nsummary = this.extractiveSummarization(originalMission, completedResults);",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 30
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 82
        }
      ]
    },
    {
      "snippet": "summary = this.fullContextStuffing(originalMission, completedResults);\nbreak;\ncase 'extractive':\nsummary = this.extractiveSummarization(originalMission, completedResults);\nbreak;",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 31
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 83
        }
      ]
    },
    {
      "snippet": "break;\ncase 'extractive':\nsummary = this.extractiveSummarization(originalMission, completedResults);\nbreak;\ncase 'abstractive':",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 32
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 84
        }
      ]
    },
    {
      "snippet": "case 'extractive':\nsummary = this.extractiveSummarization(originalMission, completedResults);\nbreak;\ncase 'abstractive':\nsummary = this.abstractiveSummarization(originalMission, completedResults);",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 33
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 85
        }
      ]
    },
    {
      "snippet": "summary = this.extractiveSummarization(originalMission, completedResults);\nbreak;\ncase 'abstractive':\nsummary = this.abstractiveSummarization(originalMission, completedResults);\nbreak;",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 34
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 86
        }
      ]
    },
    {
      "snippet": "break;\ncase 'abstractive':\nsummary = this.abstractiveSummarization(originalMission, completedResults);\nbreak;\ncase 'map-reduce':",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 35
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 87
        }
      ]
    },
    {
      "snippet": "case 'abstractive':\nsummary = this.abstractiveSummarization(originalMission, completedResults);\nbreak;\ncase 'map-reduce':\nsummary = this.mapReduceSummarization(originalMission, completedResults);",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 36
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 88
        }
      ]
    },
    {
      "snippet": "summary = this.abstractiveSummarization(originalMission, completedResults);\nbreak;\ncase 'map-reduce':\nsummary = this.mapReduceSummarization(originalMission, completedResults);\nbreak;",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 37
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 89
        }
      ]
    },
    {
      "snippet": "break;\ncase 'map-reduce':\nsummary = this.mapReduceSummarization(originalMission, completedResults);\nbreak;\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 38
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 90
        }
      ]
    },
    {
      "snippet": "return {\noriginalMission,\ncompletedSteps: completedResults,\nsummary,\ntokenCount,",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 44
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 98
        }
      ]
    },
    {
      "snippet": "originalMission,\ncompletedSteps: completedResults,\nsummary,\ntokenCount,\nstrategy,",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 45
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 99
        }
      ]
    },
    {
      "snippet": "completedSteps: completedResults,\nsummary,\ntokenCount,\nstrategy,\n};",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 46
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 100
        }
      ]
    },
    {
      "snippet": "summary,\ntokenCount,\nstrategy,\n};\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 47
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 101
        }
      ]
    },
    {
      "snippet": "'=== ORIGINAL MISSION ===',\noriginalMission,\n'',\n'=== COMPLETED SUB-MISSIONS ===',\n];",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 74
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 139
        }
      ]
    },
    {
      "snippet": "for (const result of completedResults) {\nparts.push(`\\n--- Sub-Mission: ${result.missionId} ---`);\nparts.push(`Status: ${result.status}`);\nparts.push(`Input: ${result.input}`);\nparts.push(`Output: ${r",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 79
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 145
        }
      ]
    },
    {
      "snippet": "parts.push(`\\n--- Sub-Mission: ${result.missionId} ---`);\nparts.push(`Status: ${result.status}`);\nparts.push(`Input: ${result.input}`);\nparts.push(`Output: ${result.output}`);\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 80
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 146
        }
      ]
    },
    {
      "snippet": "'=== ORIGINAL MISSION (Summary) ===',\nthis.extractKeyInfo(originalMission).keySentences.slice(0, 3).join(' '),\n'',\n'=== COMPLETED STEPS (Key Outputs) ===',\n];",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 93
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 164
        }
      ]
    },
    {
      "snippet": "'=== MISSION OVERVIEW ===',\n`The mission aims to: ${this.extractObjective(originalMission)}`,\n'',\n'=== PROGRESS ===',\n];",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 112
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 189
        }
      ]
    },
    {
      "snippet": "for (let i = 0; i < completedResults.length; i++) {\nconst result = completedResults[i];\nconst keyPoints = this.extractKeyInfo(result.output).keySentences.slice(0, 1);\nparts.push(`Step ${i + 1}: ${keyP",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 117
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 195
        }
      ]
    },
    {
      "snippet": "// Map phase: Summarize each result individually\nconst individualSummaries = completedResults.map(result => {\nconst extracted = this.extractKeyInfo(result.output);\nreturn {\nmissionId: result.missionId",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 129
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 212
        }
      ]
    },
    {
      "snippet": "const individualSummaries = completedResults.map(result => {\nconst extracted = this.extractKeyInfo(result.output);\nreturn {\nmissionId: result.missionId,\nsummary: extracted.keySentences.slice(0, 2).joi",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 130
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 213
        }
      ]
    },
    {
      "snippet": "const extracted = this.extractKeyInfo(result.output);\nreturn {\nmissionId: result.missionId,\nsummary: extracted.keySentences.slice(0, 2).join(' '),\nstatus: result.status,",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 131
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 214
        }
      ]
    },
    {
      "snippet": "return {\nmissionId: result.missionId,\nsummary: extracted.keySentences.slice(0, 2).join(' '),\nstatus: result.status,\n};",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 132
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 215
        }
      ]
    },
    {
      "snippet": "missionId: result.missionId,\nsummary: extracted.keySentences.slice(0, 2).join(' '),\nstatus: result.status,\n};\n});",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 133
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 216
        }
      ]
    },
    {
      "snippet": "'=== MISSION CONTEXT ===',\nthis.extractKeyInfo(originalMission).keySentences.slice(0, 2).join(' '),\n'',\n'=== EXECUTION SUMMARY ===',\n];",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 141
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 226
        }
      ]
    },
    {
      "snippet": "for (const [group, summaries] of Object.entries(grouped)) {\nparts.push(`\\n${group}:`);\nfor (const summary of summaries) {\nparts.push(`- ${summary.summary}`);\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 146
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 232
        }
      ]
    },
    {
      "snippet": "parts.push(`\\n${group}:`);\nfor (const summary of summaries) {\nparts.push(`- ${summary.summary}`);\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 147
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 233
        }
      ]
    },
    {
      "snippet": "// Keywords indicating importance\nconst importantKeywords = [\n'objective',\n'goal',\n'success',",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 165
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 255
        }
      ]
    },
    {
      "snippet": "const importantKeywords = [\n'objective',\n'goal',\n'success',\n'complete',",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 166
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 256
        }
      ]
    },
    {
      "snippet": "'objective',\n'goal',\n'success',\n'complete',\n'implement',",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 167
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 257
        }
      ]
    },
    {
      "snippet": "'goal',\n'success',\n'complete',\n'implement',\n'create',",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 168
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 258
        }
      ]
    },
    {
      "snippet": "'success',\n'complete',\n'implement',\n'create',\n'result',",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 169
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 259
        }
      ]
    },
    {
      "snippet": "'complete',\n'implement',\n'create',\n'result',\n'achieve',",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 170
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 260
        }
      ]
    },
    {
      "snippet": "'implement',\n'create',\n'result',\n'achieve',\n'deliver',",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 171
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 261
        }
      ]
    },
    {
      "snippet": "'create',\n'result',\n'achieve',\n'deliver',\n];",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 172
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 262
        }
      ]
    },
    {
      "snippet": "for (const keyword of importantKeywords) {\nif (sentence.toLowerCase().includes(keyword)) {\nscore += 2;\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 177
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 268
        }
      ]
    },
    {
      "snippet": "// Sort by score and take top sentences\nconst keySentences = scoredSentences\n.sort((a, b) => b.score - a.score)\n.slice(0, 5)\n.map(s => s.sentence);",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 194
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 287
        }
      ]
    },
    {
      "snippet": "return {\nkeySentences,\nkeyPhrases,\nimportance: scoredSentences.reduce((sum, s) => sum + s.score, 0) / sentences.length,\n};",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 201
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 296
        }
      ]
    },
    {
      "snippet": "keySentences,\nkeyPhrases,\nimportance: scoredSentences.reduce((sum, s) => sum + s.score, 0) / sentences.length,\n};\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 202
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 297
        }
      ]
    },
    {
      "snippet": "// Look for objective/goal statements\nconst objectiveMatch = missionText.match(/(?:objective|goal|purpose|aim):\\s*([^.\\n]+)/i);\nif (objectiveMatch) {\nreturn objectiveMatch[1].trim();\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 224
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 324
        }
      ]
    },
    {
      "snippet": "for (let i = 0; i < summaries.length; i++) {\nconst groupKey = `Phase ${Math.floor(i / 3) + 1}`;\nif (!grouped[groupKey]) {\ngrouped[groupKey] = [];\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 240
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 345
        }
      ]
    },
    {
      "snippet": "const groupKey = `Phase ${Math.floor(i / 3) + 1}`;\nif (!grouped[groupKey]) {\ngrouped[groupKey] = [];\n}\ngrouped[groupKey].push({",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 241
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 346
        }
      ]
    },
    {
      "snippet": "if (!grouped[groupKey]) {\ngrouped[groupKey] = [];\n}\ngrouped[groupKey].push({\nmissionId: summaries[i].missionId,",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 242
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 347
        }
      ]
    },
    {
      "snippet": "grouped[groupKey] = [];\n}\ngrouped[groupKey].push({\nmissionId: summaries[i].missionId,\nsummary: summaries[i].summary,",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 243
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 348
        }
      ]
    },
    {
      "snippet": "}\ngrouped[groupKey].push({\nmissionId: summaries[i].missionId,\nsummary: summaries[i].summary,\n});",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 244
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 349
        }
      ]
    },
    {
      "snippet": "grouped[groupKey].push({\nmissionId: summaries[i].missionId,\nsummary: summaries[i].summary,\n});\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 245
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 350
        }
      ]
    },
    {
      "snippet": "const overflow = summary.tokenCount - this.config.maxContextTokens;\nreturn {\nvalid: overflow <= 0,\noverflow: Math.max(0, overflow),\n};",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 263
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 371
        }
      ]
    },
    {
      "snippet": "return {\nvalid: overflow <= 0,\noverflow: Math.max(0, overflow),\n};\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/context-propagator.js",
          "line": 264
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 372
        }
      ]
    },
    {
      "snippet": "/**\n* Represents a node in the dependency graph\n*/\nexport interface DependencyNode {\nmissionId: string;",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.d.ts",
          "line": 1
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 5
        }
      ]
    },
    {
      "snippet": "* Represents a node in the dependency graph\n*/\nexport interface DependencyNode {\nmissionId: string;\nfilePath: string;",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.d.ts",
          "line": 2
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 6
        }
      ]
    },
    {
      "snippet": "*/\nexport interface DependencyNode {\nmissionId: string;\nfilePath: string;\ndependencies: string[];",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.d.ts",
          "line": 3
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 7
        }
      ]
    },
    {
      "snippet": "export interface DependencyNode {\nmissionId: string;\nfilePath: string;\ndependencies: string[];\nimplicitDependencies?: string[];",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.d.ts",
          "line": 4
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 8
        }
      ]
    },
    {
      "snippet": "missionId: string;\nfilePath: string;\ndependencies: string[];\nimplicitDependencies?: string[];\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.d.ts",
          "line": 5
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 9
        }
      ]
    },
    {
      "snippet": "/**\n* Represents a dependency graph\n*/\nexport interface DependencyGraph {\nnodes: Map<string, DependencyNode>;",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.d.ts",
          "line": 10
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 15
        }
      ]
    },
    {
      "snippet": "* Represents a dependency graph\n*/\nexport interface DependencyGraph {\nnodes: Map<string, DependencyNode>;\nedges: Map<string, Set<string>>;",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.d.ts",
          "line": 11
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 16
        }
      ]
    },
    {
      "snippet": "*/\nexport interface DependencyGraph {\nnodes: Map<string, DependencyNode>;\nedges: Map<string, Set<string>>;\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.d.ts",
          "line": 12
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 17
        }
      ]
    },
    {
      "snippet": "/**\n* Result of dependency analysis\n*/\nexport interface DependencyAnalysisResult {\ngraph: DependencyGraph;",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.d.ts",
          "line": 17
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 23
        }
      ]
    },
    {
      "snippet": "* Result of dependency analysis\n*/\nexport interface DependencyAnalysisResult {\ngraph: DependencyGraph;\nhasCycles: boolean;",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.d.ts",
          "line": 18
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 24
        }
      ]
    },
    {
      "snippet": "*/\nexport interface DependencyAnalysisResult {\ngraph: DependencyGraph;\nhasCycles: boolean;\ncycles?: string[][];",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.d.ts",
          "line": 19
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 25
        }
      ]
    },
    {
      "snippet": "export interface DependencyAnalysisResult {\ngraph: DependencyGraph;\nhasCycles: boolean;\ncycles?: string[][];\nexecutionOrder?: string[];",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.d.ts",
          "line": 20
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 26
        }
      ]
    },
    {
      "snippet": "graph: DependencyGraph;\nhasCycles: boolean;\ncycles?: string[][];\nexecutionOrder?: string[];\ncriticalPath?: string[];",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.d.ts",
          "line": 21
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 27
        }
      ]
    },
    {
      "snippet": "hasCycles: boolean;\ncycles?: string[][];\nexecutionOrder?: string[];\ncriticalPath?: string[];\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.d.ts",
          "line": 22
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 28
        }
      ]
    },
    {
      "snippet": "/**\n* Analyze dependencies for a set of missions\n* @param missions Array of mission file paths or mission objects\n* @returns DependencyAnalysisResult\n*/",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.d.ts",
          "line": 34
        },
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 50
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 48
        }
      ]
    },
    {
      "snippet": "/**\n* Extract mission ID from a mission reference string\n* Handles formats like \"R4.3_Intelligent_Mission_Sequencing\" or \"<R4.3_Intelligent_Mission_Sequencing>\"\n* Also handles simple IDs like \"A\", \"B\"",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.d.ts",
          "line": 50
        },
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 161
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 178
        }
      ]
    },
    {
      "snippet": "/**\n* Extract the cycle path when a back edge is detected\n*/\nprivate extractCycle;\n/**",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.d.ts",
          "line": 66
        },
        {
          "path": "dist/intelligence/graph-validator.d.ts",
          "line": 42
        }
      ]
    },
    {
      "snippet": "/**\n* Perform topological sort using Kahn's algorithm (BFS-based)\n* Based on R4.3 research: \"Use Kahn's algorithm for parallel execution identification\"\n*\n* Note: In our graph, edge from A->B means A ",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.d.ts",
          "line": 70
        },
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 271
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 308
        }
      ]
    },
    {
      "snippet": "* Perform topological sort using Kahn's algorithm (BFS-based)\n* Based on R4.3 research: \"Use Kahn's algorithm for parallel execution identification\"\n*\n* Note: In our graph, edge from A->B means A depe",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.d.ts",
          "line": 71
        },
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 272
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 309
        }
      ]
    },
    {
      "snippet": "/**\n* Find the critical path in the dependency graph\n* Based on R4.3 research: \"Critical Path Method (CPM) for identifying temporal bottlenecks\"\n* Simplified implementation assuming uniform task durat",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.d.ts",
          "line": 77
        },
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 311
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 355
        }
      ]
    },
    {
      "snippet": "* Find the critical path in the dependency graph\n* Based on R4.3 research: \"Critical Path Method (CPM) for identifying temporal bottlenecks\"\n* Simplified implementation assuming uniform task duration\n",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.d.ts",
          "line": 78
        },
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 312
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 356
        }
      ]
    },
    {
      "snippet": "* Based on R4.3 research: \"Critical Path Method (CPM) for identifying temporal bottlenecks\"\n* Simplified implementation assuming uniform task duration\n*\n* Critical path is the longest path from any ro",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.d.ts",
          "line": 79
        },
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 313
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 357
        }
      ]
    },
    {
      "snippet": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\nif (k2 === undefined) k2 = k;\nvar desc = Object.getOwnPropertyDescriptor(m, k);\nif (!des",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 1
        },
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 1
        }
      ]
    },
    {
      "snippet": "constructor() {\nthis.graph = {\nnodes: new Map(),\nedges: new Map()\n};",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 44
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 41
        }
      ]
    },
    {
      "snippet": "this.graph = {\nnodes: new Map(),\nedges: new Map()\n};\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 45
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 42
        }
      ]
    },
    {
      "snippet": "// Clear previous graph\nthis.graph = {\nnodes: new Map(),\nedges: new Map()\n};",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 56
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 54
        }
      ]
    },
    {
      "snippet": "return {\ngraph: this.graph,\nhasCycles,\ncycles,\nexecutionOrder,",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 72
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 75
        }
      ]
    },
    {
      "snippet": "graph: this.graph,\nhasCycles,\ncycles,\nexecutionOrder,\ncriticalPath",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 73
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 76
        }
      ]
    },
    {
      "snippet": "hasCycles,\ncycles,\nexecutionOrder,\ncriticalPath\n};",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 74
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 77
        }
      ]
    },
    {
      "snippet": "cycles,\nexecutionOrder,\ncriticalPath\n};\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 75
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 78
        }
      ]
    },
    {
      "snippet": "if (typeof mission === 'string') {\n// Mission is a file path\nfilePath = mission;\nconst content = await fs.promises.readFile(filePath, 'utf-8');\nmissionData = yaml.load(content);",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 88
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 93
        }
      ]
    },
    {
      "snippet": "// Check researchFoundation field\nif (missionData.domainFields?.researchFoundation) {\nfor (const finding of missionData.domainFields.researchFoundation) {\nif (finding.sourceMission) {\n// Extract missi",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 125
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 137
        }
      ]
    },
    {
      "snippet": "if (missionData.domainFields?.researchFoundation) {\nfor (const finding of missionData.domainFields.researchFoundation) {\nif (finding.sourceMission) {\n// Extract mission ID from source mission referenc",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 126
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 138
        }
      ]
    },
    {
      "snippet": "for (const finding of missionData.domainFields.researchFoundation) {\nif (finding.sourceMission) {\n// Extract mission ID from source mission reference\nconst missionId = this.extractMissionId(finding.so",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 127
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 139
        }
      ]
    },
    {
      "snippet": "if (finding.sourceMission) {\n// Extract mission ID from source mission reference\nconst missionId = this.extractMissionId(finding.sourceMission);\nif (missionId) {\ndependencies.add(missionId);",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 128
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 140
        }
      ]
    },
    {
      "snippet": "// Extract mission ID from source mission reference\nconst missionId = this.extractMissionId(finding.sourceMission);\nif (missionId) {\ndependencies.add(missionId);\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 129
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 141
        }
      ]
    },
    {
      "snippet": "const missionId = this.extractMissionId(finding.sourceMission);\nif (missionId) {\ndependencies.add(missionId);\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 130
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 142
        }
      ]
    },
    {
      "snippet": "if (missionId) {\ndependencies.add(missionId);\n}\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 131
        },
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 141
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 143
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 154
        }
      ]
    },
    {
      "snippet": "dependencies.add(missionId);\n}\n}\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 132
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 144
        }
      ]
    },
    {
      "snippet": "// Check handoffContext dependencies\nif (missionData.domainFields?.handoffContext?.dependencies) {\nfor (const dep of missionData.domainFields.handoffContext.dependencies) {\nconst missionId = this.extr",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 137
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 150
        }
      ]
    },
    {
      "snippet": "if (missionData.domainFields?.handoffContext?.dependencies) {\nfor (const dep of missionData.domainFields.handoffContext.dependencies) {\nconst missionId = this.extractMissionId(dep);\nif (missionId) {\nd",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 138
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 151
        }
      ]
    },
    {
      "snippet": "for (const dep of missionData.domainFields.handoffContext.dependencies) {\nconst missionId = this.extractMissionId(dep);\nif (missionId) {\ndependencies.add(missionId);\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 139
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 152
        }
      ]
    },
    {
      "snippet": "const missionId = this.extractMissionId(dep);\nif (missionId) {\ndependencies.add(missionId);\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 140
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 153
        }
      ]
    },
    {
      "snippet": "// Check context field for mission references\nif (missionData.context) {\nconst contextDeps = this.extractMissionReferencesFromText(missionData.context);\ncontextDeps.forEach(dep => dependencies.add(dep",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 146
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 160
        }
      ]
    },
    {
      "snippet": "// Check blockers field\nif (missionData.domainFields?.handoffContext?.blockers) {\nfor (const blocker of missionData.domainFields.handoffContext.blockers) {\nif (blocker.missionId) {\ndependencies.add(bl",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 151
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 166
        }
      ]
    },
    {
      "snippet": "if (missionData.domainFields?.handoffContext?.blockers) {\nfor (const blocker of missionData.domainFields.handoffContext.blockers) {\nif (blocker.missionId) {\ndependencies.add(blocker.missionId);\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 152
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 167
        }
      ]
    },
    {
      "snippet": "for (const blocker of missionData.domainFields.handoffContext.blockers) {\nif (blocker.missionId) {\ndependencies.add(blocker.missionId);\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 153
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 168
        }
      ]
    },
    {
      "snippet": "if (blocker.missionId) {\ndependencies.add(blocker.missionId);\n}\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 154
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 169
        }
      ]
    },
    {
      "snippet": "// Extract mission ID pattern (e.g., R4.3, B3.2, etc.)\nconst match = cleaned.match(/^([A-Z]\\d+\\.\\d+)/);\nif (match) {\nreturn match[1];\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 169
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 187
        }
      ]
    },
    {
      "snippet": "const missionPattern = /[A-Z]\\d+\\.\\d+/g;\nconst matches = text.match(missionPattern);\nif (matches) {\nmatches.forEach(match => references.add(match));\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 188
        },
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 194
        }
      ]
    },
    {
      "snippet": "// Also match simple single-letter mission IDs (for tests)\nconst simplePattern = /\\b([A-Z])\\b/g;\nconst simpleMatches = text.match(simplePattern);\nif (simpleMatches) {\nsimpleMatches.forEach(match => re",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 193
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 217
        }
      ]
    },
    {
      "snippet": "const simplePattern = /\\b([A-Z])\\b/g;\nconst simpleMatches = text.match(simplePattern);\nif (simpleMatches) {\nsimpleMatches.forEach(match => references.add(match));\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 194
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 218
        }
      ]
    },
    {
      "snippet": "const WHITE = 0; // Not visited\nconst GREY = 1; // Currently visiting\nconst BLACK = 2; // Completely visited\nconst color = new Map();\nconst parent = new Map();",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 206
        },
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 58
        }
      ]
    },
    {
      "snippet": "const GREY = 1; // Currently visiting\nconst BLACK = 2; // Completely visited\nconst color = new Map();\nconst parent = new Map();\nconst cycles = [];",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 207
        },
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 59
        }
      ]
    },
    {
      "snippet": "const BLACK = 2; // Completely visited\nconst color = new Map();\nconst parent = new Map();\nconst cycles = [];\n// Initialize all nodes as white",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 208
        },
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 60
        }
      ]
    },
    {
      "snippet": "// Initialize all nodes as white\nfor (const nodeId of this.graph.nodes.keys()) {\ncolor.set(nodeId, WHITE);\nparent.set(nodeId, null);\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 212
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 240
        }
      ]
    },
    {
      "snippet": "const edges = this.graph.edges.get(nodeId);\nif (edges) {\nfor (const neighbor of edges) {\n// Skip if neighbor doesn't exist in graph\nif (!this.graph.nodes.has(neighbor)) {",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 220
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 250
        }
      ]
    },
    {
      "snippet": "if (edges) {\nfor (const neighbor of edges) {\n// Skip if neighbor doesn't exist in graph\nif (!this.graph.nodes.has(neighbor)) {\ncontinue;",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 221
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 251
        }
      ]
    },
    {
      "snippet": "for (const neighbor of edges) {\n// Skip if neighbor doesn't exist in graph\nif (!this.graph.nodes.has(neighbor)) {\ncontinue;\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 222
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 252
        }
      ]
    },
    {
      "snippet": "if (color.get(neighbor) === WHITE) {\nparent.set(neighbor, nodeId);\nif (dfs(neighbor)) {\nreturn true;\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 227
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 258
        }
      ]
    },
    {
      "snippet": "}\nelse if (color.get(neighbor) === GREY) {\n// Back edge found - we have a cycle\nconst cycle = this.extractCycle(nodeId, neighbor, parent);\ncycles.push(cycle);",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 232
        },
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 83
        }
      ]
    },
    {
      "snippet": "// Back edge found - we have a cycle\nconst cycle = this.extractCycle(nodeId, neighbor, parent);\ncycles.push(cycle);\nreturn true;\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 234
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 264
        }
      ]
    },
    {
      "snippet": "const cycle = this.extractCycle(nodeId, neighbor, parent);\ncycles.push(cycle);\nreturn true;\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 235
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 265
        }
      ]
    },
    {
      "snippet": "cycles.push(cycle);\nreturn true;\n}\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 236
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 266
        }
      ]
    },
    {
      "snippet": "// Run DFS from each unvisited node\nlet hasCycles = false;\nfor (const nodeId of this.graph.nodes.keys()) {\nif (color.get(nodeId) === WHITE) {\nif (dfs(nodeId)) {",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 244
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 276
        }
      ]
    },
    {
      "snippet": "let hasCycles = false;\nfor (const nodeId of this.graph.nodes.keys()) {\nif (color.get(nodeId) === WHITE) {\nif (dfs(nodeId)) {\nhasCycles = true;",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 245
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 277
        }
      ]
    },
    {
      "snippet": "for (const nodeId of this.graph.nodes.keys()) {\nif (color.get(nodeId) === WHITE) {\nif (dfs(nodeId)) {\nhasCycles = true;\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 246
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 278
        }
      ]
    },
    {
      "snippet": "if (color.get(nodeId) === WHITE) {\nif (dfs(nodeId)) {\nhasCycles = true;\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 247
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 279
        }
      ]
    },
    {
      "snippet": "if (dfs(nodeId)) {\nhasCycles = true;\n}\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 248
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 280
        }
      ]
    },
    {
      "snippet": "return {\nhasCycles,\ncycles: cycles.length > 0 ? cycles : undefined\n};\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 253
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 286
        }
      ]
    },
    {
      "snippet": "};\n}\n/**\n* Extract the cycle path when a back edge is detected\n*/",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 256
        },
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 103
        }
      ]
    },
    {
      "snippet": "}\n/**\n* Extract the cycle path when a back edge is detected\n*/\nextractCycle(current, backEdge, parent) {",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 257
        },
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 104
        }
      ]
    },
    {
      "snippet": "/**\n* Extract the cycle path when a back edge is detected\n*/\nextractCycle(current, backEdge, parent) {\nconst cycle = [backEdge, current];",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 258
        },
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 105
        }
      ]
    },
    {
      "snippet": "* Extract the cycle path when a back edge is detected\n*/\nextractCycle(current, backEdge, parent) {\nconst cycle = [backEdge, current];\nlet node = parent.get(current);",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 259
        },
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 106
        }
      ]
    },
    {
      "snippet": "*/\nextractCycle(current, backEdge, parent) {\nconst cycle = [backEdge, current];\nlet node = parent.get(current);\nwhile (node && node !== backEdge) {",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 260
        },
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 107
        }
      ]
    },
    {
      "snippet": "extractCycle(current, backEdge, parent) {\nconst cycle = [backEdge, current];\nlet node = parent.get(current);\nwhile (node && node !== backEdge) {\ncycle.unshift(node);",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 261
        },
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 108
        }
      ]
    },
    {
      "snippet": "const cycle = [backEdge, current];\nlet node = parent.get(current);\nwhile (node && node !== backEdge) {\ncycle.unshift(node);\nnode = parent.get(node);",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 262
        },
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 109
        }
      ]
    },
    {
      "snippet": "let node = parent.get(current);\nwhile (node && node !== backEdge) {\ncycle.unshift(node);\nnode = parent.get(node);\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 263
        },
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 110
        }
      ]
    },
    {
      "snippet": "while (node && node !== backEdge) {\ncycle.unshift(node);\nnode = parent.get(node);\n}\ncycle.unshift(backEdge); // Complete the cycle",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 264
        },
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 111
        }
      ]
    },
    {
      "snippet": "cycle.unshift(node);\nnode = parent.get(node);\n}\ncycle.unshift(backEdge); // Complete the cycle\nreturn cycle;",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 265
        },
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 112
        }
      ]
    },
    {
      "snippet": "node = parent.get(node);\n}\ncycle.unshift(backEdge); // Complete the cycle\nreturn cycle;\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 266
        },
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 113
        }
      ]
    },
    {
      "snippet": "}\ncycle.unshift(backEdge); // Complete the cycle\nreturn cycle;\n}\n/**",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 267
        },
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 114
        }
      ]
    },
    {
      "snippet": "// Initialize out-degree for all nodes (count of dependencies)\nfor (const nodeId of this.graph.nodes.keys()) {\nconst edges = this.graph.edges.get(nodeId) || new Set();\nconst validDeps = Array.from(edg",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 281
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 319
        }
      ]
    },
    {
      "snippet": "for (const nodeId of this.graph.nodes.keys()) {\nconst edges = this.graph.edges.get(nodeId) || new Set();\nconst validDeps = Array.from(edges).filter(dep => this.graph.nodes.has(dep));\noutDegree.set(nod",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 282
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 320
        }
      ]
    },
    {
      "snippet": "// Add all nodes with out-degree 0 to queue (nodes with no dependencies)\nfor (const [nodeId, degree] of outDegree.entries()) {\nif (degree === 0) {\nqueue.push(nodeId);\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 287
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 326
        }
      ]
    },
    {
      "snippet": "for (const [nodeId, degree] of outDegree.entries()) {\nif (degree === 0) {\nqueue.push(nodeId);\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 288
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 327
        }
      ]
    },
    {
      "snippet": "// Find all nodes that depend on this node\nfor (const [otherId, edges] of this.graph.edges.entries()) {\nif (edges.has(nodeId)) {\n// otherId depends on nodeId, so reduce its out-degree\nconst newDegree ",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 297
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 338
        }
      ]
    },
    {
      "snippet": "for (const [otherId, edges] of this.graph.edges.entries()) {\nif (edges.has(nodeId)) {\n// otherId depends on nodeId, so reduce its out-degree\nconst newDegree = (outDegree.get(otherId) || 0) - 1;\noutDeg",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 298
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 339
        }
      ]
    },
    {
      "snippet": "if (newDegree === 0) {\nqueue.push(otherId);\n}\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 303
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 345
        }
      ]
    },
    {
      "snippet": "queue.push(otherId);\n}\n}\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 304
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 346
        }
      ]
    },
    {
      "snippet": "// Initialize distances to 0 for all nodes\nfor (const nodeId of this.graph.nodes.keys()) {\ndistances.set(nodeId, 0);\nparent.set(nodeId, null);\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 323
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 368
        }
      ]
    },
    {
      "snippet": "for (const depId of edges) {\nif (this.graph.nodes.has(depId)) {\nconst depDist = distances.get(depId) || 0;\nif (depDist > maxDepDist) {\nmaxDepDist = depDist;",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 337
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 386
        }
      ]
    },
    {
      "snippet": "if (this.graph.nodes.has(depId)) {\nconst depDist = distances.get(depId) || 0;\nif (depDist > maxDepDist) {\nmaxDepDist = depDist;\nmaxDepNode = depId;",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 338
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 387
        }
      ]
    },
    {
      "snippet": "const depDist = distances.get(depId) || 0;\nif (depDist > maxDepDist) {\nmaxDepDist = depDist;\nmaxDepNode = depId;\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 339
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 388
        }
      ]
    },
    {
      "snippet": "if (depDist > maxDepDist) {\nmaxDepDist = depDist;\nmaxDepNode = depId;\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 340
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 389
        }
      ]
    },
    {
      "snippet": "maxDepDist = depDist;\nmaxDepNode = depId;\n}\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 341
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 390
        }
      ]
    },
    {
      "snippet": "if (maxDepNode !== null) {\ndistances.set(nodeId, maxDepDist + 1);\nparent.set(nodeId, maxDepNode);\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 346
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 396
        }
      ]
    },
    {
      "snippet": "distances.set(nodeId, maxDepDist + 1);\nparent.set(nodeId, maxDepNode);\n}\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 347
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 397
        }
      ]
    },
    {
      "snippet": "for (const [nodeId, dist] of distances.entries()) {\nif (dist > maxDist) {\nmaxDist = dist;\nendNode = nodeId;\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 355
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 407
        }
      ]
    },
    {
      "snippet": "if (dist > maxDist) {\nmaxDist = dist;\nendNode = nodeId;\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 356
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 408
        }
      ]
    },
    {
      "snippet": "while (current) {\npath.push(current);\ncurrent = parent.get(current) || null;\n}\npath.reverse(); // Reverse to get start->end order",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 365
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 418
        }
      ]
    },
    {
      "snippet": "path.push(current);\ncurrent = parent.get(current) || null;\n}\npath.reverse(); // Reverse to get start->end order\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-analyzer.js",
          "line": 366
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 419
        }
      ]
    },
    {
      "snippet": "/**\n* Inferred dependency with confidence score\n*/\nexport interface InferredDependency {\nfrom: string;",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.d.ts",
          "line": 2
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 3
        }
      ]
    },
    {
      "snippet": "* Inferred dependency with confidence score\n*/\nexport interface InferredDependency {\nfrom: string;\nto: string;",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.d.ts",
          "line": 3
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 4
        }
      ]
    },
    {
      "snippet": "*/\nexport interface InferredDependency {\nfrom: string;\nto: string;\nconfidence: number;",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.d.ts",
          "line": 4
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 5
        }
      ]
    },
    {
      "snippet": "export interface InferredDependency {\nfrom: string;\nto: string;\nconfidence: number;\nreason: string;",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.d.ts",
          "line": 5
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 6
        }
      ]
    },
    {
      "snippet": "from: string;\nto: string;\nconfidence: number;\nreason: string;\nmethod: 'keyword' | 'semantic' | 'structural';",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.d.ts",
          "line": 6
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 7
        }
      ]
    },
    {
      "snippet": "to: string;\nconfidence: number;\nreason: string;\nmethod: 'keyword' | 'semantic' | 'structural';\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.d.ts",
          "line": 7
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 8
        }
      ]
    },
    {
      "snippet": "/**\n* DependencyInferrer - Infers implicit dependencies from text and structure\n* Based on research findings from R4.3_Intelligent_Mission_Sequencing\n* Uses NLP-based techniques: keyword matching, rel",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.d.ts",
          "line": 12
        },
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 4
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 14
        }
      ]
    },
    {
      "snippet": "/**\n* Infer implicit dependencies from mission context and text\n* @param graph The existing dependency graph\n* @param missionData The mission data to analyze\n* @returns Array of inferred dependencies",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.d.ts",
          "line": 20
        },
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 10
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 51
        }
      ]
    },
    {
      "snippet": "* Infer implicit dependencies from mission context and text\n* @param graph The existing dependency graph\n* @param missionData The mission data to analyze\n* @returns Array of inferred dependencies\n*/",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.d.ts",
          "line": 21
        },
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 11
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 52
        }
      ]
    },
    {
      "snippet": "// Infer from context field using keyword matching\nif (missionData.context) {\nconst keywordDeps = this.inferFromKeywords(missionId, missionData.context, graph);\ninferred.push(...keywordDeps);\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 20
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 63
        }
      ]
    },
    {
      "snippet": "// Infer from objective field\nif (missionData.objective) {\nconst objectiveDeps = this.inferFromKeywords(missionId, missionData.objective, graph);\ninferred.push(...objectiveDeps);\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 25
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 69
        }
      ]
    },
    {
      "snippet": "// Infer from success criteria\nif (missionData.successCriteria) {\nconst criteriaDeps = this.inferFromSuccessCriteria(missionId, missionData.successCriteria, graph);\ninferred.push(...criteriaDeps);\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 30
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 75
        }
      ]
    },
    {
      "snippet": "// Infer from deliverables\nif (missionData.deliverables) {\nconst deliverableDeps = this.inferFromDeliverables(missionId, missionData.deliverables, graph);\ninferred.push(...deliverableDeps);\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 35
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 81
        }
      ]
    },
    {
      "snippet": "// For each mission reference, look for nearby dependency keywords\nfor (const ref of missionRefs) {\nif (ref === missionId || !graph.nodes.has(ref)) {\ncontinue;\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 53
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 104
        }
      ]
    },
    {
      "snippet": "// Check if there's a dependency keyword near this reference\nfor (const keyword of DependencyInferrer.DEPENDENCY_KEYWORDS) {\nconst regex = new RegExp(`${keyword}[^.]*?${ref}|${ref}[^.]*?${keyword}`, '",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 58
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 110
        }
      ]
    },
    {
      "snippet": "for (const keyword of DependencyInferrer.DEPENDENCY_KEYWORDS) {\nconst regex = new RegExp(`${keyword}[^.]*?${ref}|${ref}[^.]*?${keyword}`, 'i');\nif (regex.test(text)) {\n// Determine direction based on ",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 59
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 111
        }
      ]
    },
    {
      "snippet": "inferred.push({\nfrom: missionId,\nto: ref,\nconfidence: 0.7,\nreason: `Found dependency keyword \"${keyword}\" near mission reference \"${ref}\"`,",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 64
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 117
        }
      ]
    },
    {
      "snippet": "from: missionId,\nto: ref,\nconfidence: 0.7,\nreason: `Found dependency keyword \"${keyword}\" near mission reference \"${ref}\"`,\nmethod: 'keyword'",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 65
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 118
        }
      ]
    },
    {
      "snippet": "to: ref,\nconfidence: 0.7,\nreason: `Found dependency keyword \"${keyword}\" near mission reference \"${ref}\"`,\nmethod: 'keyword'\n});",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 66
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 119
        }
      ]
    },
    {
      "snippet": "confidence: 0.7,\nreason: `Found dependency keyword \"${keyword}\" near mission reference \"${ref}\"`,\nmethod: 'keyword'\n});\nbreak;",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 67
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 120
        }
      ]
    },
    {
      "snippet": "reason: `Found dependency keyword \"${keyword}\" near mission reference \"${ref}\"`,\nmethod: 'keyword'\n});\nbreak;\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 68
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 121
        }
      ]
    },
    {
      "snippet": "method: 'keyword'\n});\nbreak;\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 69
        },
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 83
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 122
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 137
        }
      ]
    },
    {
      "snippet": "// Check for temporal keywords\nfor (const keyword of DependencyInferrer.TEMPORAL_KEYWORDS) {\nconst regex = new RegExp(`${keyword}[^.]*?${ref}|${ref}[^.]*?${keyword}`, 'i');\nif (regex.test(text)) {\ninf",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 74
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 128
        }
      ]
    },
    {
      "snippet": "for (const keyword of DependencyInferrer.TEMPORAL_KEYWORDS) {\nconst regex = new RegExp(`${keyword}[^.]*?${ref}|${ref}[^.]*?${keyword}`, 'i');\nif (regex.test(text)) {\ninferred.push({\nfrom: missionId,",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 75
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 129
        }
      ]
    },
    {
      "snippet": "const regex = new RegExp(`${keyword}[^.]*?${ref}|${ref}[^.]*?${keyword}`, 'i');\nif (regex.test(text)) {\ninferred.push({\nfrom: missionId,\nto: ref,",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 76
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 130
        }
      ]
    },
    {
      "snippet": "if (regex.test(text)) {\ninferred.push({\nfrom: missionId,\nto: ref,\nconfidence: 0.6,",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 77
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 131
        }
      ]
    },
    {
      "snippet": "inferred.push({\nfrom: missionId,\nto: ref,\nconfidence: 0.6,\nreason: `Found temporal keyword \"${keyword}\" near mission reference \"${ref}\"`,",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 78
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 132
        }
      ]
    },
    {
      "snippet": "from: missionId,\nto: ref,\nconfidence: 0.6,\nreason: `Found temporal keyword \"${keyword}\" near mission reference \"${ref}\"`,\nmethod: 'keyword'",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 79
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 133
        }
      ]
    },
    {
      "snippet": "to: ref,\nconfidence: 0.6,\nreason: `Found temporal keyword \"${keyword}\" near mission reference \"${ref}\"`,\nmethod: 'keyword'\n});",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 80
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 134
        }
      ]
    },
    {
      "snippet": "confidence: 0.6,\nreason: `Found temporal keyword \"${keyword}\" near mission reference \"${ref}\"`,\nmethod: 'keyword'\n});\nbreak;",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 81
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 135
        }
      ]
    },
    {
      "snippet": "reason: `Found temporal keyword \"${keyword}\" near mission reference \"${ref}\"`,\nmethod: 'keyword'\n});\nbreak;\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 82
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 136
        }
      ]
    },
    {
      "snippet": "});\nbreak;\n}\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 84
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 138
        }
      ]
    },
    {
      "snippet": "}\n}\n}\nreturn inferred;\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 86
        },
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 137
        }
      ]
    },
    {
      "snippet": "}\n}\nreturn inferred;\n}\n/**",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 87
        },
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 138
        },
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 184
        }
      ]
    },
    {
      "snippet": "inferred.push({\nfrom: missionId,\nto: ref,\nconfidence: 0.8,\nreason: `Mission ${ref} mentioned in success criteria`,",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 103
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 162
        }
      ]
    },
    {
      "snippet": "from: missionId,\nto: ref,\nconfidence: 0.8,\nreason: `Mission ${ref} mentioned in success criteria`,\nmethod: 'semantic'",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 104
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 163
        }
      ]
    },
    {
      "snippet": "to: ref,\nconfidence: 0.8,\nreason: `Mission ${ref} mentioned in success criteria`,\nmethod: 'semantic'\n});",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 105
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 164
        }
      ]
    },
    {
      "snippet": "confidence: 0.8,\nreason: `Mission ${ref} mentioned in success criteria`,\nmethod: 'semantic'\n});\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 106
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 165
        }
      ]
    },
    {
      "snippet": "// Check if any other missions reference these files\nfor (const [nodeId, node] of graph.nodes.entries()) {\nif (nodeId === missionId) {\ncontinue;\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 121
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 184
        }
      ]
    },
    {
      "snippet": "// Check if this mission's deliverables are referenced by other missions\nfor (const filePath of filePaths) {\nconst nodeText = JSON.stringify(node);\nif (nodeText.includes(filePath)) {\ninferred.push({",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 126
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 190
        }
      ]
    },
    {
      "snippet": "for (const filePath of filePaths) {\nconst nodeText = JSON.stringify(node);\nif (nodeText.includes(filePath)) {\ninferred.push({\nfrom: nodeId,",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 127
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 191
        }
      ]
    },
    {
      "snippet": "const nodeText = JSON.stringify(node);\nif (nodeText.includes(filePath)) {\ninferred.push({\nfrom: nodeId,\nto: missionId,",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 128
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 192
        }
      ]
    },
    {
      "snippet": "if (nodeText.includes(filePath)) {\ninferred.push({\nfrom: nodeId,\nto: missionId,\nconfidence: 0.7,",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 129
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 193
        }
      ]
    },
    {
      "snippet": "inferred.push({\nfrom: nodeId,\nto: missionId,\nconfidence: 0.7,\nreason: `Mission ${nodeId} references file ${filePath} which is a deliverable of ${missionId}`,",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 130
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 194
        }
      ]
    },
    {
      "snippet": "from: nodeId,\nto: missionId,\nconfidence: 0.7,\nreason: `Mission ${nodeId} references file ${filePath} which is a deliverable of ${missionId}`,\nmethod: 'structural'",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 131
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 195
        }
      ]
    },
    {
      "snippet": "to: missionId,\nconfidence: 0.7,\nreason: `Mission ${nodeId} references file ${filePath} which is a deliverable of ${missionId}`,\nmethod: 'structural'\n});",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 132
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 196
        }
      ]
    },
    {
      "snippet": "confidence: 0.7,\nreason: `Mission ${nodeId} references file ${filePath} which is a deliverable of ${missionId}`,\nmethod: 'structural'\n});\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 133
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 197
        }
      ]
    },
    {
      "snippet": "reason: `Mission ${nodeId} references file ${filePath} which is a deliverable of ${missionId}`,\nmethod: 'structural'\n});\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 134
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 198
        }
      ]
    },
    {
      "snippet": "method: 'structural'\n});\n}\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 135
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 199
        }
      ]
    },
    {
      "snippet": "// Extract mission number (e.g., \"B3.2\" -> {prefix: \"B\", major: 3, minor: 2})\nconst parsed = this.parseMissionId(missionId);\nif (!parsed) {\nreturn inferred;\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 148
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 215
        }
      ]
    },
    {
      "snippet": "// Look for missions with same prefix and lower minor version\nfor (const [nodeId, node] of graph.nodes.entries()) {\nif (nodeId === missionId) {\ncontinue;\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 153
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 221
        }
      ]
    },
    {
      "snippet": "// Same sprint (major version), previous mission (minor - 1)\nif (otherParsed.prefix === parsed.prefix &&\notherParsed.major === parsed.major &&\notherParsed.minor === parsed.minor - 1) {\ninferred.push({",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 162
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 232
        }
      ]
    },
    {
      "snippet": "if (otherParsed.prefix === parsed.prefix &&\notherParsed.major === parsed.major &&\notherParsed.minor === parsed.minor - 1) {\ninferred.push({\nfrom: missionId,",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 163
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 233
        }
      ]
    },
    {
      "snippet": "otherParsed.major === parsed.major &&\notherParsed.minor === parsed.minor - 1) {\ninferred.push({\nfrom: missionId,\nto: nodeId,",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 164
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 234
        }
      ]
    },
    {
      "snippet": "otherParsed.minor === parsed.minor - 1) {\ninferred.push({\nfrom: missionId,\nto: nodeId,\nconfidence: 0.5,",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 165
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 235
        }
      ]
    },
    {
      "snippet": "inferred.push({\nfrom: missionId,\nto: nodeId,\nconfidence: 0.5,\nreason: `Sequential mission numbering suggests ${missionId} follows ${nodeId}`,",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 166
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 236
        }
      ]
    },
    {
      "snippet": "from: missionId,\nto: nodeId,\nconfidence: 0.5,\nreason: `Sequential mission numbering suggests ${missionId} follows ${nodeId}`,\nmethod: 'structural'",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 167
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 237
        }
      ]
    },
    {
      "snippet": "to: nodeId,\nconfidence: 0.5,\nreason: `Sequential mission numbering suggests ${missionId} follows ${nodeId}`,\nmethod: 'structural'\n});",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 168
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 238
        }
      ]
    },
    {
      "snippet": "confidence: 0.5,\nreason: `Sequential mission numbering suggests ${missionId} follows ${nodeId}`,\nmethod: 'structural'\n});\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 169
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 239
        }
      ]
    },
    {
      "snippet": "// Research missions that build missions depend on\nif (parsed.prefix === 'B' && otherParsed.prefix === 'R' &&\nparsed.major === otherParsed.major) {\ninferred.push({\nfrom: missionId,",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 174
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 245
        }
      ]
    },
    {
      "snippet": "if (parsed.prefix === 'B' && otherParsed.prefix === 'R' &&\nparsed.major === otherParsed.major) {\ninferred.push({\nfrom: missionId,\nto: nodeId,",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 175
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 246
        }
      ]
    },
    {
      "snippet": "parsed.major === otherParsed.major) {\ninferred.push({\nfrom: missionId,\nto: nodeId,\nconfidence: 0.6,",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 176
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 247
        }
      ]
    },
    {
      "snippet": "inferred.push({\nfrom: missionId,\nto: nodeId,\nconfidence: 0.6,\nreason: `Build mission ${missionId} likely depends on research mission ${nodeId}`,",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 177
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 248
        }
      ]
    },
    {
      "snippet": "from: missionId,\nto: nodeId,\nconfidence: 0.6,\nreason: `Build mission ${missionId} likely depends on research mission ${nodeId}`,\nmethod: 'structural'",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 178
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 249
        }
      ]
    },
    {
      "snippet": "to: nodeId,\nconfidence: 0.6,\nreason: `Build mission ${missionId} likely depends on research mission ${nodeId}`,\nmethod: 'structural'\n});",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 179
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 250
        }
      ]
    },
    {
      "snippet": "confidence: 0.6,\nreason: `Build mission ${missionId} likely depends on research mission ${nodeId}`,\nmethod: 'structural'\n});\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 180
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 251
        }
      ]
    },
    {
      "snippet": "reason: `Build mission ${missionId} likely depends on research mission ${nodeId}`,\nmethod: 'structural'\n});\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 181
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 252
        }
      ]
    },
    {
      "snippet": "return {\nprefix: match[1],\nmajor: parseInt(match[2], 10),\nminor: parseInt(match[3], 10)\n};",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 222
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 303
        }
      ]
    },
    {
      "snippet": "prefix: match[1],\nmajor: parseInt(match[2], 10),\nminor: parseInt(match[3], 10)\n};\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 223
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 304
        }
      ]
    },
    {
      "snippet": "for (const dep of filtered) {\nconst node = graph.nodes.get(dep.from);\nif (node && !node.implicitDependencies) {\nnode.implicitDependencies = [];\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 240
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 324
        }
      ]
    },
    {
      "snippet": "'requires',\n'depends on',\n'after completion of',\n'is followed by',\n'prerequisite',",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 254
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 22
        }
      ]
    },
    {
      "snippet": "'depends on',\n'after completion of',\n'is followed by',\n'prerequisite',\n'based on',",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 255
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 23
        }
      ]
    },
    {
      "snippet": "'after completion of',\n'is followed by',\n'prerequisite',\n'based on',\n'builds on',",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 256
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 24
        }
      ]
    },
    {
      "snippet": "'is followed by',\n'prerequisite',\n'based on',\n'builds on',\n'extends',",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 257
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 25
        }
      ]
    },
    {
      "snippet": "'prerequisite',\n'based on',\n'builds on',\n'extends',\n'implements',",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 258
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 26
        }
      ]
    },
    {
      "snippet": "'based on',\n'builds on',\n'extends',\n'implements',\n'uses findings from',",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 259
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 27
        }
      ]
    },
    {
      "snippet": "'builds on',\n'extends',\n'implements',\n'uses findings from',\n'leverages',",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 260
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 28
        }
      ]
    },
    {
      "snippet": "'extends',\n'implements',\n'uses findings from',\n'leverages',\n'must complete before',",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 261
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 29
        }
      ]
    },
    {
      "snippet": "'implements',\n'uses findings from',\n'leverages',\n'must complete before',\n'blocked by',",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 262
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 30
        }
      ]
    },
    {
      "snippet": "'uses findings from',\n'leverages',\n'must complete before',\n'blocked by',\n'waiting for'",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 263
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 31
        }
      ]
    },
    {
      "snippet": "'leverages',\n'must complete before',\n'blocked by',\n'waiting for'\n];",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 264
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 32
        }
      ]
    },
    {
      "snippet": "'before',\n'after',\n'then',\n'next',\n'following',",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 271
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 40
        }
      ]
    },
    {
      "snippet": "'after',\n'then',\n'next',\n'following',\n'subsequent',",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 272
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 41
        }
      ]
    },
    {
      "snippet": "'then',\n'next',\n'following',\n'subsequent',\n'prior to',",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 273
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 42
        }
      ]
    },
    {
      "snippet": "'next',\n'following',\n'subsequent',\n'prior to',\n'once',",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 274
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 43
        }
      ]
    },
    {
      "snippet": "'following',\n'subsequent',\n'prior to',\n'once',\n'when complete'",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 275
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 44
        }
      ]
    },
    {
      "snippet": "'subsequent',\n'prior to',\n'once',\n'when complete'\n];",
      "occurrences": [
        {
          "path": "dist/intelligence/dependency-inferrer.js",
          "line": 276
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 45
        }
      ]
    },
    {
      "snippet": "/**\n* Cycle information\n*/\nexport interface CycleInfo {\nnodes: string[];",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.d.ts",
          "line": 2
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 3
        }
      ]
    },
    {
      "snippet": "* Cycle information\n*/\nexport interface CycleInfo {\nnodes: string[];\npath: string;",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.d.ts",
          "line": 3
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 4
        }
      ]
    },
    {
      "snippet": "*/\nexport interface CycleInfo {\nnodes: string[];\npath: string;\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.d.ts",
          "line": 4
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 5
        }
      ]
    },
    {
      "snippet": "/**\n* Validation result\n*/\nexport interface ValidationResult {\nisValid: boolean;",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.d.ts",
          "line": 9
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 11
        }
      ]
    },
    {
      "snippet": "* Validation result\n*/\nexport interface ValidationResult {\nisValid: boolean;\nisDAG: boolean;",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.d.ts",
          "line": 10
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 12
        }
      ]
    },
    {
      "snippet": "*/\nexport interface ValidationResult {\nisValid: boolean;\nisDAG: boolean;\ncycles: CycleInfo[];",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.d.ts",
          "line": 11
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 13
        }
      ]
    },
    {
      "snippet": "export interface ValidationResult {\nisValid: boolean;\nisDAG: boolean;\ncycles: CycleInfo[];\nerrors: string[];",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.d.ts",
          "line": 12
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 14
        }
      ]
    },
    {
      "snippet": "isValid: boolean;\nisDAG: boolean;\ncycles: CycleInfo[];\nerrors: string[];\nwarnings: string[];",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.d.ts",
          "line": 13
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 15
        }
      ]
    },
    {
      "snippet": "isDAG: boolean;\ncycles: CycleInfo[];\nerrors: string[];\nwarnings: string[];\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.d.ts",
          "line": 14
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 16
        }
      ]
    },
    {
      "snippet": "/**\n* Validate a dependency graph\n* @param graph The dependency graph to validate\n* @returns ValidationResult\n*/",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.d.ts",
          "line": 24
        },
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 9
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 27
        }
      ]
    },
    {
      "snippet": "if (cycleDetection.hasCycles) {\nfor (const cycle of cycleDetection.cycles) {\ncycles.push({\nnodes: cycle,\npath: cycle.join(' -> ')",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 22
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 43
        }
      ]
    },
    {
      "snippet": "for (const cycle of cycleDetection.cycles) {\ncycles.push({\nnodes: cycle,\npath: cycle.join(' -> ')\n});",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 23
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 44
        }
      ]
    },
    {
      "snippet": "cycles.push({\nnodes: cycle,\npath: cycle.join(' -> ')\n});\nerrors.push(`Circular dependency detected: ${cycle.join(' -> ')}`);",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 24
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 45
        }
      ]
    },
    {
      "snippet": "nodes: cycle,\npath: cycle.join(' -> ')\n});\nerrors.push(`Circular dependency detected: ${cycle.join(' -> ')}`);\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 25
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 46
        }
      ]
    },
    {
      "snippet": "path: cycle.join(' -> ')\n});\nerrors.push(`Circular dependency detected: ${cycle.join(' -> ')}`);\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 26
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 47
        }
      ]
    },
    {
      "snippet": "return {\nisValid,\nisDAG,\ncycles,\nerrors,",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 33
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 56
        }
      ]
    },
    {
      "snippet": "isValid,\nisDAG,\ncycles,\nerrors,\nwarnings",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 34
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 57
        }
      ]
    },
    {
      "snippet": "isDAG,\ncycles,\nerrors,\nwarnings\n};",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 35
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 58
        }
      ]
    },
    {
      "snippet": "cycles,\nerrors,\nwarnings\n};\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 36
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 59
        }
      ]
    },
    {
      "snippet": "for (const [nodeId, edges] of graph.edges.entries()) {\nfor (const depId of edges) {\nif (!graph.nodes.has(depId)) {\nwarnings.push(`Mission ${nodeId} depends on ${depId}, but ${depId} is not in the grap",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 45
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 69
        }
      ]
    },
    {
      "snippet": "for (const depId of edges) {\nif (!graph.nodes.has(depId)) {\nwarnings.push(`Mission ${nodeId} depends on ${depId}, but ${depId} is not in the graph`);\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 46
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 70
        }
      ]
    },
    {
      "snippet": "if (!graph.nodes.has(depId)) {\nwarnings.push(`Mission ${nodeId} depends on ${depId}, but ${depId} is not in the graph`);\n}\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 47
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 71
        }
      ]
    },
    {
      "snippet": "warnings.push(`Mission ${nodeId} depends on ${depId}, but ${depId} is not in the graph`);\n}\n}\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 48
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 72
        }
      ]
    },
    {
      "snippet": "}\n}\n}\n}\n/**",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 49
        },
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 232
        }
      ]
    },
    {
      "snippet": "// Initialize all nodes as white\nfor (const nodeId of graph.nodes.keys()) {\ncolor.set(nodeId, WHITE);\nparent.set(nodeId, null);\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 64
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 91
        }
      ]
    },
    {
      "snippet": "const edges = graph.edges.get(nodeId);\nif (edges) {\nfor (const neighbor of edges) {\n// Skip if neighbor doesn't exist in graph\nif (!graph.nodes.has(neighbor)) {",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 73
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 102
        }
      ]
    },
    {
      "snippet": "if (edges) {\nfor (const neighbor of edges) {\n// Skip if neighbor doesn't exist in graph\nif (!graph.nodes.has(neighbor)) {\ncontinue;",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 74
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 103
        }
      ]
    },
    {
      "snippet": "for (const neighbor of edges) {\n// Skip if neighbor doesn't exist in graph\nif (!graph.nodes.has(neighbor)) {\ncontinue;\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 75
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 104
        }
      ]
    },
    {
      "snippet": "// Back edge found - we have a cycle\nconst cycle = this.extractCycle(nodeId, neighbor, parent);\ncycles.push(cycle);\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 85
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 114
        }
      ]
    },
    {
      "snippet": "const cycle = this.extractCycle(nodeId, neighbor, parent);\ncycles.push(cycle);\n}\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 86
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 115
        }
      ]
    },
    {
      "snippet": "// Run DFS from each unvisited node\nfor (const nodeId of graph.nodes.keys()) {\nif (color.get(nodeId) === WHITE) {\ndfs(nodeId, new Set());\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 94
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 125
        }
      ]
    },
    {
      "snippet": "for (const nodeId of graph.nodes.keys()) {\nif (color.get(nodeId) === WHITE) {\ndfs(nodeId, new Set());\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 95
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 126
        }
      ]
    },
    {
      "snippet": "return {\nhasCycles: cycles.length > 0,\ncycles\n};\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 100
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 132
        }
      ]
    },
    {
      "snippet": "// Check that all dependencies come before dependents\n// In our graph: edge from A to B means A depends on B, so B must execute before A\nfor (const [nodeId, edges] of graph.edges.entries()) {\nconst no",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 134
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 172
        }
      ]
    },
    {
      "snippet": "// In our graph: edge from A to B means A depends on B, so B must execute before A\nfor (const [nodeId, edges] of graph.edges.entries()) {\nconst nodePos = position.get(nodeId);\nif (nodePos === undefine",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 135
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 173
        }
      ]
    },
    {
      "snippet": "for (const [nodeId, edges] of graph.edges.entries()) {\nconst nodePos = position.get(nodeId);\nif (nodePos === undefined) {\nreturn false;\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 136
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 174
        }
      ]
    },
    {
      "snippet": "// Dependency (depId) must come before the node that depends on it (nodeId)\nif (depPos >= nodePos) {\nreturn false;\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 149
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 190
        }
      ]
    },
    {
      "snippet": "if (depPos >= nodePos) {\nreturn false;\n}\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 150
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 191
        }
      ]
    },
    {
      "snippet": "index.set(nodeId, currentIndex);\nlowLink.set(nodeId, currentIndex);\ncurrentIndex++;\nstack.push(nodeId);\nonStack.set(nodeId, true);",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 169
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 213
        }
      ]
    },
    {
      "snippet": "const edges = graph.edges.get(nodeId);\nif (edges) {\nfor (const neighbor of edges) {\nif (!graph.nodes.has(neighbor)) {\ncontinue;",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 174
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 219
        }
      ]
    },
    {
      "snippet": "if (edges) {\nfor (const neighbor of edges) {\nif (!graph.nodes.has(neighbor)) {\ncontinue;\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 175
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 220
        }
      ]
    },
    {
      "snippet": "if (scc.length > 1 || (scc.length === 1 && graph.edges.get(scc[0])?.has(scc[0]))) {\nsccs.push(scc);\n}\n}\n};",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 198
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 245
        }
      ]
    },
    {
      "snippet": "for (const nodeId of graph.nodes.keys()) {\nif (!index.has(nodeId)) {\nstrongConnect(nodeId);\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/graph-validator.js",
          "line": 203
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 251
        }
      ]
    },
    {
      "snippet": "/**\n* Mission Splitter\n*\n* Implements the hybrid semantic-structural decomposition algorithm from R4.2.\n* Decomposes oversized missions while preserving atomic operations and context.",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.d.ts",
          "line": 1
        },
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 2
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 1
        }
      ]
    },
    {
      "snippet": "* Mission Splitter\n*\n* Implements the hybrid semantic-structural decomposition algorithm from R4.2.\n* Decomposes oversized missions while preserving atomic operations and context.\n*/",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.d.ts",
          "line": 2
        },
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 3
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 2
        }
      ]
    },
    {
      "snippet": "/**\n* Validated split point\n*/\ninterface SplitPoint {\nposition: number;",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.d.ts",
          "line": 9
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 31
        }
      ]
    },
    {
      "snippet": "* Validated split point\n*/\ninterface SplitPoint {\nposition: number;\nreason: string;",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.d.ts",
          "line": 10
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 32
        }
      ]
    },
    {
      "snippet": "*/\ninterface SplitPoint {\nposition: number;\nreason: string;\nconfidence: number;",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.d.ts",
          "line": 11
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 33
        }
      ]
    },
    {
      "snippet": "interface SplitPoint {\nposition: number;\nreason: string;\nconfidence: number;\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.d.ts",
          "line": 12
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 34
        }
      ]
    },
    {
      "snippet": "/**\n* Sub-mission generated from split\n*/\nexport interface SubMission {\nid: string;",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.d.ts",
          "line": 17
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 40
        }
      ]
    },
    {
      "snippet": "* Sub-mission generated from split\n*/\nexport interface SubMission {\nid: string;\nobjective: string;",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.d.ts",
          "line": 18
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 41
        }
      ]
    },
    {
      "snippet": "*/\nexport interface SubMission {\nid: string;\nobjective: string;\ncontext: string;",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.d.ts",
          "line": 19
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 42
        }
      ]
    },
    {
      "snippet": "export interface SubMission {\nid: string;\nobjective: string;\ncontext: string;\ninstructions: string;",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.d.ts",
          "line": 20
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 43
        }
      ]
    },
    {
      "snippet": "id: string;\nobjective: string;\ncontext: string;\ninstructions: string;\ndependencies: string[];",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.d.ts",
          "line": 21
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 44
        }
      ]
    },
    {
      "snippet": "objective: string;\ncontext: string;\ninstructions: string;\ndependencies: string[];\ndeliverables: string[];",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.d.ts",
          "line": 22
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 45
        }
      ]
    },
    {
      "snippet": "context: string;\ninstructions: string;\ndependencies: string[];\ndeliverables: string[];\norder: number;",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.d.ts",
          "line": 23
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 46
        }
      ]
    },
    {
      "snippet": "instructions: string;\ndependencies: string[];\ndeliverables: string[];\norder: number;\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.d.ts",
          "line": 24
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 47
        }
      ]
    },
    {
      "snippet": "/**\n* Mission split result\n*/\nexport interface SplitResult {\noriginal: string | GenericMission;",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.d.ts",
          "line": 29
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 53
        }
      ]
    },
    {
      "snippet": "* Mission split result\n*/\nexport interface SplitResult {\noriginal: string | GenericMission;\nsubMissions: SubMission[];",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.d.ts",
          "line": 30
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 54
        }
      ]
    },
    {
      "snippet": "*/\nexport interface SplitResult {\noriginal: string | GenericMission;\nsubMissions: SubMission[];\nsplitPoints: SplitPoint[];",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.d.ts",
          "line": 31
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 55
        }
      ]
    },
    {
      "snippet": "export interface SplitResult {\noriginal: string | GenericMission;\nsubMissions: SubMission[];\nsplitPoints: SplitPoint[];\npreservedContext: string;",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.d.ts",
          "line": 32
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 56
        }
      ]
    },
    {
      "snippet": "original: string | GenericMission;\nsubMissions: SubMission[];\nsplitPoints: SplitPoint[];\npreservedContext: string;\ncomplexity: ComplexityAnalysis;",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.d.ts",
          "line": 33
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 57
        }
      ]
    },
    {
      "snippet": "subMissions: SubMission[];\nsplitPoints: SplitPoint[];\npreservedContext: string;\ncomplexity: ComplexityAnalysis;\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.d.ts",
          "line": 34
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 58
        }
      ]
    },
    {
      "snippet": "/**\n* Split options\n*/\nexport interface SplitOptions {\nmaxSubMissions?: number;",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.d.ts",
          "line": 39
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 64
        }
      ]
    },
    {
      "snippet": "/**\n* MissionSplitter class\n*\n* Autonomously decomposes missions using hybrid semantic-structural analysis\n*/",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.d.ts",
          "line": 48
        },
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 28
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 93
        }
      ]
    },
    {
      "snippet": "/**\n* Serialize mission to text\n*/\nprivate serializeMission;\n/**",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.d.ts",
          "line": 137
        },
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 126
        }
      ]
    },
    {
      "snippet": "/**\n* Dependency keywords that signal atomic operations\n*/\nconst DEPENDENCY_KEYWORDS = [\n'then',",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 10
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 74
        }
      ]
    },
    {
      "snippet": "* Dependency keywords that signal atomic operations\n*/\nconst DEPENDENCY_KEYWORDS = [\n'then',\n'next',",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 11
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 75
        }
      ]
    },
    {
      "snippet": "'second',\n'third',\n'finally',\n'subsequently',\n'following that',",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 20
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 84
        }
      ]
    },
    {
      "snippet": "'third',\n'finally',\n'subsequently',\n'following that',\n'after that',",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 21
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 85
        }
      ]
    },
    {
      "snippet": "'finally',\n'subsequently',\n'following that',\n'after that',\n'once complete',",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 22
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 86
        }
      ]
    },
    {
      "snippet": "'subsequently',\n'following that',\n'after that',\n'once complete',\n];",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 23
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 87
        }
      ]
    },
    {
      "snippet": "return {\noriginal: mission,\nsubMissions,\nsplitPoints: validatedSplitPoints,\npreservedContext,",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 55
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 142
        }
      ]
    },
    {
      "snippet": "original: mission,\nsubMissions,\nsplitPoints: validatedSplitPoints,\npreservedContext,\ncomplexity,",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 56
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 143
        }
      ]
    },
    {
      "snippet": "subMissions,\nsplitPoints: validatedSplitPoints,\npreservedContext,\ncomplexity,\n};",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 57
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 144
        }
      ]
    },
    {
      "snippet": "splitPoints: validatedSplitPoints,\npreservedContext,\ncomplexity,\n};\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 58
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 145
        }
      ]
    },
    {
      "snippet": "if (!complexity.shouldSplit) {\nreturn {\nshouldSplit: false,\ncomplexity,\nsuggestedSplits: [],",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 69
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 163
        }
      ]
    },
    {
      "snippet": "return {\nshouldSplit: false,\ncomplexity,\nsuggestedSplits: [],\nreasoning: 'Mission complexity is within acceptable limits. No split needed.',",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 70
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 164
        }
      ]
    },
    {
      "snippet": "shouldSplit: false,\ncomplexity,\nsuggestedSplits: [],\nreasoning: 'Mission complexity is within acceptable limits. No split needed.',\n};",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 71
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 165
        }
      ]
    },
    {
      "snippet": "complexity,\nsuggestedSplits: [],\nreasoning: 'Mission complexity is within acceptable limits. No split needed.',\n};\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 72
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 166
        }
      ]
    },
    {
      "snippet": "return {\nshouldSplit: true,\ncomplexity,\nsuggestedSplits: validated,\nreasoning,",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 82
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 179
        }
      ]
    },
    {
      "snippet": "shouldSplit: true,\ncomplexity,\nsuggestedSplits: validated,\nreasoning,\n};",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 83
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 180
        }
      ]
    },
    {
      "snippet": "complexity,\nsuggestedSplits: validated,\nreasoning,\n};\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 84
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 181
        }
      ]
    },
    {
      "snippet": "// Propose breakpoint if distance exceeds threshold (80th percentile heuristic)\nif (distance > 0.6) {\nconst position = missionText.indexOf(currSentence);\nbreakpoints.push({\nposition,",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 101
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 205
        }
      ]
    },
    {
      "snippet": "if (distance > 0.6) {\nconst position = missionText.indexOf(currSentence);\nbreakpoints.push({\nposition,\nsemanticDistance: distance,",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 102
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 206
        }
      ]
    },
    {
      "snippet": "const position = missionText.indexOf(currSentence);\nbreakpoints.push({\nposition,\nsemanticDistance: distance,\nbeforeText: prevSentence,",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 103
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 207
        }
      ]
    },
    {
      "snippet": "breakpoints.push({\nposition,\nsemanticDistance: distance,\nbeforeText: prevSentence,\nafterText: currSentence,",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 104
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 208
        }
      ]
    },
    {
      "snippet": "position,\nsemanticDistance: distance,\nbeforeText: prevSentence,\nafterText: currSentence,\n});",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 105
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 209
        }
      ]
    },
    {
      "snippet": "semanticDistance: distance,\nbeforeText: prevSentence,\nafterText: currSentence,\n});\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 106
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 210
        }
      ]
    },
    {
      "snippet": "beforeText: prevSentence,\nafterText: currSentence,\n});\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 107
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 211
        }
      ]
    },
    {
      "snippet": "// Also propose breaks at structural boundaries\nconst structuralBreaks = this.findStructuralBoundaries(missionText);\nfor (const breakPos of structuralBreaks) {\nconst beforeText = missionText.substring",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 112
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 217
        }
      ]
    },
    {
      "snippet": "breakpoints.push({\nposition: breakPos,\nsemanticDistance: 0.8, // High confidence for structural breaks\nbeforeText,\nafterText,",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 117
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 223
        }
      ]
    },
    {
      "snippet": "position: breakPos,\nsemanticDistance: 0.8, // High confidence for structural breaks\nbeforeText,\nafterText,\n});",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 118
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 224
        }
      ]
    },
    {
      "snippet": "semanticDistance: 0.8, // High confidence for structural breaks\nbeforeText,\nafterText,\n});\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 119
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 225
        }
      ]
    },
    {
      "snippet": "// Identify numbered/bulleted lists\nconst listBlocks = this.findListBlocks(missionText);\noperations.push(...listBlocks.map(block => ({\nstartPosition: block.start,\nendPosition: block.end,",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 131
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 240
        }
      ]
    },
    {
      "snippet": "// Identify dependency chains\nconst dependencyChains = this.findDependencyChains(missionText);\noperations.push(...dependencyChains.map(chain => ({\nstartPosition: chain.start,\nendPosition: chain.end,",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 139
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 249
        }
      ]
    },
    {
      "snippet": "// Identify code blocks\nconst codeBlocks = this.findCodeBlocks(missionText);\noperations.push(...codeBlocks.map(block => ({\nstartPosition: block.start,\nendPosition: block.end,",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 147
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 258
        }
      ]
    },
    {
      "snippet": "if (!inAtomicOp && !tooClose) {\nvalidated.push({\nposition: breakpoint.position,\nreason: this.inferSplitReason(breakpoint),\nconfidence: breakpoint.semanticDistance,",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 169
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 292
        }
      ]
    },
    {
      "snippet": "validated.push({\nposition: breakpoint.position,\nreason: this.inferSplitReason(breakpoint),\nconfidence: breakpoint.semanticDistance,\n});",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 170
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 293
        }
      ]
    },
    {
      "snippet": "position: breakpoint.position,\nreason: this.inferSplitReason(breakpoint),\nconfidence: breakpoint.semanticDistance,\n});\nlastSplitPosition = breakpoint.position;",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 171
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 294
        }
      ]
    },
    {
      "snippet": "reason: this.inferSplitReason(breakpoint),\nconfidence: breakpoint.semanticDistance,\n});\nlastSplitPosition = breakpoint.position;\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 172
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 295
        }
      ]
    },
    {
      "snippet": "confidence: breakpoint.semanticDistance,\n});\nlastSplitPosition = breakpoint.position;\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 173
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 296
        }
      ]
    },
    {
      "snippet": "return {\nid: `sub-mission-${order}`,\nobjective: objective || `Complete phase ${order} of ${total}`,\ncontext: originalMission?.context?.background || `Part ${order} of ${total} of the overall mission`,",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 207
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 355
        }
      ]
    },
    {
      "snippet": "id: `sub-mission-${order}`,\nobjective: objective || `Complete phase ${order} of ${total}`,\ncontext: originalMission?.context?.background || `Part ${order} of ${total} of the overall mission`,\ninstruct",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 208
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 356
        }
      ]
    },
    {
      "snippet": "objective: objective || `Complete phase ${order} of ${total}`,\ncontext: originalMission?.context?.background || `Part ${order} of ${total} of the overall mission`,\ninstructions: instructions || chunk,",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 209
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 357
        }
      ]
    },
    {
      "snippet": "context: originalMission?.context?.background || `Part ${order} of ${total} of the overall mission`,\ninstructions: instructions || chunk,\ndependencies: [], // Will be filled by inferDependencies\ndeliv",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 210
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 358
        }
      ]
    },
    {
      "snippet": "instructions: instructions || chunk,\ndependencies: [], // Will be filled by inferDependencies\ndeliverables,\norder,\n};",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 211
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 359
        }
      ]
    },
    {
      "snippet": "dependencies: [], // Will be filled by inferDependencies\ndeliverables,\norder,\n};\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 212
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 360
        }
      ]
    },
    {
      "snippet": "// Check for explicit references to earlier missions\nconst text = subMissions[i].instructions.toLowerCase();\nfor (let j = 0; j < i; j++) {\nconst prevId = subMissions[j].id;\nconst prevObjective = subMi",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 224
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 374
        }
      ]
    },
    {
      "snippet": "// If current mission mentions previous mission's objective\nif (text.includes(prevObjective.substring(0, 30)) && !subMissions[i].dependencies.includes(prevId)) {\nsubMissions[i].dependencies.push(prevI",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 229
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 380
        }
      ]
    },
    {
      "snippet": "if (text.includes(prevObjective.substring(0, 30)) && !subMissions[i].dependencies.includes(prevId)) {\nsubMissions[i].dependencies.push(prevId);\n}\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 230
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 381
        }
      ]
    },
    {
      "snippet": "subMissions[i].dependencies.push(prevId);\n}\n}\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 231
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 382
        }
      ]
    },
    {
      "snippet": "if (hasDependency) {\nconst start = text.indexOf(sentence);\nconst end = text.indexOf(nextSentence) + nextSentence.length;\nchains.push({ start, end });\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 297
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 466
        }
      ]
    },
    {
      "snippet": "const start = text.indexOf(sentence);\nconst end = text.indexOf(nextSentence) + nextSentence.length;\nchains.push({ start, end });\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 298
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 467
        }
      ]
    },
    {
      "snippet": "let match;\nwhile ((match = codeBlockPattern.exec(text)) !== null) {\nblocks.push({\nstart: match.index,\nend: match.index + match[0].length,",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 311
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 483
        }
      ]
    },
    {
      "snippet": "while ((match = codeBlockPattern.exec(text)) !== null) {\nblocks.push({\nstart: match.index,\nend: match.index + match[0].length,\n});",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 312
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 484
        }
      ]
    },
    {
      "snippet": "blocks.push({\nstart: match.index,\nend: match.index + match[0].length,\n});\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 313
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 485
        }
      ]
    },
    {
      "snippet": "return text\n.split(/[.!?]+/)\n.map(s => s.trim())\n.filter(s => s.length > 10);\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 324
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 498
        }
      ]
    },
    {
      "snippet": "if (breakpoint.semanticDistance > 0.7) {\nreturn 'Major topic shift detected';\n}\nif (breakpoint.beforeText.match(/\\n\\n/)) {\nreturn 'Structural boundary (paragraph break)';",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 333
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 508
        }
      ]
    },
    {
      "snippet": "return 'Major topic shift detected';\n}\nif (breakpoint.beforeText.match(/\\n\\n/)) {\nreturn 'Structural boundary (paragraph break)';\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 334
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 509
        }
      ]
    },
    {
      "snippet": "}\nif (breakpoint.beforeText.match(/\\n\\n/)) {\nreturn 'Structural boundary (paragraph break)';\n}\nreturn 'Semantic transition point';",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 335
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 510
        }
      ]
    },
    {
      "snippet": "if (breakpoint.beforeText.match(/\\n\\n/)) {\nreturn 'Structural boundary (paragraph break)';\n}\nreturn 'Semantic transition point';\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 336
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 511
        }
      ]
    },
    {
      "snippet": "// Look for objective-like statements\nconst objectiveMatch = chunk.match(/(?:objective|goal|aim|task):\\s*([^\\n.]+)/i);\nif (objectiveMatch) {\nreturn objectiveMatch[1].trim();\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 345
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 521
        }
      ]
    },
    {
      "snippet": "// Look for imperative verbs\nconst firstSentence = chunk.split(/[.!?]/)[0];\nconst imperativePattern = /^(create|build|implement|write|test|verify|ensure|update|add|remove)/i;\nif (imperativePattern.tes",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 350
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 527
        }
      ]
    },
    {
      "snippet": "const firstSentence = chunk.split(/[.!?]/)[0];\nconst imperativePattern = /^(create|build|implement|write|test|verify|ensure|update|add|remove)/i;\nif (imperativePattern.test(firstSentence.trim())) {\nre",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 351
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 528
        }
      ]
    },
    {
      "snippet": "// Look for file mentions\nconst filePattern = /(?:file|create|implement|write):\\s*([^\\n]+\\.[\\w]+)/gi;\nlet match;\nwhile ((match = filePattern.exec(chunk)) !== null) {\ndeliverables.push(match[1].trim())",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 370
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 551
        }
      ]
    },
    {
      "snippet": "const filePattern = /(?:file|create|implement|write):\\s*([^\\n]+\\.[\\w]+)/gi;\nlet match;\nwhile ((match = filePattern.exec(chunk)) !== null) {\ndeliverables.push(match[1].trim());\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 371
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 552
        }
      ]
    },
    {
      "snippet": "}\n/**\n* Serialize mission to text\n*/\nserializeMission(mission) {",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 387
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 247
        }
      ]
    },
    {
      "snippet": "`Mission complexity score: ${complexity.compositeScore.toFixed(2)}/10`,\n'',\n'Reasons for recommended split:',\n...complexity.reasons.map(r => `- ${r}`),\n'',",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 408
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 597
        }
      ]
    },
    {
      "snippet": "'',\n'Reasons for recommended split:',\n...complexity.reasons.map(r => `- ${r}`),\n'',\n`Recommended split into ${splits.length + 1} sub-missions at:`,",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 409
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 598
        }
      ]
    },
    {
      "snippet": "'Reasons for recommended split:',\n...complexity.reasons.map(r => `- ${r}`),\n'',\n`Recommended split into ${splits.length + 1} sub-missions at:`,\n...splits.map((sp, i) => `${i + 1}. Position ${sp.positi",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 410
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 599
        }
      ]
    },
    {
      "snippet": "...complexity.reasons.map(r => `- ${r}`),\n'',\n`Recommended split into ${splits.length + 1} sub-missions at:`,\n...splits.map((sp, i) => `${i + 1}. Position ${sp.position}: ${sp.reason}`),\n];",
      "occurrences": [
        {
          "path": "dist/intelligence/mission-splitter.js",
          "line": 411
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 600
        }
      ]
    },
    {
      "snippet": "/**\n* Model Transpilers\n*\n* Model-specific formatting and transpilation following R4.1 findings:\n* - Claude: XML tags for structure",
      "occurrences": [
        {
          "path": "dist/intelligence/model-transpilers.d.ts",
          "line": 1
        },
        {
          "path": "dist/intelligence/model-transpilers.js",
          "line": 2
        },
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 1
        }
      ]
    },
    {
      "snippet": "* Model Transpilers\n*\n* Model-specific formatting and transpilation following R4.1 findings:\n* - Claude: XML tags for structure\n* - GPT: ### delimiters and few-shot examples",
      "occurrences": [
        {
          "path": "dist/intelligence/model-transpilers.d.ts",
          "line": 2
        },
        {
          "path": "dist/intelligence/model-transpilers.js",
          "line": 3
        },
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 2
        }
      ]
    },
    {
      "snippet": "*\n* Model-specific formatting and transpilation following R4.1 findings:\n* - Claude: XML tags for structure\n* - GPT: ### delimiters and few-shot examples\n* - Gemini: PTCF framework (Persona, Task, Con",
      "occurrences": [
        {
          "path": "dist/intelligence/model-transpilers.d.ts",
          "line": 3
        },
        {
          "path": "dist/intelligence/model-transpilers.js",
          "line": 4
        },
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 3
        }
      ]
    },
    {
      "snippet": "* Model-specific formatting and transpilation following R4.1 findings:\n* - Claude: XML tags for structure\n* - GPT: ### delimiters and few-shot examples\n* - Gemini: PTCF framework (Persona, Task, Conte",
      "occurrences": [
        {
          "path": "dist/intelligence/model-transpilers.d.ts",
          "line": 4
        },
        {
          "path": "dist/intelligence/model-transpilers.js",
          "line": 5
        },
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 4
        }
      ]
    },
    {
      "snippet": "claude: {\nmodel: 'claude',\ntemplateFormat: 'xml',\nsupportsXmlTags: true,\npreferredDelimiters: ['<instructions>', '<context>', '<example>'],",
      "occurrences": [
        {
          "path": "dist/intelligence/model-transpilers.js",
          "line": 18
        },
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 16
        }
      ]
    },
    {
      "snippet": "model: 'claude',\ntemplateFormat: 'xml',\nsupportsXmlTags: true,\npreferredDelimiters: ['<instructions>', '<context>', '<example>'],\n},",
      "occurrences": [
        {
          "path": "dist/intelligence/model-transpilers.js",
          "line": 19
        },
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 17
        }
      ]
    },
    {
      "snippet": "templateFormat: 'xml',\nsupportsXmlTags: true,\npreferredDelimiters: ['<instructions>', '<context>', '<example>'],\n},\ngpt: {",
      "occurrences": [
        {
          "path": "dist/intelligence/model-transpilers.js",
          "line": 20
        },
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 18
        }
      ]
    },
    {
      "snippet": "supportsXmlTags: true,\npreferredDelimiters: ['<instructions>', '<context>', '<example>'],\n},\ngpt: {\nmodel: 'gpt',",
      "occurrences": [
        {
          "path": "dist/intelligence/model-transpilers.js",
          "line": 21
        },
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 19
        }
      ]
    },
    {
      "snippet": "preferredDelimiters: ['<instructions>', '<context>', '<example>'],\n},\ngpt: {\nmodel: 'gpt',\ntemplateFormat: 'markdown',",
      "occurrences": [
        {
          "path": "dist/intelligence/model-transpilers.js",
          "line": 22
        },
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 20
        }
      ]
    },
    {
      "snippet": "},\ngpt: {\nmodel: 'gpt',\ntemplateFormat: 'markdown',\nsupportsFewShot: true,",
      "occurrences": [
        {
          "path": "dist/intelligence/model-transpilers.js",
          "line": 23
        },
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 21
        }
      ]
    },
    {
      "snippet": "gpt: {\nmodel: 'gpt',\ntemplateFormat: 'markdown',\nsupportsFewShot: true,\npreferredDelimiters: ['###', '\"\"\"'],",
      "occurrences": [
        {
          "path": "dist/intelligence/model-transpilers.js",
          "line": 24
        },
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 22
        }
      ]
    },
    {
      "snippet": "model: 'gpt',\ntemplateFormat: 'markdown',\nsupportsFewShot: true,\npreferredDelimiters: ['###', '\"\"\"'],\n},",
      "occurrences": [
        {
          "path": "dist/intelligence/model-transpilers.js",
          "line": 25
        },
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 23
        }
      ]
    },
    {
      "snippet": "templateFormat: 'markdown',\nsupportsFewShot: true,\npreferredDelimiters: ['###', '\"\"\"'],\n},\ngemini: {",
      "occurrences": [
        {
          "path": "dist/intelligence/model-transpilers.js",
          "line": 26
        },
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 24
        }
      ]
    },
    {
      "snippet": "supportsFewShot: true,\npreferredDelimiters: ['###', '\"\"\"'],\n},\ngemini: {\nmodel: 'gemini',",
      "occurrences": [
        {
          "path": "dist/intelligence/model-transpilers.js",
          "line": 27
        },
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 25
        }
      ]
    },
    {
      "snippet": "preferredDelimiters: ['###', '\"\"\"'],\n},\ngemini: {\nmodel: 'gemini',\ntemplateFormat: 'ptcf',",
      "occurrences": [
        {
          "path": "dist/intelligence/model-transpilers.js",
          "line": 28
        },
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 26
        }
      ]
    },
    {
      "snippet": "},\ngemini: {\nmodel: 'gemini',\ntemplateFormat: 'ptcf',\npreferredDelimiters: ['Persona:', 'Task:', 'Context:', 'Format:'],",
      "occurrences": [
        {
          "path": "dist/intelligence/model-transpilers.js",
          "line": 29
        },
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 27
        }
      ]
    },
    {
      "snippet": "gemini: {\nmodel: 'gemini',\ntemplateFormat: 'ptcf',\npreferredDelimiters: ['Persona:', 'Task:', 'Context:', 'Format:'],\n},",
      "occurrences": [
        {
          "path": "dist/intelligence/model-transpilers.js",
          "line": 30
        },
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 28
        }
      ]
    },
    {
      "snippet": "model: 'gemini',\ntemplateFormat: 'ptcf',\npreferredDelimiters: ['Persona:', 'Task:', 'Context:', 'Format:'],\n},\n};",
      "occurrences": [
        {
          "path": "dist/intelligence/model-transpilers.js",
          "line": 31
        },
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 29
        }
      ]
    },
    {
      "snippet": "switch (targetModel) {\ncase 'claude':\nreturn this.transpileToClaude(content);\ncase 'gpt':\nreturn this.transpileToGPT(content);",
      "occurrences": [
        {
          "path": "dist/intelligence/model-transpilers.js",
          "line": 44
        },
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 43
        }
      ]
    },
    {
      "snippet": "case 'claude':\nreturn this.transpileToClaude(content);\ncase 'gpt':\nreturn this.transpileToGPT(content);\ncase 'gemini':",
      "occurrences": [
        {
          "path": "dist/intelligence/model-transpilers.js",
          "line": 45
        },
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 44
        }
      ]
    },
    {
      "snippet": "return this.transpileToClaude(content);\ncase 'gpt':\nreturn this.transpileToGPT(content);\ncase 'gemini':\nreturn this.transpileToGemini(content);",
      "occurrences": [
        {
          "path": "dist/intelligence/model-transpilers.js",
          "line": 46
        },
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 45
        }
      ]
    },
    {
      "snippet": "case 'gpt':\nreturn this.transpileToGPT(content);\ncase 'gemini':\nreturn this.transpileToGemini(content);\ndefault:",
      "occurrences": [
        {
          "path": "dist/intelligence/model-transpilers.js",
          "line": 47
        },
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 46
        }
      ]
    },
    {
      "snippet": "return this.transpileToGPT(content);\ncase 'gemini':\nreturn this.transpileToGemini(content);\ndefault:\nreturn content;",
      "occurrences": [
        {
          "path": "dist/intelligence/model-transpilers.js",
          "line": 48
        },
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 47
        }
      ]
    },
    {
      "snippet": "case 'gemini':\nreturn this.transpileToGemini(content);\ndefault:\nreturn content;\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/model-transpilers.js",
          "line": 49
        },
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 48
        }
      ]
    },
    {
      "snippet": "return this.transpileToGemini(content);\ndefault:\nreturn content;\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/model-transpilers.js",
          "line": 50
        },
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 49
        }
      ]
    },
    {
      "snippet": "// Wrap sections in XML tags\nresult = this.wrapSection(result, 'objective', 'instructions');\nresult = this.wrapSection(result, 'context', 'context');\nresult = this.wrapSection(result, 'successCriteria",
      "occurrences": [
        {
          "path": "dist/intelligence/model-transpilers.js",
          "line": 60
        },
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 61
        }
      ]
    },
    {
      "snippet": "// Convert markdown headers to XML sections\nresult = result.replace(/^#{1,3}\\s+(.+)$/gm, (match, header) => {\nconst tag = header.toLowerCase().replace(/\\s+/g, '_');\nreturn `<${tag}>`;\n});",
      "occurrences": [
        {
          "path": "dist/intelligence/model-transpilers.js",
          "line": 65
        },
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 67
        }
      ]
    },
    {
      "snippet": "// Add clear delimiters for major sections\nresult = this.addDelimiters(result, 'objective', '### OBJECTIVE');\nresult = this.addDelimiters(result, 'context', '### CONTEXT');\nresult = this.addDelimiters",
      "occurrences": [
        {
          "path": "dist/intelligence/model-transpilers.js",
          "line": 77
        },
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 82
        }
      ]
    },
    {
      "snippet": "return `Persona: ${ptcf.persona}\n\nTask: ${ptcf.task}\n\nContext: ${ptcf.context}",
      "occurrences": [
        {
          "path": "dist/intelligence/model-transpilers.js",
          "line": 91
        },
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 100
        }
      ]
    },
    {
      "snippet": "\nTask: ${ptcf.task}\n\nContext: ${ptcf.context}\n",
      "occurrences": [
        {
          "path": "dist/intelligence/model-transpilers.js",
          "line": 92
        },
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 101
        }
      ]
    },
    {
      "snippet": "Task: ${ptcf.task}\n\nContext: ${ptcf.context}\n\nFormat: ${ptcf.format}`;",
      "occurrences": [
        {
          "path": "dist/intelligence/model-transpilers.js",
          "line": 93
        },
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 102
        }
      ]
    },
    {
      "snippet": "\nContext: ${ptcf.context}\n\nFormat: ${ptcf.format}`;\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/model-transpilers.js",
          "line": 94
        },
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 103
        }
      ]
    },
    {
      "snippet": "const sectionRegex = new RegExp(`${sectionName}:([\\\\s\\\\S]*?)(?=\\\\n\\\\w+:|$)`, 'i');\nreturn content.replace(sectionRegex, (match, sectionContent) => {\nreturn `<${tagName}>${sectionContent.trim()}</${tag",
      "occurrences": [
        {
          "path": "dist/intelligence/model-transpilers.js",
          "line": 103
        },
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 113
        }
      ]
    },
    {
      "snippet": "return content.replace(exampleRegex, (match, exampleContent) => {\nexampleCount++;\nreturn `### EXAMPLE ${exampleCount}\\n\\`\\`\\`\\n${exampleContent.trim()}\\n\\`\\`\\``;\n});\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/model-transpilers.js",
          "line": 122
        },
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 135
        }
      ]
    },
    {
      "snippet": "// Default PTCF structure\nconst ptcf = {\npersona: 'You are an AI assistant specializing in mission execution.',\ntask: '',\ncontext: '',",
      "occurrences": [
        {
          "path": "dist/intelligence/model-transpilers.js",
          "line": 131
        },
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 150
        }
      ]
    },
    {
      "snippet": "const ptcf = {\npersona: 'You are an AI assistant specializing in mission execution.',\ntask: '',\ncontext: '',\nformat: 'Provide clear, structured output.',",
      "occurrences": [
        {
          "path": "dist/intelligence/model-transpilers.js",
          "line": 132
        },
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 151
        }
      ]
    },
    {
      "snippet": "persona: 'You are an AI assistant specializing in mission execution.',\ntask: '',\ncontext: '',\nformat: 'Provide clear, structured output.',\n};",
      "occurrences": [
        {
          "path": "dist/intelligence/model-transpilers.js",
          "line": 133
        },
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 152
        }
      ]
    },
    {
      "snippet": "// Extract objective as task\nconst objectiveMatch = content.match(/objective:?\\s*([^]*?)(?=\\n\\w+:|$)/i);\nif (objectiveMatch) {\nptcf.task = objectiveMatch[1].trim();\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/model-transpilers.js",
          "line": 138
        },
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 158
        }
      ]
    },
    {
      "snippet": "// Extract context\nconst contextMatch = content.match(/context:?\\s*([^]*?)(?=\\n\\w+:|$)/i);\nif (contextMatch) {\nptcf.context = contextMatch[1].trim();\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/model-transpilers.js",
          "line": 143
        },
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 164
        }
      ]
    },
    {
      "snippet": "// Extract deliverables as format guidance\nconst deliverablesMatch = content.match(/deliverables:?\\s*([^]*?)(?=\\n\\w+:|$)/i);\nif (deliverablesMatch) {\nptcf.format = `Deliver: ${deliverablesMatch[1].tri",
      "occurrences": [
        {
          "path": "dist/intelligence/model-transpilers.js",
          "line": 148
        },
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 170
        }
      ]
    },
    {
      "snippet": "/**\n* Telemetry utilities for intelligence services.\n*\n* Provides a lightweight hook that downstream missions can replace with\n* structured telemetry collectors once they are available.",
      "occurrences": [
        {
          "path": "dist/intelligence/telemetry.d.ts",
          "line": 1
        },
        {
          "path": "dist/intelligence/telemetry.js",
          "line": 2
        },
        {
          "path": "src/intelligence/telemetry.ts",
          "line": 1
        }
      ]
    },
    {
      "snippet": "* Telemetry utilities for intelligence services.\n*\n* Provides a lightweight hook that downstream missions can replace with\n* structured telemetry collectors once they are available.\n*/",
      "occurrences": [
        {
          "path": "dist/intelligence/telemetry.d.ts",
          "line": 2
        },
        {
          "path": "dist/intelligence/telemetry.js",
          "line": 3
        },
        {
          "path": "src/intelligence/telemetry.ts",
          "line": 2
        }
      ]
    },
    {
      "snippet": "export interface TelemetryEvent {\nsource: string;\nlevel: TelemetryEventLevel;\nmessage: string;\ncontext?: Record<string, unknown>;",
      "occurrences": [
        {
          "path": "dist/intelligence/telemetry.d.ts",
          "line": 8
        },
        {
          "path": "src/intelligence/telemetry.ts",
          "line": 10
        }
      ]
    },
    {
      "snippet": "source: string;\nlevel: TelemetryEventLevel;\nmessage: string;\ncontext?: Record<string, unknown>;\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/telemetry.d.ts",
          "line": 9
        },
        {
          "path": "src/intelligence/telemetry.ts",
          "line": 11
        }
      ]
    },
    {
      "snippet": "source,\nlevel: 'warning',\nmessage,\ncontext,\n};",
      "occurrences": [
        {
          "path": "dist/intelligence/telemetry.js",
          "line": 25
        },
        {
          "path": "src/intelligence/telemetry.ts",
          "line": 39
        }
      ]
    },
    {
      "snippet": "/**\n* Token Counters - Hybrid Offline Strategy\n*\n* Model-specific token counting implementations using offline libraries.\n* Follows R2.1 findings:",
      "occurrences": [
        {
          "path": "dist/intelligence/token-counters.d.ts",
          "line": 1
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 2
        },
        {
          "path": "src/intelligence/token-counters.ts",
          "line": 1
        }
      ]
    },
    {
      "snippet": "* Token Counters - Hybrid Offline Strategy\n*\n* Model-specific token counting implementations using offline libraries.\n* Follows R2.1 findings:\n* - GPT: gpt-tokenizer (100% accurate, pure JS)",
      "occurrences": [
        {
          "path": "dist/intelligence/token-counters.d.ts",
          "line": 2
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 3
        },
        {
          "path": "src/intelligence/token-counters.ts",
          "line": 2
        }
      ]
    },
    {
      "snippet": "*\n* Model-specific token counting implementations using offline libraries.\n* Follows R2.1 findings:\n* - GPT: gpt-tokenizer (100% accurate, pure JS)\n* - Claude: Transformers.js with Xenova/claude-token",
      "occurrences": [
        {
          "path": "dist/intelligence/token-counters.d.ts",
          "line": 3
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 4
        },
        {
          "path": "src/intelligence/token-counters.ts",
          "line": 3
        }
      ]
    },
    {
      "snippet": "* Model-specific token counting implementations using offline libraries.\n* Follows R2.1 findings:\n* - GPT: gpt-tokenizer (100% accurate, pure JS)\n* - Claude: Transformers.js with Xenova/claude-tokeniz",
      "occurrences": [
        {
          "path": "dist/intelligence/token-counters.d.ts",
          "line": 4
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 5
        },
        {
          "path": "src/intelligence/token-counters.ts",
          "line": 4
        }
      ]
    },
    {
      "snippet": "* Follows R2.1 findings:\n* - GPT: gpt-tokenizer (100% accurate, pure JS)\n* - Claude: Transformers.js with Xenova/claude-tokenizer (known drift, monitored)\n* - Gemini: Enhanced heuristic (temporary, pe",
      "occurrences": [
        {
          "path": "dist/intelligence/token-counters.d.ts",
          "line": 5
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 6
        },
        {
          "path": "src/intelligence/token-counters.ts",
          "line": 5
        }
      ]
    },
    {
      "snippet": "/**\n* Count tokens for GPT using gpt-tokenizer library\n* Uses pure JavaScript implementation with 1:1 accuracy to tiktoken\n* Supports cl100k_base (GPT-4) and o200k_base (GPT-4o) encodings\n*/",
      "occurrences": [
        {
          "path": "dist/intelligence/token-counters.d.ts",
          "line": 21
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 67
        },
        {
          "path": "src/intelligence/token-counters.ts",
          "line": 43
        }
      ]
    },
    {
      "snippet": "/**\n* Count tokens for Claude using Transformers.js with Xenova/claude-tokenizer\n* WARNING: This is an unofficial tokenizer with documented accuracy drift\n* Token counts may differ from official Anthr",
      "occurrences": [
        {
          "path": "dist/intelligence/token-counters.d.ts",
          "line": 27
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 89
        },
        {
          "path": "src/intelligence/token-counters.ts",
          "line": 66
        }
      ]
    },
    {
      "snippet": "* Count tokens for Claude using Transformers.js with Xenova/claude-tokenizer\n* WARNING: This is an unofficial tokenizer with documented accuracy drift\n* Token counts may differ from official Anthropic",
      "occurrences": [
        {
          "path": "dist/intelligence/token-counters.d.ts",
          "line": 28
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 90
        },
        {
          "path": "src/intelligence/token-counters.ts",
          "line": 67
        }
      ]
    },
    {
      "snippet": "/**\n* Load and cache the Claude tokenizer from Transformers.js\n* Uses Xenova/claude-tokenizer from Hugging Face Hub\n* Downloads model file on first use (~1-2 MB), cached thereafter\n*/",
      "occurrences": [
        {
          "path": "dist/intelligence/token-counters.d.ts",
          "line": 34
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 119
        },
        {
          "path": "src/intelligence/token-counters.ts",
          "line": 99
        }
      ]
    },
    {
      "snippet": "/**\n* Count tokens for Gemini using enhanced heuristic\n* TEMPORARY SOLUTION: No viable offline library exists\n* - @lenml/tokenizer-gemini is 139 MB (unacceptable)\n* - Official JS library does not exis",
      "occurrences": [
        {
          "path": "dist/intelligence/token-counters.d.ts",
          "line": 40
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 138
        },
        {
          "path": "src/intelligence/token-counters.ts",
          "line": 119
        }
      ]
    },
    {
      "snippet": "* Count tokens for Gemini using enhanced heuristic\n* TEMPORARY SOLUTION: No viable offline library exists\n* - @lenml/tokenizer-gemini is 139 MB (unacceptable)\n* - Official JS library does not exist\n* ",
      "occurrences": [
        {
          "path": "dist/intelligence/token-counters.d.ts",
          "line": 41
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 139
        },
        {
          "path": "src/intelligence/token-counters.ts",
          "line": 120
        }
      ]
    },
    {
      "snippet": "* TEMPORARY SOLUTION: No viable offline library exists\n* - @lenml/tokenizer-gemini is 139 MB (unacceptable)\n* - Official JS library does not exist\n* Uses conservative overestimation (1.5x safety margi",
      "occurrences": [
        {
          "path": "dist/intelligence/token-counters.d.ts",
          "line": 42
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 140
        },
        {
          "path": "src/intelligence/token-counters.ts",
          "line": 121
        }
      ]
    },
    {
      "snippet": "/**\n* Fallback token counting using basic heuristic\n* Approximately 4 characters per token for English text\n* Used when primary tokenizer fails to load\n*/",
      "occurrences": [
        {
          "path": "dist/intelligence/token-counters.d.ts",
          "line": 48
        },
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 161
        },
        {
          "path": "src/intelligence/token-counters.ts",
          "line": 145
        }
      ]
    },
    {
      "snippet": "switch (model) {\ncase 'gpt':\nreturn this.countGPT(text);\ncase 'claude':\nreturn this.countClaude(text);",
      "occurrences": [
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 56
        },
        {
          "path": "scripts/validate-token-counts.ts",
          "line": 46
        },
        {
          "path": "src/intelligence/token-counters.ts",
          "line": 31
        }
      ]
    },
    {
      "snippet": "case 'gpt':\nreturn this.countGPT(text);\ncase 'claude':\nreturn this.countClaude(text);\ncase 'gemini':",
      "occurrences": [
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 57
        },
        {
          "path": "scripts/validate-token-counts.ts",
          "line": 47
        },
        {
          "path": "src/intelligence/token-counters.ts",
          "line": 32
        }
      ]
    },
    {
      "snippet": "return this.countGPT(text);\ncase 'claude':\nreturn this.countClaude(text);\ncase 'gemini':\nreturn this.countGemini(text);",
      "occurrences": [
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 58
        },
        {
          "path": "scripts/validate-token-counts.ts",
          "line": 48
        },
        {
          "path": "src/intelligence/token-counters.ts",
          "line": 33
        }
      ]
    },
    {
      "snippet": "case 'claude':\nreturn this.countClaude(text);\ncase 'gemini':\nreturn this.countGemini(text);\ndefault:",
      "occurrences": [
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 59
        },
        {
          "path": "scripts/validate-token-counts.ts",
          "line": 49
        },
        {
          "path": "src/intelligence/token-counters.ts",
          "line": 34
        }
      ]
    },
    {
      "snippet": "return this.countClaude(text);\ncase 'gemini':\nreturn this.countGemini(text);\ndefault:\nthrow new Error(`Unsupported model: ${model}`);",
      "occurrences": [
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 60
        },
        {
          "path": "src/intelligence/token-counters.ts",
          "line": 35
        }
      ]
    },
    {
      "snippet": "case 'gemini':\nreturn this.countGemini(text);\ndefault:\nthrow new Error(`Unsupported model: ${model}`);\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 61
        },
        {
          "path": "src/intelligence/token-counters.ts",
          "line": 36
        }
      ]
    },
    {
      "snippet": "return this.countGemini(text);\ndefault:\nthrow new Error(`Unsupported model: ${model}`);\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 62
        },
        {
          "path": "src/intelligence/token-counters.ts",
          "line": 37
        }
      ]
    },
    {
      "snippet": "return {\nmodel: 'gpt',\ncount,\nestimatedCost: this.estimateGPTCost(count),\n};",
      "occurrences": [
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 78
        },
        {
          "path": "src/intelligence/token-counters.ts",
          "line": 55
        }
      ]
    },
    {
      "snippet": "tokenizer: 'Xenova/claude-tokenizer',\ntextLength: text.length,\nestimatedTokens: count,\naccuracyNote: 'May drift up to 50% from official Anthropic API. Weekly validation recommended.',\n});",
      "occurrences": [
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 103
        },
        {
          "path": "src/intelligence/token-counters.ts",
          "line": 82
        }
      ]
    },
    {
      "snippet": "return {\nmodel: 'claude',\ncount,\nestimatedCost: this.estimateClaudeCost(count),\n};",
      "occurrences": [
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 108
        },
        {
          "path": "src/intelligence/token-counters.ts",
          "line": 88
        }
      ]
    },
    {
      "snippet": "textLength: text.length,\nbaseTokens,\nsafetyFactor: 1.5,\nestimatedTokens: count,\n});",
      "occurrences": [
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 150
        },
        {
          "path": "src/intelligence/token-counters.ts",
          "line": 132
        }
      ]
    },
    {
      "snippet": "return {\nmodel: 'gemini',\ncount,\nestimatedCost: this.estimateGeminiCost(count),\n};",
      "occurrences": [
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 155
        },
        {
          "path": "src/intelligence/token-counters.ts",
          "line": 138
        }
      ]
    },
    {
      "snippet": "model: 'gemini',\ncount,\nestimatedCost: this.estimateGeminiCost(count),\n};\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 156
        },
        {
          "path": "src/intelligence/token-counters.ts",
          "line": 139
        }
      ]
    },
    {
      "snippet": "model,\ntextLength: text.length,\nestimatedTokens: count,\nreason: 'Primary tokenizer failed to load',\naccuracyNote: 'Basic heuristic (4 chars/token) - accuracy may vary significantly',",
      "occurrences": [
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 169
        },
        {
          "path": "src/intelligence/token-counters.ts",
          "line": 154
        }
      ]
    },
    {
      "snippet": "textLength: text.length,\nestimatedTokens: count,\nreason: 'Primary tokenizer failed to load',\naccuracyNote: 'Basic heuristic (4 chars/token) - accuracy may vary significantly',\n});",
      "occurrences": [
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 170
        },
        {
          "path": "src/intelligence/token-counters.ts",
          "line": 155
        }
      ]
    },
    {
      "snippet": "switch (model) {\ncase 'gpt':\nestimatedCost = this.estimateGPTCost(count);\nbreak;\ncase 'claude':",
      "occurrences": [
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 176
        },
        {
          "path": "src/intelligence/token-counters.ts",
          "line": 162
        }
      ]
    },
    {
      "snippet": "case 'gpt':\nestimatedCost = this.estimateGPTCost(count);\nbreak;\ncase 'claude':\nestimatedCost = this.estimateClaudeCost(count);",
      "occurrences": [
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 177
        },
        {
          "path": "src/intelligence/token-counters.ts",
          "line": 163
        }
      ]
    },
    {
      "snippet": "estimatedCost = this.estimateGPTCost(count);\nbreak;\ncase 'claude':\nestimatedCost = this.estimateClaudeCost(count);\nbreak;",
      "occurrences": [
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 178
        },
        {
          "path": "src/intelligence/token-counters.ts",
          "line": 164
        }
      ]
    },
    {
      "snippet": "break;\ncase 'claude':\nestimatedCost = this.estimateClaudeCost(count);\nbreak;\ncase 'gemini':",
      "occurrences": [
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 179
        },
        {
          "path": "src/intelligence/token-counters.ts",
          "line": 165
        }
      ]
    },
    {
      "snippet": "case 'claude':\nestimatedCost = this.estimateClaudeCost(count);\nbreak;\ncase 'gemini':\nestimatedCost = this.estimateGeminiCost(count);",
      "occurrences": [
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 180
        },
        {
          "path": "src/intelligence/token-counters.ts",
          "line": 166
        }
      ]
    },
    {
      "snippet": "estimatedCost = this.estimateClaudeCost(count);\nbreak;\ncase 'gemini':\nestimatedCost = this.estimateGeminiCost(count);\nbreak;",
      "occurrences": [
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 181
        },
        {
          "path": "src/intelligence/token-counters.ts",
          "line": 167
        }
      ]
    },
    {
      "snippet": "break;\ncase 'gemini':\nestimatedCost = this.estimateGeminiCost(count);\nbreak;\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 182
        },
        {
          "path": "src/intelligence/token-counters.ts",
          "line": 168
        }
      ]
    },
    {
      "snippet": "return {\nmodel,\ncount,\nestimatedCost,\n};",
      "occurrences": [
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 187
        },
        {
          "path": "src/intelligence/token-counters.ts",
          "line": 174
        }
      ]
    },
    {
      "snippet": "model,\ncount,\nestimatedCost,\n};\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/token-counters.js",
          "line": 188
        },
        {
          "path": "src/intelligence/token-counters.ts",
          "line": 175
        }
      ]
    },
    {
      "snippet": "/**\n* Token Optimizer\n*\n* Main class implementing the 4-pass compression pipeline:\n* 1. Sanitization & Normalization",
      "occurrences": [
        {
          "path": "dist/intelligence/token-optimizer.d.ts",
          "line": 1
        },
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 2
        },
        {
          "path": "src/intelligence/token-optimizer.ts",
          "line": 1
        }
      ]
    },
    {
      "snippet": "* Token Optimizer\n*\n* Main class implementing the 4-pass compression pipeline:\n* 1. Sanitization & Normalization\n* 2. Structural Refactoring",
      "occurrences": [
        {
          "path": "dist/intelligence/token-optimizer.d.ts",
          "line": 2
        },
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 3
        },
        {
          "path": "src/intelligence/token-optimizer.ts",
          "line": 2
        }
      ]
    },
    {
      "snippet": "*\n* Main class implementing the 4-pass compression pipeline:\n* 1. Sanitization & Normalization\n* 2. Structural Refactoring\n* 3. Linguistic Simplification",
      "occurrences": [
        {
          "path": "dist/intelligence/token-optimizer.d.ts",
          "line": 3
        },
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 4
        },
        {
          "path": "src/intelligence/token-optimizer.ts",
          "line": 3
        }
      ]
    },
    {
      "snippet": "* Main class implementing the 4-pass compression pipeline:\n* 1. Sanitization & Normalization\n* 2. Structural Refactoring\n* 3. Linguistic Simplification\n* 4. Model-Specific Templating",
      "occurrences": [
        {
          "path": "dist/intelligence/token-optimizer.d.ts",
          "line": 4
        },
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 5
        },
        {
          "path": "src/intelligence/token-optimizer.ts",
          "line": 4
        }
      ]
    },
    {
      "snippet": "* 1. Sanitization & Normalization\n* 2. Structural Refactoring\n* 3. Linguistic Simplification\n* 4. Model-Specific Templating\n*/",
      "occurrences": [
        {
          "path": "dist/intelligence/token-optimizer.d.ts",
          "line": 5
        },
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 6
        },
        {
          "path": "src/intelligence/token-optimizer.ts",
          "line": 5
        }
      ]
    },
    {
      "snippet": "compressionRatio: originalTokenCount.count / denominator,\npassesApplied,\n};\nconst tokenUsage = {\nmodel,",
      "occurrences": [
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 112
        },
        {
          "path": "src/intelligence/token-optimizer.ts",
          "line": 123
        }
      ]
    },
    {
      "snippet": "passesApplied,\n};\nconst tokenUsage = {\nmodel,\noriginal: originalTokenCount,",
      "occurrences": [
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 113
        },
        {
          "path": "src/intelligence/token-optimizer.ts",
          "line": 124
        }
      ]
    },
    {
      "snippet": "};\nconst tokenUsage = {\nmodel,\noriginal: originalTokenCount,\noptimized: compressedTokenCount,",
      "occurrences": [
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 114
        },
        {
          "path": "src/intelligence/token-optimizer.ts",
          "line": 125
        }
      ]
    },
    {
      "snippet": "const tokenUsage = {\nmodel,\noriginal: originalTokenCount,\noptimized: compressedTokenCount,\nsavings: originalTokenCount.count - compressedTokenCount.count,",
      "occurrences": [
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 115
        },
        {
          "path": "src/intelligence/token-optimizer.ts",
          "line": 126
        }
      ]
    },
    {
      "snippet": "model,\noriginal: originalTokenCount,\noptimized: compressedTokenCount,\nsavings: originalTokenCount.count - compressedTokenCount.count,\ncompressionRatio: stats.compressionRatio,",
      "occurrences": [
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 116
        },
        {
          "path": "src/intelligence/token-optimizer.ts",
          "line": 127
        }
      ]
    },
    {
      "snippet": "original: originalTokenCount,\noptimized: compressedTokenCount,\nsavings: originalTokenCount.count - compressedTokenCount.count,\ncompressionRatio: stats.compressionRatio,\n};",
      "occurrences": [
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 117
        },
        {
          "path": "src/intelligence/token-optimizer.ts",
          "line": 128
        }
      ]
    },
    {
      "snippet": "return {\noriginal: missionContent,\noptimized: result,\nstats,\nmodel,",
      "occurrences": [
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 130
        },
        {
          "path": "src/intelligence/token-optimizer.ts",
          "line": 146
        }
      ]
    },
    {
      "snippet": "original: missionContent,\noptimized: result,\nstats,\nmodel,\nlevel,",
      "occurrences": [
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 131
        },
        {
          "path": "src/intelligence/token-optimizer.ts",
          "line": 147
        }
      ]
    },
    {
      "snippet": "optimized: result,\nstats,\nmodel,\nlevel,\ntokenUsage,",
      "occurrences": [
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 132
        },
        {
          "path": "src/intelligence/token-optimizer.ts",
          "line": 148
        }
      ]
    },
    {
      "snippet": "stats,\nmodel,\nlevel,\ntokenUsage,\nwarnings: warnings.length > 0 ? warnings : undefined,",
      "occurrences": [
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 133
        },
        {
          "path": "src/intelligence/token-optimizer.ts",
          "line": 149
        }
      ]
    },
    {
      "snippet": "model,\nlevel,\ntokenUsage,\nwarnings: warnings.length > 0 ? warnings : undefined,\n};",
      "occurrences": [
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 134
        },
        {
          "path": "src/intelligence/token-optimizer.ts",
          "line": 150
        }
      ]
    },
    {
      "snippet": "return this.optimize(missionContent, {\nmodel,\nlevel,\ndryRun: true,\n});",
      "occurrences": [
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 173
        },
        {
          "path": "src/intelligence/token-optimizer.ts",
          "line": 204
        }
      ]
    },
    {
      "snippet": "model,\nlevel,\ndryRun: true,\n});\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 174
        },
        {
          "path": "src/intelligence/token-optimizer.ts",
          "line": 205
        }
      ]
    },
    {
      "snippet": "level,\ndryRun: true,\n});\n}\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/token-optimizer.js",
          "line": 175
        },
        {
          "path": "src/intelligence/token-optimizer.ts",
          "line": 206
        }
      ]
    },
    {
      "snippet": "/**\n* Token Optimization Types\n*\n* Core interfaces and types for the token optimization engine.\n*/",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 1
        },
        {
          "path": "dist/intelligence/types.js",
          "line": 2
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 1
        }
      ]
    },
    {
      "snippet": "/**\n* Token count result\n*/\nexport interface TokenCount {\nmodel: SupportedModel;",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 18
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 26
        }
      ]
    },
    {
      "snippet": "* Token count result\n*/\nexport interface TokenCount {\nmodel: SupportedModel;\ncount: number;",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 19
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 27
        }
      ]
    },
    {
      "snippet": "*/\nexport interface TokenCount {\nmodel: SupportedModel;\ncount: number;\nestimatedCost?: number;",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 20
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 28
        }
      ]
    },
    {
      "snippet": "export interface TokenCount {\nmodel: SupportedModel;\ncount: number;\nestimatedCost?: number;\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 21
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 29
        }
      ]
    },
    {
      "snippet": "/**\n* Detailed token usage metrics for before/after comparisons\n*/\nexport interface TokenUsageComparison {\nmodel: SupportedModel;",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 26
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 35
        }
      ]
    },
    {
      "snippet": "* Detailed token usage metrics for before/after comparisons\n*/\nexport interface TokenUsageComparison {\nmodel: SupportedModel;\noriginal: TokenCount;",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 27
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 36
        }
      ]
    },
    {
      "snippet": "*/\nexport interface TokenUsageComparison {\nmodel: SupportedModel;\noriginal: TokenCount;\noptimized: TokenCount;",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 28
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 37
        }
      ]
    },
    {
      "snippet": "export interface TokenUsageComparison {\nmodel: SupportedModel;\noriginal: TokenCount;\noptimized: TokenCount;\nsavings: number;",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 29
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 38
        }
      ]
    },
    {
      "snippet": "model: SupportedModel;\noriginal: TokenCount;\noptimized: TokenCount;\nsavings: number;\ncompressionRatio: number;",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 30
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 39
        }
      ]
    },
    {
      "snippet": "original: TokenCount;\noptimized: TokenCount;\nsavings: number;\ncompressionRatio: number;\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 31
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 40
        }
      ]
    },
    {
      "snippet": "/**\n* Compression statistics\n*/\nexport interface CompressionStats {\noriginalTokens: number;",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 36
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 46
        }
      ]
    },
    {
      "snippet": "* Compression statistics\n*/\nexport interface CompressionStats {\noriginalTokens: number;\ncompressedTokens: number;",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 37
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 47
        }
      ]
    },
    {
      "snippet": "*/\nexport interface CompressionStats {\noriginalTokens: number;\ncompressedTokens: number;\nreductionPercentage: number;",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 38
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 48
        }
      ]
    },
    {
      "snippet": "export interface CompressionStats {\noriginalTokens: number;\ncompressedTokens: number;\nreductionPercentage: number;\ncompressionRatio: number;",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 39
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 49
        }
      ]
    },
    {
      "snippet": "originalTokens: number;\ncompressedTokens: number;\nreductionPercentage: number;\ncompressionRatio: number;\npassesApplied: CompressionPassType[];",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 40
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 50
        }
      ]
    },
    {
      "snippet": "compressedTokens: number;\nreductionPercentage: number;\ncompressionRatio: number;\npassesApplied: CompressionPassType[];\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 41
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 51
        }
      ]
    },
    {
      "snippet": "/**\n* Optimization result\n*/\nexport interface OptimizationResult {\noriginal: string;",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 46
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 57
        }
      ]
    },
    {
      "snippet": "* Optimization result\n*/\nexport interface OptimizationResult {\noriginal: string;\noptimized: string;",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 47
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 58
        }
      ]
    },
    {
      "snippet": "*/\nexport interface OptimizationResult {\noriginal: string;\noptimized: string;\nstats: CompressionStats;",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 48
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 59
        }
      ]
    },
    {
      "snippet": "export interface OptimizationResult {\noriginal: string;\noptimized: string;\nstats: CompressionStats;\nmodel: SupportedModel;",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 49
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 60
        }
      ]
    },
    {
      "snippet": "original: string;\noptimized: string;\nstats: CompressionStats;\nmodel: SupportedModel;\nlevel: CompressionLevel;",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 50
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 61
        }
      ]
    },
    {
      "snippet": "optimized: string;\nstats: CompressionStats;\nmodel: SupportedModel;\nlevel: CompressionLevel;\ntokenUsage: TokenUsageComparison;",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 51
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 62
        }
      ]
    },
    {
      "snippet": "stats: CompressionStats;\nmodel: SupportedModel;\nlevel: CompressionLevel;\ntokenUsage: TokenUsageComparison;\nwarnings?: string[];",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 52
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 63
        }
      ]
    },
    {
      "snippet": "model: SupportedModel;\nlevel: CompressionLevel;\ntokenUsage: TokenUsageComparison;\nwarnings?: string[];\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 53
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 64
        }
      ]
    },
    {
      "snippet": "/**\n* Compression rule definition\n*/\nexport interface CompressionRule {\ntype: 'regex_replace' | 'convert_prose_to_list' | 'convert_passive_to_active' | 'preserve_block';",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 58
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 70
        }
      ]
    },
    {
      "snippet": "* Compression rule definition\n*/\nexport interface CompressionRule {\ntype: 'regex_replace' | 'convert_prose_to_list' | 'convert_passive_to_active' | 'preserve_block';\npattern?: string | RegExp;",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 59
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 71
        }
      ]
    },
    {
      "snippet": "*/\nexport interface CompressionRule {\ntype: 'regex_replace' | 'convert_prose_to_list' | 'convert_passive_to_active' | 'preserve_block';\npattern?: string | RegExp;\nreplacement?: string;",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 60
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 72
        }
      ]
    },
    {
      "snippet": "export interface CompressionRule {\ntype: 'regex_replace' | 'convert_prose_to_list' | 'convert_passive_to_active' | 'preserve_block';\npattern?: string | RegExp;\nreplacement?: string;\ntargetSection?: st",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 61
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 73
        }
      ]
    },
    {
      "snippet": "type: 'regex_replace' | 'convert_prose_to_list' | 'convert_passive_to_active' | 'preserve_block';\npattern?: string | RegExp;\nreplacement?: string;\ntargetSection?: string;\nenabled: boolean;",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 62
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 74
        }
      ]
    },
    {
      "snippet": "pattern?: string | RegExp;\nreplacement?: string;\ntargetSection?: string;\nenabled: boolean;\nflags?: string;",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 63
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 75
        }
      ]
    },
    {
      "snippet": "replacement?: string;\ntargetSection?: string;\nenabled: boolean;\nflags?: string;\ndelimiters?: string[];",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 64
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 76
        }
      ]
    },
    {
      "snippet": "targetSection?: string;\nenabled: boolean;\nflags?: string;\ndelimiters?: string[];\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 65
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 77
        }
      ]
    },
    {
      "snippet": "/**\n* Ruleset configuration for compression\n*/\nexport interface CompressionRuleset {\nsanitizationRules: CompressionRule[];",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 70
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 83
        }
      ]
    },
    {
      "snippet": "* Ruleset configuration for compression\n*/\nexport interface CompressionRuleset {\nsanitizationRules: CompressionRule[];\nstructuralRules: CompressionRule[];",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 71
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 84
        }
      ]
    },
    {
      "snippet": "*/\nexport interface CompressionRuleset {\nsanitizationRules: CompressionRule[];\nstructuralRules: CompressionRule[];\nlinguisticRules: CompressionRule[];",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 72
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 85
        }
      ]
    },
    {
      "snippet": "export interface CompressionRuleset {\nsanitizationRules: CompressionRule[];\nstructuralRules: CompressionRule[];\nlinguisticRules: CompressionRule[];\npreservePatterns: RegExp[];",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 73
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 86
        }
      ]
    },
    {
      "snippet": "sanitizationRules: CompressionRule[];\nstructuralRules: CompressionRule[];\nlinguisticRules: CompressionRule[];\npreservePatterns: RegExp[];\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 74
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 87
        }
      ]
    },
    {
      "snippet": "/**\n* Model-specific configuration\n*/\nexport interface ModelConfig {\nmodel: SupportedModel;",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 79
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 93
        }
      ]
    },
    {
      "snippet": "* Model-specific configuration\n*/\nexport interface ModelConfig {\nmodel: SupportedModel;\ntemplateFormat: 'xml' | 'markdown' | 'ptcf';",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 80
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 94
        }
      ]
    },
    {
      "snippet": "*/\nexport interface ModelConfig {\nmodel: SupportedModel;\ntemplateFormat: 'xml' | 'markdown' | 'ptcf';\npreferredDelimiters?: string[];",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 81
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 95
        }
      ]
    },
    {
      "snippet": "export interface ModelConfig {\nmodel: SupportedModel;\ntemplateFormat: 'xml' | 'markdown' | 'ptcf';\npreferredDelimiters?: string[];\nsupportsXmlTags?: boolean;",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 82
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 96
        }
      ]
    },
    {
      "snippet": "model: SupportedModel;\ntemplateFormat: 'xml' | 'markdown' | 'ptcf';\npreferredDelimiters?: string[];\nsupportsXmlTags?: boolean;\nsupportsFewShot?: boolean;",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 83
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 97
        }
      ]
    },
    {
      "snippet": "templateFormat: 'xml' | 'markdown' | 'ptcf';\npreferredDelimiters?: string[];\nsupportsXmlTags?: boolean;\nsupportsFewShot?: boolean;\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 84
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 98
        }
      ]
    },
    {
      "snippet": "/**\n* Token counter interface\n*/\nexport interface ITokenCounter {\ncount(text: string, model: SupportedModel): Promise<TokenCount>;",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 89
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 104
        }
      ]
    },
    {
      "snippet": "* Token counter interface\n*/\nexport interface ITokenCounter {\ncount(text: string, model: SupportedModel): Promise<TokenCount>;\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 90
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 105
        }
      ]
    },
    {
      "snippet": "/**\n* Model transpiler interface\n*/\nexport interface IModelTranspiler {\ntranspile(content: string, targetModel: SupportedModel): string;",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 95
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 111
        }
      ]
    },
    {
      "snippet": "* Model transpiler interface\n*/\nexport interface IModelTranspiler {\ntranspile(content: string, targetModel: SupportedModel): string;\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 96
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 112
        }
      ]
    },
    {
      "snippet": "/**\n* Token optimizer configuration\n*/\nexport interface TokenOptimizerConfig {\nmodel: SupportedModel;",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 101
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 118
        }
      ]
    },
    {
      "snippet": "* Token optimizer configuration\n*/\nexport interface TokenOptimizerConfig {\nmodel: SupportedModel;\nlevel: CompressionLevel;",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 102
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 119
        }
      ]
    },
    {
      "snippet": "*/\nexport interface TokenOptimizerConfig {\nmodel: SupportedModel;\nlevel: CompressionLevel;\nruleset?: Partial<CompressionRuleset>;",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 103
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 120
        }
      ]
    },
    {
      "snippet": "export interface TokenOptimizerConfig {\nmodel: SupportedModel;\nlevel: CompressionLevel;\nruleset?: Partial<CompressionRuleset>;\npreserveTags?: string[];",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 104
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 121
        }
      ]
    },
    {
      "snippet": "model: SupportedModel;\nlevel: CompressionLevel;\nruleset?: Partial<CompressionRuleset>;\npreserveTags?: string[];\ndryRun?: boolean;",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 105
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 122
        }
      ]
    },
    {
      "snippet": "level: CompressionLevel;\nruleset?: Partial<CompressionRuleset>;\npreserveTags?: string[];\ndryRun?: boolean;\n}",
      "occurrences": [
        {
          "path": "dist/intelligence/types.d.ts",
          "line": 106
        },
        {
          "path": "src/intelligence/types.ts",
          "line": 123
        }
      ]
    },
    {
      "snippet": "/**\n* Secure YAML Loader with Three-Layer Defense\n*\n* Layer 1: Path Sanitization - Prevents directory traversal attacks\n* Layer 2: Safe Parsing - Prevents code execution via YAML tags",
      "occurrences": [
        {
          "path": "dist/loaders/yaml-loader.d.ts",
          "line": 1
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 2
        },
        {
          "path": "src/loaders/yaml-loader.ts",
          "line": 1
        }
      ]
    },
    {
      "snippet": "* Secure YAML Loader with Three-Layer Defense\n*\n* Layer 1: Path Sanitization - Prevents directory traversal attacks\n* Layer 2: Safe Parsing - Prevents code execution via YAML tags\n* Layer 3: Schema Va",
      "occurrences": [
        {
          "path": "dist/loaders/yaml-loader.d.ts",
          "line": 2
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 3
        },
        {
          "path": "src/loaders/yaml-loader.ts",
          "line": 2
        }
      ]
    },
    {
      "snippet": "*\n* Layer 1: Path Sanitization - Prevents directory traversal attacks\n* Layer 2: Safe Parsing - Prevents code execution via YAML tags\n* Layer 3: Schema Validation - Ensures structural integrity\n*",
      "occurrences": [
        {
          "path": "dist/loaders/yaml-loader.d.ts",
          "line": 3
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 4
        },
        {
          "path": "src/loaders/yaml-loader.ts",
          "line": 3
        }
      ]
    },
    {
      "snippet": "* Layer 1: Path Sanitization - Prevents directory traversal attacks\n* Layer 2: Safe Parsing - Prevents code execution via YAML tags\n* Layer 3: Schema Validation - Ensures structural integrity\n*\n* @mod",
      "occurrences": [
        {
          "path": "dist/loaders/yaml-loader.d.ts",
          "line": 4
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 5
        },
        {
          "path": "src/loaders/yaml-loader.ts",
          "line": 4
        }
      ]
    },
    {
      "snippet": "* Layer 2: Safe Parsing - Prevents code execution via YAML tags\n* Layer 3: Schema Validation - Ensures structural integrity\n*\n* @module loaders/yaml-loader\n*/",
      "occurrences": [
        {
          "path": "dist/loaders/yaml-loader.d.ts",
          "line": 5
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 6
        },
        {
          "path": "src/loaders/yaml-loader.ts",
          "line": 5
        }
      ]
    },
    {
      "snippet": "export interface SecureYAMLLoaderOptions {\n/**\n* Base directory for all file operations\n* All loaded files must be within this directory\n*/",
      "occurrences": [
        {
          "path": "dist/loaders/yaml-loader.d.ts",
          "line": 11
        },
        {
          "path": "src/loaders/yaml-loader.ts",
          "line": 18
        }
      ]
    },
    {
      "snippet": "/**\n* Base directory for all file operations\n* All loaded files must be within this directory\n*/\nbaseDir: string;",
      "occurrences": [
        {
          "path": "dist/loaders/yaml-loader.d.ts",
          "line": 12
        },
        {
          "path": "src/loaders/yaml-loader.ts",
          "line": 19
        }
      ]
    },
    {
      "snippet": "/**\n* Maximum file size in bytes (default: 10MB)\n*/\nmaxFileSize?: number;\n}",
      "occurrences": [
        {
          "path": "dist/loaders/yaml-loader.d.ts",
          "line": 21
        },
        {
          "path": "src/loaders/yaml-loader.ts",
          "line": 30
        }
      ]
    },
    {
      "snippet": "/**\n* Layer 1: Path Sanitization\n* Prevents directory traversal attacks by ensuring the resolved path\n* is within the base directory\n*",
      "occurrences": [
        {
          "path": "dist/loaders/yaml-loader.d.ts",
          "line": 35
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 66
        },
        {
          "path": "src/loaders/yaml-loader.ts",
          "line": 55
        }
      ]
    },
    {
      "snippet": "* Layer 1: Path Sanitization\n* Prevents directory traversal attacks by ensuring the resolved path\n* is within the base directory\n*\n* @param filePath - Relative or absolute file path",
      "occurrences": [
        {
          "path": "dist/loaders/yaml-loader.d.ts",
          "line": 36
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 67
        },
        {
          "path": "src/loaders/yaml-loader.ts",
          "line": 56
        }
      ]
    },
    {
      "snippet": "* Prevents directory traversal attacks by ensuring the resolved path\n* is within the base directory\n*\n* @param filePath - Relative or absolute file path\n* @returns Sanitized absolute path",
      "occurrences": [
        {
          "path": "dist/loaders/yaml-loader.d.ts",
          "line": 37
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 68
        },
        {
          "path": "src/loaders/yaml-loader.ts",
          "line": 57
        }
      ]
    },
    {
      "snippet": "* is within the base directory\n*\n* @param filePath - Relative or absolute file path\n* @returns Sanitized absolute path\n* @throws PathTraversalError if path escapes base directory",
      "occurrences": [
        {
          "path": "dist/loaders/yaml-loader.d.ts",
          "line": 38
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 69
        },
        {
          "path": "src/loaders/yaml-loader.ts",
          "line": 58
        }
      ]
    },
    {
      "snippet": "*\n* @param filePath - Relative or absolute file path\n* @returns Sanitized absolute path\n* @throws PathTraversalError if path escapes base directory\n*/",
      "occurrences": [
        {
          "path": "dist/loaders/yaml-loader.d.ts",
          "line": 39
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 70
        },
        {
          "path": "src/loaders/yaml-loader.ts",
          "line": 59
        }
      ]
    },
    {
      "snippet": "/**\n* Layer 2: Safe YAML Parsing\n* Uses YAML.parse which is safe by default (no custom tags)\n* Prevents code execution via malicious YAML constructs\n*",
      "occurrences": [
        {
          "path": "dist/loaders/yaml-loader.d.ts",
          "line": 45
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 91
        },
        {
          "path": "src/loaders/yaml-loader.ts",
          "line": 85
        }
      ]
    },
    {
      "snippet": "* Layer 2: Safe YAML Parsing\n* Uses YAML.parse which is safe by default (no custom tags)\n* Prevents code execution via malicious YAML constructs\n*\n* @param content - YAML string content",
      "occurrences": [
        {
          "path": "dist/loaders/yaml-loader.d.ts",
          "line": 46
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 92
        },
        {
          "path": "src/loaders/yaml-loader.ts",
          "line": 86
        }
      ]
    },
    {
      "snippet": "* Uses YAML.parse which is safe by default (no custom tags)\n* Prevents code execution via malicious YAML constructs\n*\n* @param content - YAML string content\n* @returns Parsed object",
      "occurrences": [
        {
          "path": "dist/loaders/yaml-loader.d.ts",
          "line": 47
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 93
        },
        {
          "path": "src/loaders/yaml-loader.ts",
          "line": 87
        }
      ]
    },
    {
      "snippet": "* Prevents code execution via malicious YAML constructs\n*\n* @param content - YAML string content\n* @returns Parsed object\n* @throws UnsafeYAMLError if parsing fails or detects unsafe content",
      "occurrences": [
        {
          "path": "dist/loaders/yaml-loader.d.ts",
          "line": 48
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 94
        },
        {
          "path": "src/loaders/yaml-loader.ts",
          "line": 88
        }
      ]
    },
    {
      "snippet": "*\n* @param content - YAML string content\n* @returns Parsed object\n* @throws UnsafeYAMLError if parsing fails or detects unsafe content\n*/",
      "occurrences": [
        {
          "path": "dist/loaders/yaml-loader.d.ts",
          "line": 49
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 95
        },
        {
          "path": "src/loaders/yaml-loader.ts",
          "line": 89
        }
      ]
    },
    {
      "snippet": "/**\n* Layer 3: Schema Validation\n* Validates parsed data against a JSON Schema\n*\n* @param data - Parsed data to validate",
      "occurrences": [
        {
          "path": "dist/loaders/yaml-loader.d.ts",
          "line": 60
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 130
        },
        {
          "path": "src/loaders/yaml-loader.ts",
          "line": 128
        }
      ]
    },
    {
      "snippet": "* Layer 3: Schema Validation\n* Validates parsed data against a JSON Schema\n*\n* @param data - Parsed data to validate\n* @param schema - JSON Schema for validation",
      "occurrences": [
        {
          "path": "dist/loaders/yaml-loader.d.ts",
          "line": 61
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 131
        },
        {
          "path": "src/loaders/yaml-loader.ts",
          "line": 129
        }
      ]
    },
    {
      "snippet": "* Validates parsed data against a JSON Schema\n*\n* @param data - Parsed data to validate\n* @param schema - JSON Schema for validation\n* @returns Validated and typed data",
      "occurrences": [
        {
          "path": "dist/loaders/yaml-loader.d.ts",
          "line": 62
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 132
        },
        {
          "path": "src/loaders/yaml-loader.ts",
          "line": 130
        }
      ]
    },
    {
      "snippet": "*\n* @param data - Parsed data to validate\n* @param schema - JSON Schema for validation\n* @returns Validated and typed data\n* @throws SchemaValidationError if validation fails",
      "occurrences": [
        {
          "path": "dist/loaders/yaml-loader.d.ts",
          "line": 63
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 133
        },
        {
          "path": "src/loaders/yaml-loader.ts",
          "line": 131
        }
      ]
    },
    {
      "snippet": "* @param data - Parsed data to validate\n* @param schema - JSON Schema for validation\n* @returns Validated and typed data\n* @throws SchemaValidationError if validation fails\n*/",
      "occurrences": [
        {
          "path": "dist/loaders/yaml-loader.d.ts",
          "line": 64
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 134
        },
        {
          "path": "src/loaders/yaml-loader.ts",
          "line": 132
        }
      ]
    },
    {
      "snippet": "/**\n* Load and parse a YAML file with all security layers\n*\n* @param filePath - Path to YAML file (relative to baseDir)\n* @param schema - Optional JSON Schema for validation",
      "occurrences": [
        {
          "path": "dist/loaders/yaml-loader.d.ts",
          "line": 70
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 147
        },
        {
          "path": "src/loaders/yaml-loader.ts",
          "line": 151
        }
      ]
    },
    {
      "snippet": "* Load and parse a YAML file with all security layers\n*\n* @param filePath - Path to YAML file (relative to baseDir)\n* @param schema - Optional JSON Schema for validation\n* @returns Parsed and validate",
      "occurrences": [
        {
          "path": "dist/loaders/yaml-loader.d.ts",
          "line": 71
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 148
        },
        {
          "path": "src/loaders/yaml-loader.ts",
          "line": 152
        }
      ]
    },
    {
      "snippet": "*\n* @param filePath - Path to YAML file (relative to baseDir)\n* @param schema - Optional JSON Schema for validation\n* @returns Parsed and validated data\n* @throws PathTraversalError, UnsafeYAMLError, ",
      "occurrences": [
        {
          "path": "dist/loaders/yaml-loader.d.ts",
          "line": 72
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 149
        },
        {
          "path": "src/loaders/yaml-loader.ts",
          "line": 153
        }
      ]
    },
    {
      "snippet": "* @param filePath - Path to YAML file (relative to baseDir)\n* @param schema - Optional JSON Schema for validation\n* @returns Parsed and validated data\n* @throws PathTraversalError, UnsafeYAMLError, Sc",
      "occurrences": [
        {
          "path": "dist/loaders/yaml-loader.d.ts",
          "line": 73
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 150
        },
        {
          "path": "src/loaders/yaml-loader.ts",
          "line": 154
        }
      ]
    },
    {
      "snippet": "/**\n* Load multiple YAML files\n*\n* @param filePaths - Array of file paths\n* @param schema - Optional schema to validate each file",
      "occurrences": [
        {
          "path": "dist/loaders/yaml-loader.d.ts",
          "line": 79
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 182
        },
        {
          "path": "src/loaders/yaml-loader.ts",
          "line": 195
        }
      ]
    },
    {
      "snippet": "* Load multiple YAML files\n*\n* @param filePaths - Array of file paths\n* @param schema - Optional schema to validate each file\n* @returns Array of parsed data",
      "occurrences": [
        {
          "path": "dist/loaders/yaml-loader.d.ts",
          "line": 80
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 183
        },
        {
          "path": "src/loaders/yaml-loader.ts",
          "line": 196
        }
      ]
    },
    {
      "snippet": "*\n* @param filePaths - Array of file paths\n* @param schema - Optional schema to validate each file\n* @returns Array of parsed data\n*/",
      "occurrences": [
        {
          "path": "dist/loaders/yaml-loader.d.ts",
          "line": 81
        },
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 184
        },
        {
          "path": "src/loaders/yaml-loader.ts",
          "line": 197
        }
      ]
    },
    {
      "snippet": "if (obj && typeof obj === 'object') {\nfor (const [key, value] of Object.entries(obj)) {\nthis.validateNoFunctions(value, `${path}.${key}`);\n}\n}",
      "occurrences": [
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 124
        },
        {
          "path": "src/loaders/yaml-loader.ts",
          "line": 121
        }
      ]
    },
    {
      "snippet": "for (const [key, value] of Object.entries(obj)) {\nthis.validateNoFunctions(value, `${path}.${key}`);\n}\n}\n}",
      "occurrences": [
        {
          "path": "dist/loaders/yaml-loader.js",
          "line": 125
        },
        {
          "path": "src/loaders/yaml-loader.ts",
          "line": 122
        }
      ]
    },
    {
      "snippet": "/**\n* Deep Merge Logic for Mission Template Composition\n*\n* Deterministic algorithm that merges generic mission templates with\n* domain-specific fields. Ensures same inputs always produce same output.",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.d.ts",
          "line": 1
        },
        {
          "path": "dist/merge/deep-merge.js",
          "line": 2
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 1
        }
      ]
    },
    {
      "snippet": "* Deep Merge Logic for Mission Template Composition\n*\n* Deterministic algorithm that merges generic mission templates with\n* domain-specific fields. Ensures same inputs always produce same output.\n*",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.d.ts",
          "line": 2
        },
        {
          "path": "dist/merge/deep-merge.js",
          "line": 3
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 2
        }
      ]
    },
    {
      "snippet": "*\n* Deterministic algorithm that merges generic mission templates with\n* domain-specific fields. Ensures same inputs always produce same output.\n*\n* Merge Rules:",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.d.ts",
          "line": 3
        },
        {
          "path": "dist/merge/deep-merge.js",
          "line": 4
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 3
        }
      ]
    },
    {
      "snippet": "* Deterministic algorithm that merges generic mission templates with\n* domain-specific fields. Ensures same inputs always produce same output.\n*\n* Merge Rules:\n* 1. Dictionaries: recursive merge, doma",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.d.ts",
          "line": 4
        },
        {
          "path": "dist/merge/deep-merge.js",
          "line": 5
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 4
        }
      ]
    },
    {
      "snippet": "* domain-specific fields. Ensures same inputs always produce same output.\n*\n* Merge Rules:\n* 1. Dictionaries: recursive merge, domain overrides generic\n* 2. Lists: concatenate (generic first, then dom",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.d.ts",
          "line": 5
        },
        {
          "path": "dist/merge/deep-merge.js",
          "line": 6
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 5
        }
      ]
    },
    {
      "snippet": "*\n* Merge Rules:\n* 1. Dictionaries: recursive merge, domain overrides generic\n* 2. Lists: concatenate (generic first, then domain)\n* 3. Scalars: domain value replaces generic value",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.d.ts",
          "line": 6
        },
        {
          "path": "dist/merge/deep-merge.js",
          "line": 7
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 6
        }
      ]
    },
    {
      "snippet": "* Merge Rules:\n* 1. Dictionaries: recursive merge, domain overrides generic\n* 2. Lists: concatenate (generic first, then domain)\n* 3. Scalars: domain value replaces generic value\n* 4. Null handling: d",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.d.ts",
          "line": 7
        },
        {
          "path": "dist/merge/deep-merge.js",
          "line": 8
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 7
        }
      ]
    },
    {
      "snippet": "* 1. Dictionaries: recursive merge, domain overrides generic\n* 2. Lists: concatenate (generic first, then domain)\n* 3. Scalars: domain value replaces generic value\n* 4. Null handling: domain null remo",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.d.ts",
          "line": 8
        },
        {
          "path": "dist/merge/deep-merge.js",
          "line": 9
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 8
        }
      ]
    },
    {
      "snippet": "* 2. Lists: concatenate (generic first, then domain)\n* 3. Scalars: domain value replaces generic value\n* 4. Null handling: domain null removes generic field\n*\n* @version 1.0",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.d.ts",
          "line": 9
        },
        {
          "path": "dist/merge/deep-merge.js",
          "line": 10
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 9
        }
      ]
    },
    {
      "snippet": "* 3. Scalars: domain value replaces generic value\n* 4. Null handling: domain null removes generic field\n*\n* @version 1.0\n*/",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.d.ts",
          "line": 10
        },
        {
          "path": "dist/merge/deep-merge.js",
          "line": 11
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 10
        }
      ]
    },
    {
      "snippet": "/**\n* Configuration options for the merge algorithm\n*/\nexport interface MergeOptions {\n/** Strategy for merging arrays/lists (default: 'concat') */",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.d.ts",
          "line": 19
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 21
        }
      ]
    },
    {
      "snippet": "* Configuration options for the merge algorithm\n*/\nexport interface MergeOptions {\n/** Strategy for merging arrays/lists (default: 'concat') */\narrayStrategy?: 'concat' | 'replace';",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.d.ts",
          "line": 20
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 22
        }
      ]
    },
    {
      "snippet": "/**\n* MissionMerger class - Deterministic deep merge for template composition\n*\n* @example\n* ```typescript",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.d.ts",
          "line": 28
        },
        {
          "path": "dist/merge/deep-merge.js",
          "line": 26
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 40
        }
      ]
    },
    {
      "snippet": "* MissionMerger class - Deterministic deep merge for template composition\n*\n* @example\n* ```typescript\n* const merger = new MissionMerger();",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.d.ts",
          "line": 29
        },
        {
          "path": "dist/merge/deep-merge.js",
          "line": 27
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 41
        }
      ]
    },
    {
      "snippet": "*\n* @example\n* ```typescript\n* const merger = new MissionMerger();\n* const generic = { objective: \"Build feature\", domainFields: {} };",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.d.ts",
          "line": 30
        },
        {
          "path": "dist/merge/deep-merge.js",
          "line": 28
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 42
        }
      ]
    },
    {
      "snippet": "* @example\n* ```typescript\n* const merger = new MissionMerger();\n* const generic = { objective: \"Build feature\", domainFields: {} };\n* const domain = { domainFields: { techStack: \"TypeScript\" } };",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.d.ts",
          "line": 31
        },
        {
          "path": "dist/merge/deep-merge.js",
          "line": 29
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 43
        }
      ]
    },
    {
      "snippet": "* ```typescript\n* const merger = new MissionMerger();\n* const generic = { objective: \"Build feature\", domainFields: {} };\n* const domain = { domainFields: { techStack: \"TypeScript\" } };\n* const result",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.d.ts",
          "line": 32
        },
        {
          "path": "dist/merge/deep-merge.js",
          "line": 30
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 44
        }
      ]
    },
    {
      "snippet": "* const merger = new MissionMerger();\n* const generic = { objective: \"Build feature\", domainFields: {} };\n* const domain = { domainFields: { techStack: \"TypeScript\" } };\n* const result = merger.merge(",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.d.ts",
          "line": 33
        },
        {
          "path": "dist/merge/deep-merge.js",
          "line": 31
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 45
        }
      ]
    },
    {
      "snippet": "* const generic = { objective: \"Build feature\", domainFields: {} };\n* const domain = { domainFields: { techStack: \"TypeScript\" } };\n* const result = merger.merge(generic, domain);\n* ```\n*/",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.d.ts",
          "line": 34
        },
        {
          "path": "dist/merge/deep-merge.js",
          "line": 32
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 46
        }
      ]
    },
    {
      "snippet": "/**\n* Merge base object with extension object, creating a new merged object\n*\n* @param base - The base object (generic template)\n* @param extension - The extension object (domain-specific fields)",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.d.ts",
          "line": 40
        },
        {
          "path": "dist/merge/deep-merge.js",
          "line": 38
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 52
        }
      ]
    },
    {
      "snippet": "* Merge base object with extension object, creating a new merged object\n*\n* @param base - The base object (generic template)\n* @param extension - The extension object (domain-specific fields)\n* @param",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.d.ts",
          "line": 41
        },
        {
          "path": "dist/merge/deep-merge.js",
          "line": 39
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 53
        }
      ]
    },
    {
      "snippet": "*\n* @param base - The base object (generic template)\n* @param extension - The extension object (domain-specific fields)\n* @param options - Optional merge configuration\n* @returns New merged object (do",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.d.ts",
          "line": 42
        },
        {
          "path": "dist/merge/deep-merge.js",
          "line": 40
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 54
        }
      ]
    },
    {
      "snippet": "* @param base - The base object (generic template)\n* @param extension - The extension object (domain-specific fields)\n* @param options - Optional merge configuration\n* @returns New merged object (does",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.d.ts",
          "line": 43
        },
        {
          "path": "dist/merge/deep-merge.js",
          "line": 41
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 55
        }
      ]
    },
    {
      "snippet": "/**\n* Merge two objects recursively\n*\n* @param base - Base object\n* @param extension - Extension object",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.d.ts",
          "line": 49
        },
        {
          "path": "dist/merge/deep-merge.js",
          "line": 66
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 89
        }
      ]
    },
    {
      "snippet": "* Merge two objects recursively\n*\n* @param base - Base object\n* @param extension - Extension object\n* @param options - Merge options",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.d.ts",
          "line": 50
        },
        {
          "path": "dist/merge/deep-merge.js",
          "line": 67
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 90
        }
      ]
    },
    {
      "snippet": "*\n* @param base - Base object\n* @param extension - Extension object\n* @param options - Merge options\n* @returns New merged object",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.d.ts",
          "line": 51
        },
        {
          "path": "dist/merge/deep-merge.js",
          "line": 68
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 91
        }
      ]
    },
    {
      "snippet": "* @param base - Base object\n* @param extension - Extension object\n* @param options - Merge options\n* @returns New merged object\n*/",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.d.ts",
          "line": 52
        },
        {
          "path": "dist/merge/deep-merge.js",
          "line": 69
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 92
        }
      ]
    },
    {
      "snippet": "/**\n* Merge two arrays/lists\n*\n* @param base - Base array\n* @param extension - Extension array",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.d.ts",
          "line": 58
        },
        {
          "path": "dist/merge/deep-merge.js",
          "line": 92
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 125
        }
      ]
    },
    {
      "snippet": "* Merge two arrays/lists\n*\n* @param base - Base array\n* @param extension - Extension array\n* @param options - Merge options",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.d.ts",
          "line": 59
        },
        {
          "path": "dist/merge/deep-merge.js",
          "line": 93
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 126
        }
      ]
    },
    {
      "snippet": "*\n* @param base - Base array\n* @param extension - Extension array\n* @param options - Merge options\n* @returns New merged array",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.d.ts",
          "line": 60
        },
        {
          "path": "dist/merge/deep-merge.js",
          "line": 94
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 127
        }
      ]
    },
    {
      "snippet": "* @param base - Base array\n* @param extension - Extension array\n* @param options - Merge options\n* @returns New merged array\n*/",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.d.ts",
          "line": 61
        },
        {
          "path": "dist/merge/deep-merge.js",
          "line": 95
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 128
        }
      ]
    },
    {
      "snippet": "/**\n* Merge individual values based on their types\n*\n* @param baseValue - Value from base object\n* @param extensionValue - Value from extension object",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.d.ts",
          "line": 67
        },
        {
          "path": "dist/merge/deep-merge.js",
          "line": 114
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 154
        }
      ]
    },
    {
      "snippet": "* Merge individual values based on their types\n*\n* @param baseValue - Value from base object\n* @param extensionValue - Value from extension object\n* @param options - Merge options",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.d.ts",
          "line": 68
        },
        {
          "path": "dist/merge/deep-merge.js",
          "line": 115
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 155
        }
      ]
    },
    {
      "snippet": "*\n* @param baseValue - Value from base object\n* @param extensionValue - Value from extension object\n* @param options - Merge options\n* @returns Merged value",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.d.ts",
          "line": 69
        },
        {
          "path": "dist/merge/deep-merge.js",
          "line": 116
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 156
        }
      ]
    },
    {
      "snippet": "* @param baseValue - Value from base object\n* @param extensionValue - Value from extension object\n* @param options - Merge options\n* @returns Merged value\n*/",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.d.ts",
          "line": 70
        },
        {
          "path": "dist/merge/deep-merge.js",
          "line": 117
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 157
        }
      ]
    },
    {
      "snippet": "/**\n* Type guard to check if a value is a plain object (not array, not null)\n*\n* @param value - Value to check\n* @returns True if value is a plain object",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.d.ts",
          "line": 76
        },
        {
          "path": "dist/merge/deep-merge.js",
          "line": 142
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 191
        }
      ]
    },
    {
      "snippet": "* Type guard to check if a value is a plain object (not array, not null)\n*\n* @param value - Value to check\n* @returns True if value is a plain object\n*/",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.d.ts",
          "line": 77
        },
        {
          "path": "dist/merge/deep-merge.js",
          "line": 143
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 192
        }
      ]
    },
    {
      "snippet": "/**\n* Convenience function for one-off merges\n*\n* @param base - Base object\n* @param extension - Extension object",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.d.ts",
          "line": 84
        },
        {
          "path": "dist/merge/deep-merge.js",
          "line": 157
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 208
        }
      ]
    },
    {
      "snippet": "* Convenience function for one-off merges\n*\n* @param base - Base object\n* @param extension - Extension object\n* @param options - Optional merge configuration",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.d.ts",
          "line": 85
        },
        {
          "path": "dist/merge/deep-merge.js",
          "line": 158
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 209
        }
      ]
    },
    {
      "snippet": "*\n* @param base - Base object\n* @param extension - Extension object\n* @param options - Optional merge configuration\n* @returns New merged object",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.d.ts",
          "line": 86
        },
        {
          "path": "dist/merge/deep-merge.js",
          "line": 159
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 210
        }
      ]
    },
    {
      "snippet": "* @param base - Base object\n* @param extension - Extension object\n* @param options - Optional merge configuration\n* @returns New merged object\n*/",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.d.ts",
          "line": 87
        },
        {
          "path": "dist/merge/deep-merge.js",
          "line": 160
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 211
        }
      ]
    },
    {
      "snippet": "// Domain null removes field\nif (extensionValue === null) {\ndelete result[key];\ncontinue;\n}",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.js",
          "line": 82
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 112
        }
      ]
    },
    {
      "snippet": "// Default: concat (generic first, then domain)\nif (options.listStrategy === 'unique') {\n// Remove duplicates while preserving order\nconst combined = [...base, ...extension];\nreturn Array.from(new Set",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.js",
          "line": 104
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 142
        }
      ]
    },
    {
      "snippet": "if (options.listStrategy === 'unique') {\n// Remove duplicates while preserving order\nconst combined = [...base, ...extension];\nreturn Array.from(new Set(combined.map(item => JSON.stringify(item))))\n.m",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.js",
          "line": 105
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 143
        }
      ]
    },
    {
      "snippet": "// Remove duplicates while preserving order\nconst combined = [...base, ...extension];\nreturn Array.from(new Set(combined.map(item => JSON.stringify(item))))\n.map(item => JSON.parse(item));\n}",
      "occurrences": [
        {
          "path": "dist/merge/deep-merge.js",
          "line": 106
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 144
        }
      ]
    },
    {
      "snippet": "'adequate', 'as appropriate', 'timely', 'significant', 'possibly',\n'etc', 'appropriate', 'reasonable', 'normal', 'typical', 'various',\n'suitable', 'proper', 'effective', 'efficient', 'robust', 'good',",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 13
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 20
        }
      ]
    },
    {
      "snippet": "'etc', 'appropriate', 'reasonable', 'normal', 'typical', 'various',\n'suitable', 'proper', 'effective', 'efficient', 'robust', 'good',\n'bad', 'better', 'worse', 'fast', 'slow', 'easy', 'hard', 'simple'",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 14
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 21
        }
      ]
    },
    {
      "snippet": "{\nname: 'Syntactic Validity',\nrawValue: metrics.syntacticValidity ? 1 : 0,\nnormalizedScore: metrics.syntacticValidity ? 1 : 0,\nweight: this.weights.syntacticValidity,",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 28
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 39
        }
      ]
    },
    {
      "snippet": "name: 'Syntactic Validity',\nrawValue: metrics.syntacticValidity ? 1 : 0,\nnormalizedScore: metrics.syntacticValidity ? 1 : 0,\nweight: this.weights.syntacticValidity,\ndetails: {",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 29
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 40
        }
      ]
    },
    {
      "snippet": "rawValue: metrics.syntacticValidity ? 1 : 0,\nnormalizedScore: metrics.syntacticValidity ? 1 : 0,\nweight: this.weights.syntacticValidity,\ndetails: {\nisValid: metrics.syntacticValidity,",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 30
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 41
        }
      ]
    },
    {
      "snippet": "normalizedScore: metrics.syntacticValidity ? 1 : 0,\nweight: this.weights.syntacticValidity,\ndetails: {\nisValid: metrics.syntacticValidity,\nnote: metrics.syntacticValidity ? 'Valid structure' : 'Invali",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 31
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 42
        }
      ]
    },
    {
      "snippet": "weight: this.weights.syntacticValidity,\ndetails: {\nisValid: metrics.syntacticValidity,\nnote: metrics.syntacticValidity ? 'Valid structure' : 'Invalid structure detected'\n}",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 32
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 43
        }
      ]
    },
    {
      "snippet": "details: {\nisValid: metrics.syntacticValidity,\nnote: metrics.syntacticValidity ? 'Valid structure' : 'Invalid structure detected'\n}\n},",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 33
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 44
        }
      ]
    },
    {
      "snippet": "isValid: metrics.syntacticValidity,\nnote: metrics.syntacticValidity ? 'Valid structure' : 'Invalid structure detected'\n}\n},\n{",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 34
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 45
        }
      ]
    },
    {
      "snippet": "note: metrics.syntacticValidity ? 'Valid structure' : 'Invalid structure detected'\n}\n},\n{\nname: 'Instruction Specificity',",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 35
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 46
        }
      ]
    },
    {
      "snippet": "}\n},\n{\nname: 'Instruction Specificity',\nrawValue: metrics.instructionSpecificity,",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 36
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 47
        }
      ]
    },
    {
      "snippet": "},\n{\nname: 'Instruction Specificity',\nrawValue: metrics.instructionSpecificity,\nnormalizedScore: metrics.instructionSpecificity,",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 37
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 48
        }
      ]
    },
    {
      "snippet": "{\nname: 'Instruction Specificity',\nrawValue: metrics.instructionSpecificity,\nnormalizedScore: metrics.instructionSpecificity,\nweight: this.weights.instructionSpecificity,",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 38
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 49
        }
      ]
    },
    {
      "snippet": "name: 'Instruction Specificity',\nrawValue: metrics.instructionSpecificity,\nnormalizedScore: metrics.instructionSpecificity,\nweight: this.weights.instructionSpecificity,\ndetails: this.getSpecificityDet",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 39
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 50
        }
      ]
    },
    {
      "snippet": "rawValue: metrics.instructionSpecificity,\nnormalizedScore: metrics.instructionSpecificity,\nweight: this.weights.instructionSpecificity,\ndetails: this.getSpecificityDetails(mission)\n},",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 40
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 51
        }
      ]
    },
    {
      "snippet": "normalizedScore: metrics.instructionSpecificity,\nweight: this.weights.instructionSpecificity,\ndetails: this.getSpecificityDetails(mission)\n},\n{",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 41
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 52
        }
      ]
    },
    {
      "snippet": "weight: this.weights.instructionSpecificity,\ndetails: this.getSpecificityDetails(mission)\n},\n{\nname: 'Linting Score',",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 42
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 53
        }
      ]
    },
    {
      "snippet": "details: this.getSpecificityDetails(mission)\n},\n{\nname: 'Linting Score',\nrawValue: metrics.lintingScore,",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 43
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 54
        }
      ]
    },
    {
      "snippet": "},\n{\nname: 'Linting Score',\nrawValue: metrics.lintingScore,\nnormalizedScore: metrics.lintingScore,",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 44
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 55
        }
      ]
    },
    {
      "snippet": "{\nname: 'Linting Score',\nrawValue: metrics.lintingScore,\nnormalizedScore: metrics.lintingScore,\nweight: this.weights.lintingScore,",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 45
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 56
        }
      ]
    },
    {
      "snippet": "name: 'Linting Score',\nrawValue: metrics.lintingScore,\nnormalizedScore: metrics.lintingScore,\nweight: this.weights.lintingScore,\ndetails: this.getLintingDetails(mission)",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 46
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 57
        }
      ]
    },
    {
      "snippet": "rawValue: metrics.lintingScore,\nnormalizedScore: metrics.lintingScore,\nweight: this.weights.lintingScore,\ndetails: this.getLintingDetails(mission)\n}",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 47
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 58
        }
      ]
    },
    {
      "snippet": "normalizedScore: metrics.lintingScore,\nweight: this.weights.lintingScore,\ndetails: this.getLintingDetails(mission)\n}\n];",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 48
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 59
        }
      ]
    },
    {
      "snippet": "// If syntactic validity fails, entire dimension scores 0\nif (!metrics.syntacticValidity) {\nreturn {\nscore: 0,\nweight: 0.20,",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 53
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 65
        }
      ]
    },
    {
      "snippet": "if (!metrics.syntacticValidity) {\nreturn {\nscore: 0,\nweight: 0.20,\nmetrics: metricResults",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 54
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 66
        }
      ]
    },
    {
      "snippet": "return {\nscore: 0,\nweight: 0.20,\nmetrics: metricResults\n};",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 55
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 67
        }
      ]
    },
    {
      "snippet": "score: 0,\nweight: 0.20,\nmetrics: metricResults\n};\n}",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 56
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 68
        }
      ]
    },
    {
      "snippet": "return {\nscore,\nweight: 0.20,\nmetrics: metricResults\n};",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 62
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 79
        }
      ]
    },
    {
      "snippet": "score,\nweight: 0.20,\nmetrics: metricResults\n};\n}",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 63
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 80
        }
      ]
    },
    {
      "snippet": "try {\n// Mission is already parsed, but check for basic structure\nif (typeof mission !== 'object' || mission === null) {\nreturn false;\n}",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 73
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 91
        }
      ]
    },
    {
      "snippet": "const checks = [\n// 1. Explicit Goal\n{\nname: 'Explicit goal',\ntest: () => this.hasExplicitGoal(mission.objective),",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 93
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 114
        }
      ]
    },
    {
      "snippet": "// 1. Explicit Goal\n{\nname: 'Explicit goal',\ntest: () => this.hasExplicitGoal(mission.objective),\nweight: 0.25",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 94
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 115
        }
      ]
    },
    {
      "snippet": "{\nname: 'Explicit goal',\ntest: () => this.hasExplicitGoal(mission.objective),\nweight: 0.25\n},",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 95
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 116
        }
      ]
    },
    {
      "snippet": "// 2. Defined Scope\n{\nname: 'Defined scope',\ntest: () => this.hasDefinedScope(mission.context),\nweight: 0.20",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 100
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 122
        }
      ]
    },
    {
      "snippet": "{\nname: 'Defined scope',\ntest: () => this.hasDefinedScope(mission.context),\nweight: 0.20\n},",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 101
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 123
        }
      ]
    },
    {
      "snippet": "// 3. Format Specification\n{\nname: 'Format specification',\ntest: () => this.hasFormatSpecification(mission),\nweight: 0.20",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 106
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 129
        }
      ]
    },
    {
      "snippet": "{\nname: 'Format specification',\ntest: () => this.hasFormatSpecification(mission),\nweight: 0.20\n},",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 107
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 130
        }
      ]
    },
    {
      "snippet": "// 4. Constraint Declaration\n{\nname: 'Constraint declaration',\ntest: () => this.hasConstraints(mission),\nweight: 0.15",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 112
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 136
        }
      ]
    },
    {
      "snippet": "{\nname: 'Constraint declaration',\ntest: () => this.hasConstraints(mission),\nweight: 0.15\n},",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 113
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 137
        }
      ]
    },
    {
      "snippet": "// 5. Success Criteria Definition\n{\nname: 'Success criteria',\ntest: () => this.hasWellDefinedSuccessCriteria(mission.successCriteria),\nweight: 0.20",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 118
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 143
        }
      ]
    },
    {
      "snippet": "{\nname: 'Success criteria',\ntest: () => this.hasWellDefinedSuccessCriteria(mission.successCriteria),\nweight: 0.20\n}",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 119
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 144
        }
      ]
    },
    {
      "snippet": "name: 'Success criteria',\ntest: () => this.hasWellDefinedSuccessCriteria(mission.successCriteria),\nweight: 0.20\n}\n];",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 120
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 145
        }
      ]
    },
    {
      "snippet": "let score = 0;\nfor (const check of checks) {\nif (check.test()) {\nscore += check.weight;\n}",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 125
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 151
        }
      ]
    },
    {
      "snippet": "for (const check of checks) {\nif (check.test()) {\nscore += check.weight;\n}\n}",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 126
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 152
        }
      ]
    },
    {
      "snippet": "if (check.test()) {\nscore += check.weight;\n}\n}\nreturn score;",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 127
        },
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 150
        }
      ]
    },
    {
      "snippet": "score += check.weight;\n}\n}\nreturn score;\n}",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 128
        },
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 151
        }
      ]
    },
    {
      "snippet": "}\n}\nreturn score;\n}\n/**",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 129
        },
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 152
        }
      ]
    },
    {
      "snippet": "// Check for consistent data types\nif (mission.successCriteria && typeof mission.successCriteria === 'string') {\n// Prefer array over multi-line string\nif (mission.successCriteria.includes('\\n')) {\nvi",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 139
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 168
        }
      ]
    },
    {
      "snippet": "if (mission.successCriteria && typeof mission.successCriteria === 'string') {\n// Prefer array over multi-line string\nif (mission.successCriteria.includes('\\n')) {\nviolations.push('successCriteria shou",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 140
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 169
        }
      ]
    },
    {
      "snippet": "// Prefer array over multi-line string\nif (mission.successCriteria.includes('\\n')) {\nviolations.push('successCriteria should be array, not multi-line string');\n}\n}",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 141
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 170
        }
      ]
    },
    {
      "snippet": "if (mission.deliverables && typeof mission.deliverables === 'string') {\nif (mission.deliverables.includes('\\n')) {\nviolations.push('deliverables should be array, not multi-line string');\n}\n}",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 146
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 176
        }
      ]
    },
    {
      "snippet": "for (const phrase of this.WEAK_PHRASES) {\nif (fullText.includes(phrase.toLowerCase())) {\nvaguePhrasesFound.push(phrase);\n}\n}",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 154
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 186
        }
      ]
    },
    {
      "snippet": "// Check for proper field naming\nif (mission.domainFields) {\nconst fields = Object.keys(mission.domainFields);\nfor (const field of fields) {\n// Check for camelCase convention",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 162
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 196
        }
      ]
    },
    {
      "snippet": "if (mission.domainFields) {\nconst fields = Object.keys(mission.domainFields);\nfor (const field of fields) {\n// Check for camelCase convention\nif (!/^[a-z][a-zA-Z0-9]*$/.test(field) && field !== 'type'",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 163
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 197
        }
      ]
    },
    {
      "snippet": "const fields = Object.keys(mission.domainFields);\nfor (const field of fields) {\n// Check for camelCase convention\nif (!/^[a-z][a-zA-Z0-9]*$/.test(field) && field !== 'type') {\nviolations.push(`Field '",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 164
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 198
        }
      ]
    },
    {
      "snippet": "for (const field of fields) {\n// Check for camelCase convention\nif (!/^[a-z][a-zA-Z0-9]*$/.test(field) && field !== 'type') {\nviolations.push(`Field '${field}' doesn't follow camelCase convention`);\n}",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 165
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 199
        }
      ]
    },
    {
      "snippet": "// Check for camelCase convention\nif (!/^[a-z][a-zA-Z0-9]*$/.test(field) && field !== 'type') {\nviolations.push(`Field '${field}' doesn't follow camelCase convention`);\n}\n}",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 166
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 200
        }
      ]
    },
    {
      "snippet": "if (!/^[a-z][a-zA-Z0-9]*$/.test(field) && field !== 'type') {\nviolations.push(`Field '${field}' doesn't follow camelCase convention`);\n}\n}\n}",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 167
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 201
        }
      ]
    },
    {
      "snippet": "// Check for empty fields\nconst emptyFields = this.findEmptyFields(mission);\nif (emptyFields.length > 0) {\nviolations.push(`${emptyFields.length} empty fields found`);\n}",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 172
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 207
        }
      ]
    },
    {
      "snippet": "// Look for scope indicators\nconst scopeIndicators = [\n'in-scope', 'out-of-scope', 'scope', 'boundary', 'boundaries',\n'includes', 'excludes', 'focuses on', 'limited to', 'specifically'\n];",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 201
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 247
        }
      ]
    },
    {
      "snippet": "// Look for format specifications\nconst formatIndicators = [\n'format', 'json', 'yaml', 'table', 'list', 'bullet',\n'markdown', 'structured', 'template', 'schema'\n];",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 213
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 264
        }
      ]
    },
    {
      "snippet": "// Look for negative constraints\nconst constraintIndicators = [\n'do not', 'don\\'t', 'avoid', 'exclude', 'without',\n'must not', 'should not', 'cannot', 'never'\n];",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 222
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 276
        }
      ]
    },
    {
      "snippet": "// Or positive constraints\nconst positiveConstraints = [\n'must', 'required', 'shall', 'only', 'specifically',\n'constraint', 'limitation', 'restriction'\n];",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 228
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 286
        }
      ]
    },
    {
      "snippet": "return {\nhasExplicitGoal: this.hasExplicitGoal(mission.objective),\nhasDefinedScope: this.hasDefinedScope(mission.context),\nhasFormatSpec: this.hasFormatSpecification(mission),\nhasConstraints: this.has",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 274
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 347
        }
      ]
    },
    {
      "snippet": "hasExplicitGoal: this.hasExplicitGoal(mission.objective),\nhasDefinedScope: this.hasDefinedScope(mission.context),\nhasFormatSpec: this.hasFormatSpecification(mission),\nhasConstraints: this.hasConstrain",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 275
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 348
        }
      ]
    },
    {
      "snippet": "hasDefinedScope: this.hasDefinedScope(mission.context),\nhasFormatSpec: this.hasFormatSpecification(mission),\nhasConstraints: this.hasConstraints(mission),\nhasSuccessCriteria: this.hasWellDefinedSucces",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 276
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 349
        }
      ]
    },
    {
      "snippet": "hasFormatSpec: this.hasFormatSpecification(mission),\nhasConstraints: this.hasConstraints(mission),\nhasSuccessCriteria: this.hasWellDefinedSuccessCriteria(mission.successCriteria)\n};\n}",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 277
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 350
        }
      ]
    },
    {
      "snippet": "return {\nvaguePhrasesCount: vaguePhrasesFound.length,\nvaguePhrasesFound: vaguePhrasesFound.slice(0, 5), // First 5\nemptyFieldsCount: this.findEmptyFields(mission).length\n};",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 285
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 362
        }
      ]
    },
    {
      "snippet": "vaguePhrasesCount: vaguePhrasesFound.length,\nvaguePhrasesFound: vaguePhrasesFound.slice(0, 5), // First 5\nemptyFieldsCount: this.findEmptyFields(mission).length\n};\n}",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 286
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 363
        }
      ]
    },
    {
      "snippet": "vaguePhrasesFound: vaguePhrasesFound.slice(0, 5), // First 5\nemptyFieldsCount: this.findEmptyFields(mission).length\n};\n}\n}",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/ai-readiness-analyzer.js",
          "line": 287
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 364
        }
      ]
    },
    {
      "snippet": "fleschKincaidGradeLevel: this.calculateFleschKincaid(text),\nlexicalDensity: this.calculateLexicalDensity(text),\nlexicalAmbiguity: this.detectLexicalAmbiguity(text),\nsyntacticAmbiguity: this.detectSynt",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 17
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 26
        }
      ]
    },
    {
      "snippet": "lexicalDensity: this.calculateLexicalDensity(text),\nlexicalAmbiguity: this.detectLexicalAmbiguity(text),\nsyntacticAmbiguity: this.detectSyntacticAmbiguity(text),\nreferentialAmbiguity: this.detectRefer",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 18
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 27
        }
      ]
    },
    {
      "snippet": "lexicalAmbiguity: this.detectLexicalAmbiguity(text),\nsyntacticAmbiguity: this.detectSyntacticAmbiguity(text),\nreferentialAmbiguity: this.detectReferentialAmbiguity(text),\nmissionCyclomaticComplexity: ",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 19
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 28
        }
      ]
    },
    {
      "snippet": "{\nname: 'Flesch-Kincaid Grade Level',\nrawValue: metrics.fleschKincaidGradeLevel,\nnormalizedScore: this.normalizeFleschKincaid(metrics.fleschKincaidGradeLevel),\nweight: this.weights.fleschKincaidGradeL",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 26
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 36
        }
      ]
    },
    {
      "snippet": "name: 'Flesch-Kincaid Grade Level',\nrawValue: metrics.fleschKincaidGradeLevel,\nnormalizedScore: this.normalizeFleschKincaid(metrics.fleschKincaidGradeLevel),\nweight: this.weights.fleschKincaidGradeLev",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 27
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 37
        }
      ]
    },
    {
      "snippet": "rawValue: metrics.fleschKincaidGradeLevel,\nnormalizedScore: this.normalizeFleschKincaid(metrics.fleschKincaidGradeLevel),\nweight: this.weights.fleschKincaidGradeLevel,\ndetails: { target: '10-12', inte",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 28
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 38
        }
      ]
    },
    {
      "snippet": "normalizedScore: this.normalizeFleschKincaid(metrics.fleschKincaidGradeLevel),\nweight: this.weights.fleschKincaidGradeLevel,\ndetails: { target: '10-12', interpretation: this.interpretFKGL(metrics.fles",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 29
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 39
        }
      ]
    },
    {
      "snippet": "weight: this.weights.fleschKincaidGradeLevel,\ndetails: { target: '10-12', interpretation: this.interpretFKGL(metrics.fleschKincaidGradeLevel) }\n},\n{\nname: 'Lexical Density',",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 30
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 40
        }
      ]
    },
    {
      "snippet": "details: { target: '10-12', interpretation: this.interpretFKGL(metrics.fleschKincaidGradeLevel) }\n},\n{\nname: 'Lexical Density',\nrawValue: metrics.lexicalDensity,",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 31
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 41
        }
      ]
    },
    {
      "snippet": "},\n{\nname: 'Lexical Density',\nrawValue: metrics.lexicalDensity,\nnormalizedScore: this.normalizeLexicalDensity(metrics.lexicalDensity),",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 32
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 42
        }
      ]
    },
    {
      "snippet": "{\nname: 'Lexical Density',\nrawValue: metrics.lexicalDensity,\nnormalizedScore: this.normalizeLexicalDensity(metrics.lexicalDensity),\nweight: this.weights.lexicalDensity,",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 33
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 43
        }
      ]
    },
    {
      "snippet": "name: 'Lexical Density',\nrawValue: metrics.lexicalDensity,\nnormalizedScore: this.normalizeLexicalDensity(metrics.lexicalDensity),\nweight: this.weights.lexicalDensity,\ndetails: { target: '>50%', percen",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 34
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 44
        }
      ]
    },
    {
      "snippet": "rawValue: metrics.lexicalDensity,\nnormalizedScore: this.normalizeLexicalDensity(metrics.lexicalDensity),\nweight: this.weights.lexicalDensity,\ndetails: { target: '>50%', percentage: `${metrics.lexicalD",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 35
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 45
        }
      ]
    },
    {
      "snippet": "normalizedScore: this.normalizeLexicalDensity(metrics.lexicalDensity),\nweight: this.weights.lexicalDensity,\ndetails: { target: '>50%', percentage: `${metrics.lexicalDensity.toFixed(1)}%` }\n},\n{",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 36
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 46
        }
      ]
    },
    {
      "snippet": "weight: this.weights.lexicalDensity,\ndetails: { target: '>50%', percentage: `${metrics.lexicalDensity.toFixed(1)}%` }\n},\n{\nname: 'Lexical Ambiguity',",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 37
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 47
        }
      ]
    },
    {
      "snippet": "details: { target: '>50%', percentage: `${metrics.lexicalDensity.toFixed(1)}%` }\n},\n{\nname: 'Lexical Ambiguity',\nrawValue: metrics.lexicalAmbiguity,",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 38
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 48
        }
      ]
    },
    {
      "snippet": "},\n{\nname: 'Lexical Ambiguity',\nrawValue: metrics.lexicalAmbiguity,\nnormalizedScore: metrics.lexicalAmbiguity,",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 39
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 49
        }
      ]
    },
    {
      "snippet": "{\nname: 'Lexical Ambiguity',\nrawValue: metrics.lexicalAmbiguity,\nnormalizedScore: metrics.lexicalAmbiguity,\nweight: this.weights.lexicalAmbiguity,",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 40
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 50
        }
      ]
    },
    {
      "snippet": "name: 'Lexical Ambiguity',\nrawValue: metrics.lexicalAmbiguity,\nnormalizedScore: metrics.lexicalAmbiguity,\nweight: this.weights.lexicalAmbiguity,\ndetails: { ambiguousWordCount: Math.round((1 - metrics.",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 41
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 51
        }
      ]
    },
    {
      "snippet": "rawValue: metrics.lexicalAmbiguity,\nnormalizedScore: metrics.lexicalAmbiguity,\nweight: this.weights.lexicalAmbiguity,\ndetails: { ambiguousWordCount: Math.round((1 - metrics.lexicalAmbiguity) * text.sp",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 42
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 52
        }
      ]
    },
    {
      "snippet": "normalizedScore: metrics.lexicalAmbiguity,\nweight: this.weights.lexicalAmbiguity,\ndetails: { ambiguousWordCount: Math.round((1 - metrics.lexicalAmbiguity) * text.split(/\\s+/).length) }\n},\n{",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 43
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 53
        }
      ]
    },
    {
      "snippet": "weight: this.weights.lexicalAmbiguity,\ndetails: { ambiguousWordCount: Math.round((1 - metrics.lexicalAmbiguity) * text.split(/\\s+/).length) }\n},\n{\nname: 'Syntactic Ambiguity',",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 44
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 54
        }
      ]
    },
    {
      "snippet": "details: { ambiguousWordCount: Math.round((1 - metrics.lexicalAmbiguity) * text.split(/\\s+/).length) }\n},\n{\nname: 'Syntactic Ambiguity',\nrawValue: metrics.syntacticAmbiguity,",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 45
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 55
        }
      ]
    },
    {
      "snippet": "},\n{\nname: 'Syntactic Ambiguity',\nrawValue: metrics.syntacticAmbiguity,\nnormalizedScore: metrics.syntacticAmbiguity,",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 46
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 56
        }
      ]
    },
    {
      "snippet": "{\nname: 'Syntactic Ambiguity',\nrawValue: metrics.syntacticAmbiguity,\nnormalizedScore: metrics.syntacticAmbiguity,\nweight: this.weights.syntacticAmbiguity",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 47
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 57
        }
      ]
    },
    {
      "snippet": "name: 'Syntactic Ambiguity',\nrawValue: metrics.syntacticAmbiguity,\nnormalizedScore: metrics.syntacticAmbiguity,\nweight: this.weights.syntacticAmbiguity\n},",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 48
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 58
        }
      ]
    },
    {
      "snippet": "rawValue: metrics.syntacticAmbiguity,\nnormalizedScore: metrics.syntacticAmbiguity,\nweight: this.weights.syntacticAmbiguity\n},\n{",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 49
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 59
        }
      ]
    },
    {
      "snippet": "normalizedScore: metrics.syntacticAmbiguity,\nweight: this.weights.syntacticAmbiguity\n},\n{\nname: 'Referential Ambiguity',",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 50
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 60
        }
      ]
    },
    {
      "snippet": "weight: this.weights.syntacticAmbiguity\n},\n{\nname: 'Referential Ambiguity',\nrawValue: metrics.referentialAmbiguity,",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 51
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 61
        }
      ]
    },
    {
      "snippet": "},\n{\nname: 'Referential Ambiguity',\nrawValue: metrics.referentialAmbiguity,\nnormalizedScore: metrics.referentialAmbiguity,",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 52
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 62
        }
      ]
    },
    {
      "snippet": "{\nname: 'Referential Ambiguity',\nrawValue: metrics.referentialAmbiguity,\nnormalizedScore: metrics.referentialAmbiguity,\nweight: this.weights.referentialAmbiguity",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 53
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 63
        }
      ]
    },
    {
      "snippet": "name: 'Referential Ambiguity',\nrawValue: metrics.referentialAmbiguity,\nnormalizedScore: metrics.referentialAmbiguity,\nweight: this.weights.referentialAmbiguity\n},",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 54
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 64
        }
      ]
    },
    {
      "snippet": "rawValue: metrics.referentialAmbiguity,\nnormalizedScore: metrics.referentialAmbiguity,\nweight: this.weights.referentialAmbiguity\n},\n{",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 55
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 65
        }
      ]
    },
    {
      "snippet": "normalizedScore: metrics.referentialAmbiguity,\nweight: this.weights.referentialAmbiguity\n},\n{\nname: 'Mission Cyclomatic Complexity',",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 56
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 66
        }
      ]
    },
    {
      "snippet": "weight: this.weights.referentialAmbiguity\n},\n{\nname: 'Mission Cyclomatic Complexity',\nrawValue: metrics.missionCyclomaticComplexity,",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 57
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 67
        }
      ]
    },
    {
      "snippet": "},\n{\nname: 'Mission Cyclomatic Complexity',\nrawValue: metrics.missionCyclomaticComplexity,\nnormalizedScore: this.normalizeMCC(metrics.missionCyclomaticComplexity),",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 58
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 68
        }
      ]
    },
    {
      "snippet": "{\nname: 'Mission Cyclomatic Complexity',\nrawValue: metrics.missionCyclomaticComplexity,\nnormalizedScore: this.normalizeMCC(metrics.missionCyclomaticComplexity),\nweight: this.weights.missionCyclomaticC",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 59
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 69
        }
      ]
    },
    {
      "snippet": "name: 'Mission Cyclomatic Complexity',\nrawValue: metrics.missionCyclomaticComplexity,\nnormalizedScore: this.normalizeMCC(metrics.missionCyclomaticComplexity),\nweight: this.weights.missionCyclomaticCom",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 60
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 70
        }
      ]
    },
    {
      "snippet": "rawValue: metrics.missionCyclomaticComplexity,\nnormalizedScore: this.normalizeMCC(metrics.missionCyclomaticComplexity),\nweight: this.weights.missionCyclomaticComplexity,\ndetails: {\nriskLevel: this.get",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 61
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 71
        }
      ]
    },
    {
      "snippet": "normalizedScore: this.normalizeMCC(metrics.missionCyclomaticComplexity),\nweight: this.weights.missionCyclomaticComplexity,\ndetails: {\nriskLevel: this.getMCCRiskLevel(metrics.missionCyclomaticComplexit",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 62
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 72
        }
      ]
    },
    {
      "snippet": "weight: this.weights.missionCyclomaticComplexity,\ndetails: {\nriskLevel: this.getMCCRiskLevel(metrics.missionCyclomaticComplexity),\ndecisionPoints: metrics.missionCyclomaticComplexity - 1\n}",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 63
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 73
        }
      ]
    },
    {
      "snippet": "details: {\nriskLevel: this.getMCCRiskLevel(metrics.missionCyclomaticComplexity),\ndecisionPoints: metrics.missionCyclomaticComplexity - 1\n}\n}",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 64
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 74
        }
      ]
    },
    {
      "snippet": "riskLevel: this.getMCCRiskLevel(metrics.missionCyclomaticComplexity),\ndecisionPoints: metrics.missionCyclomaticComplexity - 1\n}\n}\n];",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 65
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 75
        }
      ]
    },
    {
      "snippet": "return {\nscore,\nweight: 0.35, // Default clarity dimension weight\nmetrics: metricResults\n};",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 72
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 87
        }
      ]
    },
    {
      "snippet": "score,\nweight: 0.35, // Default clarity dimension weight\nmetrics: metricResults\n};\n}",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 73
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 88
        }
      ]
    },
    {
      "snippet": "// Function words (articles, prepositions, pronouns, conjunctions)\nconst functionWords = new Set([\n'the', 'a', 'an', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for',\n'of', 'with', 'from', 'by', 'as'",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 100
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 119
        }
      ]
    },
    {
      "snippet": "const functionWords = new Set([\n'the', 'a', 'an', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for',\n'of', 'with', 'from', 'by', 'as', 'is', 'was', 'are', 'were', 'be',\n'been', 'being', 'have', 'has',",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 101
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 120
        }
      ]
    },
    {
      "snippet": "'the', 'a', 'an', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for',\n'of', 'with', 'from', 'by', 'as', 'is', 'was', 'are', 'were', 'be',\n'been', 'being', 'have', 'has', 'had', 'do', 'does', 'did', 'wi",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 102
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 121
        }
      ]
    },
    {
      "snippet": "'of', 'with', 'from', 'by', 'as', 'is', 'was', 'are', 'were', 'be',\n'been', 'being', 'have', 'has', 'had', 'do', 'does', 'did', 'will',\n'would', 'should', 'could', 'may', 'might', 'can', 'must', 'shal",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 103
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 122
        }
      ]
    },
    {
      "snippet": "'been', 'being', 'have', 'has', 'had', 'do', 'does', 'did', 'will',\n'would', 'should', 'could', 'may', 'might', 'can', 'must', 'shall',\n'this', 'that', 'these', 'those', 'i', 'you', 'he', 'she', 'it',",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 104
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 123
        }
      ]
    },
    {
      "snippet": "'would', 'should', 'could', 'may', 'might', 'can', 'must', 'shall',\n'this', 'that', 'these', 'those', 'i', 'you', 'he', 'she', 'it',\n'we', 'they', 'them', 'their', 'my', 'your', 'his', 'her', 'its',\n'",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 105
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 124
        }
      ]
    },
    {
      "snippet": "// Common ambiguous words in technical contexts\nconst ambiguousWords = new Set([\n'bank', 'record', 'table', 'field', 'file', 'run', 'execute',\n'process', 'service', 'object', 'class', 'type', 'value',",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 121
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 142
        }
      ]
    },
    {
      "snippet": "const ambiguousWords = new Set([\n'bank', 'record', 'table', 'field', 'file', 'run', 'execute',\n'process', 'service', 'object', 'class', 'type', 'value', 'set',\n'get', 'check', 'test', 'case', 'base', ",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 122
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 143
        }
      ]
    },
    {
      "snippet": "let ambiguousCount = 0;\nfor (const sentence of sentences) {\n// Patterns that often lead to syntactic ambiguity\nconst patterns = [\n/\\b(saw|watched|heard)\\s+\\w+\\s+(duck|bear|fish|fly)\\b/i, // \"saw her d",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 138
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 161
        }
      ]
    },
    {
      "snippet": "for (const sentence of sentences) {\n// Patterns that often lead to syntactic ambiguity\nconst patterns = [\n/\\b(saw|watched|heard)\\s+\\w+\\s+(duck|bear|fish|fly)\\b/i, // \"saw her duck\"\n/\\b\\w+\\s+and\\s+\\w+\\",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 139
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 162
        }
      ]
    },
    {
      "snippet": "// Patterns that often lead to syntactic ambiguity\nconst patterns = [\n/\\b(saw|watched|heard)\\s+\\w+\\s+(duck|bear|fish|fly)\\b/i, // \"saw her duck\"\n/\\b\\w+\\s+and\\s+\\w+\\s+(or|and)\\s+\\w+\\b/, // Multiple con",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 140
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 163
        }
      ]
    },
    {
      "snippet": "const patterns = [\n/\\b(saw|watched|heard)\\s+\\w+\\s+(duck|bear|fish|fly)\\b/i, // \"saw her duck\"\n/\\b\\w+\\s+and\\s+\\w+\\s+(or|and)\\s+\\w+\\b/, // Multiple conjunctions\n/\\b(more|less)\\s+\\w+\\s+(than|or)\\b/, // C",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 141
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 164
        }
      ]
    },
    {
      "snippet": "/\\b(saw|watched|heard)\\s+\\w+\\s+(duck|bear|fish|fly)\\b/i, // \"saw her duck\"\n/\\b\\w+\\s+and\\s+\\w+\\s+(or|and)\\s+\\w+\\b/, // Multiple conjunctions\n/\\b(more|less)\\s+\\w+\\s+(than|or)\\b/, // Comparative ambiguit",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 142
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 165
        }
      ]
    },
    {
      "snippet": "for (const sentence of sentences) {\nconst words = sentence.toLowerCase().split(/\\s+/);\nfor (let i = 0; i < words.length; i++) {\nif (pronouns.includes(words[i])) {\ntotalPronouns++;",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 161
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 189
        }
      ]
    },
    {
      "snippet": "const words = sentence.toLowerCase().split(/\\s+/);\nfor (let i = 0; i < words.length; i++) {\nif (pronouns.includes(words[i])) {\ntotalPronouns++;\n// Simple heuristic: pronoun at sentence start is more l",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 162
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 190
        }
      ]
    },
    {
      "snippet": "for (let i = 0; i < words.length; i++) {\nif (pronouns.includes(words[i])) {\ntotalPronouns++;\n// Simple heuristic: pronoun at sentence start is more likely unresolved\nif (i < 2) {",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 163
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 191
        }
      ]
    },
    {
      "snippet": "if (pronouns.includes(words[i])) {\ntotalPronouns++;\n// Simple heuristic: pronoun at sentence start is more likely unresolved\nif (i < 2) {\nunresolvedCount++;",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 164
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 192
        }
      ]
    },
    {
      "snippet": "totalPronouns++;\n// Simple heuristic: pronoun at sentence start is more likely unresolved\nif (i < 2) {\nunresolvedCount++;\n}",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 165
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 193
        }
      ]
    },
    {
      "snippet": "// Simple heuristic: pronoun at sentence start is more likely unresolved\nif (i < 2) {\nunresolvedCount++;\n}\n// Pronoun without clear antecedent in previous words",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 166
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 194
        }
      ]
    },
    {
      "snippet": "if (i < 2) {\nunresolvedCount++;\n}\n// Pronoun without clear antecedent in previous words\nelse if (i > 0 && this.hasNoNearbyNoun(words.slice(Math.max(0, i - 5), i))) {",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 167
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 195
        }
      ]
    },
    {
      "snippet": "unresolvedCount++;\n}\n// Pronoun without clear antecedent in previous words\nelse if (i > 0 && this.hasNoNearbyNoun(words.slice(Math.max(0, i - 5), i))) {\nunresolvedCount++;",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 168
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 196
        }
      ]
    },
    {
      "snippet": "}\n// Pronoun without clear antecedent in previous words\nelse if (i > 0 && this.hasNoNearbyNoun(words.slice(Math.max(0, i - 5), i))) {\nunresolvedCount++;\n}",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 169
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 197
        }
      ]
    },
    {
      "snippet": "// Pronoun without clear antecedent in previous words\nelse if (i > 0 && this.hasNoNearbyNoun(words.slice(Math.max(0, i - 5), i))) {\nunresolvedCount++;\n}\n}",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 170
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 198
        }
      ]
    },
    {
      "snippet": "else if (i > 0 && this.hasNoNearbyNoun(words.slice(Math.max(0, i - 5), i))) {\nunresolvedCount++;\n}\n}\n}",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 171
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 199
        }
      ]
    },
    {
      "snippet": "unresolvedCount++;\n}\n}\n}\n}",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 172
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 200
        }
      ]
    },
    {
      "snippet": "// Conditional keywords\nconst conditionalKeywords = [\n/\\bif\\b/g, /\\bwhen\\b/g, /\\bunless\\b/g, /\\botherwise\\b/g,\n/\\balternatively\\b/g, /\\bin case of\\b/g, /\\bdepending on\\b/g,\n/\\bshould\\b/g, /\\bmay\\b/g, ",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 188
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 219
        }
      ]
    },
    {
      "snippet": "const conditionalKeywords = [\n/\\bif\\b/g, /\\bwhen\\b/g, /\\bunless\\b/g, /\\botherwise\\b/g,\n/\\balternatively\\b/g, /\\bin case of\\b/g, /\\bdepending on\\b/g,\n/\\bshould\\b/g, /\\bmay\\b/g, /\\bcan\\b/g, /\\bmight\\b/g",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 189
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 220
        }
      ]
    },
    {
      "snippet": "// Check for optional fields in structure\nif (mission.domainFields) {\n// Optional sections add complexity\nconst optionalSections = ['assumptions', 'blockers', 'nextMission'];\noptionalSections.forEach(",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 208
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 242
        }
      ]
    },
    {
      "snippet": "if (mission.successCriteria) {\ntextParts.push(Array.isArray(mission.successCriteria)\n? mission.successCriteria.join(' ')\n: mission.successCriteria);\n}",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 226
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 261
        }
      ]
    },
    {
      "snippet": "textParts.push(Array.isArray(mission.successCriteria)\n? mission.successCriteria.join(' ')\n: mission.successCriteria);\n}\nif (mission.deliverables) {",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 227
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 262
        }
      ]
    },
    {
      "snippet": "? mission.successCriteria.join(' ')\n: mission.successCriteria);\n}\nif (mission.deliverables) {\ntextParts.push(Array.isArray(mission.deliverables)",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 228
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 263
        }
      ]
    },
    {
      "snippet": ": mission.successCriteria);\n}\nif (mission.deliverables) {\ntextParts.push(Array.isArray(mission.deliverables)\n? mission.deliverables.join(' ')",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 229
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 264
        }
      ]
    },
    {
      "snippet": "}\nif (mission.deliverables) {\ntextParts.push(Array.isArray(mission.deliverables)\n? mission.deliverables.join(' ')\n: mission.deliverables);",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 230
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 265
        }
      ]
    },
    {
      "snippet": "if (mission.deliverables) {\ntextParts.push(Array.isArray(mission.deliverables)\n? mission.deliverables.join(' ')\n: mission.deliverables);\n}",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/clarity-analyzer.js",
          "line": 231
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 266
        }
      ]
    },
    {
      "snippet": "structuralCompleteness: this.calculateStructuralCompleteness(mission),\ninformationBreadth: this.calculateInformationBreadth(mission),\ninformationDensity: this.calculateInformationDensity(mission),\nsem",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 18
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 27
        }
      ]
    },
    {
      "snippet": "{\nname: 'Structural Completeness',\nrawValue: metrics.structuralCompleteness,\nnormalizedScore: metrics.structuralCompleteness,\nweight: this.weights.structuralCompleteness,",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 24
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 34
        }
      ]
    },
    {
      "snippet": "name: 'Structural Completeness',\nrawValue: metrics.structuralCompleteness,\nnormalizedScore: metrics.structuralCompleteness,\nweight: this.weights.structuralCompleteness,\ndetails: this.getStructuralDeta",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 25
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 35
        }
      ]
    },
    {
      "snippet": "rawValue: metrics.structuralCompleteness,\nnormalizedScore: metrics.structuralCompleteness,\nweight: this.weights.structuralCompleteness,\ndetails: this.getStructuralDetails(mission)\n},",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 26
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 36
        }
      ]
    },
    {
      "snippet": "normalizedScore: metrics.structuralCompleteness,\nweight: this.weights.structuralCompleteness,\ndetails: this.getStructuralDetails(mission)\n},\n{",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 27
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 37
        }
      ]
    },
    {
      "snippet": "weight: this.weights.structuralCompleteness,\ndetails: this.getStructuralDetails(mission)\n},\n{\nname: 'Information Breadth',",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 28
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 38
        }
      ]
    },
    {
      "snippet": "details: this.getStructuralDetails(mission)\n},\n{\nname: 'Information Breadth',\nrawValue: metrics.informationBreadth,",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 29
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 39
        }
      ]
    },
    {
      "snippet": "},\n{\nname: 'Information Breadth',\nrawValue: metrics.informationBreadth,\nnormalizedScore: metrics.informationBreadth,",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 30
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 40
        }
      ]
    },
    {
      "snippet": "{\nname: 'Information Breadth',\nrawValue: metrics.informationBreadth,\nnormalizedScore: metrics.informationBreadth,\nweight: this.weights.informationBreadth,",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 31
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 41
        }
      ]
    },
    {
      "snippet": "name: 'Information Breadth',\nrawValue: metrics.informationBreadth,\nnormalizedScore: metrics.informationBreadth,\nweight: this.weights.informationBreadth,\ndetails: this.getBreadthDetails(mission)",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 32
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 42
        }
      ]
    },
    {
      "snippet": "rawValue: metrics.informationBreadth,\nnormalizedScore: metrics.informationBreadth,\nweight: this.weights.informationBreadth,\ndetails: this.getBreadthDetails(mission)\n},",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 33
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 43
        }
      ]
    },
    {
      "snippet": "normalizedScore: metrics.informationBreadth,\nweight: this.weights.informationBreadth,\ndetails: this.getBreadthDetails(mission)\n},\n{",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 34
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 44
        }
      ]
    },
    {
      "snippet": "weight: this.weights.informationBreadth,\ndetails: this.getBreadthDetails(mission)\n},\n{\nname: 'Information Density',",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 35
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 45
        }
      ]
    },
    {
      "snippet": "details: this.getBreadthDetails(mission)\n},\n{\nname: 'Information Density',\nrawValue: metrics.informationDensity,",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 36
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 46
        }
      ]
    },
    {
      "snippet": "},\n{\nname: 'Information Density',\nrawValue: metrics.informationDensity,\nnormalizedScore: metrics.informationDensity,",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 37
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 47
        }
      ]
    },
    {
      "snippet": "{\nname: 'Information Density',\nrawValue: metrics.informationDensity,\nnormalizedScore: metrics.informationDensity,\nweight: this.weights.informationDensity,",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 38
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 48
        }
      ]
    },
    {
      "snippet": "name: 'Information Density',\nrawValue: metrics.informationDensity,\nnormalizedScore: metrics.informationDensity,\nweight: this.weights.informationDensity,\ndetails: this.getDensityDetails(mission)",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 39
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 49
        }
      ]
    },
    {
      "snippet": "rawValue: metrics.informationDensity,\nnormalizedScore: metrics.informationDensity,\nweight: this.weights.informationDensity,\ndetails: this.getDensityDetails(mission)\n},",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 40
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 50
        }
      ]
    },
    {
      "snippet": "normalizedScore: metrics.informationDensity,\nweight: this.weights.informationDensity,\ndetails: this.getDensityDetails(mission)\n},\n{",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 41
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 51
        }
      ]
    },
    {
      "snippet": "weight: this.weights.informationDensity,\ndetails: this.getDensityDetails(mission)\n},\n{\nname: 'Semantic Coverage',",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 42
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 52
        }
      ]
    },
    {
      "snippet": "details: this.getDensityDetails(mission)\n},\n{\nname: 'Semantic Coverage',\nrawValue: metrics.semanticCoverage,",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 43
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 53
        }
      ]
    },
    {
      "snippet": "},\n{\nname: 'Semantic Coverage',\nrawValue: metrics.semanticCoverage,\nnormalizedScore: metrics.semanticCoverage,",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 44
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 54
        }
      ]
    },
    {
      "snippet": "{\nname: 'Semantic Coverage',\nrawValue: metrics.semanticCoverage,\nnormalizedScore: metrics.semanticCoverage,\nweight: this.weights.semanticCoverage,",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 45
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 55
        }
      ]
    },
    {
      "snippet": "name: 'Semantic Coverage',\nrawValue: metrics.semanticCoverage,\nnormalizedScore: metrics.semanticCoverage,\nweight: this.weights.semanticCoverage,\ndetails: { note: 'Simplified heuristic-based scoring' }",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 46
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 56
        }
      ]
    },
    {
      "snippet": "rawValue: metrics.semanticCoverage,\nnormalizedScore: metrics.semanticCoverage,\nweight: this.weights.semanticCoverage,\ndetails: { note: 'Simplified heuristic-based scoring' }\n}",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 47
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 57
        }
      ]
    },
    {
      "snippet": "normalizedScore: metrics.semanticCoverage,\nweight: this.weights.semanticCoverage,\ndetails: { note: 'Simplified heuristic-based scoring' }\n}\n];",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 48
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 58
        }
      ]
    },
    {
      "snippet": "return {\nscore,\nweight: 0.35,\nmetrics: metricResults\n};",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 54
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 69
        }
      ]
    },
    {
      "snippet": "score,\nweight: 0.35,\nmetrics: metricResults\n};\n}",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 55
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 70
        }
      ]
    },
    {
      "snippet": "for (const field of this.REQUIRED_FIELDS) {\nconst value = mission[field];\nif (value !== undefined && value !== null) {\n// Check for non-empty content\nif (typeof value === 'string' && value.trim().leng",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 67
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 84
        }
      ]
    },
    {
      "snippet": "const value = mission[field];\nif (value !== undefined && value !== null) {\n// Check for non-empty content\nif (typeof value === 'string' && value.trim().length > 0) {\npresentCount++;",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 68
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 85
        }
      ]
    },
    {
      "snippet": "const checks = [\n// Core mission elements\n{ name: 'Has objective', test: () => this.hasNonEmpty(mission.objective) },\n{ name: 'Has context', test: () => this.hasNonEmpty(mission.context) },\n{ name: 'H",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 89
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 106
        }
      ]
    },
    {
      "snippet": "// Core mission elements\n{ name: 'Has objective', test: () => this.hasNonEmpty(mission.objective) },\n{ name: 'Has context', test: () => this.hasNonEmpty(mission.context) },\n{ name: 'Has success criter",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 90
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 107
        }
      ]
    },
    {
      "snippet": "const densityChecks = [\n// Objective should be substantive (>10 words)\n{\nname: 'Objective density',\ntest: () => this.wordCount(mission.objective) >= 10,",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 113
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 135
        }
      ]
    },
    {
      "snippet": "// Objective should be substantive (>10 words)\n{\nname: 'Objective density',\ntest: () => this.wordCount(mission.objective) >= 10,\nweight: 0.3",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 114
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 136
        }
      ]
    },
    {
      "snippet": "{\nname: 'Objective density',\ntest: () => this.wordCount(mission.objective) >= 10,\nweight: 0.3\n},",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 115
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 137
        }
      ]
    },
    {
      "snippet": "// Context should be detailed (>25 words)\n{\nname: 'Context density',\ntest: () => this.wordCount(mission.context) >= 25,\nweight: 0.3",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 120
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 143
        }
      ]
    },
    {
      "snippet": "{\nname: 'Context density',\ntest: () => this.wordCount(mission.context) >= 25,\nweight: 0.3\n},",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 121
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 144
        }
      ]
    },
    {
      "snippet": "// Success criteria should have multiple items with detail\n{\nname: 'Success criteria density',\ntest: () => {\nconst count = this.getArrayLength(mission.successCriteria);",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 126
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 150
        }
      ]
    },
    {
      "snippet": "// Deliverables should be specific\n{\nname: 'Deliverables density',\ntest: () => {\nconst count = this.getArrayLength(mission.deliverables);",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 138
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 165
        }
      ]
    },
    {
      "snippet": "{\nname: 'Deliverables density',\ntest: () => {\nconst count = this.getArrayLength(mission.deliverables);\nreturn count >= 2;",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 139
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 166
        }
      ]
    },
    {
      "snippet": "name: 'Deliverables density',\ntest: () => {\nconst count = this.getArrayLength(mission.deliverables);\nreturn count >= 2;\n},",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 140
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 167
        }
      ]
    },
    {
      "snippet": "test: () => {\nconst count = this.getArrayLength(mission.deliverables);\nreturn count >= 2;\n},\nweight: 0.2",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 141
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 168
        }
      ]
    },
    {
      "snippet": "const count = this.getArrayLength(mission.deliverables);\nreturn count >= 2;\n},\nweight: 0.2\n}",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 142
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 169
        }
      ]
    },
    {
      "snippet": "return count >= 2;\n},\nweight: 0.2\n}\n];",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 143
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 170
        }
      ]
    },
    {
      "snippet": "let score = 0;\nfor (const check of densityChecks) {\nif (check.test()) {\nscore += check.weight;\n}",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 148
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 176
        }
      ]
    },
    {
      "snippet": "for (const check of densityChecks) {\nif (check.test()) {\nscore += check.weight;\n}\n}",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 149
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 177
        }
      ]
    },
    {
      "snippet": "return !!(df.researchQuestions ||\ndf.keyFindings ||\ndf.evidenceCollection ||\ndf.buildImplications);\n}",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 216
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 255
        }
      ]
    },
    {
      "snippet": "if (mission.successCriteria) {\nparts.push(Array.isArray(mission.successCriteria)\n? mission.successCriteria.join(' ')\n: mission.successCriteria);\n}",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 227
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 267
        }
      ]
    },
    {
      "snippet": "if (mission.deliverables) {\nparts.push(Array.isArray(mission.deliverables)\n? mission.deliverables.join(' ')\n: mission.deliverables);\n}",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 232
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 273
        }
      ]
    },
    {
      "snippet": "'Build.TechnicalResearch.v1': [\n'research', 'analysis', 'findings', 'evidence', 'standards',\n'metrics', 'framework', 'methodology', 'evaluation'\n],\n'Build.Implementation.v1': [",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 244
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 288
        }
      ]
    },
    {
      "snippet": "'research', 'analysis', 'findings', 'evidence', 'standards',\n'metrics', 'framework', 'methodology', 'evaluation'\n],\n'Build.Implementation.v1': [\n'implement', 'build', 'develop', 'code', 'test',",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 245
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 289
        }
      ]
    },
    {
      "snippet": "'metrics', 'framework', 'methodology', 'evaluation'\n],\n'Build.Implementation.v1': [\n'implement', 'build', 'develop', 'code', 'test',\n'integration', 'functionality', 'performance', 'deliverable'",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 246
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 290
        }
      ]
    },
    {
      "snippet": "],\n'Build.Implementation.v1': [\n'implement', 'build', 'develop', 'code', 'test',\n'integration', 'functionality', 'performance', 'deliverable'\n],",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 247
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 291
        }
      ]
    },
    {
      "snippet": "'Build.Implementation.v1': [\n'implement', 'build', 'develop', 'code', 'test',\n'integration', 'functionality', 'performance', 'deliverable'\n],\n'Build.Documentation.v1': [",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 248
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 292
        }
      ]
    },
    {
      "snippet": "'implement', 'build', 'develop', 'code', 'test',\n'integration', 'functionality', 'performance', 'deliverable'\n],\n'Build.Documentation.v1': [\n'document', 'specification', 'guide', 'instructions',",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 249
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 293
        }
      ]
    },
    {
      "snippet": "'integration', 'functionality', 'performance', 'deliverable'\n],\n'Build.Documentation.v1': [\n'document', 'specification', 'guide', 'instructions',\n'overview', 'reference', 'examples', 'usage'",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 250
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 294
        }
      ]
    },
    {
      "snippet": "],\n'Build.Documentation.v1': [\n'document', 'specification', 'guide', 'instructions',\n'overview', 'reference', 'examples', 'usage'\n]",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 251
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 295
        }
      ]
    },
    {
      "snippet": "'Build.Documentation.v1': [\n'document', 'specification', 'guide', 'instructions',\n'overview', 'reference', 'examples', 'usage'\n]\n};",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 252
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 296
        }
      ]
    },
    {
      "snippet": "let totalMentions = 0;\nfor (const topic of topics) {\nconst regex = new RegExp(topic, 'gi');\nconst matches = text.match(regex);\ntotalMentions += matches ? matches.length : 0;",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 262
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 308
        }
      ]
    },
    {
      "snippet": "for (const topic of topics) {\nconst regex = new RegExp(topic, 'gi');\nconst matches = text.match(regex);\ntotalMentions += matches ? matches.length : 0;\n}",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 263
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 309
        }
      ]
    },
    {
      "snippet": "return {\nhasSuccessCriteria: this.getArrayLength(mission.successCriteria),\nhasDeliverables: this.getArrayLength(mission.deliverables),\nhasDomainFields: this.hasDomainFields(mission),\nhasResearchConten",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 293
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 341
        }
      ]
    },
    {
      "snippet": "hasSuccessCriteria: this.getArrayLength(mission.successCriteria),\nhasDeliverables: this.getArrayLength(mission.deliverables),\nhasDomainFields: this.hasDomainFields(mission),\nhasResearchContent: this.h",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 294
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 342
        }
      ]
    },
    {
      "snippet": "hasDeliverables: this.getArrayLength(mission.deliverables),\nhasDomainFields: this.hasDomainFields(mission),\nhasResearchContent: this.hasResearchContent(mission)\n};\n}",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 295
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 343
        }
      ]
    },
    {
      "snippet": "return {\nobjectiveWords: this.wordCount(mission.objective),\ncontextWords: this.wordCount(mission.context),\nsuccessCriteriaCount: this.getArrayLength(mission.successCriteria),\ndeliverablesCount: this.g",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 301
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 350
        }
      ]
    },
    {
      "snippet": "objectiveWords: this.wordCount(mission.objective),\ncontextWords: this.wordCount(mission.context),\nsuccessCriteriaCount: this.getArrayLength(mission.successCriteria),\ndeliverablesCount: this.getArrayLe",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 302
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 351
        }
      ]
    },
    {
      "snippet": "contextWords: this.wordCount(mission.context),\nsuccessCriteriaCount: this.getArrayLength(mission.successCriteria),\ndeliverablesCount: this.getArrayLength(mission.deliverables)\n};\n}",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 303
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 352
        }
      ]
    },
    {
      "snippet": "successCriteriaCount: this.getArrayLength(mission.successCriteria),\ndeliverablesCount: this.getArrayLength(mission.deliverables)\n};\n}\n}",
      "occurrences": [
        {
          "path": "dist/quality/analyzers/completeness-analyzer.js",
          "line": 304
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 353
        }
      ]
    },
    {
      "snippet": "interface FeedbackRule {\ncondition: (metricValue: number, details?: any) => boolean;\nseverity: 'critical' | 'important' | 'info';\ncategory: string;\nmessageTemplate: (metricValue: number, details?: any",
      "occurrences": [
        {
          "path": "dist/quality/improvement-engine.d.ts",
          "line": 6
        },
        {
          "path": "src/quality/improvement-engine.ts",
          "line": 12
        }
      ]
    },
    {
      "snippet": "condition: (metricValue: number, details?: any) => boolean;\nseverity: 'critical' | 'important' | 'info';\ncategory: string;\nmessageTemplate: (metricValue: number, details?: any, context?: any) => strin",
      "occurrences": [
        {
          "path": "dist/quality/improvement-engine.d.ts",
          "line": 7
        },
        {
          "path": "src/quality/improvement-engine.ts",
          "line": 13
        }
      ]
    },
    {
      "snippet": "for (const rule of rules) {\nif (rule.condition(metric.rawValue, metric.details)) {\nsuggestions.push({\nseverity: rule.severity,\ncategory: rule.category,",
      "occurrences": [
        {
          "path": "dist/quality/improvement-engine.js",
          "line": 41
        },
        {
          "path": "src/quality/improvement-engine.ts",
          "line": 71
        }
      ]
    },
    {
      "snippet": "if (rule.condition(metric.rawValue, metric.details)) {\nsuggestions.push({\nseverity: rule.severity,\ncategory: rule.category,\nmessage: rule.messageTemplate(metric.rawValue, metric.details, mission),",
      "occurrences": [
        {
          "path": "dist/quality/improvement-engine.js",
          "line": 42
        },
        {
          "path": "src/quality/improvement-engine.ts",
          "line": 72
        }
      ]
    },
    {
      "snippet": "suggestions.push({\nseverity: rule.severity,\ncategory: rule.category,\nmessage: rule.messageTemplate(metric.rawValue, metric.details, mission),\nmetric: metricName,",
      "occurrences": [
        {
          "path": "dist/quality/improvement-engine.js",
          "line": 43
        },
        {
          "path": "src/quality/improvement-engine.ts",
          "line": 73
        }
      ]
    },
    {
      "snippet": "severity: rule.severity,\ncategory: rule.category,\nmessage: rule.messageTemplate(metric.rawValue, metric.details, mission),\nmetric: metricName,\ncontext: metric.details",
      "occurrences": [
        {
          "path": "dist/quality/improvement-engine.js",
          "line": 44
        },
        {
          "path": "src/quality/improvement-engine.ts",
          "line": 74
        }
      ]
    },
    {
      "snippet": "category: rule.category,\nmessage: rule.messageTemplate(metric.rawValue, metric.details, mission),\nmetric: metricName,\ncontext: metric.details\n});",
      "occurrences": [
        {
          "path": "dist/quality/improvement-engine.js",
          "line": 45
        },
        {
          "path": "src/quality/improvement-engine.ts",
          "line": 75
        }
      ]
    },
    {
      "snippet": "message: rule.messageTemplate(metric.rawValue, metric.details, mission),\nmetric: metricName,\ncontext: metric.details\n});\n}",
      "occurrences": [
        {
          "path": "dist/quality/improvement-engine.js",
          "line": 46
        },
        {
          "path": "src/quality/improvement-engine.ts",
          "line": 76
        }
      ]
    },
    {
      "snippet": "metric: metricName,\ncontext: metric.details\n});\n}\n}",
      "occurrences": [
        {
          "path": "dist/quality/improvement-engine.js",
          "line": 47
        },
        {
          "path": "src/quality/improvement-engine.ts",
          "line": 77
        }
      ]
    },
    {
      "snippet": "// Syntactic Validity (Critical)\nthis.addRule('Syntactic Validity', {\ncondition: (value) => value === 0,\nseverity: 'critical',\ncategory: 'Structure',",
      "occurrences": [
        {
          "path": "dist/quality/improvement-engine.js",
          "line": 58
        },
        {
          "path": "src/quality/improvement-engine.ts",
          "line": 90
        }
      ]
    },
    {
      "snippet": "// Structural Completeness\nthis.addRule('Structural Completeness', {\ncondition: (value) => value < 1,\nseverity: 'critical',\ncategory: 'Completeness',",
      "occurrences": [
        {
          "path": "dist/quality/improvement-engine.js",
          "line": 65
        },
        {
          "path": "src/quality/improvement-engine.ts",
          "line": 99
        }
      ]
    },
    {
      "snippet": "this.addRule('Structural Completeness', {\ncondition: (value) => value < 1,\nseverity: 'critical',\ncategory: 'Completeness',\nmessageTemplate: (value, details) => {",
      "occurrences": [
        {
          "path": "dist/quality/improvement-engine.js",
          "line": 66
        },
        {
          "path": "src/quality/improvement-engine.ts",
          "line": 100
        }
      ]
    },
    {
      "snippet": "condition: (value) => value < 1,\nseverity: 'critical',\ncategory: 'Completeness',\nmessageTemplate: (value, details) => {\nconst missing = details?.missing || [];",
      "occurrences": [
        {
          "path": "dist/quality/improvement-engine.js",
          "line": 67
        },
        {
          "path": "src/quality/improvement-engine.ts",
          "line": 101
        }
      ]
    },
    {
      "snippet": "severity: 'critical',\ncategory: 'Completeness',\nmessageTemplate: (value, details) => {\nconst missing = details?.missing || [];\nreturn `Mission is missing required fields: ${missing.join(', ')}. All re",
      "occurrences": [
        {
          "path": "dist/quality/improvement-engine.js",
          "line": 68
        },
        {
          "path": "src/quality/improvement-engine.ts",
          "line": 102
        }
      ]
    },
    {
      "snippet": "category: 'Completeness',\nmessageTemplate: (value, details) => {\nconst missing = details?.missing || [];\nreturn `Mission is missing required fields: ${missing.join(', ')}. All required fields must be ",
      "occurrences": [
        {
          "path": "dist/quality/improvement-engine.js",
          "line": 69
        },
        {
          "path": "src/quality/improvement-engine.ts",
          "line": 103
        }
      ]
    },
    {
      "snippet": "messageTemplate: (value, details) => {\nconst missing = details?.missing || [];\nreturn `Mission is missing required fields: ${missing.join(', ')}. All required fields must be present.`;\n}\n});",
      "occurrences": [
        {
          "path": "dist/quality/improvement-engine.js",
          "line": 70
        },
        {
          "path": "src/quality/improvement-engine.ts",
          "line": 104
        }
      ]
    },
    {
      "snippet": "// Mission Cyclomatic Complexity\nthis.addRule('Mission Cyclomatic Complexity', {\ncondition: (value) => value > 20,\nseverity: 'important',\ncategory: 'Clarity',",
      "occurrences": [
        {
          "path": "dist/quality/improvement-engine.js",
          "line": 75
        },
        {
          "path": "src/quality/improvement-engine.ts",
          "line": 110
        }
      ]
    },
    {
      "snippet": "// Flesch-Kincaid Grade Level\nthis.addRule('Flesch-Kincaid Grade Level', {\ncondition: (value) => value > 15,\nseverity: 'info',\ncategory: 'Clarity',",
      "occurrences": [
        {
          "path": "dist/quality/improvement-engine.js",
          "line": 89
        },
        {
          "path": "src/quality/improvement-engine.ts",
          "line": 128
        }
      ]
    },
    {
      "snippet": "// Lexical Density\nthis.addRule('Lexical Density', {\ncondition: (value) => value < 50,\nseverity: 'info',\ncategory: 'Clarity',",
      "occurrences": [
        {
          "path": "dist/quality/improvement-engine.js",
          "line": 102
        },
        {
          "path": "src/quality/improvement-engine.ts",
          "line": 145
        }
      ]
    },
    {
      "snippet": "// Referential Ambiguity\nthis.addRule('Referential Ambiguity', {\ncondition: (value) => value < 0.8,\nseverity: 'important',\ncategory: 'Clarity',",
      "occurrences": [
        {
          "path": "dist/quality/improvement-engine.js",
          "line": 109
        },
        {
          "path": "src/quality/improvement-engine.ts",
          "line": 154
        }
      ]
    },
    {
      "snippet": "// Lexical Ambiguity\nthis.addRule('Lexical Ambiguity', {\ncondition: (value, details) => details?.ambiguousWordCount > 5,\nseverity: 'info',\ncategory: 'Clarity',",
      "occurrences": [
        {
          "path": "dist/quality/improvement-engine.js",
          "line": 117
        },
        {
          "path": "src/quality/improvement-engine.ts",
          "line": 164
        }
      ]
    },
    {
      "snippet": "// Information Density\nthis.addRule('Information Density', {\ncondition: (value) => value < 0.7,\nseverity: 'important',\ncategory: 'Completeness',",
      "occurrences": [
        {
          "path": "dist/quality/improvement-engine.js",
          "line": 125
        },
        {
          "path": "src/quality/improvement-engine.ts",
          "line": 174
        }
      ]
    },
    {
      "snippet": "this.addRule('Information Density', {\ncondition: (value) => value < 0.7,\nseverity: 'important',\ncategory: 'Completeness',\nmessageTemplate: (value, details) => {",
      "occurrences": [
        {
          "path": "dist/quality/improvement-engine.js",
          "line": 126
        },
        {
          "path": "src/quality/improvement-engine.ts",
          "line": 175
        }
      ]
    },
    {
      "snippet": "// Information Breadth\nthis.addRule('Information Breadth', {\ncondition: (value) => value < 0.6,\nseverity: 'important',\ncategory: 'Completeness',",
      "occurrences": [
        {
          "path": "dist/quality/improvement-engine.js",
          "line": 141
        },
        {
          "path": "src/quality/improvement-engine.ts",
          "line": 189
        }
      ]
    },
    {
      "snippet": "// Semantic Coverage\nthis.addRule('Semantic Coverage', {\ncondition: (value) => value < 0.7,\nseverity: 'info',\ncategory: 'Completeness',",
      "occurrences": [
        {
          "path": "dist/quality/improvement-engine.js",
          "line": 149
        },
        {
          "path": "src/quality/improvement-engine.ts",
          "line": 199
        }
      ]
    },
    {
      "snippet": "// Instruction Specificity\nthis.addRule('Instruction Specificity', {\ncondition: (value, details) => !details?.hasExplicitGoal,\nseverity: 'important',\ncategory: 'AI-Readiness',",
      "occurrences": [
        {
          "path": "dist/quality/improvement-engine.js",
          "line": 157
        },
        {
          "path": "src/quality/improvement-engine.ts",
          "line": 209
        }
      ]
    },
    {
      "snippet": "// Linting Score\nthis.addRule('Linting Score', {\ncondition: (value, details) => details?.vaguePhrasesCount > 5,\nseverity: 'info',\ncategory: 'AI-Readiness',",
      "occurrences": [
        {
          "path": "dist/quality/improvement-engine.js",
          "line": 186
        },
        {
          "path": "src/quality/improvement-engine.ts",
          "line": 246
        }
      ]
    },
    {
      "snippet": "// Analyze all dimensions in parallel for performance\nconst [clarityScore, completenessScore, aiReadinessScore] = await Promise.all([\nthis.clarityAnalyzer.analyze(mission),\nthis.completenessAnalyzer.a",
      "occurrences": [
        {
          "path": "dist/quality/quality-scorer.js",
          "line": 31
        },
        {
          "path": "src/quality/quality-scorer.ts",
          "line": 50
        }
      ]
    },
    {
      "snippet": "const [clarityScore, completenessScore, aiReadinessScore] = await Promise.all([\nthis.clarityAnalyzer.analyze(mission),\nthis.completenessAnalyzer.analyze(mission),\nthis.aiReadinessAnalyzer.analyze(miss",
      "occurrences": [
        {
          "path": "dist/quality/quality-scorer.js",
          "line": 32
        },
        {
          "path": "src/quality/quality-scorer.ts",
          "line": 51
        }
      ]
    },
    {
      "snippet": "return {\ntotal: totalScore,\ndimensions: {\nclarity: clarityScore,\ncompleteness: completenessScore,",
      "occurrences": [
        {
          "path": "dist/quality/quality-scorer.js",
          "line": 46
        },
        {
          "path": "src/quality/quality-scorer.ts",
          "line": 81
        }
      ]
    },
    {
      "snippet": "total: totalScore,\ndimensions: {\nclarity: clarityScore,\ncompleteness: completenessScore,\naiReadiness: aiReadinessScore",
      "occurrences": [
        {
          "path": "dist/quality/quality-scorer.js",
          "line": 47
        },
        {
          "path": "src/quality/quality-scorer.ts",
          "line": 82
        }
      ]
    },
    {
      "snippet": "dimensions: {\nclarity: clarityScore,\ncompleteness: completenessScore,\naiReadiness: aiReadinessScore\n},",
      "occurrences": [
        {
          "path": "dist/quality/quality-scorer.js",
          "line": 48
        },
        {
          "path": "src/quality/quality-scorer.ts",
          "line": 83
        }
      ]
    },
    {
      "snippet": "clarity: clarityScore,\ncompleteness: completenessScore,\naiReadiness: aiReadinessScore\n},\nsuggestions,",
      "occurrences": [
        {
          "path": "dist/quality/quality-scorer.js",
          "line": 49
        },
        {
          "path": "src/quality/quality-scorer.ts",
          "line": 84
        }
      ]
    },
    {
      "snippet": "completeness: completenessScore,\naiReadiness: aiReadinessScore\n},\nsuggestions,\nmetadata: {",
      "occurrences": [
        {
          "path": "dist/quality/quality-scorer.js",
          "line": 50
        },
        {
          "path": "src/quality/quality-scorer.ts",
          "line": 85
        }
      ]
    },
    {
      "snippet": "aiReadiness: aiReadinessScore\n},\nsuggestions,\nmetadata: {\nassessedAt: new Date().toISOString(),",
      "occurrences": [
        {
          "path": "dist/quality/quality-scorer.js",
          "line": 51
        },
        {
          "path": "src/quality/quality-scorer.ts",
          "line": 86
        }
      ]
    },
    {
      "snippet": "},\nsuggestions,\nmetadata: {\nassessedAt: new Date().toISOString(),\nprocessingTimeMs,",
      "occurrences": [
        {
          "path": "dist/quality/quality-scorer.js",
          "line": 52
        },
        {
          "path": "src/quality/quality-scorer.ts",
          "line": 87
        }
      ]
    },
    {
      "snippet": "suggestions,\nmetadata: {\nassessedAt: new Date().toISOString(),\nprocessingTimeMs,\nmissionId",
      "occurrences": [
        {
          "path": "dist/quality/quality-scorer.js",
          "line": 53
        },
        {
          "path": "src/quality/quality-scorer.ts",
          "line": 88
        }
      ]
    },
    {
      "snippet": "metadata: {\nassessedAt: new Date().toISOString(),\nprocessingTimeMs,\nmissionId\n}",
      "occurrences": [
        {
          "path": "dist/quality/quality-scorer.js",
          "line": 54
        },
        {
          "path": "src/quality/quality-scorer.ts",
          "line": 89
        }
      ]
    },
    {
      "snippet": "assessedAt: new Date().toISOString(),\nprocessingTimeMs,\nmissionId\n}\n};",
      "occurrences": [
        {
          "path": "dist/quality/quality-scorer.js",
          "line": 55
        },
        {
          "path": "src/quality/quality-scorer.ts",
          "line": 90
        }
      ]
    },
    {
      "snippet": "processingTimeMs,\nmissionId\n}\n};\n}",
      "occurrences": [
        {
          "path": "dist/quality/quality-scorer.js",
          "line": 56
        },
        {
          "path": "src/quality/quality-scorer.ts",
          "line": 91
        }
      ]
    },
    {
      "snippet": "// Adapted formula: MMI = 171 - 5.2 * ln(Volume) - 0.23 * CC - 16.2 * ln(LOC) + 50 * sin(sqrt(2.4 * LD))\n// Simplified for mission context with empirical weights\nconst volumeFactor = Math.log(wordCoun",
      "occurrences": [
        {
          "path": "dist/quality/quality-scorer.js",
          "line": 77
        },
        {
          "path": "src/quality/quality-scorer.ts",
          "line": 125
        }
      ]
    },
    {
      "snippet": "export interface QualityScore {\ntotal: number;\ndimensions: {\nclarity: DimensionScore;\ncompleteness: DimensionScore;",
      "occurrences": [
        {
          "path": "dist/quality/types.d.ts",
          "line": 5
        },
        {
          "path": "src/quality/types.ts",
          "line": 6
        }
      ]
    },
    {
      "snippet": "total: number;\ndimensions: {\nclarity: DimensionScore;\ncompleteness: DimensionScore;\naiReadiness: DimensionScore;",
      "occurrences": [
        {
          "path": "dist/quality/types.d.ts",
          "line": 6
        },
        {
          "path": "src/quality/types.ts",
          "line": 7
        }
      ]
    },
    {
      "snippet": "dimensions: {\nclarity: DimensionScore;\ncompleteness: DimensionScore;\naiReadiness: DimensionScore;\n};",
      "occurrences": [
        {
          "path": "dist/quality/types.d.ts",
          "line": 7
        },
        {
          "path": "src/quality/types.ts",
          "line": 8
        }
      ]
    },
    {
      "snippet": "clarity: DimensionScore;\ncompleteness: DimensionScore;\naiReadiness: DimensionScore;\n};\nbenchmark?: number;",
      "occurrences": [
        {
          "path": "dist/quality/types.d.ts",
          "line": 8
        },
        {
          "path": "src/quality/types.ts",
          "line": 9
        }
      ]
    },
    {
      "snippet": "completeness: DimensionScore;\naiReadiness: DimensionScore;\n};\nbenchmark?: number;\nmaintainabilityIndex?: number;",
      "occurrences": [
        {
          "path": "dist/quality/types.d.ts",
          "line": 9
        },
        {
          "path": "src/quality/types.ts",
          "line": 10
        }
      ]
    },
    {
      "snippet": "aiReadiness: DimensionScore;\n};\nbenchmark?: number;\nmaintainabilityIndex?: number;\nsuggestions: ImprovementSuggestion[];",
      "occurrences": [
        {
          "path": "dist/quality/types.d.ts",
          "line": 10
        },
        {
          "path": "src/quality/types.ts",
          "line": 11
        }
      ]
    },
    {
      "snippet": "};\nbenchmark?: number;\nmaintainabilityIndex?: number;\nsuggestions: ImprovementSuggestion[];\nmetadata: {",
      "occurrences": [
        {
          "path": "dist/quality/types.d.ts",
          "line": 11
        },
        {
          "path": "src/quality/types.ts",
          "line": 12
        }
      ]
    },
    {
      "snippet": "benchmark?: number;\nmaintainabilityIndex?: number;\nsuggestions: ImprovementSuggestion[];\nmetadata: {\nassessedAt: string;",
      "occurrences": [
        {
          "path": "dist/quality/types.d.ts",
          "line": 12
        },
        {
          "path": "src/quality/types.ts",
          "line": 13
        }
      ]
    },
    {
      "snippet": "maintainabilityIndex?: number;\nsuggestions: ImprovementSuggestion[];\nmetadata: {\nassessedAt: string;\nprocessingTimeMs: number;",
      "occurrences": [
        {
          "path": "dist/quality/types.d.ts",
          "line": 13
        },
        {
          "path": "src/quality/types.ts",
          "line": 14
        }
      ]
    },
    {
      "snippet": "suggestions: ImprovementSuggestion[];\nmetadata: {\nassessedAt: string;\nprocessingTimeMs: number;\nmissionId?: string;",
      "occurrences": [
        {
          "path": "dist/quality/types.d.ts",
          "line": 14
        },
        {
          "path": "src/quality/types.ts",
          "line": 15
        }
      ]
    },
    {
      "snippet": "metadata: {\nassessedAt: string;\nprocessingTimeMs: number;\nmissionId?: string;\n};",
      "occurrences": [
        {
          "path": "dist/quality/types.d.ts",
          "line": 15
        },
        {
          "path": "src/quality/types.ts",
          "line": 16
        }
      ]
    },
    {
      "snippet": "assessedAt: string;\nprocessingTimeMs: number;\nmissionId?: string;\n};\n}",
      "occurrences": [
        {
          "path": "dist/quality/types.d.ts",
          "line": 16
        },
        {
          "path": "src/quality/types.ts",
          "line": 17
        }
      ]
    },
    {
      "snippet": "export interface DimensionScore {\nscore: number;\nweight: number;\nmetrics: MetricResult[];\n}",
      "occurrences": [
        {
          "path": "dist/quality/types.d.ts",
          "line": 21
        },
        {
          "path": "src/quality/types.ts",
          "line": 23
        }
      ]
    },
    {
      "snippet": "export interface MetricResult {\nname: string;\nrawValue: number;\nnormalizedScore: number;\nweight: number;",
      "occurrences": [
        {
          "path": "dist/quality/types.d.ts",
          "line": 26
        },
        {
          "path": "src/quality/types.ts",
          "line": 29
        }
      ]
    },
    {
      "snippet": "name: string;\nrawValue: number;\nnormalizedScore: number;\nweight: number;\ndetails?: Record<string, any>;",
      "occurrences": [
        {
          "path": "dist/quality/types.d.ts",
          "line": 27
        },
        {
          "path": "src/quality/types.ts",
          "line": 30
        }
      ]
    },
    {
      "snippet": "rawValue: number;\nnormalizedScore: number;\nweight: number;\ndetails?: Record<string, any>;\n}",
      "occurrences": [
        {
          "path": "dist/quality/types.d.ts",
          "line": 28
        },
        {
          "path": "src/quality/types.ts",
          "line": 31
        }
      ]
    },
    {
      "snippet": "export interface ImprovementSuggestion {\nseverity: 'critical' | 'important' | 'info';\ncategory: string;\nmessage: string;\nmetric: string;",
      "occurrences": [
        {
          "path": "dist/quality/types.d.ts",
          "line": 33
        },
        {
          "path": "src/quality/types.ts",
          "line": 37
        }
      ]
    },
    {
      "snippet": "severity: 'critical' | 'important' | 'info';\ncategory: string;\nmessage: string;\nmetric: string;\ncontext?: Record<string, any>;",
      "occurrences": [
        {
          "path": "dist/quality/types.d.ts",
          "line": 34
        },
        {
          "path": "src/quality/types.ts",
          "line": 38
        }
      ]
    },
    {
      "snippet": "category: string;\nmessage: string;\nmetric: string;\ncontext?: Record<string, any>;\nlocation?: {",
      "occurrences": [
        {
          "path": "dist/quality/types.d.ts",
          "line": 35
        },
        {
          "path": "src/quality/types.ts",
          "line": 39
        }
      ]
    },
    {
      "snippet": "message: string;\nmetric: string;\ncontext?: Record<string, any>;\nlocation?: {\nfield?: string;",
      "occurrences": [
        {
          "path": "dist/quality/types.d.ts",
          "line": 36
        },
        {
          "path": "src/quality/types.ts",
          "line": 40
        }
      ]
    },
    {
      "snippet": "metric: string;\ncontext?: Record<string, any>;\nlocation?: {\nfield?: string;\nline?: number;",
      "occurrences": [
        {
          "path": "dist/quality/types.d.ts",
          "line": 37
        },
        {
          "path": "src/quality/types.ts",
          "line": 41
        }
      ]
    },
    {
      "snippet": "context?: Record<string, any>;\nlocation?: {\nfield?: string;\nline?: number;\nsentence?: string;",
      "occurrences": [
        {
          "path": "dist/quality/types.d.ts",
          "line": 38
        },
        {
          "path": "src/quality/types.ts",
          "line": 42
        }
      ]
    },
    {
      "snippet": "location?: {\nfield?: string;\nline?: number;\nsentence?: string;\n};",
      "occurrences": [
        {
          "path": "dist/quality/types.d.ts",
          "line": 39
        },
        {
          "path": "src/quality/types.ts",
          "line": 43
        }
      ]
    },
    {
      "snippet": "field?: string;\nline?: number;\nsentence?: string;\n};\n}",
      "occurrences": [
        {
          "path": "dist/quality/types.d.ts",
          "line": 40
        },
        {
          "path": "src/quality/types.ts",
          "line": 44
        }
      ]
    },
    {
      "snippet": "export interface ClarityMetrics {\nfleschKincaidGradeLevel: number;\nlexicalDensity: number;\nlexicalAmbiguity: number;\nsyntacticAmbiguity: number;",
      "occurrences": [
        {
          "path": "dist/quality/types.d.ts",
          "line": 45
        },
        {
          "path": "src/quality/types.ts",
          "line": 50
        }
      ]
    },
    {
      "snippet": "fleschKincaidGradeLevel: number;\nlexicalDensity: number;\nlexicalAmbiguity: number;\nsyntacticAmbiguity: number;\nreferentialAmbiguity: number;",
      "occurrences": [
        {
          "path": "dist/quality/types.d.ts",
          "line": 46
        },
        {
          "path": "src/quality/types.ts",
          "line": 51
        }
      ]
    },
    {
      "snippet": "lexicalDensity: number;\nlexicalAmbiguity: number;\nsyntacticAmbiguity: number;\nreferentialAmbiguity: number;\nmissionCyclomaticComplexity: number;",
      "occurrences": [
        {
          "path": "dist/quality/types.d.ts",
          "line": 47
        },
        {
          "path": "src/quality/types.ts",
          "line": 52
        }
      ]
    },
    {
      "snippet": "lexicalAmbiguity: number;\nsyntacticAmbiguity: number;\nreferentialAmbiguity: number;\nmissionCyclomaticComplexity: number;\n}",
      "occurrences": [
        {
          "path": "dist/quality/types.d.ts",
          "line": 48
        },
        {
          "path": "src/quality/types.ts",
          "line": 53
        }
      ]
    },
    {
      "snippet": "export interface CompletenessMetrics {\nstructuralCompleteness: number;\ninformationBreadth: number;\ninformationDensity: number;\nsemanticCoverage: number;",
      "occurrences": [
        {
          "path": "dist/quality/types.d.ts",
          "line": 53
        },
        {
          "path": "src/quality/types.ts",
          "line": 59
        }
      ]
    },
    {
      "snippet": "structuralCompleteness: number;\ninformationBreadth: number;\ninformationDensity: number;\nsemanticCoverage: number;\n}",
      "occurrences": [
        {
          "path": "dist/quality/types.d.ts",
          "line": 54
        },
        {
          "path": "src/quality/types.ts",
          "line": 60
        }
      ]
    },
    {
      "snippet": "export interface AIReadinessMetrics {\nsyntacticValidity: boolean;\ninstructionSpecificity: number;\nlintingScore: number;\n}",
      "occurrences": [
        {
          "path": "dist/quality/types.d.ts",
          "line": 59
        },
        {
          "path": "src/quality/types.ts",
          "line": 66
        }
      ]
    },
    {
      "snippet": "export interface WeightsConfig {\nclarity: number;\ncompleteness: number;\naiReadiness: number;\nbenchmark: number;",
      "occurrences": [
        {
          "path": "dist/quality/types.d.ts",
          "line": 64
        },
        {
          "path": "src/quality/types.ts",
          "line": 72
        }
      ]
    },
    {
      "snippet": "clarity: number;\ncompleteness: number;\naiReadiness: number;\nbenchmark: number;\n}",
      "occurrences": [
        {
          "path": "dist/quality/types.d.ts",
          "line": 65
        },
        {
          "path": "src/quality/types.ts",
          "line": 73
        }
      ]
    },
    {
      "snippet": "export interface QualityScorerConfig {\nweights?: Partial<WeightsConfig>;\nmetricWeights?: {\nclarity?: Partial<Record<keyof ClarityMetrics, number>>;\ncompleteness?: Partial<Record<keyof CompletenessMetr",
      "occurrences": [
        {
          "path": "dist/quality/types.d.ts",
          "line": 70
        },
        {
          "path": "src/quality/types.ts",
          "line": 79
        }
      ]
    },
    {
      "snippet": "weights?: Partial<WeightsConfig>;\nmetricWeights?: {\nclarity?: Partial<Record<keyof ClarityMetrics, number>>;\ncompleteness?: Partial<Record<keyof CompletenessMetrics, number>>;\naiReadiness?: Partial<Re",
      "occurrences": [
        {
          "path": "dist/quality/types.d.ts",
          "line": 71
        },
        {
          "path": "src/quality/types.ts",
          "line": 80
        }
      ]
    },
    {
      "snippet": "metricWeights?: {\nclarity?: Partial<Record<keyof ClarityMetrics, number>>;\ncompleteness?: Partial<Record<keyof CompletenessMetrics, number>>;\naiReadiness?: Partial<Record<keyof AIReadinessMetrics, num",
      "occurrences": [
        {
          "path": "dist/quality/types.d.ts",
          "line": 72
        },
        {
          "path": "src/quality/types.ts",
          "line": 81
        }
      ]
    },
    {
      "snippet": "clarity?: Partial<Record<keyof ClarityMetrics, number>>;\ncompleteness?: Partial<Record<keyof CompletenessMetrics, number>>;\naiReadiness?: Partial<Record<keyof AIReadinessMetrics, number>>;\n};\nperforma",
      "occurrences": [
        {
          "path": "dist/quality/types.d.ts",
          "line": 73
        },
        {
          "path": "src/quality/types.ts",
          "line": 82
        }
      ]
    },
    {
      "snippet": "completeness?: Partial<Record<keyof CompletenessMetrics, number>>;\naiReadiness?: Partial<Record<keyof AIReadinessMetrics, number>>;\n};\nperformanceTargetMs?: number;\n}",
      "occurrences": [
        {
          "path": "dist/quality/types.d.ts",
          "line": 74
        },
        {
          "path": "src/quality/types.ts",
          "line": 83
        }
      ]
    },
    {
      "snippet": "export interface MissionContent {\nobjective?: string;\ncontext?: string;\nsuccessCriteria?: string[] | string;\ndeliverables?: string[] | string;",
      "occurrences": [
        {
          "path": "dist/quality/types.d.ts",
          "line": 79
        },
        {
          "path": "src/quality/types.ts",
          "line": 89
        }
      ]
    },
    {
      "snippet": "objective?: string;\ncontext?: string;\nsuccessCriteria?: string[] | string;\ndeliverables?: string[] | string;\ndomainFields?: Record<string, any>;",
      "occurrences": [
        {
          "path": "dist/quality/types.d.ts",
          "line": 80
        },
        {
          "path": "src/quality/types.ts",
          "line": 90
        }
      ]
    },
    {
      "snippet": "context?: string;\nsuccessCriteria?: string[] | string;\ndeliverables?: string[] | string;\ndomainFields?: Record<string, any>;\n[key: string]: any;",
      "occurrences": [
        {
          "path": "dist/quality/types.d.ts",
          "line": 81
        },
        {
          "path": "src/quality/types.ts",
          "line": 91
        }
      ]
    },
    {
      "snippet": "successCriteria?: string[] | string;\ndeliverables?: string[] | string;\ndomainFields?: Record<string, any>;\n[key: string]: any;\n}",
      "occurrences": [
        {
          "path": "dist/quality/types.d.ts",
          "line": 82
        },
        {
          "path": "src/quality/types.ts",
          "line": 92
        }
      ]
    },
    {
      "snippet": "clarity: 0.35,\ncompleteness: 0.35,\naiReadiness: 0.20,\nbenchmark: 0.10\n};",
      "occurrences": [
        {
          "path": "dist/quality/types.js",
          "line": 9
        },
        {
          "path": "src/quality/types.ts",
          "line": 99
        }
      ]
    },
    {
      "snippet": "fleschKincaidGradeLevel: 0.15,\nlexicalDensity: 0.15,\nlexicalAmbiguity: 0.20,\nsyntacticAmbiguity: 0.20,\nreferentialAmbiguity: 0.10,",
      "occurrences": [
        {
          "path": "dist/quality/types.js",
          "line": 15
        },
        {
          "path": "src/quality/types.ts",
          "line": 106
        }
      ]
    },
    {
      "snippet": "lexicalDensity: 0.15,\nlexicalAmbiguity: 0.20,\nsyntacticAmbiguity: 0.20,\nreferentialAmbiguity: 0.10,\nmissionCyclomaticComplexity: 0.20",
      "occurrences": [
        {
          "path": "dist/quality/types.js",
          "line": 16
        },
        {
          "path": "src/quality/types.ts",
          "line": 107
        }
      ]
    },
    {
      "snippet": "lexicalAmbiguity: 0.20,\nsyntacticAmbiguity: 0.20,\nreferentialAmbiguity: 0.10,\nmissionCyclomaticComplexity: 0.20\n};",
      "occurrences": [
        {
          "path": "dist/quality/types.js",
          "line": 17
        },
        {
          "path": "src/quality/types.ts",
          "line": 108
        }
      ]
    },
    {
      "snippet": "structuralCompleteness: 0.40,\ninformationBreadth: 0.25,\ninformationDensity: 0.15,\nsemanticCoverage: 0.20\n};",
      "occurrences": [
        {
          "path": "dist/quality/types.js",
          "line": 23
        },
        {
          "path": "src/quality/types.ts",
          "line": 115
        }
      ]
    },
    {
      "snippet": "/**\n* Registry Parser\n*\n* Securely loads and validates registry.yaml files containing domain pack metadata.\n* Uses SecureYAMLLoader for safe file loading and validates SemVer compliance.",
      "occurrences": [
        {
          "path": "dist/registry/registry-parser.d.ts",
          "line": 1
        },
        {
          "path": "dist/registry/registry-parser.js",
          "line": 2
        },
        {
          "path": "src/registry/registry-parser.ts",
          "line": 1
        }
      ]
    },
    {
      "snippet": "* Registry Parser\n*\n* Securely loads and validates registry.yaml files containing domain pack metadata.\n* Uses SecureYAMLLoader for safe file loading and validates SemVer compliance.\n*",
      "occurrences": [
        {
          "path": "dist/registry/registry-parser.d.ts",
          "line": 2
        },
        {
          "path": "dist/registry/registry-parser.js",
          "line": 3
        },
        {
          "path": "src/registry/registry-parser.ts",
          "line": 2
        }
      ]
    },
    {
      "snippet": "*\n* Securely loads and validates registry.yaml files containing domain pack metadata.\n* Uses SecureYAMLLoader for safe file loading and validates SemVer compliance.\n*\n* @module registry/registry-parse",
      "occurrences": [
        {
          "path": "dist/registry/registry-parser.d.ts",
          "line": 3
        },
        {
          "path": "dist/registry/registry-parser.js",
          "line": 4
        },
        {
          "path": "src/registry/registry-parser.ts",
          "line": 3
        }
      ]
    },
    {
      "snippet": "* Securely loads and validates registry.yaml files containing domain pack metadata.\n* Uses SecureYAMLLoader for safe file loading and validates SemVer compliance.\n*\n* @module registry/registry-parser\n",
      "occurrences": [
        {
          "path": "dist/registry/registry-parser.d.ts",
          "line": 4
        },
        {
          "path": "dist/registry/registry-parser.js",
          "line": 5
        },
        {
          "path": "src/registry/registry-parser.ts",
          "line": 4
        }
      ]
    },
    {
      "snippet": "/**\n* RegistryParser\n*\n* Loads and validates domain pack registry files\n*/",
      "occurrences": [
        {
          "path": "dist/registry/registry-parser.d.ts",
          "line": 11
        },
        {
          "path": "dist/registry/registry-parser.js",
          "line": 39
        },
        {
          "path": "src/registry/registry-parser.ts",
          "line": 42
        }
      ]
    },
    {
      "snippet": "/**\n* Load and parse a registry.yaml file\n*\n* @param registryPath - Path to registry.yaml file (relative to loader's baseDir)\n* @returns Array of validated domain pack entries",
      "occurrences": [
        {
          "path": "dist/registry/registry-parser.d.ts",
          "line": 19
        },
        {
          "path": "dist/registry/registry-parser.js",
          "line": 48
        },
        {
          "path": "src/registry/registry-parser.ts",
          "line": 54
        }
      ]
    },
    {
      "snippet": "* Load and parse a registry.yaml file\n*\n* @param registryPath - Path to registry.yaml file (relative to loader's baseDir)\n* @returns Array of validated domain pack entries\n* @throws Error if file cann",
      "occurrences": [
        {
          "path": "dist/registry/registry-parser.d.ts",
          "line": 20
        },
        {
          "path": "dist/registry/registry-parser.js",
          "line": 49
        },
        {
          "path": "src/registry/registry-parser.ts",
          "line": 55
        }
      ]
    },
    {
      "snippet": "*\n* @param registryPath - Path to registry.yaml file (relative to loader's baseDir)\n* @returns Array of validated domain pack entries\n* @throws Error if file cannot be loaded or validation fails\n*/",
      "occurrences": [
        {
          "path": "dist/registry/registry-parser.d.ts",
          "line": 21
        },
        {
          "path": "dist/registry/registry-parser.js",
          "line": 50
        },
        {
          "path": "src/registry/registry-parser.ts",
          "line": 56
        }
      ]
    },
    {
      "snippet": "/**\n* Validate a single domain pack entry\n*\n* @param entry - Domain pack entry to validate\n* @returns Validation result with errors if invalid",
      "occurrences": [
        {
          "path": "dist/registry/registry-parser.d.ts",
          "line": 27
        },
        {
          "path": "dist/registry/registry-parser.js",
          "line": 77
        },
        {
          "path": "src/registry/registry-parser.ts",
          "line": 88
        }
      ]
    },
    {
      "snippet": "* Validate a single domain pack entry\n*\n* @param entry - Domain pack entry to validate\n* @returns Validation result with errors if invalid\n*/",
      "occurrences": [
        {
          "path": "dist/registry/registry-parser.d.ts",
          "line": 28
        },
        {
          "path": "dist/registry/registry-parser.js",
          "line": 78
        },
        {
          "path": "src/registry/registry-parser.ts",
          "line": 89
        }
      ]
    },
    {
      "snippet": "/**\n* Filter domain pack entries by schema version compatibility\n*\n* @param entries - Array of domain pack entries\n* @param targetVersion - Target schema version to filter by",
      "occurrences": [
        {
          "path": "dist/registry/registry-parser.d.ts",
          "line": 34
        },
        {
          "path": "dist/registry/registry-parser.js",
          "line": 119
        },
        {
          "path": "src/registry/registry-parser.ts",
          "line": 145
        }
      ]
    },
    {
      "snippet": "* Filter domain pack entries by schema version compatibility\n*\n* @param entries - Array of domain pack entries\n* @param targetVersion - Target schema version to filter by\n* @returns Entries compatible",
      "occurrences": [
        {
          "path": "dist/registry/registry-parser.d.ts",
          "line": 35
        },
        {
          "path": "dist/registry/registry-parser.js",
          "line": 120
        },
        {
          "path": "src/registry/registry-parser.ts",
          "line": 146
        }
      ]
    },
    {
      "snippet": "*\n* @param entries - Array of domain pack entries\n* @param targetVersion - Target schema version to filter by\n* @returns Entries compatible with the target schema version\n*/",
      "occurrences": [
        {
          "path": "dist/registry/registry-parser.d.ts",
          "line": 36
        },
        {
          "path": "dist/registry/registry-parser.js",
          "line": 121
        },
        {
          "path": "src/registry/registry-parser.ts",
          "line": 147
        }
      ]
    },
    {
      "snippet": "/**\n* Get entries by exact schema version\n*\n* @param entries - Array of domain pack entries\n* @param version - Exact schema version to match",
      "occurrences": [
        {
          "path": "dist/registry/registry-parser.d.ts",
          "line": 42
        },
        {
          "path": "dist/registry/registry-parser.js",
          "line": 136
        },
        {
          "path": "src/registry/registry-parser.ts",
          "line": 166
        }
      ]
    },
    {
      "snippet": "* Get entries by exact schema version\n*\n* @param entries - Array of domain pack entries\n* @param version - Exact schema version to match\n* @returns Entries with exact schema version match",
      "occurrences": [
        {
          "path": "dist/registry/registry-parser.d.ts",
          "line": 43
        },
        {
          "path": "dist/registry/registry-parser.js",
          "line": 137
        },
        {
          "path": "src/registry/registry-parser.ts",
          "line": 167
        }
      ]
    },
    {
      "snippet": "*\n* @param entries - Array of domain pack entries\n* @param version - Exact schema version to match\n* @returns Entries with exact schema version match\n*/",
      "occurrences": [
        {
          "path": "dist/registry/registry-parser.d.ts",
          "line": 44
        },
        {
          "path": "dist/registry/registry-parser.js",
          "line": 138
        },
        {
          "path": "src/registry/registry-parser.ts",
          "line": 168
        }
      ]
    },
    {
      "snippet": "/**\n* Find a domain pack entry by name\n*\n* @param entries - Array of domain pack entries\n* @param name - Name of the domain pack to find",
      "occurrences": [
        {
          "path": "dist/registry/registry-parser.d.ts",
          "line": 50
        },
        {
          "path": "dist/registry/registry-parser.js",
          "line": 149
        },
        {
          "path": "src/registry/registry-parser.ts",
          "line": 181
        }
      ]
    },
    {
      "snippet": "* Find a domain pack entry by name\n*\n* @param entries - Array of domain pack entries\n* @param name - Name of the domain pack to find\n* @returns The domain pack entry or undefined if not found",
      "occurrences": [
        {
          "path": "dist/registry/registry-parser.d.ts",
          "line": 51
        },
        {
          "path": "dist/registry/registry-parser.js",
          "line": 150
        },
        {
          "path": "src/registry/registry-parser.ts",
          "line": 182
        }
      ]
    },
    {
      "snippet": "*\n* @param entries - Array of domain pack entries\n* @param name - Name of the domain pack to find\n* @returns The domain pack entry or undefined if not found\n*/",
      "occurrences": [
        {
          "path": "dist/registry/registry-parser.d.ts",
          "line": 52
        },
        {
          "path": "dist/registry/registry-parser.js",
          "line": 151
        },
        {
          "path": "src/registry/registry-parser.ts",
          "line": 183
        }
      ]
    },
    {
      "snippet": "type: 'object',\nproperties: {\ndomains: {\ntype: 'array',\nitems: {",
      "occurrences": [
        {
          "path": "dist/registry/registry-parser.js",
          "line": 17
        },
        {
          "path": "src/registry/registry-parser.ts",
          "line": 19
        }
      ]
    },
    {
      "snippet": "properties: {\ndomains: {\ntype: 'array',\nitems: {\ntype: 'object',",
      "occurrences": [
        {
          "path": "dist/registry/registry-parser.js",
          "line": 18
        },
        {
          "path": "src/registry/registry-parser.ts",
          "line": 20
        }
      ]
    },
    {
      "snippet": "domains: {\ntype: 'array',\nitems: {\ntype: 'object',\nproperties: {",
      "occurrences": [
        {
          "path": "dist/registry/registry-parser.js",
          "line": 19
        },
        {
          "path": "src/registry/registry-parser.ts",
          "line": 21
        }
      ]
    },
    {
      "snippet": "items: {\ntype: 'object',\nproperties: {\nname: { type: 'string', minLength: 1 },\ndescription: { type: 'string', minLength: 1 },",
      "occurrences": [
        {
          "path": "dist/registry/registry-parser.js",
          "line": 21
        },
        {
          "path": "src/registry/registry-parser.ts",
          "line": 23
        }
      ]
    },
    {
      "snippet": "type: 'object',\nproperties: {\nname: { type: 'string', minLength: 1 },\ndescription: { type: 'string', minLength: 1 },\nversion: { type: 'string', minLength: 1 },",
      "occurrences": [
        {
          "path": "dist/registry/registry-parser.js",
          "line": 22
        },
        {
          "path": "src/registry/registry-parser.ts",
          "line": 24
        }
      ]
    },
    {
      "snippet": "properties: {\nname: { type: 'string', minLength: 1 },\ndescription: { type: 'string', minLength: 1 },\nversion: { type: 'string', minLength: 1 },\nauthor: { type: 'string' },",
      "occurrences": [
        {
          "path": "dist/registry/registry-parser.js",
          "line": 23
        },
        {
          "path": "src/registry/registry-parser.ts",
          "line": 25
        }
      ]
    },
    {
      "snippet": "name: { type: 'string', minLength: 1 },\ndescription: { type: 'string', minLength: 1 },\nversion: { type: 'string', minLength: 1 },\nauthor: { type: 'string' },\npath: { type: 'string', minLength: 1 },",
      "occurrences": [
        {
          "path": "dist/registry/registry-parser.js",
          "line": 24
        },
        {
          "path": "src/registry/registry-parser.ts",
          "line": 26
        }
      ]
    },
    {
      "snippet": "description: { type: 'string', minLength: 1 },\nversion: { type: 'string', minLength: 1 },\nauthor: { type: 'string' },\npath: { type: 'string', minLength: 1 },\nschema_version: { type: 'string', minLengt",
      "occurrences": [
        {
          "path": "dist/registry/registry-parser.js",
          "line": 25
        },
        {
          "path": "src/registry/registry-parser.ts",
          "line": 27
        }
      ]
    },
    {
      "snippet": "version: { type: 'string', minLength: 1 },\nauthor: { type: 'string' },\npath: { type: 'string', minLength: 1 },\nschema_version: { type: 'string', minLength: 1 },\n},",
      "occurrences": [
        {
          "path": "dist/registry/registry-parser.js",
          "line": 26
        },
        {
          "path": "src/registry/registry-parser.ts",
          "line": 28
        }
      ]
    },
    {
      "snippet": "author: { type: 'string' },\npath: { type: 'string', minLength: 1 },\nschema_version: { type: 'string', minLength: 1 },\n},\nrequired: ['name', 'description', 'version', 'path', 'schema_version'],",
      "occurrences": [
        {
          "path": "dist/registry/registry-parser.js",
          "line": 27
        },
        {
          "path": "src/registry/registry-parser.ts",
          "line": 29
        }
      ]
    },
    {
      "snippet": "path: { type: 'string', minLength: 1 },\nschema_version: { type: 'string', minLength: 1 },\n},\nrequired: ['name', 'description', 'version', 'path', 'schema_version'],\nadditionalProperties: false,",
      "occurrences": [
        {
          "path": "dist/registry/registry-parser.js",
          "line": 28
        },
        {
          "path": "src/registry/registry-parser.ts",
          "line": 30
        }
      ]
    },
    {
      "snippet": "schema_version: { type: 'string', minLength: 1 },\n},\nrequired: ['name', 'description', 'version', 'path', 'schema_version'],\nadditionalProperties: false,\n},",
      "occurrences": [
        {
          "path": "dist/registry/registry-parser.js",
          "line": 29
        },
        {
          "path": "src/registry/registry-parser.ts",
          "line": 31
        }
      ]
    },
    {
      "snippet": "},\nrequired: ['name', 'description', 'version', 'path', 'schema_version'],\nadditionalProperties: false,\n},\n},",
      "occurrences": [
        {
          "path": "dist/registry/registry-parser.js",
          "line": 30
        },
        {
          "path": "src/registry/registry-parser.ts",
          "line": 32
        }
      ]
    },
    {
      "snippet": "required: ['name', 'description', 'version', 'path', 'schema_version'],\nadditionalProperties: false,\n},\n},\n},",
      "occurrences": [
        {
          "path": "dist/registry/registry-parser.js",
          "line": 31
        },
        {
          "path": "src/registry/registry-parser.ts",
          "line": 33
        }
      ]
    },
    {
      "snippet": "additionalProperties: false,\n},\n},\n},\nrequired: ['domains'],",
      "occurrences": [
        {
          "path": "dist/registry/registry-parser.js",
          "line": 32
        },
        {
          "path": "src/registry/registry-parser.ts",
          "line": 34
        }
      ]
    },
    {
      "snippet": "},\n},\n},\nrequired: ['domains'],\nadditionalProperties: false,",
      "occurrences": [
        {
          "path": "dist/registry/registry-parser.js",
          "line": 33
        },
        {
          "path": "src/registry/registry-parser.ts",
          "line": 35
        }
      ]
    },
    {
      "snippet": "},\n},\nrequired: ['domains'],\nadditionalProperties: false,\n};",
      "occurrences": [
        {
          "path": "dist/registry/registry-parser.js",
          "line": 34
        },
        {
          "path": "src/registry/registry-parser.ts",
          "line": 36
        }
      ]
    },
    {
      "snippet": "/**\n* SemVer Validator\n*\n* Validates semantic versioning strings according to SemVer 2.0.0 specification.\n* Supports strict X.Y.Z format (major.minor.patch).",
      "occurrences": [
        {
          "path": "dist/registry/semver-validator.d.ts",
          "line": 1
        },
        {
          "path": "dist/registry/semver-validator.js",
          "line": 2
        },
        {
          "path": "src/registry/semver-validator.ts",
          "line": 1
        }
      ]
    },
    {
      "snippet": "* SemVer Validator\n*\n* Validates semantic versioning strings according to SemVer 2.0.0 specification.\n* Supports strict X.Y.Z format (major.minor.patch).\n*",
      "occurrences": [
        {
          "path": "dist/registry/semver-validator.d.ts",
          "line": 2
        },
        {
          "path": "dist/registry/semver-validator.js",
          "line": 3
        },
        {
          "path": "src/registry/semver-validator.ts",
          "line": 2
        }
      ]
    },
    {
      "snippet": "*\n* Validates semantic versioning strings according to SemVer 2.0.0 specification.\n* Supports strict X.Y.Z format (major.minor.patch).\n*\n* @module registry/semver-validator",
      "occurrences": [
        {
          "path": "dist/registry/semver-validator.d.ts",
          "line": 3
        },
        {
          "path": "dist/registry/semver-validator.js",
          "line": 4
        },
        {
          "path": "src/registry/semver-validator.ts",
          "line": 3
        }
      ]
    },
    {
      "snippet": "* Validates semantic versioning strings according to SemVer 2.0.0 specification.\n* Supports strict X.Y.Z format (major.minor.patch).\n*\n* @module registry/semver-validator\n*/",
      "occurrences": [
        {
          "path": "dist/registry/semver-validator.d.ts",
          "line": 4
        },
        {
          "path": "dist/registry/semver-validator.js",
          "line": 5
        },
        {
          "path": "src/registry/semver-validator.ts",
          "line": 4
        }
      ]
    },
    {
      "snippet": "/**\n* Validates if a string is a valid SemVer version\n*\n* @param version - Version string to validate\n* @returns true if valid SemVer, false otherwise",
      "occurrences": [
        {
          "path": "dist/registry/semver-validator.d.ts",
          "line": 10
        },
        {
          "path": "dist/registry/semver-validator.js",
          "line": 21
        },
        {
          "path": "src/registry/semver-validator.ts",
          "line": 18
        }
      ]
    },
    {
      "snippet": "* Validates if a string is a valid SemVer version\n*\n* @param version - Version string to validate\n* @returns true if valid SemVer, false otherwise\n*/",
      "occurrences": [
        {
          "path": "dist/registry/semver-validator.d.ts",
          "line": 11
        },
        {
          "path": "dist/registry/semver-validator.js",
          "line": 22
        },
        {
          "path": "src/registry/semver-validator.ts",
          "line": 19
        }
      ]
    },
    {
      "snippet": "/**\n* Parses a SemVer string into its components\n*\n* @param version - Version string to parse\n* @returns SemVer components or null if invalid",
      "occurrences": [
        {
          "path": "dist/registry/semver-validator.d.ts",
          "line": 17
        },
        {
          "path": "dist/registry/semver-validator.js",
          "line": 33
        },
        {
          "path": "src/registry/semver-validator.ts",
          "line": 32
        }
      ]
    },
    {
      "snippet": "* Parses a SemVer string into its components\n*\n* @param version - Version string to parse\n* @returns SemVer components or null if invalid\n*/",
      "occurrences": [
        {
          "path": "dist/registry/semver-validator.d.ts",
          "line": 18
        },
        {
          "path": "dist/registry/semver-validator.js",
          "line": 34
        },
        {
          "path": "src/registry/semver-validator.ts",
          "line": 33
        }
      ]
    },
    {
      "snippet": "/**\n* Compares two SemVer versions\n*\n* @param v1 - First version string\n* @param v2 - Second version string",
      "occurrences": [
        {
          "path": "dist/registry/semver-validator.d.ts",
          "line": 24
        },
        {
          "path": "dist/registry/semver-validator.js",
          "line": 55
        },
        {
          "path": "src/registry/semver-validator.ts",
          "line": 58
        }
      ]
    },
    {
      "snippet": "* Compares two SemVer versions\n*\n* @param v1 - First version string\n* @param v2 - Second version string\n* @returns -1 if v1 < v2, 0 if equal, 1 if v1 > v2, null if either is invalid",
      "occurrences": [
        {
          "path": "dist/registry/semver-validator.d.ts",
          "line": 25
        },
        {
          "path": "dist/registry/semver-validator.js",
          "line": 56
        },
        {
          "path": "src/registry/semver-validator.ts",
          "line": 59
        }
      ]
    },
    {
      "snippet": "*\n* @param v1 - First version string\n* @param v2 - Second version string\n* @returns -1 if v1 < v2, 0 if equal, 1 if v1 > v2, null if either is invalid\n*/",
      "occurrences": [
        {
          "path": "dist/registry/semver-validator.d.ts",
          "line": 26
        },
        {
          "path": "dist/registry/semver-validator.js",
          "line": 57
        },
        {
          "path": "src/registry/semver-validator.ts",
          "line": 60
        }
      ]
    },
    {
      "snippet": "/**\n* Validates that a version string is valid SemVer and throws if not\n*\n* @param version - Version string to validate\n* @param fieldName - Name of field for error message (default: \"version\")",
      "occurrences": [
        {
          "path": "dist/registry/semver-validator.d.ts",
          "line": 32
        },
        {
          "path": "dist/registry/semver-validator.js",
          "line": 82
        },
        {
          "path": "src/registry/semver-validator.ts",
          "line": 91
        }
      ]
    },
    {
      "snippet": "* Validates that a version string is valid SemVer and throws if not\n*\n* @param version - Version string to validate\n* @param fieldName - Name of field for error message (default: \"version\")\n* @throws ",
      "occurrences": [
        {
          "path": "dist/registry/semver-validator.d.ts",
          "line": 33
        },
        {
          "path": "dist/registry/semver-validator.js",
          "line": 83
        },
        {
          "path": "src/registry/semver-validator.ts",
          "line": 92
        }
      ]
    },
    {
      "snippet": "*\n* @param version - Version string to validate\n* @param fieldName - Name of field for error message (default: \"version\")\n* @throws Error if version is invalid\n*/",
      "occurrences": [
        {
          "path": "dist/registry/semver-validator.d.ts",
          "line": 34
        },
        {
          "path": "dist/registry/semver-validator.js",
          "line": 84
        },
        {
          "path": "src/registry/semver-validator.ts",
          "line": 93
        }
      ]
    },
    {
      "snippet": "/**\n* Checks if two versions are compatible (same major version)\n*\n* @param v1 - First version string\n* @param v2 - Second version string",
      "occurrences": [
        {
          "path": "dist/registry/semver-validator.d.ts",
          "line": 40
        },
        {
          "path": "dist/registry/semver-validator.js",
          "line": 94
        },
        {
          "path": "src/registry/semver-validator.ts",
          "line": 106
        }
      ]
    },
    {
      "snippet": "* Checks if two versions are compatible (same major version)\n*\n* @param v1 - First version string\n* @param v2 - Second version string\n* @returns true if compatible, false otherwise or if invalid",
      "occurrences": [
        {
          "path": "dist/registry/semver-validator.d.ts",
          "line": 41
        },
        {
          "path": "dist/registry/semver-validator.js",
          "line": 95
        },
        {
          "path": "src/registry/semver-validator.ts",
          "line": 107
        }
      ]
    },
    {
      "snippet": "*\n* @param v1 - First version string\n* @param v2 - Second version string\n* @returns true if compatible, false otherwise or if invalid\n*/",
      "occurrences": [
        {
          "path": "dist/registry/semver-validator.d.ts",
          "line": 42
        },
        {
          "path": "dist/registry/semver-validator.js",
          "line": 96
        },
        {
          "path": "src/registry/semver-validator.ts",
          "line": 108
        }
      ]
    },
    {
      "snippet": "/**\n* SemVer regex pattern\n* Matches versions in X.Y.Z format where X, Y, Z are non-negative integers\n*/\nconst SEMVER_PATTERN = /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)$/;",
      "occurrences": [
        {
          "path": "dist/registry/semver-validator.js",
          "line": 16
        },
        {
          "path": "src/registry/semver-validator.ts",
          "line": 12
        }
      ]
    },
    {
      "snippet": "}\nreturn {\nmajor: parseInt(match[1], 10),\nminor: parseInt(match[2], 10),\npatch: parseInt(match[3], 10),",
      "occurrences": [
        {
          "path": "dist/registry/semver-validator.js",
          "line": 47
        },
        {
          "path": "dist/versioning/version-manager.js",
          "line": 32
        }
      ]
    },
    {
      "snippet": "return {\nmajor: parseInt(match[1], 10),\nminor: parseInt(match[2], 10),\npatch: parseInt(match[3], 10),\nraw: trimmed,",
      "occurrences": [
        {
          "path": "dist/registry/semver-validator.js",
          "line": 48
        },
        {
          "path": "src/registry/semver-validator.ts",
          "line": 50
        }
      ]
    },
    {
      "snippet": "major: parseInt(match[1], 10),\nminor: parseInt(match[2], 10),\npatch: parseInt(match[3], 10),\nraw: trimmed,\n};",
      "occurrences": [
        {
          "path": "dist/registry/semver-validator.js",
          "line": 49
        },
        {
          "path": "src/registry/semver-validator.ts",
          "line": 51
        }
      ]
    },
    {
      "snippet": "minor: parseInt(match[2], 10),\npatch: parseInt(match[3], 10),\nraw: trimmed,\n};\n}",
      "occurrences": [
        {
          "path": "dist/registry/semver-validator.js",
          "line": 50
        },
        {
          "path": "src/registry/semver-validator.ts",
          "line": 52
        }
      ]
    },
    {
      "snippet": "// In SemVer, major version 0 is for initial development\n// Different minor versions in 0.x.x are NOT compatible\nif (parsed1.major === 0 || parsed2.major === 0) {\nreturn parsed1.major === parsed2.majo",
      "occurrences": [
        {
          "path": "dist/registry/semver-validator.js",
          "line": 107
        },
        {
          "path": "src/registry/semver-validator.ts",
          "line": 121
        }
      ]
    },
    {
      "snippet": "/**\n* Generic Mission Template Schema\n*\n* Universal mission structure using ICEV pattern:\n* - Intent: Objective and desired outcome",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.d.ts",
          "line": 1
        },
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 2
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 1
        }
      ]
    },
    {
      "snippet": "* Generic Mission Template Schema\n*\n* Universal mission structure using ICEV pattern:\n* - Intent: Objective and desired outcome\n* - Context: Background, dependencies, and constraints",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.d.ts",
          "line": 2
        },
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 3
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 2
        }
      ]
    },
    {
      "snippet": "*\n* Universal mission structure using ICEV pattern:\n* - Intent: Objective and desired outcome\n* - Context: Background, dependencies, and constraints\n* - Execution: Implementation details (via domainFi",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.d.ts",
          "line": 3
        },
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 4
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 3
        }
      ]
    },
    {
      "snippet": "* Universal mission structure using ICEV pattern:\n* - Intent: Objective and desired outcome\n* - Context: Background, dependencies, and constraints\n* - Execution: Implementation details (via domainFiel",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.d.ts",
          "line": 4
        },
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 5
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 4
        }
      ]
    },
    {
      "snippet": "* - Intent: Objective and desired outcome\n* - Context: Background, dependencies, and constraints\n* - Execution: Implementation details (via domainFields)\n* - Verification: Success criteria and deliver",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.d.ts",
          "line": 5
        },
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 6
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 5
        }
      ]
    },
    {
      "snippet": "* - Context: Background, dependencies, and constraints\n* - Execution: Implementation details (via domainFields)\n* - Verification: Success criteria and deliverables\n*\n* @version 2.0",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.d.ts",
          "line": 6
        },
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 7
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 6
        }
      ]
    },
    {
      "snippet": "* - Execution: Implementation details (via domainFields)\n* - Verification: Success criteria and deliverables\n*\n* @version 2.0\n*/",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.d.ts",
          "line": 7
        },
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 8
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 7
        }
      ]
    },
    {
      "snippet": "/**\n* Core generic mission interface that works across any domain.\n* Domain-specific extensions should be added via the domainFields property.\n*/\nexport interface GenericMission {",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.d.ts",
          "line": 12
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 13
        }
      ]
    },
    {
      "snippet": "* Core generic mission interface that works across any domain.\n* Domain-specific extensions should be added via the domainFields property.\n*/\nexport interface GenericMission {\n/** Schema type identifi",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.d.ts",
          "line": 13
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 14
        }
      ]
    },
    {
      "snippet": "* Domain-specific extensions should be added via the domainFields property.\n*/\nexport interface GenericMission {\n/** Schema type identifier */\nschemaType: \"Mission\";",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.d.ts",
          "line": 14
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 15
        }
      ]
    },
    {
      "snippet": "$schema: \"http://json-schema.org/draft-07/schema#\",\ntype: \"object\",\nrequired: [\n\"schemaType\",\n\"schemaVersion\",",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 20
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 56
        }
      ]
    },
    {
      "snippet": "type: \"object\",\nrequired: [\n\"schemaType\",\n\"schemaVersion\",\n\"missionId\",",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 21
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 57
        }
      ]
    },
    {
      "snippet": "required: [\n\"schemaType\",\n\"schemaVersion\",\n\"missionId\",\n\"objective\",",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 22
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 58
        }
      ]
    },
    {
      "snippet": "\"schemaType\",\n\"schemaVersion\",\n\"missionId\",\n\"objective\",\n\"successCriteria\",",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 23
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 59
        }
      ]
    },
    {
      "snippet": "\"schemaVersion\",\n\"missionId\",\n\"objective\",\n\"successCriteria\",\n\"deliverables\"",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 24
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 60
        }
      ]
    },
    {
      "snippet": "\"missionId\",\n\"objective\",\n\"successCriteria\",\n\"deliverables\"\n],",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 25
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 61
        }
      ]
    },
    {
      "snippet": "\"objective\",\n\"successCriteria\",\n\"deliverables\"\n],\nproperties: {",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 26
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 62
        }
      ]
    },
    {
      "snippet": "\"successCriteria\",\n\"deliverables\"\n],\nproperties: {\nschemaType: {",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 27
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 63
        }
      ]
    },
    {
      "snippet": "\"deliverables\"\n],\nproperties: {\nschemaType: {\ntype: \"string\",",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 28
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 64
        }
      ]
    },
    {
      "snippet": "],\nproperties: {\nschemaType: {\ntype: \"string\",\nconst: \"Mission\",",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 29
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 65
        }
      ]
    },
    {
      "snippet": "properties: {\nschemaType: {\ntype: \"string\",\nconst: \"Mission\",\ndescription: \"Schema type identifier\"",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 30
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 66
        }
      ]
    },
    {
      "snippet": "schemaType: {\ntype: \"string\",\nconst: \"Mission\",\ndescription: \"Schema type identifier\"\n},",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 31
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 67
        }
      ]
    },
    {
      "snippet": "type: \"string\",\nconst: \"Mission\",\ndescription: \"Schema type identifier\"\n},\nschemaVersion: {",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 32
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 68
        }
      ]
    },
    {
      "snippet": "const: \"Mission\",\ndescription: \"Schema type identifier\"\n},\nschemaVersion: {\ntype: \"string\",",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 33
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 69
        }
      ]
    },
    {
      "snippet": "description: \"Schema type identifier\"\n},\nschemaVersion: {\ntype: \"string\",\nconst: \"2.0\",",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 34
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 70
        }
      ]
    },
    {
      "snippet": "},\nschemaVersion: {\ntype: \"string\",\nconst: \"2.0\",\ndescription: \"Schema version for compatibility\"",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 35
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 71
        }
      ]
    },
    {
      "snippet": "schemaVersion: {\ntype: \"string\",\nconst: \"2.0\",\ndescription: \"Schema version for compatibility\"\n},",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 36
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 72
        }
      ]
    },
    {
      "snippet": "type: \"string\",\nconst: \"2.0\",\ndescription: \"Schema version for compatibility\"\n},\nmissionId: {",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 37
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 73
        }
      ]
    },
    {
      "snippet": "const: \"2.0\",\ndescription: \"Schema version for compatibility\"\n},\nmissionId: {\ntype: \"string\",",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 38
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 74
        }
      ]
    },
    {
      "snippet": "description: \"Schema version for compatibility\"\n},\nmissionId: {\ntype: \"string\",\nminLength: 1,",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 39
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 75
        }
      ]
    },
    {
      "snippet": "},\nmissionId: {\ntype: \"string\",\nminLength: 1,\ndescription: \"Unique identifier for this mission\"",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 40
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 76
        }
      ]
    },
    {
      "snippet": "missionId: {\ntype: \"string\",\nminLength: 1,\ndescription: \"Unique identifier for this mission\"\n},",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 41
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 77
        }
      ]
    },
    {
      "snippet": "type: \"string\",\nminLength: 1,\ndescription: \"Unique identifier for this mission\"\n},\nobjective: {",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 42
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 78
        }
      ]
    },
    {
      "snippet": "minLength: 1,\ndescription: \"Unique identifier for this mission\"\n},\nobjective: {\ntype: \"string\",",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 43
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 79
        }
      ]
    },
    {
      "snippet": "description: \"Unique identifier for this mission\"\n},\nobjective: {\ntype: \"string\",\nminLength: 1,",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 44
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 80
        }
      ]
    },
    {
      "snippet": "},\nobjective: {\ntype: \"string\",\nminLength: 1,\ndescription: \"Primary desired outcome\"",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 45
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 81
        }
      ]
    },
    {
      "snippet": "objective: {\ntype: \"string\",\nminLength: 1,\ndescription: \"Primary desired outcome\"\n},",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 46
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 82
        }
      ]
    },
    {
      "snippet": "type: \"string\",\nminLength: 1,\ndescription: \"Primary desired outcome\"\n},\ncontext: {",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 47
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 83
        }
      ]
    },
    {
      "snippet": "minLength: 1,\ndescription: \"Primary desired outcome\"\n},\ncontext: {\ntype: \"object\",",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 48
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 84
        }
      ]
    },
    {
      "snippet": "description: \"Primary desired outcome\"\n},\ncontext: {\ntype: \"object\",\nproperties: {",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 49
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 85
        }
      ]
    },
    {
      "snippet": "},\ncontext: {\ntype: \"object\",\nproperties: {\nbackground: {",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 50
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 86
        }
      ]
    },
    {
      "snippet": "context: {\ntype: \"object\",\nproperties: {\nbackground: {\ntype: \"string\",",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 51
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 87
        }
      ]
    },
    {
      "snippet": "type: \"object\",\nproperties: {\nbackground: {\ntype: \"string\",\ndescription: \"Mission background and history\"",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 52
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 88
        }
      ]
    },
    {
      "snippet": "properties: {\nbackground: {\ntype: \"string\",\ndescription: \"Mission background and history\"\n},",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 53
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 89
        }
      ]
    },
    {
      "snippet": "background: {\ntype: \"string\",\ndescription: \"Mission background and history\"\n},\ndependencies: {",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 54
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 90
        }
      ]
    },
    {
      "snippet": "type: \"string\",\ndescription: \"Mission background and history\"\n},\ndependencies: {\ntype: \"array\",",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 55
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 91
        }
      ]
    },
    {
      "snippet": "description: \"Mission background and history\"\n},\ndependencies: {\ntype: \"array\",\nitems: {",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 56
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 92
        }
      ]
    },
    {
      "snippet": "},\ndependencies: {\ntype: \"array\",\nitems: {\ntype: \"string\"",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 57
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 93
        }
      ]
    },
    {
      "snippet": "dependencies: {\ntype: \"array\",\nitems: {\ntype: \"string\"\n},",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 58
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 94
        }
      ]
    },
    {
      "snippet": "type: \"array\",\nitems: {\ntype: \"string\"\n},\ndescription: \"Required missions, systems, or resources\"",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 59
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 95
        }
      ]
    },
    {
      "snippet": "items: {\ntype: \"string\"\n},\ndescription: \"Required missions, systems, or resources\"\n},",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 60
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 96
        }
      ]
    },
    {
      "snippet": "type: \"string\"\n},\ndescription: \"Required missions, systems, or resources\"\n},\nconstraints: {",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 61
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 97
        }
      ]
    },
    {
      "snippet": "},\ndescription: \"Required missions, systems, or resources\"\n},\nconstraints: {\ntype: \"array\",",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 62
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 98
        }
      ]
    },
    {
      "snippet": "description: \"Required missions, systems, or resources\"\n},\nconstraints: {\ntype: \"array\",\nitems: {",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 63
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 99
        }
      ]
    },
    {
      "snippet": "},\nconstraints: {\ntype: \"array\",\nitems: {\ntype: \"string\"",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 64
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 100
        }
      ]
    },
    {
      "snippet": "constraints: {\ntype: \"array\",\nitems: {\ntype: \"string\"\n},",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 65
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 101
        }
      ]
    },
    {
      "snippet": "type: \"array\",\nitems: {\ntype: \"string\"\n},\ndescription: \"Limitations or boundaries\"",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 66
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 102
        }
      ]
    },
    {
      "snippet": "items: {\ntype: \"string\"\n},\ndescription: \"Limitations or boundaries\"\n}",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 67
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 103
        }
      ]
    },
    {
      "snippet": "type: \"string\"\n},\ndescription: \"Limitations or boundaries\"\n}\n},",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 68
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 104
        }
      ]
    },
    {
      "snippet": "},\ndescription: \"Limitations or boundaries\"\n}\n},\nadditionalProperties: false",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 69
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 105
        }
      ]
    },
    {
      "snippet": "description: \"Limitations or boundaries\"\n}\n},\nadditionalProperties: false\n},",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 70
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 106
        }
      ]
    },
    {
      "snippet": "}\n},\nadditionalProperties: false\n},\nsuccessCriteria: {",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 71
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 107
        }
      ]
    },
    {
      "snippet": "},\nadditionalProperties: false\n},\nsuccessCriteria: {\ntype: \"array\",",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 72
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 108
        }
      ]
    },
    {
      "snippet": "additionalProperties: false\n},\nsuccessCriteria: {\ntype: \"array\",\nitems: {",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 73
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 109
        }
      ]
    },
    {
      "snippet": "},\nsuccessCriteria: {\ntype: \"array\",\nitems: {\ntype: \"string\"",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 74
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 110
        }
      ]
    },
    {
      "snippet": "successCriteria: {\ntype: \"array\",\nitems: {\ntype: \"string\"\n},",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 75
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 111
        }
      ]
    },
    {
      "snippet": "type: \"array\",\nitems: {\ntype: \"string\"\n},\nminItems: 1,",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 76
        },
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 84
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 112
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 120
        }
      ]
    },
    {
      "snippet": "items: {\ntype: \"string\"\n},\nminItems: 1,\ndescription: \"Measurable completion conditions\"",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 77
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 113
        }
      ]
    },
    {
      "snippet": "type: \"string\"\n},\nminItems: 1,\ndescription: \"Measurable completion conditions\"\n},",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 78
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 114
        }
      ]
    },
    {
      "snippet": "},\nminItems: 1,\ndescription: \"Measurable completion conditions\"\n},\ndeliverables: {",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 79
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 115
        }
      ]
    },
    {
      "snippet": "minItems: 1,\ndescription: \"Measurable completion conditions\"\n},\ndeliverables: {\ntype: \"array\",",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 80
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 116
        }
      ]
    },
    {
      "snippet": "description: \"Measurable completion conditions\"\n},\ndeliverables: {\ntype: \"array\",\nitems: {",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 81
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 117
        }
      ]
    },
    {
      "snippet": "},\ndeliverables: {\ntype: \"array\",\nitems: {\ntype: \"string\"",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 82
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 118
        }
      ]
    },
    {
      "snippet": "deliverables: {\ntype: \"array\",\nitems: {\ntype: \"string\"\n},",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 83
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 119
        }
      ]
    },
    {
      "snippet": "items: {\ntype: \"string\"\n},\nminItems: 1,\ndescription: \"Tangible outputs to be created\"",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 85
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 121
        }
      ]
    },
    {
      "snippet": "type: \"string\"\n},\nminItems: 1,\ndescription: \"Tangible outputs to be created\"\n},",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 86
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 122
        }
      ]
    },
    {
      "snippet": "},\nminItems: 1,\ndescription: \"Tangible outputs to be created\"\n},\ndomainFields: {",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 87
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 123
        }
      ]
    },
    {
      "snippet": "minItems: 1,\ndescription: \"Tangible outputs to be created\"\n},\ndomainFields: {\ntype: \"object\",",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 88
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 124
        }
      ]
    },
    {
      "snippet": "description: \"Tangible outputs to be created\"\n},\ndomainFields: {\ntype: \"object\",\ndescription: \"Domain-specific fields populated by domain packs\"",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 89
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 125
        }
      ]
    },
    {
      "snippet": "},\ndomainFields: {\ntype: \"object\",\ndescription: \"Domain-specific fields populated by domain packs\"\n}",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 90
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 126
        }
      ]
    },
    {
      "snippet": "domainFields: {\ntype: \"object\",\ndescription: \"Domain-specific fields populated by domain packs\"\n}\n},",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 91
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 127
        }
      ]
    },
    {
      "snippet": "type: \"object\",\ndescription: \"Domain-specific fields populated by domain packs\"\n}\n},\nadditionalProperties: false",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 92
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 128
        }
      ]
    },
    {
      "snippet": "mission.schemaVersion === \"2.0\" &&\ntypeof mission.missionId === \"string\" &&\nmission.missionId.length > 0 &&\ntypeof mission.objective === \"string\" &&\nmission.objective.length > 0 &&",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 106
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 145
        }
      ]
    },
    {
      "snippet": "typeof mission.missionId === \"string\" &&\nmission.missionId.length > 0 &&\ntypeof mission.objective === \"string\" &&\nmission.objective.length > 0 &&\nArray.isArray(mission.successCriteria) &&",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 107
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 146
        }
      ]
    },
    {
      "snippet": "mission.missionId.length > 0 &&\ntypeof mission.objective === \"string\" &&\nmission.objective.length > 0 &&\nArray.isArray(mission.successCriteria) &&\nmission.successCriteria.length > 0 &&",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 108
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 147
        }
      ]
    },
    {
      "snippet": "typeof mission.objective === \"string\" &&\nmission.objective.length > 0 &&\nArray.isArray(mission.successCriteria) &&\nmission.successCriteria.length > 0 &&\nArray.isArray(mission.deliverables) &&",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 109
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 148
        }
      ]
    },
    {
      "snippet": "mission.objective.length > 0 &&\nArray.isArray(mission.successCriteria) &&\nmission.successCriteria.length > 0 &&\nArray.isArray(mission.deliverables) &&\nmission.deliverables.length > 0 &&",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 110
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 149
        }
      ]
    },
    {
      "snippet": "Array.isArray(mission.successCriteria) &&\nmission.successCriteria.length > 0 &&\nArray.isArray(mission.deliverables) &&\nmission.deliverables.length > 0 &&\ntypeof mission.domainFields === \"object\" &&",
      "occurrences": [
        {
          "path": "dist/schemas/generic-mission.js",
          "line": 111
        },
        {
          "path": "src/schemas/generic-mission.ts",
          "line": 150
        }
      ]
    },
    {
      "snippet": "/**\n* Arguments for analyze_dependencies MCP tool\n*/\nexport interface AnalyzeDependenciesArgs {\nmissionDirectory: string;",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 1
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 8
        }
      ]
    },
    {
      "snippet": "* Arguments for analyze_dependencies MCP tool\n*/\nexport interface AnalyzeDependenciesArgs {\nmissionDirectory: string;\nincludeInferred?: boolean;",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 2
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 9
        }
      ]
    },
    {
      "snippet": "*/\nexport interface AnalyzeDependenciesArgs {\nmissionDirectory: string;\nincludeInferred?: boolean;\nminConfidence?: number;",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 3
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 10
        }
      ]
    },
    {
      "snippet": "export interface AnalyzeDependenciesArgs {\nmissionDirectory: string;\nincludeInferred?: boolean;\nminConfidence?: number;\n}",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 4
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 11
        }
      ]
    },
    {
      "snippet": "/**\n* Result from analyze_dependencies MCP tool\n*/\nexport interface AnalyzeDependenciesResult {\ntotalMissions: number;",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 9
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 17
        }
      ]
    },
    {
      "snippet": "* Result from analyze_dependencies MCP tool\n*/\nexport interface AnalyzeDependenciesResult {\ntotalMissions: number;\nisValid: boolean;",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 10
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 18
        }
      ]
    },
    {
      "snippet": "*/\nexport interface AnalyzeDependenciesResult {\ntotalMissions: number;\nisValid: boolean;\nisDAG: boolean;",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 11
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 19
        }
      ]
    },
    {
      "snippet": "export interface AnalyzeDependenciesResult {\ntotalMissions: number;\nisValid: boolean;\nisDAG: boolean;\nhasCycles: boolean;",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 12
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 20
        }
      ]
    },
    {
      "snippet": "totalMissions: number;\nisValid: boolean;\nisDAG: boolean;\nhasCycles: boolean;\ncycles?: string[][];",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 13
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 21
        }
      ]
    },
    {
      "snippet": "isValid: boolean;\nisDAG: boolean;\nhasCycles: boolean;\ncycles?: string[][];\nexecutionOrder?: string[];",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 14
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 22
        }
      ]
    },
    {
      "snippet": "isDAG: boolean;\nhasCycles: boolean;\ncycles?: string[][];\nexecutionOrder?: string[];\ncriticalPath?: string[];",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 15
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 23
        }
      ]
    },
    {
      "snippet": "hasCycles: boolean;\ncycles?: string[][];\nexecutionOrder?: string[];\ncriticalPath?: string[];\ninferredDependencies?: Array<{",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 16
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 24
        }
      ]
    },
    {
      "snippet": "cycles?: string[][];\nexecutionOrder?: string[];\ncriticalPath?: string[];\ninferredDependencies?: Array<{\nfrom: string;",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 17
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 25
        }
      ]
    },
    {
      "snippet": "executionOrder?: string[];\ncriticalPath?: string[];\ninferredDependencies?: Array<{\nfrom: string;\nto: string;",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 18
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 26
        }
      ]
    },
    {
      "snippet": "criticalPath?: string[];\ninferredDependencies?: Array<{\nfrom: string;\nto: string;\nconfidence: number;",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 19
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 27
        }
      ]
    },
    {
      "snippet": "inferredDependencies?: Array<{\nfrom: string;\nto: string;\nconfidence: number;\nreason: string;",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 20
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 28
        }
      ]
    },
    {
      "snippet": "from: string;\nto: string;\nconfidence: number;\nreason: string;\n}>;",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 21
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 29
        }
      ]
    },
    {
      "snippet": "to: string;\nconfidence: number;\nreason: string;\n}>;\nerrors: string[];",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 22
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 30
        }
      ]
    },
    {
      "snippet": "confidence: number;\nreason: string;\n}>;\nerrors: string[];\nwarnings: string[];",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 23
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 31
        }
      ]
    },
    {
      "snippet": "reason: string;\n}>;\nerrors: string[];\nwarnings: string[];\nperformanceMs: number;",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 24
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 32
        }
      ]
    },
    {
      "snippet": "}>;\nerrors: string[];\nwarnings: string[];\nperformanceMs: number;\n}",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 25
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 33
        }
      ]
    },
    {
      "snippet": "*/\nexport declare const mcpToolDefinition: {\nname: string;\ndescription: string;\ninputSchema: {",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 41
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 58
        },
        {
          "path": "dist/tools/extract-template.d.ts",
          "line": 38
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 68
        }
      ]
    },
    {
      "snippet": "export declare const mcpToolDefinition: {\nname: string;\ndescription: string;\ninputSchema: {\ntype: string;",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.d.ts",
          "line": 42
        },
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 59
        },
        {
          "path": "dist/tools/extract-template.d.ts",
          "line": 39
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 69
        }
      ]
    },
    {
      "snippet": "return result;\n};\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mcpToolDefinition = void 0;",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 32
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 40
        },
        {
          "path": "dist/tools/extract-template.js",
          "line": 38
        }
      ]
    },
    {
      "snippet": "try {\n// Validate input\nif (!args.missionDirectory) {\nthrow new Error('missionDirectory is required');\n}",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 52
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 46
        }
      ]
    },
    {
      "snippet": "// Return result\nreturn {\ntotalMissions: missionFiles.length,\nisValid: validationResult.isValid,\nisDAG: validationResult.isDAG,",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 87
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 92
        }
      ]
    },
    {
      "snippet": "return {\ntotalMissions: missionFiles.length,\nisValid: validationResult.isValid,\nisDAG: validationResult.isDAG,\nhasCycles: analysisResult.hasCycles,",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 88
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 93
        }
      ]
    },
    {
      "snippet": "totalMissions: missionFiles.length,\nisValid: validationResult.isValid,\nisDAG: validationResult.isDAG,\nhasCycles: analysisResult.hasCycles,\ncycles: analysisResult.cycles,",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 89
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 94
        }
      ]
    },
    {
      "snippet": "isValid: validationResult.isValid,\nisDAG: validationResult.isDAG,\nhasCycles: analysisResult.hasCycles,\ncycles: analysisResult.cycles,\nexecutionOrder: analysisResult.executionOrder,",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 90
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 95
        }
      ]
    },
    {
      "snippet": "isDAG: validationResult.isDAG,\nhasCycles: analysisResult.hasCycles,\ncycles: analysisResult.cycles,\nexecutionOrder: analysisResult.executionOrder,\ncriticalPath: analysisResult.criticalPath,",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 91
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 96
        }
      ]
    },
    {
      "snippet": "hasCycles: analysisResult.hasCycles,\ncycles: analysisResult.cycles,\nexecutionOrder: analysisResult.executionOrder,\ncriticalPath: analysisResult.criticalPath,\ninferredDependencies: inferredDependencies",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 92
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 97
        }
      ]
    },
    {
      "snippet": "cycles: analysisResult.cycles,\nexecutionOrder: analysisResult.executionOrder,\ncriticalPath: analysisResult.criticalPath,\ninferredDependencies: inferredDependencies?.map(dep => ({\nfrom: dep.from,",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 93
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 98
        }
      ]
    },
    {
      "snippet": "executionOrder: analysisResult.executionOrder,\ncriticalPath: analysisResult.criticalPath,\ninferredDependencies: inferredDependencies?.map(dep => ({\nfrom: dep.from,\nto: dep.to,",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 94
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 99
        }
      ]
    },
    {
      "snippet": "criticalPath: analysisResult.criticalPath,\ninferredDependencies: inferredDependencies?.map(dep => ({\nfrom: dep.from,\nto: dep.to,\nconfidence: dep.confidence,",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 95
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 100
        }
      ]
    },
    {
      "snippet": "inferredDependencies: inferredDependencies?.map(dep => ({\nfrom: dep.from,\nto: dep.to,\nconfidence: dep.confidence,\nreason: dep.reason",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 96
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 101
        }
      ]
    },
    {
      "snippet": "from: dep.from,\nto: dep.to,\nconfidence: dep.confidence,\nreason: dep.reason\n})),",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 97
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 102
        }
      ]
    },
    {
      "snippet": "to: dep.to,\nconfidence: dep.confidence,\nreason: dep.reason\n})),\nerrors: validationResult.errors,",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 98
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 103
        }
      ]
    },
    {
      "snippet": "confidence: dep.confidence,\nreason: dep.reason\n})),\nerrors: validationResult.errors,\nwarnings: validationResult.warnings,",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 99
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 104
        }
      ]
    },
    {
      "snippet": "reason: dep.reason\n})),\nerrors: validationResult.errors,\nwarnings: validationResult.warnings,\nperformanceMs",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 100
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 105
        }
      ]
    },
    {
      "snippet": "})),\nerrors: validationResult.errors,\nwarnings: validationResult.warnings,\nperformanceMs\n};",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 101
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 106
        }
      ]
    },
    {
      "snippet": "const performanceMs = Date.now() - startTime;\nreturn {\ntotalMissions: 0,\nisValid: false,\nisDAG: false,",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 108
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 112
        }
      ]
    },
    {
      "snippet": "return {\ntotalMissions: 0,\nisValid: false,\nisDAG: false,\nhasCycles: false,",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 109
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 113
        }
      ]
    },
    {
      "snippet": "totalMissions: 0,\nisValid: false,\nisDAG: false,\nhasCycles: false,\nerrors: [error.message],",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 110
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 114
        }
      ]
    },
    {
      "snippet": "isValid: false,\nisDAG: false,\nhasCycles: false,\nerrors: [error.message],\nwarnings: [],",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 111
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 115
        }
      ]
    },
    {
      "snippet": "isDAG: false,\nhasCycles: false,\nerrors: [error.message],\nwarnings: [],\nperformanceMs",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 112
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 116
        }
      ]
    },
    {
      "snippet": "hasCycles: false,\nerrors: [error.message],\nwarnings: [],\nperformanceMs\n};",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 113
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 117
        }
      ]
    },
    {
      "snippet": "errors: [error.message],\nwarnings: [],\nperformanceMs\n};\n}",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 114
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 118
        }
      ]
    },
    {
      "snippet": "warnings: [],\nperformanceMs\n};\n}\n}",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 115
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 119
        }
      ]
    },
    {
      "snippet": "if (entry.isDirectory()) {\n// Skip node_modules, .git, etc.\nif (!entry.name.startsWith('.') && entry.name !== 'node_modules') {\nawait traverse(fullPath);\n}",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 129
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 137
        }
      ]
    },
    {
      "snippet": "// Check if it's a YAML mission file\nif (entry.name.endsWith('.yaml') || entry.name.endsWith('.yml')) {\nmissionFiles.push(fullPath);\n}\n}",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 136
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 143
        }
      ]
    },
    {
      "snippet": "if (entry.name.endsWith('.yaml') || entry.name.endsWith('.yml')) {\nmissionFiles.push(fullPath);\n}\n}\n}",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 137
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 144
        }
      ]
    },
    {
      "snippet": "missionFiles.push(fullPath);\n}\n}\n}\n}",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 138
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 145
        }
      ]
    },
    {
      "snippet": "lines.push('=== Dependency Analysis Report ===\\n');\nlines.push(`Total Missions: ${result.totalMissions}`);\nlines.push(`Analysis Time: ${result.performanceMs}ms`);\nlines.push(`Valid: ${result.isValid ?",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 172
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 185
        }
      ]
    },
    {
      "snippet": "lines.push(`Total Missions: ${result.totalMissions}`);\nlines.push(`Analysis Time: ${result.performanceMs}ms`);\nlines.push(`Valid: ${result.isValid ? 'Yes' : 'No'}`);\nlines.push(`Is DAG: ${result.isDAG",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 173
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 186
        }
      ]
    },
    {
      "snippet": "if (result.errors.length > 0) {\nlines.push('Errors:');\nresult.errors.forEach(err => lines.push(`  - ${err}`));\nlines.push('');\n}",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 178
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 192
        }
      ]
    },
    {
      "snippet": "if (result.warnings.length > 0) {\nlines.push('Warnings:');\nresult.warnings.forEach(warn => lines.push(`  - ${warn}`));\nlines.push('');\n}",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 183
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 198
        }
      ]
    },
    {
      "snippet": "if (result.cycles && result.cycles.length > 0) {\nlines.push('Circular Dependencies Detected:');\nresult.cycles.forEach((cycle, i) => {\nlines.push(`  ${i + 1}. ${cycle.join(' -> ')}`);\n});",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 188
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 204
        }
      ]
    },
    {
      "snippet": "lines.push('Circular Dependencies Detected:');\nresult.cycles.forEach((cycle, i) => {\nlines.push(`  ${i + 1}. ${cycle.join(' -> ')}`);\n});\nlines.push('');",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 189
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 205
        }
      ]
    },
    {
      "snippet": "result.cycles.forEach((cycle, i) => {\nlines.push(`  ${i + 1}. ${cycle.join(' -> ')}`);\n});\nlines.push('');\n}",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 190
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 206
        }
      ]
    },
    {
      "snippet": "if (result.executionOrder) {\nlines.push('Execution Order:');\nresult.executionOrder.forEach((mission, i) => {\nlines.push(`  ${i + 1}. ${mission}`);\n});",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 195
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 212
        }
      ]
    },
    {
      "snippet": "lines.push('Execution Order:');\nresult.executionOrder.forEach((mission, i) => {\nlines.push(`  ${i + 1}. ${mission}`);\n});\nlines.push('');",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 196
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 213
        }
      ]
    },
    {
      "snippet": "result.executionOrder.forEach((mission, i) => {\nlines.push(`  ${i + 1}. ${mission}`);\n});\nlines.push('');\n}",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 197
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 214
        }
      ]
    },
    {
      "snippet": "if (result.criticalPath && result.criticalPath.length > 0) {\nlines.push('Critical Path:');\nlines.push(`  ${result.criticalPath.join(' -> ')}`);\nlines.push('');\n}",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 202
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 220
        }
      ]
    },
    {
      "snippet": "if (result.inferredDependencies && result.inferredDependencies.length > 0) {\nlines.push('Inferred Dependencies:');\nresult.inferredDependencies.forEach(dep => {\nlines.push(`  ${dep.from} -> ${dep.to} (",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 207
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 226
        }
      ]
    },
    {
      "snippet": "lines.push('Inferred Dependencies:');\nresult.inferredDependencies.forEach(dep => {\nlines.push(`  ${dep.from} -> ${dep.to} (confidence: ${(dep.confidence * 100).toFixed(0)}%)`);\nlines.push(`    Reason:",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 208
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 227
        }
      ]
    },
    {
      "snippet": "result.inferredDependencies.forEach(dep => {\nlines.push(`  ${dep.from} -> ${dep.to} (confidence: ${(dep.confidence * 100).toFixed(0)}%)`);\nlines.push(`    Reason: ${dep.reason}`);\n});\nlines.push('');",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 209
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 228
        }
      ]
    },
    {
      "snippet": "lines.push(`  ${dep.from} -> ${dep.to} (confidence: ${(dep.confidence * 100).toFixed(0)}%)`);\nlines.push(`    Reason: ${dep.reason}`);\n});\nlines.push('');\n}",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 210
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 229
        }
      ]
    },
    {
      "snippet": "inputSchema: {\ntype: 'object',\nproperties: {\nmissionDirectory: { type: 'string', description: 'Directory containing mission YAML files' },\nincludeInferred: { type: 'boolean', description: 'Include NLP",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 223
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 245
        }
      ]
    },
    {
      "snippet": "type: 'object',\nproperties: {\nmissionDirectory: { type: 'string', description: 'Directory containing mission YAML files' },\nincludeInferred: { type: 'boolean', description: 'Include NLP-based inferred",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 224
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 246
        }
      ]
    },
    {
      "snippet": "properties: {\nmissionDirectory: { type: 'string', description: 'Directory containing mission YAML files' },\nincludeInferred: { type: 'boolean', description: 'Include NLP-based inferred dependencies' }",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 225
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 247
        }
      ]
    },
    {
      "snippet": "missionDirectory: { type: 'string', description: 'Directory containing mission YAML files' },\nincludeInferred: { type: 'boolean', description: 'Include NLP-based inferred dependencies' },\nminConfidenc",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 226
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 248
        }
      ]
    },
    {
      "snippet": "includeInferred: { type: 'boolean', description: 'Include NLP-based inferred dependencies' },\nminConfidence: { type: 'number', minimum: 0, maximum: 1, description: 'Minimum confidence for inferred dep",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 227
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 249
        }
      ]
    },
    {
      "snippet": "minConfidence: { type: 'number', minimum: 0, maximum: 1, description: 'Minimum confidence for inferred dependencies' },\n},\nrequired: ['missionDirectory'],\nadditionalProperties: false,\n},",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 228
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 250
        }
      ]
    },
    {
      "snippet": "},\nrequired: ['missionDirectory'],\nadditionalProperties: false,\n},\n};",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 229
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 251
        }
      ]
    },
    {
      "snippet": "const result = await analyzeDependencies({\nmissionDirectory: params.missionDirectory,\nincludeInferred: params.includeInferred,\nminConfidence: params.minConfidence,\n});",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 238
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 261
        }
      ]
    },
    {
      "snippet": "missionDirectory: params.missionDirectory,\nincludeInferred: params.includeInferred,\nminConfidence: params.minConfidence,\n});\nreturn formatAnalysisResult(result);",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 239
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 262
        }
      ]
    },
    {
      "snippet": "includeInferred: params.includeInferred,\nminConfidence: params.minConfidence,\n});\nreturn formatAnalysisResult(result);\n}",
      "occurrences": [
        {
          "path": "dist/tools/analyze-dependencies.js",
          "line": 240
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 263
        }
      ]
    },
    {
      "snippet": "/**\n* combine_packs MCP Tool\n*\n* Combines multiple domain packs into a single cohesive pack with\n* dependency resolution and merge strategy support.",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 1
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 2
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 1
        }
      ]
    },
    {
      "snippet": "* combine_packs MCP Tool\n*\n* Combines multiple domain packs into a single cohesive pack with\n* dependency resolution and merge strategy support.\n*",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 2
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 3
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 2
        }
      ]
    },
    {
      "snippet": "*\n* Combines multiple domain packs into a single cohesive pack with\n* dependency resolution and merge strategy support.\n*\n* Algorithm:",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 3
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 4
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 3
        }
      ]
    },
    {
      "snippet": "* Combines multiple domain packs into a single cohesive pack with\n* dependency resolution and merge strategy support.\n*\n* Algorithm:\n* 1. Validate input pack names",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 4
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 5
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 4
        }
      ]
    },
    {
      "snippet": "* dependency resolution and merge strategy support.\n*\n* Algorithm:\n* 1. Validate input pack names\n* 2. Load packs from registry",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 5
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 6
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 5
        }
      ]
    },
    {
      "snippet": "*\n* Algorithm:\n* 1. Validate input pack names\n* 2. Load packs from registry\n* 3. Resolve dependencies",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 6
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 7
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 6
        }
      ]
    },
    {
      "snippet": "* Algorithm:\n* 1. Validate input pack names\n* 2. Load packs from registry\n* 3. Resolve dependencies\n* 4. Combine using specified strategy",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 7
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 8
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 7
        }
      ]
    },
    {
      "snippet": "* 1. Validate input pack names\n* 2. Load packs from registry\n* 3. Resolve dependencies\n* 4. Combine using specified strategy\n* 5. Return combined pack as YAML",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 8
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 9
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 8
        }
      ]
    },
    {
      "snippet": "* 2. Load packs from registry\n* 3. Resolve dependencies\n* 4. Combine using specified strategy\n* 5. Return combined pack as YAML\n*",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 9
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 10
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 9
        }
      ]
    },
    {
      "snippet": "* 3. Resolve dependencies\n* 4. Combine using specified strategy\n* 5. Return combined pack as YAML\n*\n* @module tools/combine-packs",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 10
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 11
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 10
        }
      ]
    },
    {
      "snippet": "* 4. Combine using specified strategy\n* 5. Return combined pack as YAML\n*\n* @module tools/combine-packs\n*/",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 11
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 12
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 11
        }
      ]
    },
    {
      "snippet": "import { SecureYAMLLoader } from '../loaders/yaml-loader';\nimport { RegistryParser } from '../registry/registry-parser';\nimport { DomainPackLoader } from '../domains/domain-pack-loader';\nimport { Pack",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 16
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 19
        }
      ]
    },
    {
      "snippet": "/**\n* Parameters for combine_packs tool\n*/\nexport interface CombinePacksParams {\n/** Array of pack names to combine (required) */",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 21
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 26
        }
      ]
    },
    {
      "snippet": "* Parameters for combine_packs tool\n*/\nexport interface CombinePacksParams {\n/** Array of pack names to combine (required) */\npackNames: string[];",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 22
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 27
        }
      ]
    },
    {
      "snippet": "};\n};\n};\n};\n/**",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 86
        },
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 67
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 67
        },
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 89
        },
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 80
        }
      ]
    },
    {
      "snippet": "};\n/**\n* CombinePacksToolImpl\n*\n* Main implementation class for pack combination",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 89
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 103
        }
      ]
    },
    {
      "snippet": "/**\n* CombinePacksToolImpl\n*\n* Main implementation class for pack combination\n*/",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 90
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 104
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 100
        }
      ]
    },
    {
      "snippet": "/**\n* Execute the combine_packs tool\n*\n* @param params - Tool parameters\n* @param registryPath - Path to domain pack registry",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 101
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 116
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 123
        }
      ]
    },
    {
      "snippet": "* Execute the combine_packs tool\n*\n* @param params - Tool parameters\n* @param registryPath - Path to domain pack registry\n* @returns Combined pack as formatted string with metadata",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 102
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 117
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 124
        }
      ]
    },
    {
      "snippet": "*\n* @param params - Tool parameters\n* @param registryPath - Path to domain pack registry\n* @returns Combined pack as formatted string with metadata\n*/",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 103
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 118
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 125
        }
      ]
    },
    {
      "snippet": "success: boolean;\ncombinedPack?: string;\nloadOrder?: string[];\nerrors?: string[];\nwarnings?: string[];",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 109
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 134
        }
      ]
    },
    {
      "snippet": "/**\n* Preview pack combination without executing\n*\n* @param params - Tool parameters\n* @param registryPath - Path to domain pack registry",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 115
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 187
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 215
        }
      ]
    },
    {
      "snippet": "* Preview pack combination without executing\n*\n* @param params - Tool parameters\n* @param registryPath - Path to domain pack registry\n* @returns Preview information",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 116
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 188
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 216
        }
      ]
    },
    {
      "snippet": "*\n* @param params - Tool parameters\n* @param registryPath - Path to domain pack registry\n* @returns Preview information\n*/",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 117
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 189
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 217
        }
      ]
    },
    {
      "snippet": "success: boolean;\nloadOrder?: string[];\ndependencies?: string[];\nwarnings?: string[];\nerrors?: string[];",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.d.ts",
          "line": 123
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 226
        }
      ]
    },
    {
      "snippet": "'detects circular dependencies, and applies the specified merge strategy. Use this tool when you need ' +\n'to create a mission that uses functionality from multiple domain packs.',\ninputSchema: {\ntype",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 62
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 56
        }
      ]
    },
    {
      "snippet": "'to create a mission that uses functionality from multiple domain packs.',\ninputSchema: {\ntype: 'object',\nrequired: ['packNames'],\nproperties: {",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 63
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 57
        }
      ]
    },
    {
      "snippet": "inputSchema: {\ntype: 'object',\nrequired: ['packNames'],\nproperties: {\npackNames: {",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 64
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 58
        }
      ]
    },
    {
      "snippet": "type: 'object',\nrequired: ['packNames'],\nproperties: {\npackNames: {\ntype: 'array',",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 65
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 59
        }
      ]
    },
    {
      "snippet": "required: ['packNames'],\nproperties: {\npackNames: {\ntype: 'array',\nitems: { type: 'string' },",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 66
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 60
        }
      ]
    },
    {
      "snippet": "properties: {\npackNames: {\ntype: 'array',\nitems: { type: 'string' },\nminItems: 1,",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 67
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 61
        }
      ]
    },
    {
      "snippet": "packNames: {\ntype: 'array',\nitems: { type: 'string' },\nminItems: 1,\ndescription: 'Array of domain pack names to combine (use list_available_domains to see options)',",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 68
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 62
        }
      ]
    },
    {
      "snippet": "type: 'array',\nitems: { type: 'string' },\nminItems: 1,\ndescription: 'Array of domain pack names to combine (use list_available_domains to see options)',\n},",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 69
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 63
        }
      ]
    },
    {
      "snippet": "items: { type: 'string' },\nminItems: 1,\ndescription: 'Array of domain pack names to combine (use list_available_domains to see options)',\n},\nstrategy: {",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 70
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 64
        }
      ]
    },
    {
      "snippet": "minItems: 1,\ndescription: 'Array of domain pack names to combine (use list_available_domains to see options)',\n},\nstrategy: {\ntype: 'string',",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 71
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 65
        }
      ]
    },
    {
      "snippet": "description: 'Array of domain pack names to combine (use list_available_domains to see options)',\n},\nstrategy: {\ntype: 'string',\nenum: ['deep-merge', 'override', 'selective'],",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 72
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 66
        }
      ]
    },
    {
      "snippet": "},\nstrategy: {\ntype: 'string',\nenum: ['deep-merge', 'override', 'selective'],\ndefault: 'deep-merge',",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 73
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 67
        }
      ]
    },
    {
      "snippet": "},\noverridePaths: {\ntype: 'array',\nitems: { type: 'string' },\ndescription: 'For selective strategy: field paths to override (e.g., [\"spec.resources\"])',",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 79
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 74
        }
      ]
    },
    {
      "snippet": "overridePaths: {\ntype: 'array',\nitems: { type: 'string' },\ndescription: 'For selective strategy: field paths to override (e.g., [\"spec.resources\"])',\n},",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 80
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 75
        }
      ]
    },
    {
      "snippet": "type: 'array',\nitems: { type: 'string' },\ndescription: 'For selective strategy: field paths to override (e.g., [\"spec.resources\"])',\n},\nmergePaths: {",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 81
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 76
        }
      ]
    },
    {
      "snippet": "items: { type: 'string' },\ndescription: 'For selective strategy: field paths to override (e.g., [\"spec.resources\"])',\n},\nmergePaths: {\ntype: 'array',",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 82
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 77
        }
      ]
    },
    {
      "snippet": "description: 'For selective strategy: field paths to override (e.g., [\"spec.resources\"])',\n},\nmergePaths: {\ntype: 'array',\nitems: { type: 'string' },",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 83
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 78
        }
      ]
    },
    {
      "snippet": "},\nmergePaths: {\ntype: 'array',\nitems: { type: 'string' },\ndescription: 'For selective strategy: field paths to merge (e.g., [\"spec.dependencies\"])',",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 84
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 79
        }
      ]
    },
    {
      "snippet": "mergePaths: {\ntype: 'array',\nitems: { type: 'string' },\ndescription: 'For selective strategy: field paths to merge (e.g., [\"spec.dependencies\"])',\n},",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 85
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 80
        }
      ]
    },
    {
      "snippet": "type: 'array',\nitems: { type: 'string' },\ndescription: 'For selective strategy: field paths to merge (e.g., [\"spec.dependencies\"])',\n},\nresolveDependencies: {",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 86
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 81
        }
      ]
    },
    {
      "snippet": "items: { type: 'string' },\ndescription: 'For selective strategy: field paths to merge (e.g., [\"spec.dependencies\"])',\n},\nresolveDependencies: {\ntype: 'boolean',",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 87
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 82
        }
      ]
    },
    {
      "snippet": "description: 'For selective strategy: field paths to merge (e.g., [\"spec.dependencies\"])',\n},\nresolveDependencies: {\ntype: 'boolean',\ndefault: true,",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 88
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 83
        }
      ]
    },
    {
      "snippet": "},\nresolveDependencies: {\ntype: 'boolean',\ndefault: true,\ndescription: 'Whether to automatically resolve and include dependencies',",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 89
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 84
        }
      ]
    },
    {
      "snippet": "resolveDependencies: {\ntype: 'boolean',\ndefault: true,\ndescription: 'Whether to automatically resolve and include dependencies',\n},",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 90
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 85
        }
      ]
    },
    {
      "snippet": "type: 'boolean',\ndefault: true,\ndescription: 'Whether to automatically resolve and include dependencies',\n},\nformat: {",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 91
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 86
        }
      ]
    },
    {
      "snippet": "default: true,\ndescription: 'Whether to automatically resolve and include dependencies',\n},\nformat: {\ntype: 'string',",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 92
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 87
        }
      ]
    },
    {
      "snippet": "description: 'Whether to automatically resolve and include dependencies',\n},\nformat: {\ntype: 'string',\nenum: ['yaml', 'json'],",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 93
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 88
        }
      ]
    },
    {
      "snippet": "},\nformat: {\ntype: 'string',\nenum: ['yaml', 'json'],\ndefault: 'yaml',",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 94
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 89
        }
      ]
    },
    {
      "snippet": "format: {\ntype: 'string',\nenum: ['yaml', 'json'],\ndefault: 'yaml',\ndescription: 'Output format for the combined pack',",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 95
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 90
        }
      ]
    },
    {
      "snippet": "type: 'string',\nenum: ['yaml', 'json'],\ndefault: 'yaml',\ndescription: 'Output format for the combined pack',\n},",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 96
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 91
        }
      ]
    },
    {
      "snippet": "enum: ['yaml', 'json'],\ndefault: 'yaml',\ndescription: 'Output format for the combined pack',\n},\n},",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 97
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 92
        }
      ]
    },
    {
      "snippet": "default: 'yaml',\ndescription: 'Output format for the combined pack',\n},\n},\n},",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 98
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 93
        }
      ]
    },
    {
      "snippet": "this.packLoader = packLoader;\nthis.combiner = combiner;\nthis.registry = registry;\nthis.loader = loader;\n}",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 111
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 117
        }
      ]
    },
    {
      "snippet": "try {\n// Step 1: Validate inputs\nif (!params.packNames || params.packNames.length === 0) {\nreturn {\nsuccess: false,",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 124
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 140
        }
      ]
    },
    {
      "snippet": "// Step 1: Validate inputs\nif (!params.packNames || params.packNames.length === 0) {\nreturn {\nsuccess: false,\nerrors: ['At least one pack name is required'],",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 125
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 141
        }
      ]
    },
    {
      "snippet": "if (!params.packNames || params.packNames.length === 0) {\nreturn {\nsuccess: false,\nerrors: ['At least one pack name is required'],\n};",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 126
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 142
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: false,\nerrors: ['At least one pack name is required'],\n};\n}",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 127
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 143
        }
      ]
    },
    {
      "snippet": "if (params.strategy === 'selective') {\nif (!params.overridePaths && !params.mergePaths) {\nreturn {\nsuccess: false,\nerrors: [",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 132
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 149
        }
      ]
    },
    {
      "snippet": "if (!params.overridePaths && !params.mergePaths) {\nreturn {\nsuccess: false,\nerrors: [\n'Selective strategy requires at least one of overridePaths or mergePaths',",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 133
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 150
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: false,\nerrors: [\n'Selective strategy requires at least one of overridePaths or mergePaths',\n],",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 134
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 151
        }
      ]
    },
    {
      "snippet": "success: false,\nerrors: [\n'Selective strategy requires at least one of overridePaths or mergePaths',\n],\n};",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 135
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 152
        }
      ]
    },
    {
      "snippet": "errors: [\n'Selective strategy requires at least one of overridePaths or mergePaths',\n],\n};\n}",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 136
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 153
        }
      ]
    },
    {
      "snippet": "'Selective strategy requires at least one of overridePaths or mergePaths',\n],\n};\n}\n}",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 137
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 154
        }
      ]
    },
    {
      "snippet": "// Step 5: Combine packs\nconst result = this.combiner.combine(requestedPacks, availablePacks, {\nstrategy: params.strategy || 'deep-merge',\noverridePaths: params.overridePaths,\nmergePaths: params.merge",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 148
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 173
        }
      ]
    },
    {
      "snippet": "const result = this.combiner.combine(requestedPacks, availablePacks, {\nstrategy: params.strategy || 'deep-merge',\noverridePaths: params.overridePaths,\nmergePaths: params.mergePaths,\nresolveDependencie",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 149
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 174
        }
      ]
    },
    {
      "snippet": "strategy: params.strategy || 'deep-merge',\noverridePaths: params.overridePaths,\nmergePaths: params.mergePaths,\nresolveDependencies: params.resolveDependencies ?? true,\nvalidate: true,",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 150
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 175
        }
      ]
    },
    {
      "snippet": "overridePaths: params.overridePaths,\nmergePaths: params.mergePaths,\nresolveDependencies: params.resolveDependencies ?? true,\nvalidate: true,\n});",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 151
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 176
        }
      ]
    },
    {
      "snippet": "if (!result.success || !result.combinedPack) {\nreturn {\nsuccess: false,\nerrors: result.errors,\nwarnings: result.warnings,",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 156
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 182
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: false,\nerrors: result.errors,\nwarnings: result.warnings,\n};",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 157
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 183
        }
      ]
    },
    {
      "snippet": "success: false,\nerrors: result.errors,\nwarnings: result.warnings,\n};\n}",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 158
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 184
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: true,\ncombinedPack: combinedPackStr,\nloadOrder: result.dependencyResolution?.loadOrder || [],\nerrors: result.errors,",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 166
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 194
        }
      ]
    },
    {
      "snippet": "success: true,\ncombinedPack: combinedPackStr,\nloadOrder: result.dependencyResolution?.loadOrder || [],\nerrors: result.errors,\nwarnings: result.warnings,",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 167
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 195
        }
      ]
    },
    {
      "snippet": "combinedPack: combinedPackStr,\nloadOrder: result.dependencyResolution?.loadOrder || [],\nerrors: result.errors,\nwarnings: result.warnings,\n};",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 168
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 196
        }
      ]
    },
    {
      "snippet": "};\n}\ncatch (error) {\nif (error instanceof Error) {\nreturn {",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 172
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 211
        }
      ]
    },
    {
      "snippet": "}\ncatch (error) {\nif (error instanceof Error) {\nreturn {\nsuccess: false,",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 173
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 212
        }
      ]
    },
    {
      "snippet": "catch (error) {\nif (error instanceof Error) {\nreturn {\nsuccess: false,\nerrors: [error.message],",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 174
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 213
        }
      ]
    },
    {
      "snippet": "if (error instanceof Error) {\nreturn {\nsuccess: false,\nerrors: [error.message],\n};",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 175
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 214
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 202
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 260
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: false,\nerrors: [error.message],\n};\n}",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 176
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 215
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 203
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 261
        }
      ]
    },
    {
      "snippet": "success: false,\nerrors: [error.message],\n};\n}\nreturn {",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 177
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 216
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 204
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 262
        }
      ]
    },
    {
      "snippet": "errors: [error.message],\n};\n}\nreturn {\nsuccess: false,",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 178
        },
        {
          "path": "dist/tools/combine-packs.js",
          "line": 217
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 205
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 263
        }
      ]
    },
    {
      "snippet": "};\n}\nreturn {\nsuccess: false,\nerrors: ['Unknown error occurred during pack combination'],",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 179
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 206
        }
      ]
    },
    {
      "snippet": "}\nreturn {\nsuccess: false,\nerrors: ['Unknown error occurred during pack combination'],\n};",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 180
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 207
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: false,\nerrors: ['Unknown error occurred during pack combination'],\n};\n}",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 181
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 208
        }
      ]
    },
    {
      "snippet": "success: false,\nerrors: ['Unknown error occurred during pack combination'],\n};\n}\n}",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 182
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 209
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: preview.warnings.length === 0,\nloadOrder: preview.loadOrder,\ndependencies: preview.dependencies.loadOrder,\nwarnings: preview.warnings,",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 205
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 252
        }
      ]
    },
    {
      "snippet": "success: preview.warnings.length === 0,\nloadOrder: preview.loadOrder,\ndependencies: preview.dependencies.loadOrder,\nwarnings: preview.warnings,\nerrors: [],",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 206
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 253
        }
      ]
    },
    {
      "snippet": "loadOrder: preview.loadOrder,\ndependencies: preview.dependencies.loadOrder,\nwarnings: preview.warnings,\nerrors: [],\n};",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 207
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 254
        }
      ]
    },
    {
      "snippet": "};\n}\nreturn {\nsuccess: false,\nerrors: ['Unknown error occurred during preview'],",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 218
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 264
        }
      ]
    },
    {
      "snippet": "}\nreturn {\nsuccess: false,\nerrors: ['Unknown error occurred during preview'],\n};",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 219
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 265
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: false,\nerrors: ['Unknown error occurred during preview'],\n};\n}",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 220
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 266
        }
      ]
    },
    {
      "snippet": "success: false,\nerrors: ['Unknown error occurred during preview'],\n};\n}\n}",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 221
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 267
        }
      ]
    },
    {
      "snippet": "// YAML format (default)\nconst doc = new YAML.Document(combinedPack);\nreturn doc.toString();\n}\n}",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 233
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 284
        }
      ]
    },
    {
      "snippet": "if (result.loadOrder && result.loadOrder.length > 0) {\nresponse += `Load order (dependency-resolved):\\n`;\nresult.loadOrder.forEach((name, i) => {\nresponse += `  ${i + 1}. ${name}\\n`;\n});",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 258
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 323
        }
      ]
    },
    {
      "snippet": "response += `Load order (dependency-resolved):\\n`;\nresult.loadOrder.forEach((name, i) => {\nresponse += `  ${i + 1}. ${name}\\n`;\n});\nresponse += '\\n';",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 259
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 324
        }
      ]
    },
    {
      "snippet": "result.loadOrder.forEach((name, i) => {\nresponse += `  ${i + 1}. ${name}\\n`;\n});\nresponse += '\\n';\n}",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 260
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 325
        }
      ]
    },
    {
      "snippet": "if (result.warnings && result.warnings.length > 0) {\nresponse += `Warnings:\\n`;\nresult.warnings.forEach(w => {\nresponse += `  \u26a0 ${w}\\n`;\n});",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 265
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 331
        }
      ]
    },
    {
      "snippet": "response += `Warnings:\\n`;\nresult.warnings.forEach(w => {\nresponse += `  \u26a0 ${w}\\n`;\n});\nresponse += '\\n';",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 266
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 332
        }
      ]
    },
    {
      "snippet": "result.warnings.forEach(w => {\nresponse += `  \u26a0 ${w}\\n`;\n});\nresponse += '\\n';\n}",
      "occurrences": [
        {
          "path": "dist/tools/combine-packs.js",
          "line": 267
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 333
        }
      ]
    },
    {
      "snippet": "/**\n* create_mission MCP Tool\n*\n* Creates a new mission by combining generic template with optional domain-specific fields.\n* Returns validated mission YAML ready for execution.",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 1
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 2
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 1
        }
      ]
    },
    {
      "snippet": "* create_mission MCP Tool\n*\n* Creates a new mission by combining generic template with optional domain-specific fields.\n* Returns validated mission YAML ready for execution.\n*",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 2
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 3
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 2
        }
      ]
    },
    {
      "snippet": "*\n* Creates a new mission by combining generic template with optional domain-specific fields.\n* Returns validated mission YAML ready for execution.\n*\n* Algorithm:",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 3
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 4
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 3
        }
      ]
    },
    {
      "snippet": "* Creates a new mission by combining generic template with optional domain-specific fields.\n* Returns validated mission YAML ready for execution.\n*\n* Algorithm:\n* 1. Load generic mission template",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 4
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 5
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 4
        }
      ]
    },
    {
      "snippet": "* Returns validated mission YAML ready for execution.\n*\n* Algorithm:\n* 1. Load generic mission template\n* 2. Generate unique mission ID",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 5
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 6
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 5
        }
      ]
    },
    {
      "snippet": "*\n* Algorithm:\n* 1. Load generic mission template\n* 2. Generate unique mission ID\n* 3. Populate core fields from params",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 6
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 7
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 6
        }
      ]
    },
    {
      "snippet": "* Algorithm:\n* 1. Load generic mission template\n* 2. Generate unique mission ID\n* 3. Populate core fields from params\n* 4. If domain specified, load and merge domainFields",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 7
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 8
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 7
        }
      ]
    },
    {
      "snippet": "* 1. Load generic mission template\n* 2. Generate unique mission ID\n* 3. Populate core fields from params\n* 4. If domain specified, load and merge domainFields\n* 5. Validate final mission against schem",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 8
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 9
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 8
        }
      ]
    },
    {
      "snippet": "* 2. Generate unique mission ID\n* 3. Populate core fields from params\n* 4. If domain specified, load and merge domainFields\n* 5. Validate final mission against schema\n* 6. Return YAML string",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 9
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 10
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 9
        }
      ]
    },
    {
      "snippet": "* 3. Populate core fields from params\n* 4. If domain specified, load and merge domainFields\n* 5. Validate final mission against schema\n* 6. Return YAML string\n*",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 10
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 11
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 10
        }
      ]
    },
    {
      "snippet": "* 4. If domain specified, load and merge domainFields\n* 5. Validate final mission against schema\n* 6. Return YAML string\n*\n* @module tools/create-mission",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 11
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 12
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 11
        }
      ]
    },
    {
      "snippet": "* 5. Validate final mission against schema\n* 6. Return YAML string\n*\n* @module tools/create-mission\n* @version 1.0",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 12
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 13
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 12
        }
      ]
    },
    {
      "snippet": "* 6. Return YAML string\n*\n* @module tools/create-mission\n* @version 1.0\n*/",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 13
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 14
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 13
        }
      ]
    },
    {
      "snippet": "/**\n* Parameters for create_mission tool\n*/\nexport interface CreateMissionParams {\n/** Clear, concise mission objective (required) */",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 23
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 29
        }
      ]
    },
    {
      "snippet": "* Parameters for create_mission tool\n*/\nexport interface CreateMissionParams {\n/** Clear, concise mission objective (required) */\nobjective: string;",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 24
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 30
        }
      ]
    },
    {
      "snippet": "};\n/**\n* CreateMissionToolImpl\n*\n* Main implementation class for mission creation",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 70
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 90
        }
      ]
    },
    {
      "snippet": "/**\n* CreateMissionToolImpl\n*\n* Main implementation class for mission creation\n*/",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 71
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 91
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 78
        }
      ]
    },
    {
      "snippet": "/**\n* Execute mission creation\n*\n* @param params - Mission creation parameters\n* @param registryEntries - Available domain pack entries",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 83
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 104
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 103
        }
      ]
    },
    {
      "snippet": "* Execute mission creation\n*\n* @param params - Mission creation parameters\n* @param registryEntries - Available domain pack entries\n* @returns YAML string of the created mission",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 84
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 105
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 104
        }
      ]
    },
    {
      "snippet": "*\n* @param params - Mission creation parameters\n* @param registryEntries - Available domain pack entries\n* @returns YAML string of the created mission\n* @throws Error if validation fails or domain not",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 85
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 106
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 105
        }
      ]
    },
    {
      "snippet": "* @param params - Mission creation parameters\n* @param registryEntries - Available domain pack entries\n* @returns YAML string of the created mission\n* @throws Error if validation fails or domain not f",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 86
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 107
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 106
        }
      ]
    },
    {
      "snippet": "/**\n* Validate input parameters\n*\n* @param params - Parameters to validate\n* @throws Error if validation fails",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 92
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 130
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 136
        }
      ]
    },
    {
      "snippet": "* Validate input parameters\n*\n* @param params - Parameters to validate\n* @throws Error if validation fails\n*/",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 93
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 131
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 137
        }
      ]
    },
    {
      "snippet": "/**\n* Generate unique mission ID using timestamp and random suffix\n*\n* Format: mission-YYYYMMDD-HHmmss-rrr\n*",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 99
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 150
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 160
        }
      ]
    },
    {
      "snippet": "* Generate unique mission ID using timestamp and random suffix\n*\n* Format: mission-YYYYMMDD-HHmmss-rrr\n*\n* @returns Unique mission ID",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 100
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 151
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 161
        }
      ]
    },
    {
      "snippet": "*\n* Format: mission-YYYYMMDD-HHmmss-rrr\n*\n* @returns Unique mission ID\n*/",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 101
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 152
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 162
        }
      ]
    },
    {
      "snippet": "/**\n* Load generic mission template from templates directory\n*\n* @returns Generic mission template object\n* @throws Error if template cannot be loaded",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 107
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 169
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 182
        }
      ]
    },
    {
      "snippet": "* Load generic mission template from templates directory\n*\n* @returns Generic mission template object\n* @throws Error if template cannot be loaded\n*/",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 108
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 170
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 183
        }
      ]
    },
    {
      "snippet": "/**\n* Populate core fields from parameters\n*\n* @param template - Base generic template\n* @param params - User-provided parameters",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 114
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 192
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 207
        }
      ]
    },
    {
      "snippet": "* Populate core fields from parameters\n*\n* @param template - Base generic template\n* @param params - User-provided parameters\n* @param missionId - Generated mission ID",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 115
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 193
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 208
        }
      ]
    },
    {
      "snippet": "*\n* @param template - Base generic template\n* @param params - User-provided parameters\n* @param missionId - Generated mission ID\n* @returns Mission with populated core fields",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 116
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 194
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 209
        }
      ]
    },
    {
      "snippet": "* @param template - Base generic template\n* @param params - User-provided parameters\n* @param missionId - Generated mission ID\n* @returns Mission with populated core fields\n*/",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 117
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 195
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 210
        }
      ]
    },
    {
      "snippet": "/**\n* Merge mission with domain-specific fields\n*\n* @param mission - Base mission object\n* @param domainName - Name of domain pack to merge",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 123
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 219
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 240
        }
      ]
    },
    {
      "snippet": "* Merge mission with domain-specific fields\n*\n* @param mission - Base mission object\n* @param domainName - Name of domain pack to merge\n* @param registryEntries - Available registry entries",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 124
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 220
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 241
        }
      ]
    },
    {
      "snippet": "*\n* @param mission - Base mission object\n* @param domainName - Name of domain pack to merge\n* @param registryEntries - Available registry entries\n* @returns Mission with merged domain fields",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 125
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 221
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 242
        }
      ]
    },
    {
      "snippet": "* @param mission - Base mission object\n* @param domainName - Name of domain pack to merge\n* @param registryEntries - Available registry entries\n* @returns Mission with merged domain fields\n* @throws E",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 126
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 222
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 243
        }
      ]
    },
    {
      "snippet": "* @param domainName - Name of domain pack to merge\n* @param registryEntries - Available registry entries\n* @returns Mission with merged domain fields\n* @throws Error if domain not found or merge fails",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 127
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 223
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 244
        }
      ]
    },
    {
      "snippet": "/**\n* Validate mission against schema\n*\n* @param mission - Mission object to validate\n* @throws Error if validation fails",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 133
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 251
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 281
        }
      ]
    },
    {
      "snippet": "* Validate mission against schema\n*\n* @param mission - Mission object to validate\n* @throws Error if validation fails\n*/",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 134
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 252
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 282
        }
      ]
    },
    {
      "snippet": "/**\n* Convert mission object to YAML string\n*\n* @param mission - Mission object to serialize\n* @returns Formatted YAML string",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 140
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 282
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 319
        }
      ]
    },
    {
      "snippet": "* Convert mission object to YAML string\n*\n* @param mission - Mission object to serialize\n* @returns Formatted YAML string\n*/",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 141
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 283
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 320
        }
      ]
    },
    {
      "snippet": "/**\n* Format mission YAML for LLM consumption\n*\n* Adds helpful context and formatting for Claude to understand the output\n*",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 147
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 305
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 343
        }
      ]
    },
    {
      "snippet": "* Format mission YAML for LLM consumption\n*\n* Adds helpful context and formatting for Claude to understand the output\n*\n* @param yamlString - YAML string to format",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 148
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 306
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 344
        }
      ]
    },
    {
      "snippet": "*\n* Adds helpful context and formatting for Claude to understand the output\n*\n* @param yamlString - YAML string to format\n* @returns Formatted string for LLM",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 149
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 307
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 345
        }
      ]
    },
    {
      "snippet": "* Adds helpful context and formatting for Claude to understand the output\n*\n* @param yamlString - YAML string to format\n* @returns Formatted string for LLM\n*/",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.d.ts",
          "line": 150
        },
        {
          "path": "dist/tools/create-mission.js",
          "line": 308
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 346
        }
      ]
    },
    {
      "snippet": "name: 'create_mission',\ndescription: 'Use this tool to create a new mission based on a user\\'s request. You must provide a clear and concise objective. You can optionally specify a domain from the lis",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 64
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 50
        }
      ]
    },
    {
      "snippet": "description: 'Use this tool to create a new mission based on a user\\'s request. You must provide a clear and concise objective. You can optionally specify a domain from the list provided by list_avail",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 65
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 51
        }
      ]
    },
    {
      "snippet": "inputSchema: {\ntype: 'object',\nrequired: ['objective'],\nproperties: {\nobjective: {",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 66
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 52
        }
      ]
    },
    {
      "snippet": "type: 'object',\nrequired: ['objective'],\nproperties: {\nobjective: {\ntype: 'string',",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 67
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 53
        }
      ]
    },
    {
      "snippet": "required: ['objective'],\nproperties: {\nobjective: {\ntype: 'string',\ndescription: 'Clear, concise mission goal describing what success looks like',",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 68
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 54
        }
      ]
    },
    {
      "snippet": "properties: {\nobjective: {\ntype: 'string',\ndescription: 'Clear, concise mission goal describing what success looks like',\n},",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 69
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 55
        }
      ]
    },
    {
      "snippet": "objective: {\ntype: 'string',\ndescription: 'Clear, concise mission goal describing what success looks like',\n},\ndomain: {",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 70
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 56
        }
      ]
    },
    {
      "snippet": "type: 'string',\ndescription: 'Clear, concise mission goal describing what success looks like',\n},\ndomain: {\ntype: 'string',",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 71
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 57
        }
      ]
    },
    {
      "snippet": "description: 'Clear, concise mission goal describing what success looks like',\n},\ndomain: {\ntype: 'string',\ndescription: 'Optional domain pack name (use list_available_domains to see available options",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 72
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 58
        }
      ]
    },
    {
      "snippet": "},\ndomain: {\ntype: 'string',\ndescription: 'Optional domain pack name (use list_available_domains to see available options)',\n},",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 73
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 59
        }
      ]
    },
    {
      "snippet": "domain: {\ntype: 'string',\ndescription: 'Optional domain pack name (use list_available_domains to see available options)',\n},\nsuccessCriteria: {",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 74
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 60
        }
      ]
    },
    {
      "snippet": "type: 'string',\ndescription: 'Optional domain pack name (use list_available_domains to see available options)',\n},\nsuccessCriteria: {\ntype: 'array',",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 75
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 61
        }
      ]
    },
    {
      "snippet": "description: 'Optional domain pack name (use list_available_domains to see available options)',\n},\nsuccessCriteria: {\ntype: 'array',\nitems: { type: 'string' },",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 76
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 62
        }
      ]
    },
    {
      "snippet": "},\nsuccessCriteria: {\ntype: 'array',\nitems: { type: 'string' },\ndescription: 'Optional array of measurable success conditions',",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 77
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 63
        }
      ]
    },
    {
      "snippet": "successCriteria: {\ntype: 'array',\nitems: { type: 'string' },\ndescription: 'Optional array of measurable success conditions',\n},",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 78
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 64
        }
      ]
    },
    {
      "snippet": "type: 'array',\nitems: { type: 'string' },\ndescription: 'Optional array of measurable success conditions',\n},\nconstraints: {",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 79
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 65
        }
      ]
    },
    {
      "snippet": "items: { type: 'string' },\ndescription: 'Optional array of measurable success conditions',\n},\nconstraints: {\ntype: 'array',",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 80
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 66
        }
      ]
    },
    {
      "snippet": "description: 'Optional array of measurable success conditions',\n},\nconstraints: {\ntype: 'array',\nitems: { type: 'string' },",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 81
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 67
        }
      ]
    },
    {
      "snippet": "},\nconstraints: {\ntype: 'array',\nitems: { type: 'string' },\ndescription: 'Optional array of limitations or boundaries',",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 82
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 68
        }
      ]
    },
    {
      "snippet": "constraints: {\ntype: 'array',\nitems: { type: 'string' },\ndescription: 'Optional array of limitations or boundaries',\n},",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 83
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 69
        }
      ]
    },
    {
      "snippet": "type: 'array',\nitems: { type: 'string' },\ndescription: 'Optional array of limitations or boundaries',\n},\n},",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 84
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 70
        }
      ]
    },
    {
      "snippet": "items: { type: 'string' },\ndescription: 'Optional array of limitations or boundaries',\n},\n},\n},",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 85
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 71
        }
      ]
    },
    {
      "snippet": "const now = new Date();\nconst year = now.getFullYear();\nconst month = String(now.getMonth() + 1).padStart(2, '0');\nconst day = String(now.getDate()).padStart(2, '0');\nconst hours = String(now.getHours",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 158
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 168
        }
      ]
    },
    {
      "snippet": "const year = now.getFullYear();\nconst month = String(now.getMonth() + 1).padStart(2, '0');\nconst day = String(now.getDate()).padStart(2, '0');\nconst hours = String(now.getHours()).padStart(2, '0');\nco",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 159
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 169
        }
      ]
    },
    {
      "snippet": "const month = String(now.getMonth() + 1).padStart(2, '0');\nconst day = String(now.getDate()).padStart(2, '0');\nconst hours = String(now.getHours()).padStart(2, '0');\nconst minutes = String(now.getMinu",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 160
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 170
        }
      ]
    },
    {
      "snippet": "if (error instanceof Error) {\nthrow new Error(`Failed to load generic template: ${error.message}`);\n}\nthrow new Error('Failed to load generic template: Unknown error');\n}",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 186
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 200
        }
      ]
    },
    {
      "snippet": "throw new Error(`Failed to load generic template: ${error.message}`);\n}\nthrow new Error('Failed to load generic template: Unknown error');\n}\n}",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 187
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 201
        }
      ]
    },
    {
      "snippet": "...template,\nmissionId,\nobjective: params.objective,\ncontext: {\n...template.context,",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 203
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 222
        }
      ]
    },
    {
      "snippet": "missionId,\nobjective: params.objective,\ncontext: {\n...template.context,\nconstraints: params.constraints || template.context.constraints || [],",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 204
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 223
        }
      ]
    },
    {
      "snippet": "objective: params.objective,\ncontext: {\n...template.context,\nconstraints: params.constraints || template.context.constraints || [],\n},",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 205
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 224
        }
      ]
    },
    {
      "snippet": "context: {\n...template.context,\nconstraints: params.constraints || template.context.constraints || [],\n},\n// Ensure successCriteria is never empty (requirement from schema)",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 206
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 225
        }
      ]
    },
    {
      "snippet": "...template.context,\nconstraints: params.constraints || template.context.constraints || [],\n},\n// Ensure successCriteria is never empty (requirement from schema)\nsuccessCriteria: params.successCriteri",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 207
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 226
        }
      ]
    },
    {
      "snippet": "constraints: params.constraints || template.context.constraints || [],\n},\n// Ensure successCriteria is never empty (requirement from schema)\nsuccessCriteria: params.successCriteria && params.successCr",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 208
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 227
        }
      ]
    },
    {
      "snippet": "},\n// Ensure successCriteria is never empty (requirement from schema)\nsuccessCriteria: params.successCriteria && params.successCriteria.length > 0\n? params.successCriteria\n: ['Mission objective achiev",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 209
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 228
        }
      ]
    },
    {
      "snippet": "// Ensure successCriteria is never empty (requirement from schema)\nsuccessCriteria: params.successCriteria && params.successCriteria.length > 0\n? params.successCriteria\n: ['Mission objective achieved'",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 210
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 229
        }
      ]
    },
    {
      "snippet": "successCriteria: params.successCriteria && params.successCriteria.length > 0\n? params.successCriteria\n: ['Mission objective achieved'],\n// Ensure deliverables is never empty (requirement from schema)\n",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 211
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 230
        }
      ]
    },
    {
      "snippet": "? params.successCriteria\n: ['Mission objective achieved'],\n// Ensure deliverables is never empty (requirement from schema)\ndeliverables: ['Mission completion report'],\n};",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 212
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 231
        }
      ]
    },
    {
      "snippet": "}\nthrow new Error(`Failed to merge domain fields: ${error.message}`);\n}\nthrow new Error('Failed to merge domain fields: Unknown error');\n}",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 245
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 274
        }
      ]
    },
    {
      "snippet": "throw new Error(`Failed to merge domain fields: ${error.message}`);\n}\nthrow new Error('Failed to merge domain fields: Unknown error');\n}\n}",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 246
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 275
        }
      ]
    },
    {
      "snippet": "try {\n// Use YAML.stringify for clean output\nconst yamlString = YAML.stringify(mission, {\nindent: 2,\nlineWidth: 0, // Prevent line wrapping",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 289
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 326
        }
      ]
    },
    {
      "snippet": "// Use YAML.stringify for clean output\nconst yamlString = YAML.stringify(mission, {\nindent: 2,\nlineWidth: 0, // Prevent line wrapping\ndefaultStringType: 'QUOTE_DOUBLE',",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 290
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 327
        }
      ]
    },
    {
      "snippet": "const yamlString = YAML.stringify(mission, {\nindent: 2,\nlineWidth: 0, // Prevent line wrapping\ndefaultStringType: 'QUOTE_DOUBLE',\n});",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 291
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 328
        }
      ]
    },
    {
      "snippet": "if (error instanceof Error) {\nthrow new Error(`Failed to serialize mission to YAML: ${error.message}`);\n}\nthrow new Error('Failed to serialize mission to YAML: Unknown error');\n}",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 299
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 336
        }
      ]
    },
    {
      "snippet": "throw new Error(`Failed to serialize mission to YAML: ${error.message}`);\n}\nthrow new Error('Failed to serialize mission to YAML: Unknown error');\n}\n}",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 300
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 337
        }
      ]
    },
    {
      "snippet": "return `# Mission Created Successfully\n\nThe following mission has been created and validated:\n\n\\`\\`\\`yaml",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 314
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 352
        }
      ]
    },
    {
      "snippet": "\nThe following mission has been created and validated:\n\n\\`\\`\\`yaml\n${yamlString}",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 315
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 353
        }
      ]
    },
    {
      "snippet": "The following mission has been created and validated:\n\n\\`\\`\\`yaml\n${yamlString}\n\\`\\`\\`",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 316
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 354
        }
      ]
    },
    {
      "snippet": "\n\\`\\`\\`yaml\n${yamlString}\n\\`\\`\\`\n",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 317
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 355
        }
      ]
    },
    {
      "snippet": "\\`\\`\\`yaml\n${yamlString}\n\\`\\`\\`\n\nThis mission is ready to be saved and executed. The structure follows the ICEV pattern:",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 318
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 356
        }
      ]
    },
    {
      "snippet": "${yamlString}\n\\`\\`\\`\n\nThis mission is ready to be saved and executed. The structure follows the ICEV pattern:\n- **Intent**: Defined in the objective",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 319
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 357
        }
      ]
    },
    {
      "snippet": "\\`\\`\\`\n\nThis mission is ready to be saved and executed. The structure follows the ICEV pattern:\n- **Intent**: Defined in the objective\n- **Context**: Background, dependencies, and constraints",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 320
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 358
        }
      ]
    },
    {
      "snippet": "\nThis mission is ready to be saved and executed. The structure follows the ICEV pattern:\n- **Intent**: Defined in the objective\n- **Context**: Background, dependencies, and constraints\n- **Execution**",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 321
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 359
        }
      ]
    },
    {
      "snippet": "This mission is ready to be saved and executed. The structure follows the ICEV pattern:\n- **Intent**: Defined in the objective\n- **Context**: Background, dependencies, and constraints\n- **Execution**:",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 322
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 360
        }
      ]
    },
    {
      "snippet": "- **Intent**: Defined in the objective\n- **Context**: Background, dependencies, and constraints\n- **Execution**: Implementation details (in domainFields if domain-specific)\n- **Verification**: Success",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 323
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 361
        }
      ]
    },
    {
      "snippet": "- **Context**: Background, dependencies, and constraints\n- **Execution**: Implementation details (in domainFields if domain-specific)\n- **Verification**: Success criteria and deliverables\n\nYou can now",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 324
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 362
        }
      ]
    },
    {
      "snippet": "- **Execution**: Implementation details (in domainFields if domain-specific)\n- **Verification**: Success criteria and deliverables\n\nYou can now save this mission to a file or modify it as needed.`;\n}",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 325
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 363
        }
      ]
    },
    {
      "snippet": "- **Verification**: Success criteria and deliverables\n\nYou can now save this mission to a file or modify it as needed.`;\n}\n}",
      "occurrences": [
        {
          "path": "dist/tools/create-mission.js",
          "line": 326
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 364
        }
      ]
    },
    {
      "snippet": "/**\n* MCP Tool: export_template\n*\n* Exposes the template export functionality as an MCP tool\n* for use in Claude Desktop and other MCP-compatible environments.",
      "occurrences": [
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 1
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 2
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 1
        }
      ]
    },
    {
      "snippet": "* MCP Tool: export_template\n*\n* Exposes the template export functionality as an MCP tool\n* for use in Claude Desktop and other MCP-compatible environments.\n*",
      "occurrences": [
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 2
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 3
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 2
        }
      ]
    },
    {
      "snippet": "*\n* Exposes the template export functionality as an MCP tool\n* for use in Claude Desktop and other MCP-compatible environments.\n*\n* Exports templates in Strict YAML format (safe for import).",
      "occurrences": [
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 3
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 4
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 3
        }
      ]
    },
    {
      "snippet": "* Exposes the template export functionality as an MCP tool\n* for use in Claude Desktop and other MCP-compatible environments.\n*\n* Exports templates in Strict YAML format (safe for import).\n*/",
      "occurrences": [
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 4
        },
        {
          "path": "dist/tools/export-template.js",
          "line": 5
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 4
        }
      ]
    },
    {
      "snippet": "/**\n* MCP Tool Interface for Template Export\n*/\nexport interface ExportTemplateParams {\n/** Template object to export (must conform to mission-template.v1 schema) */",
      "occurrences": [
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 10
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 14
        }
      ]
    },
    {
      "snippet": "* MCP Tool Interface for Template Export\n*/\nexport interface ExportTemplateParams {\n/** Template object to export (must conform to mission-template.v1 schema) */\ntemplate: MissionTemplate;",
      "occurrences": [
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 11
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 15
        }
      ]
    },
    {
      "snippet": "/**\n* Result returned by export_template tool\n*/\nexport interface ExportTemplateResult {\nsuccess: boolean;",
      "occurrences": [
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 27
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 37
        }
      ]
    },
    {
      "snippet": "* Result returned by export_template tool\n*/\nexport interface ExportTemplateResult {\nsuccess: boolean;\noutputPath?: string;",
      "occurrences": [
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 28
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 38
        }
      ]
    },
    {
      "snippet": "*/\nexport interface ExportTemplateResult {\nsuccess: boolean;\noutputPath?: string;\nformat?: string;",
      "occurrences": [
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 29
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 39
        }
      ]
    },
    {
      "snippet": "export interface ExportTemplateResult {\nsuccess: boolean;\noutputPath?: string;\nformat?: string;\nmessage: string;",
      "occurrences": [
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 30
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 40
        }
      ]
    },
    {
      "snippet": "name: string;\nversion: string;\nauthor: string;\nsignature: {\nkeyId: string;",
      "occurrences": [
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 46
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 144
        }
      ]
    },
    {
      "snippet": "version: string;\nauthor: string;\nsignature: {\nkeyId: string;\nalgorithm: string;",
      "occurrences": [
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 47
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 145
        }
      ]
    },
    {
      "snippet": "author: string;\nsignature: {\nkeyId: string;\nalgorithm: string;\nvalue: string;",
      "occurrences": [
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 48
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 146
        }
      ]
    },
    {
      "snippet": "signature: {\nkeyId: string;\nalgorithm: string;\nvalue: string;\n};",
      "occurrences": [
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 49
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 147
        }
      ]
    },
    {
      "snippet": "/**\n* MCP Tool Registration\n* This would be called by the MCP server to register the tool\n*/\nexport declare const mcpToolDefinition: {",
      "occurrences": [
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 55
        },
        {
          "path": "dist/tools/extract-template.d.ts",
          "line": 35
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 65
        }
      ]
    },
    {
      "snippet": "* MCP Tool Registration\n* This would be called by the MCP server to register the tool\n*/\nexport declare const mcpToolDefinition: {\nname: string;",
      "occurrences": [
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 56
        },
        {
          "path": "dist/tools/extract-template.d.ts",
          "line": 36
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 66
        }
      ]
    },
    {
      "snippet": "* This would be called by the MCP server to register the tool\n*/\nexport declare const mcpToolDefinition: {\nname: string;\ndescription: string;",
      "occurrences": [
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 57
        },
        {
          "path": "dist/tools/extract-template.d.ts",
          "line": 37
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 67
        }
      ]
    },
    {
      "snippet": "};\n};\nrequired: string[];\n};\n};",
      "occurrences": [
        {
          "path": "dist/tools/export-template.d.ts",
          "line": 112
        },
        {
          "path": "dist/tools/extract-template.d.ts",
          "line": 66
        },
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 113
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 41
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 93
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 147
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 185
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 215
        }
      ]
    },
    {
      "snippet": "try {\n// Validate input parameters\nvalidateParams(params);\n// Determine base directory\nconst baseDir = params.baseDir || process.cwd();",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 53
        },
        {
          "path": "dist/tools/import-template.js",
          "line": 18
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: true,\noutputPath: resolvedPath,\nformat: options.format,\nmessage: `Template \"${params.template.metadata.name}\" v${params.template.metadata.version} exported successfully to ${resolved",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 76
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 85
        }
      ]
    },
    {
      "snippet": "success: true,\noutputPath: resolvedPath,\nformat: options.format,\nmessage: `Template \"${params.template.metadata.name}\" v${params.template.metadata.version} exported successfully to ${resolvedPath}`,\np",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 77
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 86
        }
      ]
    },
    {
      "snippet": "outputPath: resolvedPath,\nformat: options.format,\nmessage: `Template \"${params.template.metadata.name}\" v${params.template.metadata.version} exported successfully to ${resolvedPath}`,\npreview,\n};",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 78
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 87
        }
      ]
    },
    {
      "snippet": "};\n}\ncatch (error) {\nconst errorMessage = error instanceof Error ? error.message : String(error);\nreturn {",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 82
        },
        {
          "path": "dist/tools/import-template.js",
          "line": 67
        }
      ]
    },
    {
      "snippet": "}\ncatch (error) {\nconst errorMessage = error instanceof Error ? error.message : String(error);\nreturn {\nsuccess: false,",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 83
        },
        {
          "path": "dist/tools/extract-template.js",
          "line": 91
        },
        {
          "path": "dist/tools/import-template.js",
          "line": 68
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: false,\nmessage: `Export failed: ${errorMessage}`,\n};\n}",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 86
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 95
        }
      ]
    },
    {
      "snippet": "success: false,\nmessage: `Export failed: ${errorMessage}`,\n};\n}\n}",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 87
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 96
        }
      ]
    },
    {
      "snippet": "};\n}\n}\n/**\n* Validate input parameters",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 89
        },
        {
          "path": "dist/tools/extract-template.js",
          "line": 98
        },
        {
          "path": "dist/tools/import-template.js",
          "line": 81
        }
      ]
    },
    {
      "snippet": "}\n}\n/**\n* Validate input parameters\n*/",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 90
        },
        {
          "path": "dist/tools/extract-template.js",
          "line": 99
        },
        {
          "path": "dist/tools/import-template.js",
          "line": 82
        }
      ]
    },
    {
      "snippet": "}\n/**\n* Validate input parameters\n*/\nfunction validateParams(params) {",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 91
        },
        {
          "path": "dist/tools/extract-template.js",
          "line": 100
        },
        {
          "path": "dist/tools/import-template.js",
          "line": 83
        }
      ]
    },
    {
      "snippet": "// Validate format if provided\nif (params.format && !['yaml', 'json'].includes(params.format)) {\nthrow new Error('format must be either \"yaml\" or \"json\"');\n}\n}",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 115
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 131
        }
      ]
    },
    {
      "snippet": "return {\napiVersion: 'mission-template.v1',\nkind: 'MissionTemplate',\nmetadata,\nspec: missionData,",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 125
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 154
        }
      ]
    },
    {
      "snippet": "apiVersion: 'mission-template.v1',\nkind: 'MissionTemplate',\nmetadata,\nspec: missionData,\ndependencies: [],",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 126
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 155
        }
      ]
    },
    {
      "snippet": "kind: 'MissionTemplate',\nmetadata,\nspec: missionData,\ndependencies: [],\n};",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 127
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 156
        }
      ]
    },
    {
      "snippet": "metadata,\nspec: missionData,\ndependencies: [],\n};\n}",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 128
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 157
        }
      ]
    },
    {
      "snippet": "}\n/**\n* MCP Tool Registration\n* This would be called by the MCP server to register the tool\n*/",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 132
        },
        {
          "path": "dist/tools/extract-template.js",
          "line": 222
        },
        {
          "path": "dist/tools/import-template.js",
          "line": 109
        }
      ]
    },
    {
      "snippet": "/**\n* MCP Tool Registration\n* This would be called by the MCP server to register the tool\n*/\nexports.mcpToolDefinition = {",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 133
        },
        {
          "path": "dist/tools/extract-template.js",
          "line": 223
        },
        {
          "path": "dist/tools/import-template.js",
          "line": 110
        }
      ]
    },
    {
      "snippet": "inputSchema: {\ntype: 'object',\nproperties: {\ntemplate: {\ntype: 'object',",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 140
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 171
        }
      ]
    },
    {
      "snippet": "type: 'object',\nproperties: {\ntemplate: {\ntype: 'object',\ndescription: 'Mission template object conforming to mission-template.v1 schema',",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 141
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 172
        }
      ]
    },
    {
      "snippet": "properties: {\ntemplate: {\ntype: 'object',\ndescription: 'Mission template object conforming to mission-template.v1 schema',\nrequired: ['apiVersion', 'kind', 'metadata', 'spec'],",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 142
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 173
        }
      ]
    },
    {
      "snippet": "template: {\ntype: 'object',\ndescription: 'Mission template object conforming to mission-template.v1 schema',\nrequired: ['apiVersion', 'kind', 'metadata', 'spec'],\nproperties: {",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 143
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 174
        }
      ]
    },
    {
      "snippet": "type: 'object',\ndescription: 'Mission template object conforming to mission-template.v1 schema',\nrequired: ['apiVersion', 'kind', 'metadata', 'spec'],\nproperties: {\napiVersion: {",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 144
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 175
        }
      ]
    },
    {
      "snippet": "description: 'Mission template object conforming to mission-template.v1 schema',\nrequired: ['apiVersion', 'kind', 'metadata', 'spec'],\nproperties: {\napiVersion: {\ntype: 'string',",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 145
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 176
        }
      ]
    },
    {
      "snippet": "const: 'MissionTemplate',\n},\nmetadata: {\ntype: 'object',\ndescription: 'Template metadata including name, version, author, and signature',",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 154
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 185
        }
      ]
    },
    {
      "snippet": "},\nmetadata: {\ntype: 'object',\ndescription: 'Template metadata including name, version, author, and signature',\n},",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 155
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 186
        }
      ]
    },
    {
      "snippet": "metadata: {\ntype: 'object',\ndescription: 'Template metadata including name, version, author, and signature',\n},\nspec: {",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 156
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 187
        }
      ]
    },
    {
      "snippet": "type: 'object',\ndescription: 'Template metadata including name, version, author, and signature',\n},\nspec: {\ntype: 'object',",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 157
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 188
        }
      ]
    },
    {
      "snippet": "description: 'Template metadata including name, version, author, and signature',\n},\nspec: {\ntype: 'object',\ndescription: 'Mission specification (business logic)',",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 158
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 189
        }
      ]
    },
    {
      "snippet": "},\nspec: {\ntype: 'object',\ndescription: 'Mission specification (business logic)',\n},",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 159
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 190
        }
      ]
    },
    {
      "snippet": "spec: {\ntype: 'object',\ndescription: 'Mission specification (business logic)',\n},\ndependencies: {",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 160
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 191
        }
      ]
    },
    {
      "snippet": "type: 'object',\ndescription: 'Mission specification (business logic)',\n},\ndependencies: {\ntype: 'array',",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 161
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 192
        }
      ]
    },
    {
      "snippet": "description: 'Mission specification (business logic)',\n},\ndependencies: {\ntype: 'array',\ndescription: 'Optional array of template dependencies',",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 162
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 193
        }
      ]
    },
    {
      "snippet": "},\ndependencies: {\ntype: 'array',\ndescription: 'Optional array of template dependencies',\n},",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 163
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 194
        }
      ]
    },
    {
      "snippet": "dependencies: {\ntype: 'array',\ndescription: 'Optional array of template dependencies',\n},\n},",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 164
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 195
        }
      ]
    },
    {
      "snippet": "type: 'array',\ndescription: 'Optional array of template dependencies',\n},\n},\n},",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 165
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 196
        }
      ]
    },
    {
      "snippet": "description: 'Optional array of template dependencies',\n},\n},\n},\noutputPath: {",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 166
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 197
        }
      ]
    },
    {
      "snippet": "},\n},\n},\noutputPath: {\ntype: 'string',",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 167
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 198
        }
      ]
    },
    {
      "snippet": "},\n},\noutputPath: {\ntype: 'string',\ndescription: 'Output file path (relative to baseDir)',",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 168
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 199
        }
      ]
    },
    {
      "snippet": "},\noutputPath: {\ntype: 'string',\ndescription: 'Output file path (relative to baseDir)',\n},",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 169
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 200
        }
      ]
    },
    {
      "snippet": "outputPath: {\ntype: 'string',\ndescription: 'Output file path (relative to baseDir)',\n},\nbaseDir: {",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 170
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 201
        }
      ]
    },
    {
      "snippet": "type: 'string',\ndescription: 'Output file path (relative to baseDir)',\n},\nbaseDir: {\ntype: 'string',",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 171
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 202
        }
      ]
    },
    {
      "snippet": "},\nformat: {\ntype: 'string',\nenum: ['yaml', 'json'],\ndescription: 'Export format: yaml (default) or json',",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 177
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 209
        }
      ]
    },
    {
      "snippet": "format: {\ntype: 'string',\nenum: ['yaml', 'json'],\ndescription: 'Export format: yaml (default) or json',\n},",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 178
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 210
        }
      ]
    },
    {
      "snippet": "type: 'string',\nenum: ['yaml', 'json'],\ndescription: 'Export format: yaml (default) or json',\n},\nincludeComments: {",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 179
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 211
        }
      ]
    },
    {
      "snippet": "enum: ['yaml', 'json'],\ndescription: 'Export format: yaml (default) or json',\n},\nincludeComments: {\ntype: 'boolean',",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 180
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 212
        }
      ]
    },
    {
      "snippet": "description: 'Export format: yaml (default) or json',\n},\nincludeComments: {\ntype: 'boolean',\ndescription: 'Include header comments in YAML output (default: true)',",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 181
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 213
        }
      ]
    },
    {
      "snippet": "},\nincludeComments: {\ntype: 'boolean',\ndescription: 'Include header comments in YAML output (default: true)',\n},",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 182
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 214
        }
      ]
    },
    {
      "snippet": "includeComments: {\ntype: 'boolean',\ndescription: 'Include header comments in YAML output (default: true)',\n},\npretty: {",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 183
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 215
        }
      ]
    },
    {
      "snippet": "type: 'boolean',\ndescription: 'Include header comments in YAML output (default: true)',\n},\npretty: {\ntype: 'boolean',",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 184
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 216
        }
      ]
    },
    {
      "snippet": "description: 'Include header comments in YAML output (default: true)',\n},\npretty: {\ntype: 'boolean',\ndescription: 'Pretty print output (default: true)',",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 185
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 217
        }
      ]
    },
    {
      "snippet": "},\npretty: {\ntype: 'boolean',\ndescription: 'Pretty print output (default: true)',\n},",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 186
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 218
        }
      ]
    },
    {
      "snippet": "pretty: {\ntype: 'boolean',\ndescription: 'Pretty print output (default: true)',\n},\n},",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 187
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 219
        }
      ]
    },
    {
      "snippet": "type: 'boolean',\ndescription: 'Pretty print output (default: true)',\n},\n},\nrequired: ['template', 'outputPath'],",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 188
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 220
        }
      ]
    },
    {
      "snippet": "description: 'Pretty print output (default: true)',\n},\n},\nrequired: ['template', 'outputPath'],\n},",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 189
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 221
        }
      ]
    },
    {
      "snippet": "},\n},\nrequired: ['template', 'outputPath'],\n},\n};",
      "occurrences": [
        {
          "path": "dist/tools/export-template.js",
          "line": 190
        },
        {
          "path": "src/tools/export-template.ts",
          "line": 222
        }
      ]
    },
    {
      "snippet": "/**\n* MCP Tool: extract_template\n*\n* Exposes the template extraction functionality as an MCP tool\n* for use in Claude Desktop and other MCP-compatible environments.",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.d.ts",
          "line": 1
        },
        {
          "path": "dist/tools/extract-template.js",
          "line": 2
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 1
        }
      ]
    },
    {
      "snippet": "* MCP Tool: extract_template\n*\n* Exposes the template extraction functionality as an MCP tool\n* for use in Claude Desktop and other MCP-compatible environments.\n*/",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.d.ts",
          "line": 2
        },
        {
          "path": "dist/tools/extract-template.js",
          "line": 3
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 2
        }
      ]
    },
    {
      "snippet": "/**\n* MCP Tool Interface for Template Extraction\n*/\nexport interface ExtractTemplateParams {\n/** Path to the source mission file or directory */",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.d.ts",
          "line": 8
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 13
        }
      ]
    },
    {
      "snippet": "* MCP Tool Interface for Template Extraction\n*/\nexport interface ExtractTemplateParams {\n/** Path to the source mission file or directory */\nmissionFile: string;",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.d.ts",
          "line": 9
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 14
        }
      ]
    },
    {
      "snippet": "sourceMissionPath: sourcePath,\nauthor: params.author,\nconfidenceThreshold: params.confidenceThreshold || 0.6,\nenableASTAnalysis: true,\nexcludePatterns: [",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 63
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 50
        }
      ]
    },
    {
      "snippet": "author: params.author,\nconfidenceThreshold: params.confidenceThreshold || 0.6,\nenableASTAnalysis: true,\nexcludePatterns: [\n'node_modules/**',",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 64
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 51
        }
      ]
    },
    {
      "snippet": "confidenceThreshold: params.confidenceThreshold || 0.6,\nenableASTAnalysis: true,\nexcludePatterns: [\n'node_modules/**',\n'.git/**',",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 65
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 52
        }
      ]
    },
    {
      "snippet": "enableASTAnalysis: true,\nexcludePatterns: [\n'node_modules/**',\n'.git/**',\n'dist/**',",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 66
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 53
        }
      ]
    },
    {
      "snippet": "excludePatterns: [\n'node_modules/**',\n'.git/**',\n'dist/**',\n'build/**',",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 67
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 54
        }
      ]
    },
    {
      "snippet": "'node_modules/**',\n'.git/**',\n'dist/**',\n'build/**',\n'*.log',",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 68
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 55
        }
      ]
    },
    {
      "snippet": "'.git/**',\n'dist/**',\n'build/**',\n'*.log',\n'.env',",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 69
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 56
        }
      ]
    },
    {
      "snippet": "'dist/**',\n'build/**',\n'*.log',\n'.env',\n'.env.*'",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 70
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 57
        }
      ]
    },
    {
      "snippet": "'build/**',\n'*.log',\n'.env',\n'.env.*'\n]",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 71
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 58
        }
      ]
    },
    {
      "snippet": "'*.log',\n'.env',\n'.env.*'\n]\n};",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 72
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 59
        }
      ]
    },
    {
      "snippet": "console.log(`\u2713 Template extracted successfully to: ${templateDir}`);\nconsole.log(`\u2713 Files analyzed: ${result.stage1?.filesAnalyzed || 0}`);\nconsole.log(`\u2713 Parameters generated: ${result.stage2?.parame",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 85
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 76
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: false,\nerrors: [errorMessage],\ntotalTime: 0\n};",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 94
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 86
        }
      ]
    },
    {
      "snippet": "success: false,\nerrors: [errorMessage],\ntotalTime: 0\n};\n}",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 95
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 87
        }
      ]
    },
    {
      "snippet": "errors: [errorMessage],\ntotalTime: 0\n};\n}\n}",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 96
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 88
        }
      ]
    },
    {
      "snippet": "if (params.confidenceThreshold !== undefined) {\nif (params.confidenceThreshold < 0 || params.confidenceThreshold > 1) {\nthrow new Error('confidenceThreshold must be between 0.0 and 1.0');\n}\n}",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 117
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 114
        }
      ]
    },
    {
      "snippet": "// Validate template name format\nif (!/^[a-zA-Z0-9-_]+$/.test(params.templateName)) {\nthrow new Error('templateName must contain only alphanumeric characters, hyphens, and underscores');\n}\n}",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 122
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 120
        }
      ]
    },
    {
      "snippet": "// Write hooks if present\nif (template.hooks?.preGenerate) {\nconst preHookPath = path.join(templateDir, 'hooks', 'pre_gen_project.sh');\nfs.mkdirSync(path.dirname(preHookPath), { recursive: true });\nfs",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 153
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 164
        }
      ]
    },
    {
      "snippet": "if (template.hooks?.preGenerate) {\nconst preHookPath = path.join(templateDir, 'hooks', 'pre_gen_project.sh');\nfs.mkdirSync(path.dirname(preHookPath), { recursive: true });\nfs.writeFileSync(preHookPath",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 154
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 165
        }
      ]
    },
    {
      "snippet": "const preHookPath = path.join(templateDir, 'hooks', 'pre_gen_project.sh');\nfs.mkdirSync(path.dirname(preHookPath), { recursive: true });\nfs.writeFileSync(preHookPath, template.hooks.preGenerate, 'utf-",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 155
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 166
        }
      ]
    },
    {
      "snippet": "if (template.hooks?.postGenerate) {\nconst postHookPath = path.join(templateDir, 'hooks', 'post_gen_project.sh');\nfs.mkdirSync(path.dirname(postHookPath), { recursive: true });\nfs.writeFileSync(postHoo",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 160
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 172
        }
      ]
    },
    {
      "snippet": "const postHookPath = path.join(templateDir, 'hooks', 'post_gen_project.sh');\nfs.mkdirSync(path.dirname(postHookPath), { recursive: true });\nfs.writeFileSync(postHookPath, template.hooks.postGenerate, ",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 161
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 173
        }
      ]
    },
    {
      "snippet": "fs.mkdirSync(path.dirname(postHookPath), { recursive: true });\nfs.writeFileSync(postHookPath, template.hooks.postGenerate, 'utf-8');\nfs.chmodSync(postHookPath, 0o755);\n}\n}",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 162
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 174
        }
      ]
    },
    {
      "snippet": "report += `## Summary\\n\\n`;\nreport += `- **Template ID**: ${template.metadata.templateId}\\n`;\nreport += `- **Template Name**: ${template.metadata.name}\\n`;\nreport += `- **Source Mission**: ${template.",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 176
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 192
        }
      ]
    },
    {
      "snippet": "report += `- **Template ID**: ${template.metadata.templateId}\\n`;\nreport += `- **Template Name**: ${template.metadata.name}\\n`;\nreport += `- **Source Mission**: ${template.metadata.sourceMissionId}\\n`",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 177
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 193
        }
      ]
    },
    {
      "snippet": "report += `- **Template Name**: ${template.metadata.name}\\n`;\nreport += `- **Source Mission**: ${template.metadata.sourceMissionId}\\n`;\nreport += `- **Author**: ${template.metadata.author}\\n`;\nreport ",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 178
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 194
        }
      ]
    },
    {
      "snippet": "report += `## Performance Metrics\\n\\n`;\nreport += `- **Total Execution Time**: ${totalTime}ms\\n`;\nreport += `- **Stage 1 (Candidate Identification)**: ${stage1?.executionTime}ms\\n`;\nreport += `- **Sta",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 183
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 200
        }
      ]
    },
    {
      "snippet": "report += `- **Total Execution Time**: ${totalTime}ms\\n`;\nreport += `- **Stage 1 (Candidate Identification)**: ${stage1?.executionTime}ms\\n`;\nreport += `- **Stage 2 (Parameterization)**: ${stage2?.exe",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 184
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 201
        }
      ]
    },
    {
      "snippet": "report += `- **Stage 1 (Candidate Identification)**: ${stage1?.executionTime}ms\\n`;\nreport += `- **Stage 2 (Parameterization)**: ${stage2?.executionTime}ms\\n`;\nreport += `- **Files Analyzed**: ${stage",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 185
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 202
        }
      ]
    },
    {
      "snippet": "report += `## Template Structure\\n\\n`;\nreport += `\\`\\`\\`\\n`;\nfor (const file of template.fileStructure) {\nconst prefix = file.optional ? '[OPTIONAL] ' : '';\nreport += `${prefix}${file.path}\\n`;",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 197
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 217
        }
      ]
    },
    {
      "snippet": "report += `\\`\\`\\`\\n`;\nfor (const file of template.fileStructure) {\nconst prefix = file.optional ? '[OPTIONAL] ' : '';\nreport += `${prefix}${file.path}\\n`;\n}",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 198
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 218
        }
      ]
    },
    {
      "snippet": "for (const file of template.fileStructure) {\nconst prefix = file.optional ? '[OPTIONAL] ' : '';\nreport += `${prefix}${file.path}\\n`;\n}\nreport += `\\`\\`\\`\\n\\n`;",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 199
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 219
        }
      ]
    },
    {
      "snippet": "report += `## Next Steps\\n\\n`;\nreport += `1. **Review Parameters**: Validate that parameter names and types are correct\\n`;\nreport += `2. **Test Template**: Generate a test project using this template",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 204
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 225
        }
      ]
    },
    {
      "snippet": "report += `1. **Review Parameters**: Validate that parameter names and types are correct\\n`;\nreport += `2. **Test Template**: Generate a test project using this template\\n`;\nreport += `3. **Refine Log",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 205
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 226
        }
      ]
    },
    {
      "snippet": "report += `2. **Test Template**: Generate a test project using this template\\n`;\nreport += `3. **Refine Logic**: Add any conditional blocks for optional features\\n`;\nreport += `4. **Documentation**: U",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 206
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 227
        }
      ]
    },
    {
      "snippet": "report += `## Human-in-the-Loop Refinement (Stage 3)\\n\\n`;\nreport += `This template has been auto-generated using Stages 1 and 2 of the extraction algorithm.\\n`;\nreport += `The final Stage 3 (Human-in",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 211
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 233
        }
      ]
    },
    {
      "snippet": "report += `This template has been auto-generated using Stages 1 and 2 of the extraction algorithm.\\n`;\nreport += `The final Stage 3 (Human-in-the-Loop Refinement) requires manual review and enhancemen",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 212
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 234
        }
      ]
    },
    {
      "snippet": "report += `The final Stage 3 (Human-in-the-Loop Refinement) requires manual review and enhancement:\\n\\n`;\nreport += `- [ ] Validate and rename auto-generated parameter names\\n`;\nreport += `- [ ] Adjus",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 213
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 235
        }
      ]
    },
    {
      "snippet": "report += `- [ ] Validate and rename auto-generated parameter names\\n`;\nreport += `- [ ] Adjust parameter types and default values\\n`;\nreport += `- [ ] Add or refine conditional logic for optional fea",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 214
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 236
        }
      ]
    },
    {
      "snippet": "report += `- [ ] Adjust parameter types and default values\\n`;\nreport += `- [ ] Add or refine conditional logic for optional features\\n`;\nreport += `- [ ] Enrich metadata with better descriptions and ",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 215
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 237
        }
      ]
    },
    {
      "snippet": "report += `- [ ] Add or refine conditional logic for optional features\\n`;\nreport += `- [ ] Enrich metadata with better descriptions and tags\\n`;\nreport += `- [ ] Add validation rules (regex patterns)",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 216
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 238
        }
      ]
    },
    {
      "snippet": "name: 'extract_template',\ndescription: 'Extract a reusable template from a successful mission using the three-stage hybrid extraction algorithm',\ninputSchema: {\ntype: 'object',\nproperties: {",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 228
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 252
        }
      ]
    },
    {
      "snippet": "description: 'Extract a reusable template from a successful mission using the three-stage hybrid extraction algorithm',\ninputSchema: {\ntype: 'object',\nproperties: {\nmissionFile: {",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 229
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 253
        }
      ]
    },
    {
      "snippet": "inputSchema: {\ntype: 'object',\nproperties: {\nmissionFile: {\ntype: 'string',",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 230
        },
        {
          "path": "dist/tools/score-quality.js",
          "line": 163
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 254
        },
        {
          "path": "src/tools/score-quality.ts",
          "line": 158
        }
      ]
    },
    {
      "snippet": "type: 'object',\nproperties: {\nmissionFile: {\ntype: 'string',\ndescription: 'Path to the source mission file or directory'",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 231
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 255
        }
      ]
    },
    {
      "snippet": "properties: {\nmissionFile: {\ntype: 'string',\ndescription: 'Path to the source mission file or directory'\n},",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 232
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 256
        }
      ]
    },
    {
      "snippet": "missionFile: {\ntype: 'string',\ndescription: 'Path to the source mission file or directory'\n},\ntemplateName: {",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 233
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 257
        }
      ]
    },
    {
      "snippet": "type: 'string',\ndescription: 'Path to the source mission file or directory'\n},\ntemplateName: {\ntype: 'string',",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 234
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 258
        }
      ]
    },
    {
      "snippet": "description: 'Path to the source mission file or directory'\n},\ntemplateName: {\ntype: 'string',\ndescription: 'Name for the template (used to generate templateId)'",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 235
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 259
        }
      ]
    },
    {
      "snippet": "},\ntemplateName: {\ntype: 'string',\ndescription: 'Name for the template (used to generate templateId)'\n},",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 236
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 260
        }
      ]
    },
    {
      "snippet": "templateName: {\ntype: 'string',\ndescription: 'Name for the template (used to generate templateId)'\n},\nauthor: {",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 237
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 261
        }
      ]
    },
    {
      "snippet": "type: 'string',\ndescription: 'Name for the template (used to generate templateId)'\n},\nauthor: {\ntype: 'string',",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 238
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 262
        }
      ]
    },
    {
      "snippet": "description: 'Name for the template (used to generate templateId)'\n},\nauthor: {\ntype: 'string',\ndescription: 'Author name or email'",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 239
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 263
        }
      ]
    },
    {
      "snippet": "},\nauthor: {\ntype: 'string',\ndescription: 'Author name or email'\n},",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 240
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 264
        }
      ]
    },
    {
      "snippet": "author: {\ntype: 'string',\ndescription: 'Author name or email'\n},\noutputDir: {",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 241
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 265
        }
      ]
    },
    {
      "snippet": "type: 'string',\ndescription: 'Author name or email'\n},\noutputDir: {\ntype: 'string',",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 242
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 266
        }
      ]
    },
    {
      "snippet": "description: 'Author name or email'\n},\noutputDir: {\ntype: 'string',\ndescription: 'Output directory for the template (optional, defaults to ./templates)'",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 243
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 267
        }
      ]
    },
    {
      "snippet": "},\noutputDir: {\ntype: 'string',\ndescription: 'Output directory for the template (optional, defaults to ./templates)'\n},",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 244
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 268
        }
      ]
    },
    {
      "snippet": "outputDir: {\ntype: 'string',\ndescription: 'Output directory for the template (optional, defaults to ./templates)'\n},\nconfidenceThreshold: {",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 245
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 269
        }
      ]
    },
    {
      "snippet": "type: 'string',\ndescription: 'Output directory for the template (optional, defaults to ./templates)'\n},\nconfidenceThreshold: {\ntype: 'number',",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 246
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 270
        }
      ]
    },
    {
      "snippet": "description: 'Output directory for the template (optional, defaults to ./templates)'\n},\nconfidenceThreshold: {\ntype: 'number',\ndescription: 'Minimum confidence threshold for parameterization (0.0 to 1",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 247
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 271
        }
      ]
    },
    {
      "snippet": "},\nconfidenceThreshold: {\ntype: 'number',\ndescription: 'Minimum confidence threshold for parameterization (0.0 to 1.0, default 0.6)',\nminimum: 0,",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 248
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 272
        }
      ]
    },
    {
      "snippet": "confidenceThreshold: {\ntype: 'number',\ndescription: 'Minimum confidence threshold for parameterization (0.0 to 1.0, default 0.6)',\nminimum: 0,\nmaximum: 1",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 249
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 273
        }
      ]
    },
    {
      "snippet": "type: 'number',\ndescription: 'Minimum confidence threshold for parameterization (0.0 to 1.0, default 0.6)',\nminimum: 0,\nmaximum: 1\n}",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 250
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 274
        }
      ]
    },
    {
      "snippet": "description: 'Minimum confidence threshold for parameterization (0.0 to 1.0, default 0.6)',\nminimum: 0,\nmaximum: 1\n}\n},",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 251
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 275
        }
      ]
    },
    {
      "snippet": "minimum: 0,\nmaximum: 1\n}\n},\nrequired: ['missionFile', 'templateName', 'author']",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 252
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 276
        }
      ]
    },
    {
      "snippet": "maximum: 1\n}\n},\nrequired: ['missionFile', 'templateName', 'author']\n}",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 253
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 277
        }
      ]
    },
    {
      "snippet": "}\n},\nrequired: ['missionFile', 'templateName', 'author']\n}\n};",
      "occurrences": [
        {
          "path": "dist/tools/extract-template.js",
          "line": 254
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 278
        }
      ]
    },
    {
      "snippet": "/**\n* MCP Tool: import_template\n*\n* Exposes the secure template import functionality as an MCP tool\n* for use in Claude Desktop and other MCP-compatible environments.",
      "occurrences": [
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 1
        },
        {
          "path": "dist/tools/import-template.js",
          "line": 2
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 1
        }
      ]
    },
    {
      "snippet": "* MCP Tool: import_template\n*\n* Exposes the secure template import functionality as an MCP tool\n* for use in Claude Desktop and other MCP-compatible environments.\n*",
      "occurrences": [
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 2
        },
        {
          "path": "dist/tools/import-template.js",
          "line": 3
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 2
        }
      ]
    },
    {
      "snippet": "*\n* Exposes the secure template import functionality as an MCP tool\n* for use in Claude Desktop and other MCP-compatible environments.\n*\n* Implements the 6-layer security validation pipeline from R3.2",
      "occurrences": [
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 3
        },
        {
          "path": "dist/tools/import-template.js",
          "line": 4
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 3
        }
      ]
    },
    {
      "snippet": "* Exposes the secure template import functionality as an MCP tool\n* for use in Claude Desktop and other MCP-compatible environments.\n*\n* Implements the 6-layer security validation pipeline from R3.2.\n",
      "occurrences": [
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 4
        },
        {
          "path": "dist/tools/import-template.js",
          "line": 5
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 4
        }
      ]
    },
    {
      "snippet": "/**\n* MCP Tool Interface for Template Import\n*/\nexport interface ImportTemplateParams {\n/** Path to the template file to import */",
      "occurrences": [
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 9
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 14
        }
      ]
    },
    {
      "snippet": "* MCP Tool Interface for Template Import\n*/\nexport interface ImportTemplateParams {\n/** Path to the template file to import */\ntemplatePath: string;",
      "occurrences": [
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 10
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 15
        }
      ]
    },
    {
      "snippet": "/**\n* Result returned by import_template tool\n*/\nexport interface ImportTemplateResult {\nsuccess: boolean;",
      "occurrences": [
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 30
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 43
        }
      ]
    },
    {
      "snippet": "* Result returned by import_template tool\n*/\nexport interface ImportTemplateResult {\nsuccess: boolean;\ntemplate?: {",
      "occurrences": [
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 31
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 44
        }
      ]
    },
    {
      "snippet": "*/\nexport interface ImportTemplateResult {\nsuccess: boolean;\ntemplate?: {\nname: string;",
      "occurrences": [
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 32
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 45
        }
      ]
    },
    {
      "snippet": "export interface ImportTemplateResult {\nsuccess: boolean;\ntemplate?: {\nname: string;\nversion: string;",
      "occurrences": [
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 33
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 46
        }
      ]
    },
    {
      "snippet": "success: boolean;\ntemplate?: {\nname: string;\nversion: string;\nauthor: string;",
      "occurrences": [
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 34
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 47
        }
      ]
    },
    {
      "snippet": "template?: {\nname: string;\nversion: string;\nauthor: string;\napiVersion: string;",
      "occurrences": [
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 35
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 48
        }
      ]
    },
    {
      "snippet": "name: string;\nversion: string;\nauthor: string;\napiVersion: string;\nspec: any;",
      "occurrences": [
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 36
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 49
        }
      ]
    },
    {
      "snippet": "version: string;\nauthor: string;\napiVersion: string;\nspec: any;\n};",
      "occurrences": [
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 37
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 50
        }
      ]
    },
    {
      "snippet": "author: string;\napiVersion: string;\nspec: any;\n};\nvalidationReport: {",
      "occurrences": [
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 38
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 51
        }
      ]
    },
    {
      "snippet": "apiVersion: string;\nspec: any;\n};\nvalidationReport: {\nvalid: boolean;",
      "occurrences": [
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 39
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 52
        }
      ]
    },
    {
      "snippet": "spec: any;\n};\nvalidationReport: {\nvalid: boolean;\nperformanceMs: number;",
      "occurrences": [
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 40
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 53
        }
      ]
    },
    {
      "snippet": "};\nvalidationReport: {\nvalid: boolean;\nperformanceMs: number;\nlayers: Array<{",
      "occurrences": [
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 41
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 54
        }
      ]
    },
    {
      "snippet": "validationReport: {\nvalid: boolean;\nperformanceMs: number;\nlayers: Array<{\nlayer: string;",
      "occurrences": [
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 42
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 55
        }
      ]
    },
    {
      "snippet": "valid: boolean;\nperformanceMs: number;\nlayers: Array<{\nlayer: string;\npassed: boolean;",
      "occurrences": [
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 43
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 56
        }
      ]
    },
    {
      "snippet": "performanceMs: number;\nlayers: Array<{\nlayer: string;\npassed: boolean;\nmessage?: string;",
      "occurrences": [
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 44
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 57
        }
      ]
    },
    {
      "snippet": "layers: Array<{\nlayer: string;\npassed: boolean;\nmessage?: string;\n}>;",
      "occurrences": [
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 45
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 58
        }
      ]
    },
    {
      "snippet": "layer: string;\npassed: boolean;\nmessage?: string;\n}>;\nerrors: string[];",
      "occurrences": [
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 46
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 59
        }
      ]
    },
    {
      "snippet": "passed: boolean;\nmessage?: string;\n}>;\nerrors: string[];\nwarnings: string[];",
      "occurrences": [
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 47
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 60
        }
      ]
    },
    {
      "snippet": "message?: string;\n}>;\nerrors: string[];\nwarnings: string[];\n};",
      "occurrences": [
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 48
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 61
        }
      ]
    },
    {
      "snippet": "}>;\nerrors: string[];\nwarnings: string[];\n};\ndependencies?: {",
      "occurrences": [
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 49
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 62
        }
      ]
    },
    {
      "snippet": "errors: string[];\nwarnings: string[];\n};\ndependencies?: {\n[name: string]: {",
      "occurrences": [
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 50
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 63
        }
      ]
    },
    {
      "snippet": "warnings: string[];\n};\ndependencies?: {\n[name: string]: {\nname: string;",
      "occurrences": [
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 51
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 64
        }
      ]
    },
    {
      "snippet": "};\ndependencies?: {\n[name: string]: {\nname: string;\nversion: string;",
      "occurrences": [
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 52
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 65
        }
      ]
    },
    {
      "snippet": "dependencies?: {\n[name: string]: {\nname: string;\nversion: string;\n};",
      "occurrences": [
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 53
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 66
        }
      ]
    },
    {
      "snippet": "[name: string]: {\nname: string;\nversion: string;\n};\n};",
      "occurrences": [
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 54
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 67
        }
      ]
    },
    {
      "snippet": "name: string;\nversion: string;\n};\n};\nmessage: string;",
      "occurrences": [
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 55
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 68
        }
      ]
    },
    {
      "snippet": "version: string;\n};\n};\nmessage: string;\n}",
      "occurrences": [
        {
          "path": "dist/tools/import-template.d.ts",
          "line": 56
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 69
        }
      ]
    },
    {
      "snippet": "maxResourceMemory: params.maxResourceMemory,\nmaxResourceCpu: params.maxResourceCpu,\nallowedActions: params.allowedActions || [],\nurlAllowlist: params.urlAllowlist || [],\n};",
      "occurrences": [
        {
          "path": "dist/tools/import-template.js",
          "line": 25
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 90
        }
      ]
    },
    {
      "snippet": "result.resolvedDependencies.forEach((template, name) => {\ndependencies[name] = {\nname: template.metadata.name,\nversion: template.metadata.version,\n};",
      "occurrences": [
        {
          "path": "dist/tools/import-template.js",
          "line": 42
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 111
        }
      ]
    },
    {
      "snippet": "dependencies[name] = {\nname: template.metadata.name,\nversion: template.metadata.version,\n};\n});",
      "occurrences": [
        {
          "path": "dist/tools/import-template.js",
          "line": 43
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 112
        }
      ]
    },
    {
      "snippet": "// Build success response\nreturn {\nsuccess: true,\ntemplate: {\nname: result.template.metadata.name,",
      "occurrences": [
        {
          "path": "dist/tools/import-template.js",
          "line": 48
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 118
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: true,\ntemplate: {\nname: result.template.metadata.name,\nversion: result.template.metadata.version,",
      "occurrences": [
        {
          "path": "dist/tools/import-template.js",
          "line": 49
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 119
        }
      ]
    },
    {
      "snippet": "success: true,\ntemplate: {\nname: result.template.metadata.name,\nversion: result.template.metadata.version,\nauthor: result.template.metadata.author,",
      "occurrences": [
        {
          "path": "dist/tools/import-template.js",
          "line": 50
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 120
        }
      ]
    },
    {
      "snippet": "template: {\nname: result.template.metadata.name,\nversion: result.template.metadata.version,\nauthor: result.template.metadata.author,\napiVersion: result.template.apiVersion,",
      "occurrences": [
        {
          "path": "dist/tools/import-template.js",
          "line": 51
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 121
        }
      ]
    },
    {
      "snippet": "name: result.template.metadata.name,\nversion: result.template.metadata.version,\nauthor: result.template.metadata.author,\napiVersion: result.template.apiVersion,\nspec: result.template.spec,",
      "occurrences": [
        {
          "path": "dist/tools/import-template.js",
          "line": 52
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 122
        }
      ]
    },
    {
      "snippet": "version: result.template.metadata.version,\nauthor: result.template.metadata.author,\napiVersion: result.template.apiVersion,\nspec: result.template.spec,\n},",
      "occurrences": [
        {
          "path": "dist/tools/import-template.js",
          "line": 53
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 123
        }
      ]
    },
    {
      "snippet": "author: result.template.metadata.author,\napiVersion: result.template.apiVersion,\nspec: result.template.spec,\n},\nvalidationReport: {",
      "occurrences": [
        {
          "path": "dist/tools/import-template.js",
          "line": 54
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 124
        }
      ]
    },
    {
      "snippet": "apiVersion: result.template.apiVersion,\nspec: result.template.spec,\n},\nvalidationReport: {\nvalid: result.validationReport.valid,",
      "occurrences": [
        {
          "path": "dist/tools/import-template.js",
          "line": 55
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 125
        }
      ]
    },
    {
      "snippet": "spec: result.template.spec,\n},\nvalidationReport: {\nvalid: result.validationReport.valid,\nperformanceMs: result.validationReport.performanceMs,",
      "occurrences": [
        {
          "path": "dist/tools/import-template.js",
          "line": 56
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 126
        }
      ]
    },
    {
      "snippet": "},\nvalidationReport: {\nvalid: result.validationReport.valid,\nperformanceMs: result.validationReport.performanceMs,\nlayers: result.validationReport.layers,",
      "occurrences": [
        {
          "path": "dist/tools/import-template.js",
          "line": 57
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 127
        }
      ]
    },
    {
      "snippet": "validationReport: {\nvalid: result.validationReport.valid,\nperformanceMs: result.validationReport.performanceMs,\nlayers: result.validationReport.layers,\nerrors: result.validationReport.errors,",
      "occurrences": [
        {
          "path": "dist/tools/import-template.js",
          "line": 58
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 128
        }
      ]
    },
    {
      "snippet": "valid: result.validationReport.valid,\nperformanceMs: result.validationReport.performanceMs,\nlayers: result.validationReport.layers,\nerrors: result.validationReport.errors,\nwarnings: result.validationR",
      "occurrences": [
        {
          "path": "dist/tools/import-template.js",
          "line": 59
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 129
        }
      ]
    },
    {
      "snippet": "performanceMs: result.validationReport.performanceMs,\nlayers: result.validationReport.layers,\nerrors: result.validationReport.errors,\nwarnings: result.validationReport.warnings,\n},",
      "occurrences": [
        {
          "path": "dist/tools/import-template.js",
          "line": 60
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 130
        }
      ]
    },
    {
      "snippet": "layers: result.validationReport.layers,\nerrors: result.validationReport.errors,\nwarnings: result.validationReport.warnings,\n},\ndependencies: Object.keys(dependencies).length > 0 ? dependencies : undef",
      "occurrences": [
        {
          "path": "dist/tools/import-template.js",
          "line": 61
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 131
        }
      ]
    },
    {
      "snippet": "errors: result.validationReport.errors,\nwarnings: result.validationReport.warnings,\n},\ndependencies: Object.keys(dependencies).length > 0 ? dependencies : undefined,\nmessage: `Template \"${result.templ",
      "occurrences": [
        {
          "path": "dist/tools/import-template.js",
          "line": 62
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 132
        }
      ]
    },
    {
      "snippet": "warnings: result.validationReport.warnings,\n},\ndependencies: Object.keys(dependencies).length > 0 ? dependencies : undefined,\nmessage: `Template \"${result.template.metadata.name}\" v${result.template.m",
      "occurrences": [
        {
          "path": "dist/tools/import-template.js",
          "line": 63
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 133
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: false,\nvalidationReport: {\nvalid: false,\nperformanceMs: 0,",
      "occurrences": [
        {
          "path": "dist/tools/import-template.js",
          "line": 71
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 141
        }
      ]
    },
    {
      "snippet": "success: false,\nvalidationReport: {\nvalid: false,\nperformanceMs: 0,\nlayers: [],",
      "occurrences": [
        {
          "path": "dist/tools/import-template.js",
          "line": 72
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 142
        }
      ]
    },
    {
      "snippet": "validationReport: {\nvalid: false,\nperformanceMs: 0,\nlayers: [],\nerrors: [errorMessage],",
      "occurrences": [
        {
          "path": "dist/tools/import-template.js",
          "line": 73
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 143
        }
      ]
    },
    {
      "snippet": "valid: false,\nperformanceMs: 0,\nlayers: [],\nerrors: [errorMessage],\nwarnings: [],",
      "occurrences": [
        {
          "path": "dist/tools/import-template.js",
          "line": 74
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 144
        }
      ]
    },
    {
      "snippet": "performanceMs: 0,\nlayers: [],\nerrors: [errorMessage],\nwarnings: [],\n},",
      "occurrences": [
        {
          "path": "dist/tools/import-template.js",
          "line": 75
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 145
        }
      ]
    },
    {
      "snippet": "layers: [],\nerrors: [errorMessage],\nwarnings: [],\n},\nmessage: `Import failed: ${errorMessage}`,",
      "occurrences": [
        {
          "path": "dist/tools/import-template.js",
          "line": 76
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 146
        }
      ]
    },
    {
      "snippet": "errors: [errorMessage],\nwarnings: [],\n},\nmessage: `Import failed: ${errorMessage}`,\n};",
      "occurrences": [
        {
          "path": "dist/tools/import-template.js",
          "line": 77
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 147
        }
      ]
    },
    {
      "snippet": "warnings: [],\n},\nmessage: `Import failed: ${errorMessage}`,\n};\n}",
      "occurrences": [
        {
          "path": "dist/tools/import-template.js",
          "line": 78
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 148
        }
      ]
    },
    {
      "snippet": "},\nmessage: `Import failed: ${errorMessage}`,\n};\n}\n}",
      "occurrences": [
        {
          "path": "dist/tools/import-template.js",
          "line": 79
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 149
        }
      ]
    },
    {
      "snippet": "inputSchema: {\ntype: 'object',\nproperties: {\ntemplatePath: {\ntype: 'string',",
      "occurrences": [
        {
          "path": "dist/tools/import-template.js",
          "line": 117
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 198
        }
      ]
    },
    {
      "snippet": "type: 'object',\nproperties: {\ntemplatePath: {\ntype: 'string',\ndescription: 'Path to the template file to import (YAML format)',",
      "occurrences": [
        {
          "path": "dist/tools/import-template.js",
          "line": 118
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 199
        }
      ]
    },
    {
      "snippet": "properties: {\ntemplatePath: {\ntype: 'string',\ndescription: 'Path to the template file to import (YAML format)',\n},",
      "occurrences": [
        {
          "path": "dist/tools/import-template.js",
          "line": 119
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 200
        }
      ]
    },
    {
      "snippet": "templatePath: {\ntype: 'string',\ndescription: 'Path to the template file to import (YAML format)',\n},\nbaseDir: {",
      "occurrences": [
        {
          "path": "dist/tools/import-template.js",
          "line": 120
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 201
        }
      ]
    },
    {
      "snippet": "type: 'string',\ndescription: 'Path to the template file to import (YAML format)',\n},\nbaseDir: {\ntype: 'string',",
      "occurrences": [
        {
          "path": "dist/tools/import-template.js",
          "line": 121
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 202
        }
      ]
    },
    {
      "snippet": "},\nmaxResourceMemory: {\ntype: 'number',\ndescription: 'Maximum allowed memory resource in MB (optional)',\n},",
      "occurrences": [
        {
          "path": "dist/tools/import-template.js",
          "line": 136
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 220
        }
      ]
    },
    {
      "snippet": "maxResourceMemory: {\ntype: 'number',\ndescription: 'Maximum allowed memory resource in MB (optional)',\n},\nmaxResourceCpu: {",
      "occurrences": [
        {
          "path": "dist/tools/import-template.js",
          "line": 137
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 221
        }
      ]
    },
    {
      "snippet": "type: 'number',\ndescription: 'Maximum allowed memory resource in MB (optional)',\n},\nmaxResourceCpu: {\ntype: 'number',",
      "occurrences": [
        {
          "path": "dist/tools/import-template.js",
          "line": 138
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 222
        }
      ]
    },
    {
      "snippet": "description: 'Maximum allowed memory resource in MB (optional)',\n},\nmaxResourceCpu: {\ntype: 'number',\ndescription: 'Maximum allowed CPU cores (optional)',",
      "occurrences": [
        {
          "path": "dist/tools/import-template.js",
          "line": 139
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 223
        }
      ]
    },
    {
      "snippet": "},\nmaxResourceCpu: {\ntype: 'number',\ndescription: 'Maximum allowed CPU cores (optional)',\n},",
      "occurrences": [
        {
          "path": "dist/tools/import-template.js",
          "line": 140
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 224
        }
      ]
    },
    {
      "snippet": "maxResourceCpu: {\ntype: 'number',\ndescription: 'Maximum allowed CPU cores (optional)',\n},\nallowedActions: {",
      "occurrences": [
        {
          "path": "dist/tools/import-template.js",
          "line": 141
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 225
        }
      ]
    },
    {
      "snippet": "type: 'number',\ndescription: 'Maximum allowed CPU cores (optional)',\n},\nallowedActions: {\ntype: 'array',",
      "occurrences": [
        {
          "path": "dist/tools/import-template.js",
          "line": 142
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 226
        }
      ]
    },
    {
      "snippet": "description: 'Maximum allowed CPU cores (optional)',\n},\nallowedActions: {\ntype: 'array',\nitems: { type: 'string' },",
      "occurrences": [
        {
          "path": "dist/tools/import-template.js",
          "line": 143
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 227
        }
      ]
    },
    {
      "snippet": "},\n},\nrequired: ['templatePath'],\n},\n};",
      "occurrences": [
        {
          "path": "dist/tools/import-template.js",
          "line": 154
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 240
        }
      ]
    },
    {
      "snippet": "/**\n* List Domains Tool\n*\n* MCP tool implementation for discovering available domain packs.\n* Returns LLM-optimized list of domains from the registry.",
      "occurrences": [
        {
          "path": "dist/tools/list-domains.d.ts",
          "line": 1
        },
        {
          "path": "dist/tools/list-domains.js",
          "line": 2
        },
        {
          "path": "src/tools/list-domains.ts",
          "line": 1
        }
      ]
    },
    {
      "snippet": "* List Domains Tool\n*\n* MCP tool implementation for discovering available domain packs.\n* Returns LLM-optimized list of domains from the registry.\n*",
      "occurrences": [
        {
          "path": "dist/tools/list-domains.d.ts",
          "line": 2
        },
        {
          "path": "dist/tools/list-domains.js",
          "line": 3
        },
        {
          "path": "src/tools/list-domains.ts",
          "line": 2
        }
      ]
    },
    {
      "snippet": "*\n* MCP tool implementation for discovering available domain packs.\n* Returns LLM-optimized list of domains from the registry.\n*\n* @module tools/list-domains",
      "occurrences": [
        {
          "path": "dist/tools/list-domains.d.ts",
          "line": 3
        },
        {
          "path": "dist/tools/list-domains.js",
          "line": 4
        },
        {
          "path": "src/tools/list-domains.ts",
          "line": 3
        }
      ]
    },
    {
      "snippet": "* MCP tool implementation for discovering available domain packs.\n* Returns LLM-optimized list of domains from the registry.\n*\n* @module tools/list-domains\n*/",
      "occurrences": [
        {
          "path": "dist/tools/list-domains.d.ts",
          "line": 4
        },
        {
          "path": "dist/tools/list-domains.js",
          "line": 5
        },
        {
          "path": "src/tools/list-domains.ts",
          "line": 4
        }
      ]
    },
    {
      "snippet": "/**\n* List Domains Tool Implementation\n*\n* Provides domain discovery capabilities for the MCP server.\n* Reads from the registry and formats output for LLM consumption.",
      "occurrences": [
        {
          "path": "dist/tools/list-domains.d.ts",
          "line": 11
        },
        {
          "path": "dist/tools/list-domains.js",
          "line": 12
        },
        {
          "path": "src/tools/list-domains.ts",
          "line": 14
        }
      ]
    },
    {
      "snippet": "* List Domains Tool Implementation\n*\n* Provides domain discovery capabilities for the MCP server.\n* Reads from the registry and formats output for LLM consumption.\n*/",
      "occurrences": [
        {
          "path": "dist/tools/list-domains.d.ts",
          "line": 12
        },
        {
          "path": "dist/tools/list-domains.js",
          "line": 13
        },
        {
          "path": "src/tools/list-domains.ts",
          "line": 15
        }
      ]
    },
    {
      "snippet": "/**\n* Execute the tool: load registry and return domain info\n*\n* @param registryPath - Path to registry.yaml file\n* @returns Array of domain information",
      "occurrences": [
        {
          "path": "dist/tools/list-domains.d.ts",
          "line": 20
        },
        {
          "path": "dist/tools/list-domains.js",
          "line": 22
        },
        {
          "path": "src/tools/list-domains.ts",
          "line": 27
        }
      ]
    },
    {
      "snippet": "* Execute the tool: load registry and return domain info\n*\n* @param registryPath - Path to registry.yaml file\n* @returns Array of domain information\n* @throws Error if registry cannot be loaded or is ",
      "occurrences": [
        {
          "path": "dist/tools/list-domains.d.ts",
          "line": 21
        },
        {
          "path": "dist/tools/list-domains.js",
          "line": 23
        },
        {
          "path": "src/tools/list-domains.ts",
          "line": 28
        }
      ]
    },
    {
      "snippet": "*\n* @param registryPath - Path to registry.yaml file\n* @returns Array of domain information\n* @throws Error if registry cannot be loaded or is invalid\n*/",
      "occurrences": [
        {
          "path": "dist/tools/list-domains.d.ts",
          "line": 22
        },
        {
          "path": "dist/tools/list-domains.js",
          "line": 24
        },
        {
          "path": "src/tools/list-domains.ts",
          "line": 29
        }
      ]
    },
    {
      "snippet": "/**\n* Convert DomainPackEntry to DomainInfo\n* Extracts only the information needed for tool output\n*\n* @param entry - Full domain pack entry",
      "occurrences": [
        {
          "path": "dist/tools/list-domains.d.ts",
          "line": 28
        },
        {
          "path": "dist/tools/list-domains.js",
          "line": 44
        },
        {
          "path": "src/tools/list-domains.ts",
          "line": 50
        }
      ]
    },
    {
      "snippet": "* Convert DomainPackEntry to DomainInfo\n* Extracts only the information needed for tool output\n*\n* @param entry - Full domain pack entry\n* @returns Simplified domain info",
      "occurrences": [
        {
          "path": "dist/tools/list-domains.d.ts",
          "line": 29
        },
        {
          "path": "dist/tools/list-domains.js",
          "line": 45
        },
        {
          "path": "src/tools/list-domains.ts",
          "line": 51
        }
      ]
    },
    {
      "snippet": "* Extracts only the information needed for tool output\n*\n* @param entry - Full domain pack entry\n* @returns Simplified domain info\n*/",
      "occurrences": [
        {
          "path": "dist/tools/list-domains.d.ts",
          "line": 30
        },
        {
          "path": "dist/tools/list-domains.js",
          "line": 46
        },
        {
          "path": "src/tools/list-domains.ts",
          "line": 52
        }
      ]
    },
    {
      "snippet": "/**\n* Format domains for LLM readability\n* Creates a human-friendly description of available domains\n*\n* @param domains - Array of domain information",
      "occurrences": [
        {
          "path": "dist/tools/list-domains.d.ts",
          "line": 36
        },
        {
          "path": "dist/tools/list-domains.js",
          "line": 62
        },
        {
          "path": "src/tools/list-domains.ts",
          "line": 71
        }
      ]
    },
    {
      "snippet": "* Format domains for LLM readability\n* Creates a human-friendly description of available domains\n*\n* @param domains - Array of domain information\n* @returns Formatted string optimized for LLM consumpt",
      "occurrences": [
        {
          "path": "dist/tools/list-domains.d.ts",
          "line": 37
        },
        {
          "path": "dist/tools/list-domains.js",
          "line": 63
        },
        {
          "path": "src/tools/list-domains.ts",
          "line": 72
        }
      ]
    },
    {
      "snippet": "* Creates a human-friendly description of available domains\n*\n* @param domains - Array of domain information\n* @returns Formatted string optimized for LLM consumption\n*/",
      "occurrences": [
        {
          "path": "dist/tools/list-domains.d.ts",
          "line": 38
        },
        {
          "path": "dist/tools/list-domains.js",
          "line": 64
        },
        {
          "path": "src/tools/list-domains.ts",
          "line": 73
        }
      ]
    },
    {
      "snippet": "// Handle empty registry gracefully\nif (error instanceof Error && error.message.includes('File not found')) {\nreturn [];\n}\nthrow error;",
      "occurrences": [
        {
          "path": "dist/tools/list-domains.js",
          "line": 37
        },
        {
          "path": "src/tools/list-domains.ts",
          "line": 42
        }
      ]
    },
    {
      "snippet": "if (error instanceof Error && error.message.includes('File not found')) {\nreturn [];\n}\nthrow error;\n}",
      "occurrences": [
        {
          "path": "dist/tools/list-domains.js",
          "line": 38
        },
        {
          "path": "src/tools/list-domains.ts",
          "line": 43
        }
      ]
    },
    {
      "snippet": "return [];\n}\nthrow error;\n}\n}",
      "occurrences": [
        {
          "path": "dist/tools/list-domains.js",
          "line": 39
        },
        {
          "path": "src/tools/list-domains.ts",
          "line": 44
        }
      ]
    },
    {
      "snippet": "domains.forEach((domain, index) => {\nlines.push(`${index + 1}. **${domain.name}** (v${domain.version})`);\nlines.push(`   ${domain.description}`);\nif (domain.author) {\nlines.push(`   Author: ${domain.a",
      "occurrences": [
        {
          "path": "dist/tools/list-domains.js",
          "line": 77
        },
        {
          "path": "src/tools/list-domains.ts",
          "line": 88
        }
      ]
    },
    {
      "snippet": "lines.push(`${index + 1}. **${domain.name}** (v${domain.version})`);\nlines.push(`   ${domain.description}`);\nif (domain.author) {\nlines.push(`   Author: ${domain.author}`);\n}",
      "occurrences": [
        {
          "path": "dist/tools/list-domains.js",
          "line": 78
        },
        {
          "path": "src/tools/list-domains.ts",
          "line": 89
        }
      ]
    },
    {
      "snippet": "lines.push(`   ${domain.description}`);\nif (domain.author) {\nlines.push(`   Author: ${domain.author}`);\n}\nlines.push(''); // Blank line between entries",
      "occurrences": [
        {
          "path": "dist/tools/list-domains.js",
          "line": 79
        },
        {
          "path": "src/tools/list-domains.ts",
          "line": 90
        }
      ]
    },
    {
      "snippet": "if (domain.author) {\nlines.push(`   Author: ${domain.author}`);\n}\nlines.push(''); // Blank line between entries\n});",
      "occurrences": [
        {
          "path": "dist/tools/list-domains.js",
          "line": 80
        },
        {
          "path": "src/tools/list-domains.ts",
          "line": 91
        }
      ]
    },
    {
      "snippet": "inputSchema: {\ntype: 'object',\nproperties: {},\nadditionalProperties: false,\n},",
      "occurrences": [
        {
          "path": "dist/tools/list-domains.js",
          "line": 96
        },
        {
          "path": "src/tools/list-domains.ts",
          "line": 109
        }
      ]
    },
    {
      "snippet": "type: 'object',\nproperties: {},\nadditionalProperties: false,\n},\n};",
      "occurrences": [
        {
          "path": "dist/tools/list-domains.js",
          "line": 97
        },
        {
          "path": "src/tools/list-domains.ts",
          "line": 110
        }
      ]
    },
    {
      "snippet": "/**\n* optimize_tokens MCP Tool\n*\n* Optimizes mission content for token efficiency using model-aware compression.\n* Implements the 4-pass pipeline from R4.1 research.",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 1
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 2
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 1
        }
      ]
    },
    {
      "snippet": "* optimize_tokens MCP Tool\n*\n* Optimizes mission content for token efficiency using model-aware compression.\n* Implements the 4-pass pipeline from R4.1 research.\n*",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 2
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 3
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 2
        }
      ]
    },
    {
      "snippet": "*\n* Optimizes mission content for token efficiency using model-aware compression.\n* Implements the 4-pass pipeline from R4.1 research.\n*\n* Algorithm:",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 3
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 4
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 3
        }
      ]
    },
    {
      "snippet": "* Optimizes mission content for token efficiency using model-aware compression.\n* Implements the 4-pass pipeline from R4.1 research.\n*\n* Algorithm:\n* 1. Load mission file",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 4
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 5
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 4
        }
      ]
    },
    {
      "snippet": "* Implements the 4-pass pipeline from R4.1 research.\n*\n* Algorithm:\n* 1. Load mission file\n* 2. Apply multi-pass compression (sanitization, structural, linguistic, model-specific)",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 5
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 6
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 5
        }
      ]
    },
    {
      "snippet": "*\n* Algorithm:\n* 1. Load mission file\n* 2. Apply multi-pass compression (sanitization, structural, linguistic, model-specific)\n* 3. Calculate compression statistics",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 6
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 7
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 6
        }
      ]
    },
    {
      "snippet": "* Algorithm:\n* 1. Load mission file\n* 2. Apply multi-pass compression (sanitization, structural, linguistic, model-specific)\n* 3. Calculate compression statistics\n* 4. Return optimized content and sta",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 7
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 8
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 7
        }
      ]
    },
    {
      "snippet": "* 1. Load mission file\n* 2. Apply multi-pass compression (sanitization, structural, linguistic, model-specific)\n* 3. Calculate compression statistics\n* 4. Return optimized content and stats\n*",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 8
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 9
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 8
        }
      ]
    },
    {
      "snippet": "* 2. Apply multi-pass compression (sanitization, structural, linguistic, model-specific)\n* 3. Calculate compression statistics\n* 4. Return optimized content and stats\n*\n* @module tools/optimize-tokens",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 9
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 10
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 9
        }
      ]
    },
    {
      "snippet": "* 3. Calculate compression statistics\n* 4. Return optimized content and stats\n*\n* @module tools/optimize-tokens\n* @version 1.0",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 10
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 11
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 10
        }
      ]
    },
    {
      "snippet": "* 4. Return optimized content and stats\n*\n* @module tools/optimize-tokens\n* @version 1.0\n*/",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 11
        },
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 12
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 11
        }
      ]
    },
    {
      "snippet": "/**\n* Parameters for optimize_tokens tool\n*/\nexport interface OptimizeTokensParams {\n/** Path to mission file to optimize */",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 18
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 22
        }
      ]
    },
    {
      "snippet": "* Parameters for optimize_tokens tool\n*/\nexport interface OptimizeTokensParams {\n/** Path to mission file to optimize */\nmissionFile: string;",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 19
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 23
        }
      ]
    },
    {
      "snippet": "success: boolean;\noptimizedContent?: string;\nstats?: {\noriginalTokens: number;\ncompressedTokens: number;",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 81
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 111
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 93
        }
      ]
    },
    {
      "snippet": "optimizedContent?: string;\nstats?: {\noriginalTokens: number;\ncompressedTokens: number;\nreductionPercentage: number;",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 82
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 112
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 94
        }
      ]
    },
    {
      "snippet": "stats?: {\noriginalTokens: number;\ncompressedTokens: number;\nreductionPercentage: number;\ncompressionRatio: number;",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 83
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 113
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 95
        }
      ]
    },
    {
      "snippet": "originalTokens: number;\ncompressedTokens: number;\nreductionPercentage: number;\ncompressionRatio: number;\npassesApplied: string[];",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 84
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 114
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 96
        }
      ]
    },
    {
      "snippet": "compressedTokens: number;\nreductionPercentage: number;\ncompressionRatio: number;\npassesApplied: string[];\n};",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 85
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 115
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 97
        }
      ]
    },
    {
      "snippet": "reductionPercentage: number;\ncompressionRatio: number;\npassesApplied: string[];\n};\ntokenUsage?: {",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 86
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 116
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 98
        }
      ]
    },
    {
      "snippet": "compressionRatio: number;\npassesApplied: string[];\n};\ntokenUsage?: {\nmodel: SupportedModel;",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 87
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 117
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 99
        }
      ]
    },
    {
      "snippet": "passesApplied: string[];\n};\ntokenUsage?: {\nmodel: SupportedModel;\noriginal: {",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 88
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 118
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 100
        }
      ]
    },
    {
      "snippet": "};\ntokenUsage?: {\nmodel: SupportedModel;\noriginal: {\ncount: number;",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 89
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 119
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 101
        }
      ]
    },
    {
      "snippet": "tokenUsage?: {\nmodel: SupportedModel;\noriginal: {\ncount: number;\nestimatedCost?: number;",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 90
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 120
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 102
        }
      ]
    },
    {
      "snippet": "model: SupportedModel;\noriginal: {\ncount: number;\nestimatedCost?: number;\n};",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 91
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 121
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 103
        }
      ]
    },
    {
      "snippet": "original: {\ncount: number;\nestimatedCost?: number;\n};\noptimized: {",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 92
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 122
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 104
        }
      ]
    },
    {
      "snippet": "count: number;\nestimatedCost?: number;\n};\noptimized: {\ncount: number;",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 93
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 123
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 105
        }
      ]
    },
    {
      "snippet": "estimatedCost?: number;\n};\noptimized: {\ncount: number;\nestimatedCost?: number;",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 94
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 124
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 106
        }
      ]
    },
    {
      "snippet": "};\noptimized: {\ncount: number;\nestimatedCost?: number;\n};",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 95
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 125
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 107
        }
      ]
    },
    {
      "snippet": "optimized: {\ncount: number;\nestimatedCost?: number;\n};\nsavings: number;",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 96
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 126
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 108
        }
      ]
    },
    {
      "snippet": "count: number;\nestimatedCost?: number;\n};\nsavings: number;\ncompressionRatio: number;",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 97
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 127
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 109
        }
      ]
    },
    {
      "snippet": "estimatedCost?: number;\n};\nsavings: number;\ncompressionRatio: number;\n};",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 98
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 128
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 110
        }
      ]
    },
    {
      "snippet": "};\nsavings: number;\ncompressionRatio: number;\n};\nwarnings?: string[];",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 99
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 129
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 111
        }
      ]
    },
    {
      "snippet": "savings: number;\ncompressionRatio: number;\n};\nwarnings?: string[];\nerror?: string;",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 100
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 130
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 112
        }
      ]
    },
    {
      "snippet": "compressionRatio: number;\n};\nwarnings?: string[];\nerror?: string;\n}>;",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 101
        },
        {
          "path": "dist/tools/optimize-tokens.d.ts",
          "line": 131
        }
      ]
    },
    {
      "snippet": "name: 'optimize_tokens',\ndescription: 'Optimize mission content for token efficiency. Applies model-aware compression using a 4-pass pipeline: sanitization, structural refactoring, linguistic simplifi",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 60
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 46
        }
      ]
    },
    {
      "snippet": "description: 'Optimize mission content for token efficiency. Applies model-aware compression using a 4-pass pipeline: sanitization, structural refactoring, linguistic simplification, and model-specifi",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 61
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 47
        }
      ]
    },
    {
      "snippet": "inputSchema: {\ntype: 'object',\nrequired: ['missionFile', 'targetModel'],\nproperties: {\nmissionFile: {",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 62
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 48
        }
      ]
    },
    {
      "snippet": "type: 'object',\nrequired: ['missionFile', 'targetModel'],\nproperties: {\nmissionFile: {\ntype: 'string',",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 63
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 49
        }
      ]
    },
    {
      "snippet": "required: ['missionFile', 'targetModel'],\nproperties: {\nmissionFile: {\ntype: 'string',\ndescription: 'Path to the mission file to optimize (YAML format)',",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 64
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 50
        }
      ]
    },
    {
      "snippet": "properties: {\nmissionFile: {\ntype: 'string',\ndescription: 'Path to the mission file to optimize (YAML format)',\n},",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 65
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 51
        }
      ]
    },
    {
      "snippet": "missionFile: {\ntype: 'string',\ndescription: 'Path to the mission file to optimize (YAML format)',\n},\ntargetModel: {",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 66
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 52
        }
      ]
    },
    {
      "snippet": "type: 'string',\ndescription: 'Path to the mission file to optimize (YAML format)',\n},\ntargetModel: {\ntype: 'string',",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 67
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 53
        }
      ]
    },
    {
      "snippet": "description: 'Path to the mission file to optimize (YAML format)',\n},\ntargetModel: {\ntype: 'string',\nenum: ['claude', 'gpt', 'gemini'],",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 68
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 54
        }
      ]
    },
    {
      "snippet": "},\ntargetModel: {\ntype: 'string',\nenum: ['claude', 'gpt', 'gemini'],\ndescription: 'Target AI model for optimization (determines output format)',",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 69
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 55
        }
      ]
    },
    {
      "snippet": "targetModel: {\ntype: 'string',\nenum: ['claude', 'gpt', 'gemini'],\ndescription: 'Target AI model for optimization (determines output format)',\n},",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 70
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 56
        }
      ]
    },
    {
      "snippet": "type: 'string',\nenum: ['claude', 'gpt', 'gemini'],\ndescription: 'Target AI model for optimization (determines output format)',\n},\ncompressionLevel: {",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 71
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 57
        }
      ]
    },
    {
      "snippet": "enum: ['claude', 'gpt', 'gemini'],\ndescription: 'Target AI model for optimization (determines output format)',\n},\ncompressionLevel: {\ntype: 'string',",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 72
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 58
        }
      ]
    },
    {
      "snippet": "description: 'Target AI model for optimization (determines output format)',\n},\ncompressionLevel: {\ntype: 'string',\nenum: ['conservative', 'balanced', 'aggressive'],",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 73
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 59
        }
      ]
    },
    {
      "snippet": "},\ncompressionLevel: {\ntype: 'string',\nenum: ['conservative', 'balanced', 'aggressive'],\ndescription: 'Compression level (default: balanced)',",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 74
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 60
        }
      ]
    },
    {
      "snippet": "compressionLevel: {\ntype: 'string',\nenum: ['conservative', 'balanced', 'aggressive'],\ndescription: 'Compression level (default: balanced)',\n},",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 75
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 61
        }
      ]
    },
    {
      "snippet": "type: 'string',\nenum: ['conservative', 'balanced', 'aggressive'],\ndescription: 'Compression level (default: balanced)',\n},\ndryRun: {",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 76
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 62
        }
      ]
    },
    {
      "snippet": "enum: ['conservative', 'balanced', 'aggressive'],\ndescription: 'Compression level (default: balanced)',\n},\ndryRun: {\ntype: 'boolean',",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 77
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 63
        }
      ]
    },
    {
      "snippet": "description: 'Compression level (default: balanced)',\n},\ndryRun: {\ntype: 'boolean',\ndescription: 'Preview mode - shows stats without applying changes (default: false)',",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 78
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 64
        }
      ]
    },
    {
      "snippet": "},\ndryRun: {\ntype: 'boolean',\ndescription: 'Preview mode - shows stats without applying changes (default: false)',\n},",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 79
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 65
        }
      ]
    },
    {
      "snippet": "dryRun: {\ntype: 'boolean',\ndescription: 'Preview mode - shows stats without applying changes (default: false)',\n},\npreserveTags: {",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 80
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 66
        }
      ]
    },
    {
      "snippet": "type: 'boolean',\ndescription: 'Preview mode - shows stats without applying changes (default: false)',\n},\npreserveTags: {\ntype: 'array',",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 81
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 67
        }
      ]
    },
    {
      "snippet": "description: 'Preview mode - shows stats without applying changes (default: false)',\n},\npreserveTags: {\ntype: 'array',\nitems: { type: 'string' },",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 82
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 68
        }
      ]
    },
    {
      "snippet": "},\npreserveTags: {\ntype: 'array',\nitems: { type: 'string' },\ndescription: 'Custom XML tags to preserve from compression (e.g., [\"critical\", \"exact\"])',",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 83
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 69
        }
      ]
    },
    {
      "snippet": "preserveTags: {\ntype: 'array',\nitems: { type: 'string' },\ndescription: 'Custom XML tags to preserve from compression (e.g., [\"critical\", \"exact\"])',\n},",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 84
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 70
        }
      ]
    },
    {
      "snippet": "type: 'array',\nitems: { type: 'string' },\ndescription: 'Custom XML tags to preserve from compression (e.g., [\"critical\", \"exact\"])',\n},\n},",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 85
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 71
        }
      ]
    },
    {
      "snippet": "items: { type: 'string' },\ndescription: 'Custom XML tags to preserve from compression (e.g., [\"critical\", \"exact\"])',\n},\n},\n},",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 86
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 72
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: false,\nerror: `Mission file not found: ${params.missionFile}`,\n};\n}",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 110
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 125
        }
      ]
    },
    {
      "snippet": "// Optimize\nconst result = await this.optimizer.optimize(content, {\nmodel: params.targetModel,\nlevel: params.compressionLevel || 'balanced',\npreserveTags: params.preserveTags,",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 117
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 134
        }
      ]
    },
    {
      "snippet": "const result = await this.optimizer.optimize(content, {\nmodel: params.targetModel,\nlevel: params.compressionLevel || 'balanced',\npreserveTags: params.preserveTags,\ndryRun: params.dryRun || false,",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 118
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 135
        }
      ]
    },
    {
      "snippet": "model: params.targetModel,\nlevel: params.compressionLevel || 'balanced',\npreserveTags: params.preserveTags,\ndryRun: params.dryRun || false,\n});",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 119
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 136
        }
      ]
    },
    {
      "snippet": "// Write optimized content back if not dry run\nif (!params.dryRun) {\nconst backupPath = `${absolutePath}.backup`;\nawait fs.copyFile(absolutePath, backupPath);\nawait fs.writeFile(absolutePath, result.o",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 124
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 142
        }
      ]
    },
    {
      "snippet": "if (!params.dryRun) {\nconst backupPath = `${absolutePath}.backup`;\nawait fs.copyFile(absolutePath, backupPath);\nawait fs.writeFile(absolutePath, result.optimized, 'utf-8');\n}",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 125
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 143
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: true,\noptimizedContent: result.optimized,\nstats: {\noriginalTokens: result.stats.originalTokens,",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 130
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 149
        }
      ]
    },
    {
      "snippet": "success: true,\noptimizedContent: result.optimized,\nstats: {\noriginalTokens: result.stats.originalTokens,\ncompressedTokens: result.stats.compressedTokens,",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 131
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 150
        }
      ]
    },
    {
      "snippet": "optimizedContent: result.optimized,\nstats: {\noriginalTokens: result.stats.originalTokens,\ncompressedTokens: result.stats.compressedTokens,\nreductionPercentage: result.stats.reductionPercentage,",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 132
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 151
        }
      ]
    },
    {
      "snippet": "stats: {\noriginalTokens: result.stats.originalTokens,\ncompressedTokens: result.stats.compressedTokens,\nreductionPercentage: result.stats.reductionPercentage,\ncompressionRatio: result.stats.compression",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 133
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 152
        }
      ]
    },
    {
      "snippet": "originalTokens: result.stats.originalTokens,\ncompressedTokens: result.stats.compressedTokens,\nreductionPercentage: result.stats.reductionPercentage,\ncompressionRatio: result.stats.compressionRatio,\npa",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 134
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 153
        }
      ]
    },
    {
      "snippet": "compressedTokens: result.stats.compressedTokens,\nreductionPercentage: result.stats.reductionPercentage,\ncompressionRatio: result.stats.compressionRatio,\npassesApplied: result.stats.passesApplied,\n},",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 135
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 154
        }
      ]
    },
    {
      "snippet": "reductionPercentage: result.stats.reductionPercentage,\ncompressionRatio: result.stats.compressionRatio,\npassesApplied: result.stats.passesApplied,\n},\nwarnings: result.warnings,",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 136
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 155
        }
      ]
    },
    {
      "snippet": "compressionRatio: result.stats.compressionRatio,\npassesApplied: result.stats.passesApplied,\n},\nwarnings: result.warnings,\ntokenUsage: {",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 137
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 156
        }
      ]
    },
    {
      "snippet": "passesApplied: result.stats.passesApplied,\n},\nwarnings: result.warnings,\ntokenUsage: {\nmodel: result.tokenUsage.model,",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 138
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 157
        }
      ]
    },
    {
      "snippet": "},\nwarnings: result.warnings,\ntokenUsage: {\nmodel: result.tokenUsage.model,\noriginal: {",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 139
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 158
        }
      ]
    },
    {
      "snippet": "warnings: result.warnings,\ntokenUsage: {\nmodel: result.tokenUsage.model,\noriginal: {\ncount: result.tokenUsage.original.count,",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 140
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 159
        }
      ]
    },
    {
      "snippet": "tokenUsage: {\nmodel: result.tokenUsage.model,\noriginal: {\ncount: result.tokenUsage.original.count,\nestimatedCost: result.tokenUsage.original.estimatedCost,",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 141
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 160
        }
      ]
    },
    {
      "snippet": "model: result.tokenUsage.model,\noriginal: {\ncount: result.tokenUsage.original.count,\nestimatedCost: result.tokenUsage.original.estimatedCost,\n},",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 142
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 161
        }
      ]
    },
    {
      "snippet": "original: {\ncount: result.tokenUsage.original.count,\nestimatedCost: result.tokenUsage.original.estimatedCost,\n},\noptimized: {",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 143
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 162
        }
      ]
    },
    {
      "snippet": "count: result.tokenUsage.original.count,\nestimatedCost: result.tokenUsage.original.estimatedCost,\n},\noptimized: {\ncount: result.tokenUsage.optimized.count,",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 144
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 163
        }
      ]
    },
    {
      "snippet": "estimatedCost: result.tokenUsage.original.estimatedCost,\n},\noptimized: {\ncount: result.tokenUsage.optimized.count,\nestimatedCost: result.tokenUsage.optimized.estimatedCost,",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 145
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 164
        }
      ]
    },
    {
      "snippet": "},\noptimized: {\ncount: result.tokenUsage.optimized.count,\nestimatedCost: result.tokenUsage.optimized.estimatedCost,\n},",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 146
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 165
        }
      ]
    },
    {
      "snippet": "optimized: {\ncount: result.tokenUsage.optimized.count,\nestimatedCost: result.tokenUsage.optimized.estimatedCost,\n},\nsavings: result.tokenUsage.savings,",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 147
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 166
        }
      ]
    },
    {
      "snippet": "count: result.tokenUsage.optimized.count,\nestimatedCost: result.tokenUsage.optimized.estimatedCost,\n},\nsavings: result.tokenUsage.savings,\ncompressionRatio: result.tokenUsage.compressionRatio,",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 148
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 167
        }
      ]
    },
    {
      "snippet": "estimatedCost: result.tokenUsage.optimized.estimatedCost,\n},\nsavings: result.tokenUsage.savings,\ncompressionRatio: result.tokenUsage.compressionRatio,\n},",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 149
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 168
        }
      ]
    },
    {
      "snippet": "},\nsavings: result.tokenUsage.savings,\ncompressionRatio: result.tokenUsage.compressionRatio,\n},\n};",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 150
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 169
        }
      ]
    },
    {
      "snippet": "};\n}\ncatch (error) {\nreturn {\nsuccess: false,",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 154
        },
        {
          "path": "dist/tools/score-quality.js",
          "line": 68
        },
        {
          "path": "dist/tools/version-template.js",
          "line": 53
        },
        {
          "path": "dist/tools/version-template.js",
          "line": 116
        },
        {
          "path": "dist/tools/version-template.js",
          "line": 177
        },
        {
          "path": "dist/tools/version-template.js",
          "line": 236
        },
        {
          "path": "dist/tools/version-template.js",
          "line": 278
        },
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 188
        },
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 320
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: false,\nerror: error instanceof Error ? error.message : 'Unknown error during optimization',\n};\n}",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 157
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 175
        }
      ]
    },
    {
      "snippet": "success: false,\nerror: error instanceof Error ? error.message : 'Unknown error during optimization',\n};\n}\n}",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 158
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 176
        }
      ]
    },
    {
      "snippet": "error: error instanceof Error ? error.message : 'Unknown error during optimization',\n};\n}\n}\n}",
      "occurrences": [
        {
          "path": "dist/tools/optimize-tokens.js",
          "line": 159
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 177
        }
      ]
    },
    {
      "snippet": "export interface ScoreQualityOutput {\nsuccess: boolean;\nscore?: QualityScore;\nsummary?: string;\nerror?: string;",
      "occurrences": [
        {
          "path": "dist/tools/score-quality.d.ts",
          "line": 10
        },
        {
          "path": "src/tools/score-quality.ts",
          "line": 16
        }
      ]
    },
    {
      "snippet": "success: boolean;\nscore?: QualityScore;\nsummary?: string;\nerror?: string;\n}",
      "occurrences": [
        {
          "path": "dist/tools/score-quality.d.ts",
          "line": 11
        },
        {
          "path": "src/tools/score-quality.ts",
          "line": 17
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: true,\nscore,\nsummary\n};",
      "occurrences": [
        {
          "path": "dist/tools/score-quality.js",
          "line": 64
        },
        {
          "path": "src/tools/score-quality.ts",
          "line": 48
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: false,\nerror: error instanceof Error ? error.message : String(error)\n};\n}",
      "occurrences": [
        {
          "path": "dist/tools/score-quality.js",
          "line": 71
        },
        {
          "path": "src/tools/score-quality.ts",
          "line": 54
        }
      ]
    },
    {
      "snippet": "success: false,\nerror: error instanceof Error ? error.message : String(error)\n};\n}\n}",
      "occurrences": [
        {
          "path": "dist/tools/score-quality.js",
          "line": 72
        },
        {
          "path": "src/tools/score-quality.ts",
          "line": 55
        }
      ]
    },
    {
      "snippet": "// Dimensional breakdown\nlines.push('Dimensional Scores:');\nlines.push(`  Clarity:      ${(score.dimensions.clarity.score * 100).toFixed(1)}%`);\nlines.push(`  Completeness: ${(score.dimensions.complet",
      "occurrences": [
        {
          "path": "dist/tools/score-quality.js",
          "line": 88
        },
        {
          "path": "src/tools/score-quality.ts",
          "line": 75
        }
      ]
    },
    {
      "snippet": "lines.push('Dimensional Scores:');\nlines.push(`  Clarity:      ${(score.dimensions.clarity.score * 100).toFixed(1)}%`);\nlines.push(`  Completeness: ${(score.dimensions.completeness.score * 100).toFixe",
      "occurrences": [
        {
          "path": "dist/tools/score-quality.js",
          "line": 89
        },
        {
          "path": "src/tools/score-quality.ts",
          "line": 76
        }
      ]
    },
    {
      "snippet": "if (criticalSuggestions.length > 0) {\nlines.push('\\n  CRITICAL:');\ncriticalSuggestions.forEach((s, i) => {\nlines.push(`    ${i + 1}. ${s.message}`);\n});",
      "occurrences": [
        {
          "path": "dist/tools/score-quality.js",
          "line": 103
        },
        {
          "path": "src/tools/score-quality.ts",
          "line": 94
        }
      ]
    },
    {
      "snippet": "lines.push('\\n  CRITICAL:');\ncriticalSuggestions.forEach((s, i) => {\nlines.push(`    ${i + 1}. ${s.message}`);\n});\n}",
      "occurrences": [
        {
          "path": "dist/tools/score-quality.js",
          "line": 104
        },
        {
          "path": "src/tools/score-quality.ts",
          "line": 95
        }
      ]
    },
    {
      "snippet": "if (importantSuggestions.length > 0) {\nlines.push('\\n  IMPORTANT:');\nimportantSuggestions.forEach((s, i) => {\nlines.push(`    ${i + 1}. ${s.message}`);\n});",
      "occurrences": [
        {
          "path": "dist/tools/score-quality.js",
          "line": 109
        },
        {
          "path": "src/tools/score-quality.ts",
          "line": 101
        }
      ]
    },
    {
      "snippet": "lines.push('\\n  IMPORTANT:');\nimportantSuggestions.forEach((s, i) => {\nlines.push(`    ${i + 1}. ${s.message}`);\n});\n}",
      "occurrences": [
        {
          "path": "dist/tools/score-quality.js",
          "line": 110
        },
        {
          "path": "src/tools/score-quality.ts",
          "line": 102
        }
      ]
    },
    {
      "snippet": "if (verbose && infoSuggestions.length > 0) {\nlines.push('\\n  INFO:');\ninfoSuggestions.forEach((s, i) => {\nlines.push(`    ${i + 1}. ${s.message}`);\n});",
      "occurrences": [
        {
          "path": "dist/tools/score-quality.js",
          "line": 115
        },
        {
          "path": "src/tools/score-quality.ts",
          "line": 108
        }
      ]
    },
    {
      "snippet": "lines.push('\\n  INFO:');\ninfoSuggestions.forEach((s, i) => {\nlines.push(`    ${i + 1}. ${s.message}`);\n});\n}",
      "occurrences": [
        {
          "path": "dist/tools/score-quality.js",
          "line": 116
        },
        {
          "path": "src/tools/score-quality.ts",
          "line": 109
        }
      ]
    },
    {
      "snippet": "lines.push('\\nAI-Readiness Metrics:');\nscore.dimensions.aiReadiness.metrics.forEach(m => {\nlines.push(`  ${m.name}: ${(m.normalizedScore * 100).toFixed(1)}% (raw: ${m.rawValue.toFixed(2)})`);\n});\n}",
      "occurrences": [
        {
          "path": "dist/tools/score-quality.js",
          "line": 136
        },
        {
          "path": "src/tools/score-quality.ts",
          "line": 132
        }
      ]
    },
    {
      "snippet": "name: 'score_quality',\ndescription: 'Assess mission quality using three-dimensional framework (Clarity, Completeness, AI-Readiness)',\ninputSchema: {\ntype: 'object',\nproperties: {",
      "occurrences": [
        {
          "path": "dist/tools/score-quality.js",
          "line": 161
        },
        {
          "path": "src/tools/score-quality.ts",
          "line": 156
        }
      ]
    },
    {
      "snippet": "description: 'Assess mission quality using three-dimensional framework (Clarity, Completeness, AI-Readiness)',\ninputSchema: {\ntype: 'object',\nproperties: {\nmissionFile: {",
      "occurrences": [
        {
          "path": "dist/tools/score-quality.js",
          "line": 162
        },
        {
          "path": "src/tools/score-quality.ts",
          "line": 157
        }
      ]
    },
    {
      "snippet": "type: 'object',\nproperties: {\nmissionFile: {\ntype: 'string',\ndescription: 'Path to the mission YAML file to assess'",
      "occurrences": [
        {
          "path": "dist/tools/score-quality.js",
          "line": 164
        },
        {
          "path": "src/tools/score-quality.ts",
          "line": 159
        }
      ]
    },
    {
      "snippet": "properties: {\nmissionFile: {\ntype: 'string',\ndescription: 'Path to the mission YAML file to assess'\n},",
      "occurrences": [
        {
          "path": "dist/tools/score-quality.js",
          "line": 165
        },
        {
          "path": "src/tools/score-quality.ts",
          "line": 160
        }
      ]
    },
    {
      "snippet": "missionFile: {\ntype: 'string',\ndescription: 'Path to the mission YAML file to assess'\n},\nverbose: {",
      "occurrences": [
        {
          "path": "dist/tools/score-quality.js",
          "line": 166
        },
        {
          "path": "src/tools/score-quality.ts",
          "line": 161
        }
      ]
    },
    {
      "snippet": "type: 'string',\ndescription: 'Path to the mission YAML file to assess'\n},\nverbose: {\ntype: 'boolean',",
      "occurrences": [
        {
          "path": "dist/tools/score-quality.js",
          "line": 167
        },
        {
          "path": "src/tools/score-quality.ts",
          "line": 162
        }
      ]
    },
    {
      "snippet": "description: 'Path to the mission YAML file to assess'\n},\nverbose: {\ntype: 'boolean',\ndescription: 'Include detailed metric breakdown in output',",
      "occurrences": [
        {
          "path": "dist/tools/score-quality.js",
          "line": 168
        },
        {
          "path": "src/tools/score-quality.ts",
          "line": 163
        }
      ]
    },
    {
      "snippet": "},\nverbose: {\ntype: 'boolean',\ndescription: 'Include detailed metric breakdown in output',\ndefault: false",
      "occurrences": [
        {
          "path": "dist/tools/score-quality.js",
          "line": 169
        },
        {
          "path": "src/tools/score-quality.ts",
          "line": 164
        }
      ]
    },
    {
      "snippet": "verbose: {\ntype: 'boolean',\ndescription: 'Include detailed metric breakdown in output',\ndefault: false\n}",
      "occurrences": [
        {
          "path": "dist/tools/score-quality.js",
          "line": 170
        },
        {
          "path": "src/tools/score-quality.ts",
          "line": 165
        }
      ]
    },
    {
      "snippet": "type: 'boolean',\ndescription: 'Include detailed metric breakdown in output',\ndefault: false\n}\n},",
      "occurrences": [
        {
          "path": "dist/tools/score-quality.js",
          "line": 171
        },
        {
          "path": "src/tools/score-quality.ts",
          "line": 166
        }
      ]
    },
    {
      "snippet": "description: 'Include detailed metric breakdown in output',\ndefault: false\n}\n},\nrequired: ['missionFile']",
      "occurrences": [
        {
          "path": "dist/tools/score-quality.js",
          "line": 172
        },
        {
          "path": "src/tools/score-quality.ts",
          "line": 167
        }
      ]
    },
    {
      "snippet": "default: false\n}\n},\nrequired: ['missionFile']\n},",
      "occurrences": [
        {
          "path": "dist/tools/score-quality.js",
          "line": 173
        },
        {
          "path": "src/tools/score-quality.ts",
          "line": 168
        }
      ]
    },
    {
      "snippet": "}\n},\nrequired: ['missionFile']\n},\nhandler: scoreQuality",
      "occurrences": [
        {
          "path": "dist/tools/score-quality.js",
          "line": 174
        },
        {
          "path": "src/tools/score-quality.ts",
          "line": 169
        }
      ]
    },
    {
      "snippet": "},\nrequired: ['missionFile']\n},\nhandler: scoreQuality\n};",
      "occurrences": [
        {
          "path": "dist/tools/score-quality.js",
          "line": 175
        },
        {
          "path": "src/tools/score-quality.ts",
          "line": 170
        }
      ]
    },
    {
      "snippet": "/**\n* split_mission MCP Tool\n*\n* Autonomously splits oversized missions into coherent sub-missions\n* using the hybrid semantic-structural decomposition algorithm.",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 1
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 2
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 1
        }
      ]
    },
    {
      "snippet": "* split_mission MCP Tool\n*\n* Autonomously splits oversized missions into coherent sub-missions\n* using the hybrid semantic-structural decomposition algorithm.\n*",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 2
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 3
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 2
        }
      ]
    },
    {
      "snippet": "*\n* Autonomously splits oversized missions into coherent sub-missions\n* using the hybrid semantic-structural decomposition algorithm.\n*\n* Algorithm:",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 3
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 4
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 3
        }
      ]
    },
    {
      "snippet": "* Autonomously splits oversized missions into coherent sub-missions\n* using the hybrid semantic-structural decomposition algorithm.\n*\n* Algorithm:\n* 1. Load and parse mission file (YAML or text)",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 4
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 5
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 4
        }
      ]
    },
    {
      "snippet": "* using the hybrid semantic-structural decomposition algorithm.\n*\n* Algorithm:\n* 1. Load and parse mission file (YAML or text)\n* 2. Analyze complexity using ComplexityScorer",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 5
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 6
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 5
        }
      ]
    },
    {
      "snippet": "*\n* Algorithm:\n* 1. Load and parse mission file (YAML or text)\n* 2. Analyze complexity using ComplexityScorer\n* 3. If complexity exceeds threshold, split using MissionSplitter",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 6
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 7
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 6
        }
      ]
    },
    {
      "snippet": "* Algorithm:\n* 1. Load and parse mission file (YAML or text)\n* 2. Analyze complexity using ComplexityScorer\n* 3. If complexity exceeds threshold, split using MissionSplitter\n* 4. Generate individual s",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 7
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 8
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 7
        }
      ]
    },
    {
      "snippet": "* 1. Load and parse mission file (YAML or text)\n* 2. Analyze complexity using ComplexityScorer\n* 3. If complexity exceeds threshold, split using MissionSplitter\n* 4. Generate individual sub-mission fi",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 8
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 9
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 8
        }
      ]
    },
    {
      "snippet": "* 2. Analyze complexity using ComplexityScorer\n* 3. If complexity exceeds threshold, split using MissionSplitter\n* 4. Generate individual sub-mission files\n* 5. Return execution plan and file paths\n*",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 9
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 10
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 9
        }
      ]
    },
    {
      "snippet": "* 3. If complexity exceeds threshold, split using MissionSplitter\n* 4. Generate individual sub-mission files\n* 5. Return execution plan and file paths\n*\n* @module tools/split-mission",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 10
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 11
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 10
        }
      ]
    },
    {
      "snippet": "* 4. Generate individual sub-mission files\n* 5. Return execution plan and file paths\n*\n* @module tools/split-mission\n* @version 1.0",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 11
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 12
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 11
        }
      ]
    },
    {
      "snippet": "* 5. Return execution plan and file paths\n*\n* @module tools/split-mission\n* @version 1.0\n*/",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 12
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 13
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 12
        }
      ]
    },
    {
      "snippet": "/**\n* Parameters for split_mission tool\n*/\nexport interface SplitMissionParams {\n/** Path to mission file to split (YAML format) */",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 19
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 27
        }
      ]
    },
    {
      "snippet": "* Parameters for split_mission tool\n*/\nexport interface SplitMissionParams {\n/** Path to mission file to split (YAML format) */\nmissionFile: string;",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 20
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 28
        }
      ]
    },
    {
      "snippet": "/**\n* Split result with file paths\n*/\nexport interface SplitMissionResult {\nshouldSplit: boolean;",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 34
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 47
        }
      ]
    },
    {
      "snippet": "* Split result with file paths\n*/\nexport interface SplitMissionResult {\nshouldSplit: boolean;\ncomplexity: {",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 35
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 48
        }
      ]
    },
    {
      "snippet": "*/\nexport interface SplitMissionResult {\nshouldSplit: boolean;\ncomplexity: {\nscore: number;",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 36
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 49
        }
      ]
    },
    {
      "snippet": "export interface SplitMissionResult {\nshouldSplit: boolean;\ncomplexity: {\nscore: number;\nreasons: string[];",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 37
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 50
        }
      ]
    },
    {
      "snippet": "shouldSplit: boolean;\ncomplexity: {\nscore: number;\nreasons: string[];\n};",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 38
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 51
        }
      ]
    },
    {
      "snippet": "complexity: {\nscore: number;\nreasons: string[];\n};\nsubMissionFiles?: string[];",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 39
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 52
        }
      ]
    },
    {
      "snippet": "score: number;\nreasons: string[];\n};\nsubMissionFiles?: string[];\nexecutionPlan?: {",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 40
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 53
        }
      ]
    },
    {
      "snippet": "reasons: string[];\n};\nsubMissionFiles?: string[];\nexecutionPlan?: {\norder: number;",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 41
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 54
        }
      ]
    },
    {
      "snippet": "};\nsubMissionFiles?: string[];\nexecutionPlan?: {\norder: number;\nfile: string;",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 42
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 55
        }
      ]
    },
    {
      "snippet": "subMissionFiles?: string[];\nexecutionPlan?: {\norder: number;\nfile: string;\nobjective: string;",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 43
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 56
        }
      ]
    },
    {
      "snippet": "executionPlan?: {\norder: number;\nfile: string;\nobjective: string;\ndependencies: string[];",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 44
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 57
        }
      ]
    },
    {
      "snippet": "order: number;\nfile: string;\nobjective: string;\ndependencies: string[];\n}[];",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 45
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 58
        }
      ]
    },
    {
      "snippet": "file: string;\nobjective: string;\ndependencies: string[];\n}[];\nsummary: string;",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 46
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 59
        }
      ]
    },
    {
      "snippet": "objective: string;\ndependencies: string[];\n}[];\nsummary: string;\ntokenUsage?: {",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 47
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 60
        }
      ]
    },
    {
      "snippet": "dependencies: string[];\n}[];\nsummary: string;\ntokenUsage?: {\nmodel: SupportedModel;",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 48
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 61
        }
      ]
    },
    {
      "snippet": "}[];\nsummary: string;\ntokenUsage?: {\nmodel: SupportedModel;\ntotalTokens: number;",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 49
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 62
        }
      ]
    },
    {
      "snippet": "summary: string;\ntokenUsage?: {\nmodel: SupportedModel;\ntotalTokens: number;\nestimatedCost?: number;",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 50
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 63
        }
      ]
    },
    {
      "snippet": "tokenUsage?: {\nmodel: SupportedModel;\ntotalTokens: number;\nestimatedCost?: number;\ncontextWindow: number;",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 51
        },
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 50
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 64
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 60
        }
      ]
    },
    {
      "snippet": "model: SupportedModel;\ntotalTokens: number;\nestimatedCost?: number;\ncontextWindow: number;\nutilization: number;",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 52
        },
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 51
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 65
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 61
        }
      ]
    },
    {
      "snippet": "totalTokens: number;\nestimatedCost?: number;\ncontextWindow: number;\nutilization: number;\n};",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 53
        },
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 52
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 66
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 62
        }
      ]
    },
    {
      "snippet": "estimatedCost?: number;\ncontextWindow: number;\nutilization: number;\n};\n}",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 54
        },
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 53
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 67
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 63
        }
      ]
    },
    {
      "snippet": "contextWindow: number;\nutilization: number;\n};\n}\n/**",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 55
        },
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 54
        }
      ]
    },
    {
      "snippet": "};\n/**\n* SplitMissionToolImpl\n*\n* Main implementation class for mission splitting",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 92
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 92
        }
      ]
    },
    {
      "snippet": "/**\n* SplitMissionToolImpl\n*\n* Main implementation class for mission splitting\n*/",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 93
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 93
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 108
        }
      ]
    },
    {
      "snippet": "/**\n* Execute mission splitting\n*\n* @param params - Split parameters\n* @returns Split result with file paths and execution plan",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 104
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 112
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 139
        }
      ]
    },
    {
      "snippet": "* Execute mission splitting\n*\n* @param params - Split parameters\n* @returns Split result with file paths and execution plan\n*/",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 105
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 113
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 140
        }
      ]
    },
    {
      "snippet": "/**\n* Build token usage summary from complexity analysis\n*/\nprivate buildTokenUsage;\n/**",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 115
        },
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 98
        }
      ]
    },
    {
      "snippet": "/**\n* Load mission from file\n*/\nprivate loadMissionFile;\n/**",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 119
        },
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 106
        }
      ]
    },
    {
      "snippet": "/**\n* Get context window for model\n*/\nprivate getContextWindow;\n/**",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 139
        },
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 130
        }
      ]
    },
    {
      "snippet": "* Get context window for model\n*/\nprivate getContextWindow;\n/**\n* Format result for LLM consumption",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 140
        },
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 131
        }
      ]
    },
    {
      "snippet": "*/\nprivate getContextWindow;\n/**\n* Format result for LLM consumption\n*/",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.d.ts",
          "line": 141
        },
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 132
        }
      ]
    },
    {
      "snippet": "const YAML = __importStar(require(\"yaml\"));\nconst generic_mission_1 = require(\"../schemas/generic-mission\");\nconst mission_splitter_1 = require(\"../intelligence/mission-splitter\");\nconst complexity_sc",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 55
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 53
        }
      ]
    },
    {
      "snippet": "name: 'split_mission',\ndescription: 'Automatically splits a large or complex mission into smaller, coherent sub-missions. This tool analyzes mission complexity and decomposes it using semantic-structu",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 63
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 77
        }
      ]
    },
    {
      "snippet": "description: 'Automatically splits a large or complex mission into smaller, coherent sub-missions. This tool analyzes mission complexity and decomposes it using semantic-structural analysis while pres",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 64
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 78
        }
      ]
    },
    {
      "snippet": "inputSchema: {\ntype: 'object',\nrequired: ['missionFile'],\nproperties: {\nmissionFile: {",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 65
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 63
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 79
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 75
        }
      ]
    },
    {
      "snippet": "type: 'object',\nrequired: ['missionFile'],\nproperties: {\nmissionFile: {\ntype: 'string',",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 66
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 64
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 80
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 76
        }
      ]
    },
    {
      "snippet": "required: ['missionFile'],\nproperties: {\nmissionFile: {\ntype: 'string',\ndescription: 'Path to the mission file (YAML) to analyze and split',",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 67
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 81
        }
      ]
    },
    {
      "snippet": "properties: {\nmissionFile: {\ntype: 'string',\ndescription: 'Path to the mission file (YAML) to analyze and split',\n},",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 68
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 82
        }
      ]
    },
    {
      "snippet": "missionFile: {\ntype: 'string',\ndescription: 'Path to the mission file (YAML) to analyze and split',\n},\nmodel: {",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 69
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 83
        }
      ]
    },
    {
      "snippet": "type: 'string',\ndescription: 'Path to the mission file (YAML) to analyze and split',\n},\nmodel: {\ntype: 'string',",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 70
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 84
        }
      ]
    },
    {
      "snippet": "description: 'Path to the mission file (YAML) to analyze and split',\n},\nmodel: {\ntype: 'string',\nenum: ['claude', 'gpt', 'gemini'],",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 71
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 85
        }
      ]
    },
    {
      "snippet": "},\nmodel: {\ntype: 'string',\nenum: ['claude', 'gpt', 'gemini'],\ndescription: 'Target AI model for token optimization (default: claude)',",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 72
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 86
        }
      ]
    },
    {
      "snippet": "model: {\ntype: 'string',\nenum: ['claude', 'gpt', 'gemini'],\ndescription: 'Target AI model for token optimization (default: claude)',\n},",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 73
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 87
        }
      ]
    },
    {
      "snippet": "type: 'string',\nenum: ['claude', 'gpt', 'gemini'],\ndescription: 'Target AI model for token optimization (default: claude)',\n},\nmaxSubMissions: {",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 74
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 88
        }
      ]
    },
    {
      "snippet": "enum: ['claude', 'gpt', 'gemini'],\ndescription: 'Target AI model for token optimization (default: claude)',\n},\nmaxSubMissions: {\ntype: 'number',",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 75
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 89
        }
      ]
    },
    {
      "snippet": "description: 'Target AI model for token optimization (default: claude)',\n},\nmaxSubMissions: {\ntype: 'number',\ndescription: 'Maximum number of sub-missions to create (default: 10)',",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 76
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 90
        }
      ]
    },
    {
      "snippet": "},\nmaxSubMissions: {\ntype: 'number',\ndescription: 'Maximum number of sub-missions to create (default: 10)',\n},",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 77
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 91
        }
      ]
    },
    {
      "snippet": "maxSubMissions: {\ntype: 'number',\ndescription: 'Maximum number of sub-missions to create (default: 10)',\n},\noutputDir: {",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 78
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 92
        }
      ]
    },
    {
      "snippet": "type: 'number',\ndescription: 'Maximum number of sub-missions to create (default: 10)',\n},\noutputDir: {\ntype: 'string',",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 79
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 93
        }
      ]
    },
    {
      "snippet": "description: 'Maximum number of sub-missions to create (default: 10)',\n},\noutputDir: {\ntype: 'string',\ndescription: 'Directory to save sub-mission files (default: same as mission file)',",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 80
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 94
        }
      ]
    },
    {
      "snippet": "},\noutputDir: {\ntype: 'string',\ndescription: 'Directory to save sub-mission files (default: same as mission file)',\n},",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 81
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 95
        }
      ]
    },
    {
      "snippet": "outputDir: {\ntype: 'string',\ndescription: 'Directory to save sub-mission files (default: same as mission file)',\n},\npreserveStructure: {",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 82
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 96
        }
      ]
    },
    {
      "snippet": "type: 'string',\ndescription: 'Directory to save sub-mission files (default: same as mission file)',\n},\npreserveStructure: {\ntype: 'boolean',",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 83
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 97
        }
      ]
    },
    {
      "snippet": "description: 'Directory to save sub-mission files (default: same as mission file)',\n},\npreserveStructure: {\ntype: 'boolean',\ndescription: 'Preserve original mission structure in sub-missions (default:",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 84
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 98
        }
      ]
    },
    {
      "snippet": "},\npreserveStructure: {\ntype: 'boolean',\ndescription: 'Preserve original mission structure in sub-missions (default: true)',\n},",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 85
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 99
        }
      ]
    },
    {
      "snippet": "preserveStructure: {\ntype: 'boolean',\ndescription: 'Preserve original mission structure in sub-missions (default: true)',\n},\n},",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 86
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 100
        }
      ]
    },
    {
      "snippet": "type: 'boolean',\ndescription: 'Preserve original mission structure in sub-missions (default: true)',\n},\n},\n},",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 87
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 101
        }
      ]
    },
    {
      "snippet": "// 3. Check if split is needed\nif (!complexity.shouldSplit) {\nreturn {\nshouldSplit: false,\ncomplexity: {",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 126
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 156
        }
      ]
    },
    {
      "snippet": "if (!complexity.shouldSplit) {\nreturn {\nshouldSplit: false,\ncomplexity: {\nscore: complexity.compositeScore,",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 127
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 157
        }
      ]
    },
    {
      "snippet": "return {\nshouldSplit: false,\ncomplexity: {\nscore: complexity.compositeScore,\nreasons: ['Mission complexity is within acceptable limits'],",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 128
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 158
        }
      ]
    },
    {
      "snippet": "shouldSplit: false,\ncomplexity: {\nscore: complexity.compositeScore,\nreasons: ['Mission complexity is within acceptable limits'],\n},",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 129
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 159
        }
      ]
    },
    {
      "snippet": "complexity: {\nscore: complexity.compositeScore,\nreasons: ['Mission complexity is within acceptable limits'],\n},\nsummary: `Mission complexity score: ${complexity.compositeScore.toFixed(2)}/10. No split",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 130
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 160
        }
      ]
    },
    {
      "snippet": "score: complexity.compositeScore,\nreasons: ['Mission complexity is within acceptable limits'],\n},\nsummary: `Mission complexity score: ${complexity.compositeScore.toFixed(2)}/10. No split needed.`,\ntok",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 131
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 161
        }
      ]
    },
    {
      "snippet": "reasons: ['Mission complexity is within acceptable limits'],\n},\nsummary: `Mission complexity score: ${complexity.compositeScore.toFixed(2)}/10. No split needed.`,\ntokenUsage,\n};",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 132
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 162
        }
      ]
    },
    {
      "snippet": "},\nsummary: `Mission complexity score: ${complexity.compositeScore.toFixed(2)}/10. No split needed.`,\ntokenUsage,\n};\n}",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 133
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 163
        }
      ]
    },
    {
      "snippet": "// 4. Split mission\nconst splitResult = await this.splitter.split(mission, {\nmaxSubMissions: params.maxSubMissions,\npreserveStructure: params.preserveStructure ?? true,\n});",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 138
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 169
        }
      ]
    },
    {
      "snippet": "return {\nshouldSplit: true,\ncomplexity: {\nscore: complexity.compositeScore,\nreasons: complexity.reasons,",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 150
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 189
        }
      ]
    },
    {
      "snippet": "shouldSplit: true,\ncomplexity: {\nscore: complexity.compositeScore,\nreasons: complexity.reasons,\n},",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 151
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 190
        }
      ]
    },
    {
      "snippet": "complexity: {\nscore: complexity.compositeScore,\nreasons: complexity.reasons,\n},\nsubMissionFiles,",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 152
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 191
        }
      ]
    },
    {
      "snippet": "score: complexity.compositeScore,\nreasons: complexity.reasons,\n},\nsubMissionFiles,\nexecutionPlan,",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 153
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 192
        }
      ]
    },
    {
      "snippet": "reasons: complexity.reasons,\n},\nsubMissionFiles,\nexecutionPlan,\nsummary,",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 154
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 193
        }
      ]
    },
    {
      "snippet": "},\nsubMissionFiles,\nexecutionPlan,\nsummary,\ntokenUsage,",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 155
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 194
        }
      ]
    },
    {
      "snippet": "subMissionFiles,\nexecutionPlan,\nsummary,\ntokenUsage,\n};",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 156
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 195
        }
      ]
    },
    {
      "snippet": "executionPlan,\nsummary,\ntokenUsage,\n};\n}",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 157
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 196
        }
      ]
    },
    {
      "snippet": "*/\nvalidateParams(params) {\nif (!params.missionFile || params.missionFile.trim().length === 0) {\nthrow new Error('missionFile is required');\n}",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 164
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 155
        }
      ]
    },
    {
      "snippet": "validateParams(params) {\nif (!params.missionFile || params.missionFile.trim().length === 0) {\nthrow new Error('missionFile is required');\n}\nif (!fs.existsSync(params.missionFile)) {",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 165
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 156
        }
      ]
    },
    {
      "snippet": "if (!params.missionFile || params.missionFile.trim().length === 0) {\nthrow new Error('missionFile is required');\n}\nif (!fs.existsSync(params.missionFile)) {\nthrow new Error(`Mission file not found: ${",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 166
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 157
        }
      ]
    },
    {
      "snippet": "throw new Error('missionFile is required');\n}\nif (!fs.existsSync(params.missionFile)) {\nthrow new Error(`Mission file not found: ${params.missionFile}`);\n}",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 167
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 158
        }
      ]
    },
    {
      "snippet": "}\n/**\n* Build token usage summary from complexity analysis\n*/\nbuildTokenUsage(complexity) {",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 178
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 138
        }
      ]
    },
    {
      "snippet": "/**\n* Build token usage summary from complexity analysis\n*/\nbuildTokenUsage(complexity) {\nconst contextWindow = this.getContextWindow(this.model);",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 179
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 139
        }
      ]
    },
    {
      "snippet": "* Build token usage summary from complexity analysis\n*/\nbuildTokenUsage(complexity) {\nconst contextWindow = this.getContextWindow(this.model);\nconst totalTokens = complexity.tokenDetails.count;",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 180
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 140
        }
      ]
    },
    {
      "snippet": "*/\nbuildTokenUsage(complexity) {\nconst contextWindow = this.getContextWindow(this.model);\nconst totalTokens = complexity.tokenDetails.count;\nreturn {",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 181
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 141
        }
      ]
    },
    {
      "snippet": "buildTokenUsage(complexity) {\nconst contextWindow = this.getContextWindow(this.model);\nconst totalTokens = complexity.tokenDetails.count;\nreturn {\nmodel: complexity.tokenDetails.model,",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 182
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 142
        }
      ]
    },
    {
      "snippet": "const contextWindow = this.getContextWindow(this.model);\nconst totalTokens = complexity.tokenDetails.count;\nreturn {\nmodel: complexity.tokenDetails.model,\ntotalTokens,",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 183
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 143
        }
      ]
    },
    {
      "snippet": "const totalTokens = complexity.tokenDetails.count;\nreturn {\nmodel: complexity.tokenDetails.model,\ntotalTokens,\nestimatedCost: complexity.tokenDetails.estimatedCost,",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 184
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 144
        }
      ]
    },
    {
      "snippet": "return {\nmodel: complexity.tokenDetails.model,\ntotalTokens,\nestimatedCost: complexity.tokenDetails.estimatedCost,\ncontextWindow,",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 185
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 145
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 230
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 176
        }
      ]
    },
    {
      "snippet": "model: complexity.tokenDetails.model,\ntotalTokens,\nestimatedCost: complexity.tokenDetails.estimatedCost,\ncontextWindow,\nutilization: totalTokens / contextWindow,",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 186
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 146
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 231
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 177
        }
      ]
    },
    {
      "snippet": "totalTokens,\nestimatedCost: complexity.tokenDetails.estimatedCost,\ncontextWindow,\nutilization: totalTokens / contextWindow,\n};",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 187
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 147
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 232
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 178
        }
      ]
    },
    {
      "snippet": "estimatedCost: complexity.tokenDetails.estimatedCost,\ncontextWindow,\nutilization: totalTokens / contextWindow,\n};\n}",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 188
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 148
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 233
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 179
        }
      ]
    },
    {
      "snippet": "contextWindow,\nutilization: totalTokens / contextWindow,\n};\n}\n/**",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 189
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 149
        }
      ]
    },
    {
      "snippet": "}\n/**\n* Load mission from file\n*/\nloadMissionFile(filePath) {",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 192
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 163
        }
      ]
    },
    {
      "snippet": "/**\n* Load mission from file\n*/\nloadMissionFile(filePath) {\ntry {",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 193
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 164
        }
      ]
    },
    {
      "snippet": "return content;\n}\n}\ncatch (error) {\nif (error instanceof Error) {",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 211
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 178
        }
      ]
    },
    {
      "snippet": "}\n}\ncatch (error) {\nif (error instanceof Error) {\nthrow new Error(`Failed to load mission file: ${error.message}`);",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 212
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 179
        }
      ]
    },
    {
      "snippet": "}\ncatch (error) {\nif (error instanceof Error) {\nthrow new Error(`Failed to load mission file: ${error.message}`);\n}",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 213
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 180
        }
      ]
    },
    {
      "snippet": "catch (error) {\nif (error instanceof Error) {\nthrow new Error(`Failed to load mission file: ${error.message}`);\n}\nthrow new Error('Failed to load mission file: Unknown error');",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 214
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 181
        }
      ]
    },
    {
      "snippet": "if (error instanceof Error) {\nthrow new Error(`Failed to load mission file: ${error.message}`);\n}\nthrow new Error('Failed to load mission file: Unknown error');\n}",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 215
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 182
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 262
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 215
        }
      ]
    },
    {
      "snippet": "throw new Error(`Failed to load mission file: ${error.message}`);\n}\nthrow new Error('Failed to load mission file: Unknown error');\n}\n}",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 216
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 183
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 263
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 216
        }
      ]
    },
    {
      "snippet": "}\nthrow new Error('Failed to load mission file: Unknown error');\n}\n}\n/**",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 217
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 184
        }
      ]
    },
    {
      "snippet": "schemaType: 'Mission',\nschemaVersion: '2.0',\nmissionId: subMission.id,\nobjective: subMission.objective,\ncontext: {",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 242
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 299
        }
      ]
    },
    {
      "snippet": "schemaVersion: '2.0',\nmissionId: subMission.id,\nobjective: subMission.objective,\ncontext: {\nbackground: `${preservedContext}\\n\\n${subMission.context}`,",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 243
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 300
        }
      ]
    },
    {
      "snippet": "missionId: subMission.id,\nobjective: subMission.objective,\ncontext: {\nbackground: `${preservedContext}\\n\\n${subMission.context}`,\ndependencies: subMission.dependencies,",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 244
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 301
        }
      ]
    },
    {
      "snippet": "objective: subMission.objective,\ncontext: {\nbackground: `${preservedContext}\\n\\n${subMission.context}`,\ndependencies: subMission.dependencies,\nconstraints: [],",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 245
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 302
        }
      ]
    },
    {
      "snippet": "context: {\nbackground: `${preservedContext}\\n\\n${subMission.context}`,\ndependencies: subMission.dependencies,\nconstraints: [],\n},",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 246
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 303
        }
      ]
    },
    {
      "snippet": "background: `${preservedContext}\\n\\n${subMission.context}`,\ndependencies: subMission.dependencies,\nconstraints: [],\n},\nsuccessCriteria: [",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 247
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 304
        }
      ]
    },
    {
      "snippet": "dependencies: subMission.dependencies,\nconstraints: [],\n},\nsuccessCriteria: [\n`Complete ${subMission.objective}`,",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 248
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 305
        }
      ]
    },
    {
      "snippet": "constraints: [],\n},\nsuccessCriteria: [\n`Complete ${subMission.objective}`,\n'All deliverables produced',",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 249
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 306
        }
      ]
    },
    {
      "snippet": "},\nsuccessCriteria: [\n`Complete ${subMission.objective}`,\n'All deliverables produced',\n'Pass to next sub-mission if applicable',",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 250
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 307
        }
      ]
    },
    {
      "snippet": "successCriteria: [\n`Complete ${subMission.objective}`,\n'All deliverables produced',\n'Pass to next sub-mission if applicable',\n],",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 251
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 308
        }
      ]
    },
    {
      "snippet": "`Complete ${subMission.objective}`,\n'All deliverables produced',\n'Pass to next sub-mission if applicable',\n],\ndeliverables: subMission.deliverables.length > 0",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 252
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 309
        }
      ]
    },
    {
      "snippet": "'All deliverables produced',\n'Pass to next sub-mission if applicable',\n],\ndeliverables: subMission.deliverables.length > 0\n? subMission.deliverables",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 253
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 310
        }
      ]
    },
    {
      "snippet": "'Pass to next sub-mission if applicable',\n],\ndeliverables: subMission.deliverables.length > 0\n? subMission.deliverables\n: ['Sub-mission completion report'],",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 254
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 311
        }
      ]
    },
    {
      "snippet": "],\ndeliverables: subMission.deliverables.length > 0\n? subMission.deliverables\n: ['Sub-mission completion report'],\ndomainFields: {",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 255
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 312
        }
      ]
    },
    {
      "snippet": "deliverables: subMission.deliverables.length > 0\n? subMission.deliverables\n: ['Sub-mission completion report'],\ndomainFields: {\norder: subMission.order,",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 256
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 313
        }
      ]
    },
    {
      "snippet": "? subMission.deliverables\n: ['Sub-mission completion report'],\ndomainFields: {\norder: subMission.order,\ninstructions: subMission.instructions,",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 257
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 314
        }
      ]
    },
    {
      "snippet": ": ['Sub-mission completion report'],\ndomainFields: {\norder: subMission.order,\ninstructions: subMission.instructions,\ndependencies: subMission.dependencies,",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 258
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 315
        }
      ]
    },
    {
      "snippet": "domainFields: {\norder: subMission.order,\ninstructions: subMission.instructions,\ndependencies: subMission.dependencies,\n},",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 259
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 316
        }
      ]
    },
    {
      "snippet": "order: subMission.order,\ninstructions: subMission.instructions,\ndependencies: subMission.dependencies,\n},\n};",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 260
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 317
        }
      ]
    },
    {
      "snippet": "return YAML.stringify(mission, {\nindent: 2,\nlineWidth: 0,\n});\n}",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 265
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 323
        }
      ]
    },
    {
      "snippet": "return subMissions.map((sm, i) => ({\norder: sm.order,\nfile: files[i],\nobjective: sm.objective,\ndependencies: sm.dependencies,",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 274
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 341
        }
      ]
    },
    {
      "snippet": "order: sm.order,\nfile: files[i],\nobjective: sm.objective,\ndependencies: sm.dependencies,\n}));",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 275
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 342
        }
      ]
    },
    {
      "snippet": "file: files[i],\nobjective: sm.objective,\ndependencies: sm.dependencies,\n}));\n}",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 276
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 343
        }
      ]
    },
    {
      "snippet": "'# Mission Split Analysis',\n'',\n`**Complexity Score:** ${complexity.compositeScore.toFixed(2)}/10`,\n'',\n'**Reasons for Split:**',",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 288
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 361
        }
      ]
    },
    {
      "snippet": "'',\n`**Sub-Missions Created:** ${splitResult.subMissions.length}`,\n'',\n'**Token Usage:**',\n`- Model: ${complexity.tokenDetails.model}`,",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 294
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 367
        }
      ]
    },
    {
      "snippet": "`**Sub-Missions Created:** ${splitResult.subMissions.length}`,\n'',\n'**Token Usage:**',\n`- Model: ${complexity.tokenDetails.model}`,\n`- Mission tokens: ${complexity.tokenDetails.count}`,",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 295
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 368
        }
      ]
    },
    {
      "snippet": "'',\n'**Token Usage:**',\n`- Model: ${complexity.tokenDetails.model}`,\n`- Mission tokens: ${complexity.tokenDetails.count}`,\n`- Context utilization: ${(utilization * 100).toFixed(1)}% of ${contextWindow",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 296
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 369
        }
      ]
    },
    {
      "snippet": "'**Token Usage:**',\n`- Model: ${complexity.tokenDetails.model}`,\n`- Mission tokens: ${complexity.tokenDetails.count}`,\n`- Context utilization: ${(utilization * 100).toFixed(1)}% of ${contextWindow.toL",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 297
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 370
        }
      ]
    },
    {
      "snippet": "`- Model: ${complexity.tokenDetails.model}`,\n`- Mission tokens: ${complexity.tokenDetails.count}`,\n`- Context utilization: ${(utilization * 100).toFixed(1)}% of ${contextWindow.toLocaleString()} token",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 298
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 371
        }
      ]
    },
    {
      "snippet": "`- Mission tokens: ${complexity.tokenDetails.count}`,\n`- Context utilization: ${(utilization * 100).toFixed(1)}% of ${contextWindow.toLocaleString()} tokens`,\n...(complexity.tokenDetails.estimatedCost",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 299
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 372
        }
      ]
    },
    {
      "snippet": "`- Context utilization: ${(utilization * 100).toFixed(1)}% of ${contextWindow.toLocaleString()} tokens`,\n...(complexity.tokenDetails.estimatedCost !== undefined\n? [`- Estimated input cost: $${complexi",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 300
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 373
        }
      ]
    },
    {
      "snippet": "...(complexity.tokenDetails.estimatedCost !== undefined\n? [`- Estimated input cost: $${complexity.tokenDetails.estimatedCost.toFixed(4)}`]\n: []),\n'',\n'**Execution Order:**',",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 301
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 374
        }
      ]
    },
    {
      "snippet": "? [`- Estimated input cost: $${complexity.tokenDetails.estimatedCost.toFixed(4)}`]\n: []),\n'',\n'**Execution Order:**',\n];",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 302
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 375
        }
      ]
    },
    {
      "snippet": "for (let i = 0; i < splitResult.subMissions.length; i++) {\nconst sm = splitResult.subMissions[i];\nparts.push(`${i + 1}. ${sm.objective}`);\nif (sm.dependencies.length > 0) {\nparts.push(`   Dependencies",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 307
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 381
        }
      ]
    },
    {
      "snippet": "const sm = splitResult.subMissions[i];\nparts.push(`${i + 1}. ${sm.objective}`);\nif (sm.dependencies.length > 0) {\nparts.push(`   Dependencies: ${sm.dependencies.join(', ')}`);\n}",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 308
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 382
        }
      ]
    },
    {
      "snippet": "parts.push(`${i + 1}. ${sm.objective}`);\nif (sm.dependencies.length > 0) {\nparts.push(`   Dependencies: ${sm.dependencies.join(', ')}`);\n}\nparts.push(`   File: ${files[i]}`);",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 309
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 383
        }
      ]
    },
    {
      "snippet": "if (sm.dependencies.length > 0) {\nparts.push(`   Dependencies: ${sm.dependencies.join(', ')}`);\n}\nparts.push(`   File: ${files[i]}`);\nparts.push('');",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 310
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 384
        }
      ]
    },
    {
      "snippet": "parts.push(`   Dependencies: ${sm.dependencies.join(', ')}`);\n}\nparts.push(`   File: ${files[i]}`);\nparts.push('');\n}",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 311
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 385
        }
      ]
    },
    {
      "snippet": "}\n/**\n* Get context window for model\n*/\ngetContextWindow(model) {",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 321
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 253
        }
      ]
    },
    {
      "snippet": "/**\n* Get context window for model\n*/\ngetContextWindow(model) {\nconst windows = {",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 322
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 254
        }
      ]
    },
    {
      "snippet": "claude: 200000, // Claude Sonnet/Opus\ngpt: 128000, // GPT-4 Turbo\ngemini: 1000000, // Gemini 1.5 Pro\n};\nreturn windows[model] || 200000;",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 327
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 404
        }
      ]
    },
    {
      "snippet": "gpt: 128000, // GPT-4 Turbo\ngemini: 1000000, // Gemini 1.5 Pro\n};\nreturn windows[model] || 200000;\n}",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 328
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 405
        }
      ]
    },
    {
      "snippet": "};\nreturn windows[model] || 200000;\n}\n/**\n* Format result for LLM consumption",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 330
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 262
        }
      ]
    },
    {
      "snippet": "return windows[model] || 200000;\n}\n/**\n* Format result for LLM consumption\n*/",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 331
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 263
        }
      ]
    },
    {
      "snippet": "if (!result.shouldSplit) {\nconst tokenLines = tokenUsage\n? [\n`**Token Usage (${tokenUsage.model}):**`,\n`- Mission tokens: ${tokenUsage.totalTokens}`,",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 338
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 417
        }
      ]
    },
    {
      "snippet": "const tokenLines = tokenUsage\n? [\n`**Token Usage (${tokenUsage.model}):**`,\n`- Mission tokens: ${tokenUsage.totalTokens}`,\n`- Context utilization: ${(tokenUsage.utilization * 100).toFixed(1)}% of ${to",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 339
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 360
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 418
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 441
        }
      ]
    },
    {
      "snippet": "? [\n`**Token Usage (${tokenUsage.model}):**`,\n`- Mission tokens: ${tokenUsage.totalTokens}`,\n`- Context utilization: ${(tokenUsage.utilization * 100).toFixed(1)}% of ${tokenUsage.contextWindow.toLocal",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 340
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 361
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 419
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 442
        }
      ]
    },
    {
      "snippet": "`**Token Usage (${tokenUsage.model}):**`,\n`- Mission tokens: ${tokenUsage.totalTokens}`,\n`- Context utilization: ${(tokenUsage.utilization * 100).toFixed(1)}% of ${tokenUsage.contextWindow.toLocaleStr",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 341
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 362
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 420
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 443
        }
      ]
    },
    {
      "snippet": "`- Mission tokens: ${tokenUsage.totalTokens}`,\n`- Context utilization: ${(tokenUsage.utilization * 100).toFixed(1)}% of ${tokenUsage.contextWindow.toLocaleString()} tokens`,\n...(tokenUsage.estimatedCo",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 342
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 363
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 421
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 444
        }
      ]
    },
    {
      "snippet": "`- Context utilization: ${(tokenUsage.utilization * 100).toFixed(1)}% of ${tokenUsage.contextWindow.toLocaleString()} tokens`,\n...(tokenUsage.estimatedCost !== undefined\n? [`- Estimated input cost: $$",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 343
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 364
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 422
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 445
        }
      ]
    },
    {
      "snippet": "...(tokenUsage.estimatedCost !== undefined\n? [`- Estimated input cost: $${tokenUsage.estimatedCost.toFixed(4)}`]\n: []),\n]\n: [",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 344
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 365
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 423
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 446
        }
      ]
    },
    {
      "snippet": "? [`- Estimated input cost: $${tokenUsage.estimatedCost.toFixed(4)}`]\n: []),\n]\n: [\n'**Token Usage:**',",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 345
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 366
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 424
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 447
        }
      ]
    },
    {
      "snippet": ": []),\n]\n: [\n'**Token Usage:**',\n'- Token metrics unavailable for this result.',",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 346
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 367
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 425
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 448
        }
      ]
    },
    {
      "snippet": "]\n: [\n'**Token Usage:**',\n'- Token metrics unavailable for this result.',\n];",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 347
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 368
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 426
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 449
        }
      ]
    },
    {
      "snippet": "return `# Mission Analysis Complete\n\n${result.summary}\n\n${tokenLines.join('\\n')}",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 352
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 432
        }
      ]
    },
    {
      "snippet": "\n${result.summary}\n\n${tokenLines.join('\\n')}\n",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 353
        },
        {
          "path": "dist/tools/split-mission.js",
          "line": 374
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 433
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 456
        }
      ]
    },
    {
      "snippet": "${result.summary}\n\n${tokenLines.join('\\n')}\n\nThe mission can be executed as-is without splitting.`;",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 354
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 434
        }
      ]
    },
    {
      "snippet": "\n${tokenLines.join('\\n')}\n\nThe mission can be executed as-is without splitting.`;\n}",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 355
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 435
        }
      ]
    },
    {
      "snippet": "return `# Mission Successfully Split\n\n${result.summary}\n\n${tokenLines.join('\\n')}",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 373
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 455
        }
      ]
    },
    {
      "snippet": "${result.summary}\n\n${tokenLines.join('\\n')}\n\n## Files Created",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 375
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 457
        }
      ]
    },
    {
      "snippet": "\n${tokenLines.join('\\n')}\n\n## Files Created\n",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 376
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 458
        }
      ]
    },
    {
      "snippet": "${tokenLines.join('\\n')}\n\n## Files Created\n\n${result.subMissionFiles?.map((f, i) => `${i + 1}. \\`${f}\\``).join('\\n')}",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 377
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 459
        }
      ]
    },
    {
      "snippet": "\n## Files Created\n\n${result.subMissionFiles?.map((f, i) => `${i + 1}. \\`${f}\\``).join('\\n')}\n",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 378
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 460
        }
      ]
    },
    {
      "snippet": "## Files Created\n\n${result.subMissionFiles?.map((f, i) => `${i + 1}. \\`${f}\\``).join('\\n')}\n\n## Execution Plan",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 379
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 461
        }
      ]
    },
    {
      "snippet": "\n${result.subMissionFiles?.map((f, i) => `${i + 1}. \\`${f}\\``).join('\\n')}\n\n## Execution Plan\n",
      "occurrences": [
        {
          "path": "dist/tools/split-mission.js",
          "line": 380
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 462
        }
      ]
    },
    {
      "snippet": "/**\n* suggest_splits MCP Tool\n*\n* Analyzes mission complexity and suggests split points without actually splitting.\n* Provides recommendations and reasoning for mission decomposition.",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 1
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 2
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 1
        }
      ]
    },
    {
      "snippet": "* suggest_splits MCP Tool\n*\n* Analyzes mission complexity and suggests split points without actually splitting.\n* Provides recommendations and reasoning for mission decomposition.\n*",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 2
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 3
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 2
        }
      ]
    },
    {
      "snippet": "*\n* Analyzes mission complexity and suggests split points without actually splitting.\n* Provides recommendations and reasoning for mission decomposition.\n*\n* Algorithm:",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 3
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 4
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 3
        }
      ]
    },
    {
      "snippet": "* Analyzes mission complexity and suggests split points without actually splitting.\n* Provides recommendations and reasoning for mission decomposition.\n*\n* Algorithm:\n* 1. Load and parse mission file",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 4
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 5
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 4
        }
      ]
    },
    {
      "snippet": "* Provides recommendations and reasoning for mission decomposition.\n*\n* Algorithm:\n* 1. Load and parse mission file\n* 2. Calculate Composite Complexity Score",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 5
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 6
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 5
        }
      ]
    },
    {
      "snippet": "*\n* Algorithm:\n* 1. Load and parse mission file\n* 2. Calculate Composite Complexity Score\n* 3. If split recommended, identify optimal breakpoints",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 6
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 7
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 6
        }
      ]
    },
    {
      "snippet": "* Algorithm:\n* 1. Load and parse mission file\n* 2. Calculate Composite Complexity Score\n* 3. If split recommended, identify optimal breakpoints\n* 4. Return analysis with reasoning and suggestions",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 7
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 8
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 7
        }
      ]
    },
    {
      "snippet": "* 1. Load and parse mission file\n* 2. Calculate Composite Complexity Score\n* 3. If split recommended, identify optimal breakpoints\n* 4. Return analysis with reasoning and suggestions\n*",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 8
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 9
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 8
        }
      ]
    },
    {
      "snippet": "* 2. Calculate Composite Complexity Score\n* 3. If split recommended, identify optimal breakpoints\n* 4. Return analysis with reasoning and suggestions\n*\n* @module tools/suggest-splits",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 9
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 10
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 9
        }
      ]
    },
    {
      "snippet": "* 3. If split recommended, identify optimal breakpoints\n* 4. Return analysis with reasoning and suggestions\n*\n* @module tools/suggest-splits\n* @version 1.0",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 10
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 11
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 10
        }
      ]
    },
    {
      "snippet": "* 4. Return analysis with reasoning and suggestions\n*\n* @module tools/suggest-splits\n* @version 1.0\n*/",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 11
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 12
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 11
        }
      ]
    },
    {
      "snippet": "/**\n* Parameters for suggest_splits tool\n*/\nexport interface SuggestSplitsParams {\n/** Path to mission file to analyze */",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 17
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 24
        }
      ]
    },
    {
      "snippet": "* Parameters for suggest_splits tool\n*/\nexport interface SuggestSplitsParams {\n/** Path to mission file to analyze */\nmissionFile: string;",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 18
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 25
        }
      ]
    },
    {
      "snippet": "/**\n* Split suggestion result\n*/\nexport interface SplitSuggestion {\nshouldSplit: boolean;",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 28
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 38
        }
      ]
    },
    {
      "snippet": "* Split suggestion result\n*/\nexport interface SplitSuggestion {\nshouldSplit: boolean;\ncomplexity: {",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 29
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 39
        }
      ]
    },
    {
      "snippet": "*/\nexport interface SplitSuggestion {\nshouldSplit: boolean;\ncomplexity: {\ncompositeScore: number;",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 30
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 40
        }
      ]
    },
    {
      "snippet": "export interface SplitSuggestion {\nshouldSplit: boolean;\ncomplexity: {\ncompositeScore: number;\ntokenScore: number;",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 31
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 41
        }
      ]
    },
    {
      "snippet": "shouldSplit: boolean;\ncomplexity: {\ncompositeScore: number;\ntokenScore: number;\nstructuralScore: number;",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 32
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 42
        }
      ]
    },
    {
      "snippet": "complexity: {\ncompositeScore: number;\ntokenScore: number;\nstructuralScore: number;\ntimeHorizonScore: number;",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 33
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 43
        }
      ]
    },
    {
      "snippet": "compositeScore: number;\ntokenScore: number;\nstructuralScore: number;\ntimeHorizonScore: number;\ncomputationalScore: number;",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 34
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 44
        }
      ]
    },
    {
      "snippet": "tokenScore: number;\nstructuralScore: number;\ntimeHorizonScore: number;\ncomputationalScore: number;\n};",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 35
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 45
        }
      ]
    },
    {
      "snippet": "structuralScore: number;\ntimeHorizonScore: number;\ncomputationalScore: number;\n};\nreasons: string[];",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 36
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 46
        }
      ]
    },
    {
      "snippet": "timeHorizonScore: number;\ncomputationalScore: number;\n};\nreasons: string[];\nsuggestedBreakpoints?: Array<{",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 37
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 47
        }
      ]
    },
    {
      "snippet": "computationalScore: number;\n};\nreasons: string[];\nsuggestedBreakpoints?: Array<{\nposition: number;",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 38
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 48
        }
      ]
    },
    {
      "snippet": "};\nreasons: string[];\nsuggestedBreakpoints?: Array<{\nposition: number;\nreason: string;",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 39
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 49
        }
      ]
    },
    {
      "snippet": "reasons: string[];\nsuggestedBreakpoints?: Array<{\nposition: number;\nreason: string;\nconfidence: number;",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 40
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 50
        }
      ]
    },
    {
      "snippet": "suggestedBreakpoints?: Array<{\nposition: number;\nreason: string;\nconfidence: number;\npreview: string;",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 41
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 51
        }
      ]
    },
    {
      "snippet": "position: number;\nreason: string;\nconfidence: number;\npreview: string;\n}>;",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 42
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 52
        }
      ]
    },
    {
      "snippet": "reason: string;\nconfidence: number;\npreview: string;\n}>;\nestimatedSubMissions?: number;",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 43
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 53
        }
      ]
    },
    {
      "snippet": "confidence: number;\npreview: string;\n}>;\nestimatedSubMissions?: number;\nestimatedHumanHours?: number;",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 44
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 54
        }
      ]
    },
    {
      "snippet": "preview: string;\n}>;\nestimatedSubMissions?: number;\nestimatedHumanHours?: number;\nrecommendation: string;",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 45
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 55
        }
      ]
    },
    {
      "snippet": "}>;\nestimatedSubMissions?: number;\nestimatedHumanHours?: number;\nrecommendation: string;\ntokenUsage?: {",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 46
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 56
        }
      ]
    },
    {
      "snippet": "estimatedSubMissions?: number;\nestimatedHumanHours?: number;\nrecommendation: string;\ntokenUsage?: {\nmodel: SupportedModel;",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 47
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 57
        }
      ]
    },
    {
      "snippet": "estimatedHumanHours?: number;\nrecommendation: string;\ntokenUsage?: {\nmodel: SupportedModel;\ntotalTokens: number;",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 48
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 58
        }
      ]
    },
    {
      "snippet": "recommendation: string;\ntokenUsage?: {\nmodel: SupportedModel;\ntotalTokens: number;\nestimatedCost?: number;",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 49
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 59
        }
      ]
    },
    {
      "snippet": "};\n/**\n* SuggestSplitsToolImpl\n*\n* Main implementation class for split suggestions",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 83
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 82
        }
      ]
    },
    {
      "snippet": "/**\n* SuggestSplitsToolImpl\n*\n* Main implementation class for split suggestions\n*/",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.d.ts",
          "line": 84
        },
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 83
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 96
        }
      ]
    },
    {
      "snippet": "name: 'suggest_splits',\ndescription: 'Analyzes a mission for complexity and suggests optimal split points without actually splitting it. Use this to evaluate whether a mission should be split and wher",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 61
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 73
        }
      ]
    },
    {
      "snippet": "description: 'Analyzes a mission for complexity and suggests optimal split points without actually splitting it. Use this to evaluate whether a mission should be split and where the natural breakpoint",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 62
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 74
        }
      ]
    },
    {
      "snippet": "required: ['missionFile'],\nproperties: {\nmissionFile: {\ntype: 'string',\ndescription: 'Path to the mission file (YAML) to analyze',",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 65
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 77
        }
      ]
    },
    {
      "snippet": "properties: {\nmissionFile: {\ntype: 'string',\ndescription: 'Path to the mission file (YAML) to analyze',\n},",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 66
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 78
        }
      ]
    },
    {
      "snippet": "missionFile: {\ntype: 'string',\ndescription: 'Path to the mission file (YAML) to analyze',\n},\nmodel: {",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 67
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 79
        }
      ]
    },
    {
      "snippet": "type: 'string',\ndescription: 'Path to the mission file (YAML) to analyze',\n},\nmodel: {\ntype: 'string',",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 68
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 80
        }
      ]
    },
    {
      "snippet": "description: 'Path to the mission file (YAML) to analyze',\n},\nmodel: {\ntype: 'string',\nenum: ['claude', 'gpt', 'gemini'],",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 69
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 81
        }
      ]
    },
    {
      "snippet": "},\nmodel: {\ntype: 'string',\nenum: ['claude', 'gpt', 'gemini'],\ndescription: 'Target AI model for analysis (default: claude)',",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 70
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 82
        }
      ]
    },
    {
      "snippet": "model: {\ntype: 'string',\nenum: ['claude', 'gpt', 'gemini'],\ndescription: 'Target AI model for analysis (default: claude)',\n},",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 71
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 83
        }
      ]
    },
    {
      "snippet": "type: 'string',\nenum: ['claude', 'gpt', 'gemini'],\ndescription: 'Target AI model for analysis (default: claude)',\n},\ndetailed: {",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 72
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 84
        }
      ]
    },
    {
      "snippet": "enum: ['claude', 'gpt', 'gemini'],\ndescription: 'Target AI model for analysis (default: claude)',\n},\ndetailed: {\ntype: 'boolean',",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 73
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 85
        }
      ]
    },
    {
      "snippet": "description: 'Target AI model for analysis (default: claude)',\n},\ndetailed: {\ntype: 'boolean',\ndescription: 'Show detailed breakdown of all complexity components (default: false)',",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 74
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 86
        }
      ]
    },
    {
      "snippet": "},\ndetailed: {\ntype: 'boolean',\ndescription: 'Show detailed breakdown of all complexity components (default: false)',\n},",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 75
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 87
        }
      ]
    },
    {
      "snippet": "detailed: {\ntype: 'boolean',\ndescription: 'Show detailed breakdown of all complexity components (default: false)',\n},\n},",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 76
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 88
        }
      ]
    },
    {
      "snippet": "type: 'boolean',\ndescription: 'Show detailed breakdown of all complexity components (default: false)',\n},\n},\n},",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 77
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 89
        }
      ]
    },
    {
      "snippet": "shouldSplit: suggestion.shouldSplit,\ncomplexity: {\ncompositeScore: suggestion.complexity.compositeScore,\ntokenScore: suggestion.complexity.components.tokenScore,\nstructuralScore: suggestion.complexity",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 113
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 138
        }
      ]
    },
    {
      "snippet": "complexity: {\ncompositeScore: suggestion.complexity.compositeScore,\ntokenScore: suggestion.complexity.components.tokenScore,\nstructuralScore: suggestion.complexity.components.structuralScore,\ntimeHori",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 114
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 139
        }
      ]
    },
    {
      "snippet": "compositeScore: suggestion.complexity.compositeScore,\ntokenScore: suggestion.complexity.components.tokenScore,\nstructuralScore: suggestion.complexity.components.structuralScore,\ntimeHorizonScore: sugg",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 115
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 140
        }
      ]
    },
    {
      "snippet": "tokenScore: suggestion.complexity.components.tokenScore,\nstructuralScore: suggestion.complexity.components.structuralScore,\ntimeHorizonScore: suggestion.complexity.components.timeHorizonScore,\ncomputa",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 116
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 141
        }
      ]
    },
    {
      "snippet": "structuralScore: suggestion.complexity.components.structuralScore,\ntimeHorizonScore: suggestion.complexity.components.timeHorizonScore,\ncomputationalScore: suggestion.complexity.components.computation",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 117
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 142
        }
      ]
    },
    {
      "snippet": "timeHorizonScore: suggestion.complexity.components.timeHorizonScore,\ncomputationalScore: suggestion.complexity.components.computationalScore,\n},\nreasons: suggestion.complexity.reasons,\nestimatedHumanH",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 118
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 143
        }
      ]
    },
    {
      "snippet": "computationalScore: suggestion.complexity.components.computationalScore,\n},\nreasons: suggestion.complexity.reasons,\nestimatedHumanHours: suggestion.complexity.estimatedHumanHours,\nrecommendation: this",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 119
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 144
        }
      ]
    },
    {
      "snippet": "},\nreasons: suggestion.complexity.reasons,\nestimatedHumanHours: suggestion.complexity.estimatedHumanHours,\nrecommendation: this.generateRecommendation(suggestion),\ntokenUsage: this.buildTokenUsage(sug",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 120
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 145
        }
      ]
    },
    {
      "snippet": "reasons: suggestion.complexity.reasons,\nestimatedHumanHours: suggestion.complexity.estimatedHumanHours,\nrecommendation: this.generateRecommendation(suggestion),\ntokenUsage: this.buildTokenUsage(sugges",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 121
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 146
        }
      ]
    },
    {
      "snippet": "result.suggestedBreakpoints = suggestion.suggestedSplits.map(split => ({\nposition: split.position,\nreason: split.reason,\nconfidence: split.confidence,\npreview: this.getBreakpointPreview(missionText, s",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 129
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 156
        }
      ]
    },
    {
      "snippet": "position: split.position,\nreason: split.reason,\nconfidence: split.confidence,\npreview: this.getBreakpointPreview(missionText, split.position),\n}));",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 130
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 157
        }
      ]
    },
    {
      "snippet": "`This mission has high complexity (${score.toFixed(2)}/10) and should be split.`,\n'',\n`**Recommended approach:**`,\n`- Split into ${numSplits} sub-missions`,\n];",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 219
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 256
        }
      ]
    },
    {
      "snippet": "if (suggestion.complexity.estimatedHumanHours) {\nconst hours = suggestion.complexity.estimatedHumanHours;\nparts.push(`- Estimated total effort: ${hours.toFixed(1)} hours`);\nparts.push(`- Average per s",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 224
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 262
        }
      ]
    },
    {
      "snippet": "parts.push('');\nparts.push('**Benefits of splitting:**');\nparts.push('- Reduces risk of context window overflow');\nparts.push('- Enables incremental progress tracking');\nparts.push('- Improves success",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 229
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 268
        }
      ]
    },
    {
      "snippet": "parts.push('**Benefits of splitting:**');\nparts.push('- Reduces risk of context window overflow');\nparts.push('- Enables incremental progress tracking');\nparts.push('- Improves success rate for each s",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 230
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 269
        }
      ]
    },
    {
      "snippet": "claude: 200000,\ngpt: 128000,\ngemini: 1000000,\n};\nreturn windows[model] || 200000;",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 259
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 304
        }
      ]
    },
    {
      "snippet": "gpt: 128000,\ngemini: 1000000,\n};\nreturn windows[model] || 200000;\n}",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 260
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 305
        }
      ]
    },
    {
      "snippet": "parts.push('');\nif (result.tokenUsage) {\nparts.push(`**Token Usage (${result.tokenUsage.model}):**`);\nparts.push(`- Mission tokens: ${result.tokenUsage.totalTokens}`);\nparts.push(`- Context utilizatio",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 274
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 321
        }
      ]
    },
    {
      "snippet": "if (result.tokenUsage) {\nparts.push(`**Token Usage (${result.tokenUsage.model}):**`);\nparts.push(`- Mission tokens: ${result.tokenUsage.totalTokens}`);\nparts.push(`- Context utilization: ${(result.tok",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 275
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 322
        }
      ]
    },
    {
      "snippet": "parts.push(`**Token Usage (${result.tokenUsage.model}):**`);\nparts.push(`- Mission tokens: ${result.tokenUsage.totalTokens}`);\nparts.push(`- Context utilization: ${(result.tokenUsage.utilization * 100",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 276
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 323
        }
      ]
    },
    {
      "snippet": "parts.push(`- Mission tokens: ${result.tokenUsage.totalTokens}`);\nparts.push(`- Context utilization: ${(result.tokenUsage.utilization * 100).toFixed(1)}% of ${result.tokenUsage.contextWindow.toLocaleS",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 277
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 324
        }
      ]
    },
    {
      "snippet": "if (detailed) {\nparts.push('');\nparts.push('**Component Breakdown:**');\nparts.push(`- Token Score: ${result.complexity.tokenScore.toFixed(2)}/10`);\nparts.push(`- Structural Score: ${result.complexity.",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 287
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 334
        }
      ]
    },
    {
      "snippet": "parts.push('');\nparts.push('**Component Breakdown:**');\nparts.push(`- Token Score: ${result.complexity.tokenScore.toFixed(2)}/10`);\nparts.push(`- Structural Score: ${result.complexity.structuralScore.",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 288
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 335
        }
      ]
    },
    {
      "snippet": "parts.push('**Component Breakdown:**');\nparts.push(`- Token Score: ${result.complexity.tokenScore.toFixed(2)}/10`);\nparts.push(`- Structural Score: ${result.complexity.structuralScore.toFixed(2)}/10`)",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 289
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 336
        }
      ]
    },
    {
      "snippet": "parts.push(`- Token Score: ${result.complexity.tokenScore.toFixed(2)}/10`);\nparts.push(`- Structural Score: ${result.complexity.structuralScore.toFixed(2)}/10`);\nparts.push(`- Time Horizon Score: ${re",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 290
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 337
        }
      ]
    },
    {
      "snippet": "if (result.reasons.length > 0) {\nparts.push('**Key Factors:**');\nparts.push(...result.reasons.map(r => `- ${r}`));\nparts.push('');\n}",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 302
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 352
        }
      ]
    },
    {
      "snippet": "for (let i = 0; i < result.suggestedBreakpoints.length; i++) {\nconst bp = result.suggestedBreakpoints[i];\nparts.push(`**Breakpoint ${i + 1}** (Confidence: ${(bp.confidence * 100).toFixed(0)}%)`);\npart",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 314
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 367
        }
      ]
    },
    {
      "snippet": "const bp = result.suggestedBreakpoints[i];\nparts.push(`**Breakpoint ${i + 1}** (Confidence: ${(bp.confidence * 100).toFixed(0)}%)`);\nparts.push(`- Reason: ${bp.reason}`);\nparts.push(`- Location: Chara",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 315
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 368
        }
      ]
    },
    {
      "snippet": "parts.push(`**Breakpoint ${i + 1}** (Confidence: ${(bp.confidence * 100).toFixed(0)}%)`);\nparts.push(`- Reason: ${bp.reason}`);\nparts.push(`- Location: Character ${bp.position}`);\nparts.push(`- Previe",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 316
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 369
        }
      ]
    },
    {
      "snippet": "parts.push(`- Reason: ${bp.reason}`);\nparts.push(`- Location: Character ${bp.position}`);\nparts.push(`- Preview: \\`${bp.preview}\\``);\nparts.push('');\n}",
      "occurrences": [
        {
          "path": "dist/tools/suggest-splits.js",
          "line": 317
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 370
        }
      ]
    },
    {
      "snippet": "export interface CheckVersionCompatibilityResult {\nsuccess: boolean;\ncompatible: boolean;\nreason?: string;\nsuggestedUpgrade?: {",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 12
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 53
        }
      ]
    },
    {
      "snippet": "success: boolean;\ncompatible: boolean;\nreason?: string;\nsuggestedUpgrade?: {\nfrom: string;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 13
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 54
        }
      ]
    },
    {
      "snippet": "compatible: boolean;\nreason?: string;\nsuggestedUpgrade?: {\nfrom: string;\nto: string;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 14
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 55
        }
      ]
    },
    {
      "snippet": "reason?: string;\nsuggestedUpgrade?: {\nfrom: string;\nto: string;\nmigrationRequired: boolean;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 15
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 56
        }
      ]
    },
    {
      "snippet": "suggestedUpgrade?: {\nfrom: string;\nto: string;\nmigrationRequired: boolean;\n};",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 16
        },
        {
          "path": "dist/versioning/types.d.ts",
          "line": 78
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 57
        },
        {
          "path": "src/versioning/types.ts",
          "line": 99
        }
      ]
    },
    {
      "snippet": "from: string;\nto: string;\nmigrationRequired: boolean;\n};\nmessage: string;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 17
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 58
        }
      ]
    },
    {
      "snippet": "to: string;\nmigrationRequired: boolean;\n};\nmessage: string;\n}",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 18
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 59
        }
      ]
    },
    {
      "snippet": "description: string;\ninputSchema: {\ntype: string;\nproperties: {\ntemplateId: {",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 26
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 78
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 124
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 174
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 222
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 243
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 272
        }
      ]
    },
    {
      "snippet": "inputSchema: {\ntype: string;\nproperties: {\ntemplateId: {\ntype: string;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 27
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 79
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 125
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 175
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 223
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 244
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 273
        }
      ]
    },
    {
      "snippet": "type: string;\nproperties: {\ntemplateId: {\ntype: string;\ndescription: string;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 28
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 80
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 126
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 176
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 224
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 245
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 274
        }
      ]
    },
    {
      "snippet": "properties: {\ntemplateId: {\ntype: string;\ndescription: string;\n};",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 29
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 81
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 127
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 177
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 225
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 246
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 275
        }
      ]
    },
    {
      "snippet": "version1: {\ntype: string;\ndescription: string;\n};\nversion2: {",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 34
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 208
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 293
        }
      ]
    },
    {
      "snippet": "type: string;\ndescription: string;\n};\nversion2: {\ntype: string;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 35
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 209
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 294
        }
      ]
    },
    {
      "snippet": "description: string;\n};\nversion2: {\ntype: string;\ndescription: string;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 36
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 210
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 295
        }
      ]
    },
    {
      "snippet": "};\nversion2: {\ntype: string;\ndescription: string;\n};",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 37
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 211
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 296
        }
      ]
    },
    {
      "snippet": "version2: {\ntype: string;\ndescription: string;\n};\n};",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 38
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 212
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 297
        }
      ]
    },
    {
      "snippet": "export interface FindMigrationPathResult {\nsuccess: boolean;\npathFound: boolean;\npath?: {\nfrom: string;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 56
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 149
        }
      ]
    },
    {
      "snippet": "success: boolean;\npathFound: boolean;\npath?: {\nfrom: string;\nto: string;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 57
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 150
        }
      ]
    },
    {
      "snippet": "pathFound: boolean;\npath?: {\nfrom: string;\nto: string;\nsteps: Array<{",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 58
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 151
        }
      ]
    },
    {
      "snippet": "path?: {\nfrom: string;\nto: string;\nsteps: Array<{\nid: string;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 59
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 152
        }
      ]
    },
    {
      "snippet": "from: string;\nto: string;\nsteps: Array<{\nid: string;\nfromVersion: string;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 60
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 153
        }
      ]
    },
    {
      "snippet": "to: string;\nsteps: Array<{\nid: string;\nfromVersion: string;\ntoVersion: string;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 61
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 154
        }
      ]
    },
    {
      "snippet": "steps: Array<{\nid: string;\nfromVersion: string;\ntoVersion: string;\ndescription: string;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 62
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 155
        }
      ]
    },
    {
      "snippet": "id: string;\nfromVersion: string;\ntoVersion: string;\ndescription: string;\nestimatedDuration?: number;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 63
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 156
        }
      ]
    },
    {
      "snippet": "fromVersion: string;\ntoVersion: string;\ndescription: string;\nestimatedDuration?: number;\nreversible: boolean;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 64
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 157
        }
      ]
    },
    {
      "snippet": "toVersion: string;\ndescription: string;\nestimatedDuration?: number;\nreversible: boolean;\n}>;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 65
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 158
        }
      ]
    },
    {
      "snippet": "description: string;\nestimatedDuration?: number;\nreversible: boolean;\n}>;\nreversible: boolean;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 66
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 159
        }
      ]
    },
    {
      "snippet": "estimatedDuration?: number;\nreversible: boolean;\n}>;\nreversible: boolean;\ntotalDuration: number;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 67
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 160
        }
      ]
    },
    {
      "snippet": "reversible: boolean;\n}>;\nreversible: boolean;\ntotalDuration: number;\n};",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 68
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 161
        }
      ]
    },
    {
      "snippet": "}>;\nreversible: boolean;\ntotalDuration: number;\n};\nmessage: string;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 69
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 162
        }
      ]
    },
    {
      "snippet": "reversible: boolean;\ntotalDuration: number;\n};\nmessage: string;\n}",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 70
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 163
        }
      ]
    },
    {
      "snippet": "templateId: {\ntype: string;\ndescription: string;\n};\nfromVersion: {",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 82
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 226
        }
      ]
    },
    {
      "snippet": "type: string;\ndescription: string;\n};\nfromVersion: {\ntype: string;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 83
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 227
        }
      ]
    },
    {
      "snippet": "description: string;\n};\nfromVersion: {\ntype: string;\ndescription: string;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 84
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 228
        }
      ]
    },
    {
      "snippet": "};\nfromVersion: {\ntype: string;\ndescription: string;\n};",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 85
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 229
        }
      ]
    },
    {
      "snippet": "fromVersion: {\ntype: string;\ndescription: string;\n};\ntoVersion: {",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 86
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 230
        }
      ]
    },
    {
      "snippet": "type: string;\ndescription: string;\n};\ntoVersion: {\ntype: string;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 87
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 231
        }
      ]
    },
    {
      "snippet": "description: string;\n};\ntoVersion: {\ntype: string;\ndescription: string;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 88
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 232
        }
      ]
    },
    {
      "snippet": "};\ntoVersion: {\ntype: string;\ndescription: string;\n};",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 89
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 233
        }
      ]
    },
    {
      "snippet": "toVersion: {\ntype: string;\ndescription: string;\n};\n};",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 90
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 234
        }
      ]
    },
    {
      "snippet": "export interface RegisterTemplateVersionResult {\nsuccess: boolean;\nversion?: {\ntemplateId: string;\nversion: string;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 112
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 268
        }
      ]
    },
    {
      "snippet": "success: boolean;\nversion?: {\ntemplateId: string;\nversion: string;\nreleaseDate: string;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 113
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 161
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 269
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 372
        }
      ]
    },
    {
      "snippet": "version?: {\ntemplateId: string;\nversion: string;\nreleaseDate: string;\n};",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 114
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 270
        }
      ]
    },
    {
      "snippet": "templateId: string;\nversion: string;\nreleaseDate: string;\n};\nmessage: string;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 115
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 271
        }
      ]
    },
    {
      "snippet": "version: string;\nreleaseDate: string;\n};\nmessage: string;\n}",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 116
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 272
        }
      ]
    },
    {
      "snippet": "templateId: {\ntype: string;\ndescription: string;\n};\nversion: {",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 128
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 247
        }
      ]
    },
    {
      "snippet": "type: string;\ndescription: string;\n};\nversion: {\ntype: string;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 129
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 248
        }
      ]
    },
    {
      "snippet": "description: string;\n};\nversion: {\ntype: string;\ndescription: string;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 130
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 249
        }
      ]
    },
    {
      "snippet": "};\nversion: {\ntype: string;\ndescription: string;\n};",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 131
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 250
        }
      ]
    },
    {
      "snippet": "version: {\ntype: string;\ndescription: string;\n};\nchangelog: {",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 132
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 251
        }
      ]
    },
    {
      "snippet": "type: string;\ndescription: string;\n};\nchangelog: {\ntype: string;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 133
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 252
        }
      ]
    },
    {
      "snippet": "description: string;\n};\nchangelog: {\ntype: string;\ndescription: string;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 134
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 253
        }
      ]
    },
    {
      "snippet": "};\nchangelog: {\ntype: string;\ndescription: string;\n};",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 135
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 254
        }
      ]
    },
    {
      "snippet": "changelog: {\ntype: string;\ndescription: string;\n};\ncompatibleWith: {",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 136
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 255
        }
      ]
    },
    {
      "snippet": "type: string;\ndescription: string;\n};\ncompatibleWith: {\ntype: string;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 137
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 256
        }
      ]
    },
    {
      "snippet": "description: string;\n};\ncompatibleWith: {\ntype: string;\ndescription: string;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 138
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 257
        }
      ]
    },
    {
      "snippet": "};\ncompatibleWith: {\ntype: string;\ndescription: string;\n};",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 139
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 258
        }
      ]
    },
    {
      "snippet": "compatibleWith: {\ntype: string;\ndescription: string;\n};\nreleaseDate: {",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 140
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 259
        }
      ]
    },
    {
      "snippet": "type: string;\ndescription: string;\n};\nreleaseDate: {\ntype: string;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 141
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 260
        }
      ]
    },
    {
      "snippet": "description: string;\n};\nreleaseDate: {\ntype: string;\ndescription: string;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 142
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 261
        }
      ]
    },
    {
      "snippet": "};\nreleaseDate: {\ntype: string;\ndescription: string;\n};",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 143
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 262
        }
      ]
    },
    {
      "snippet": "releaseDate: {\ntype: string;\ndescription: string;\n};\n};",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 144
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 263
        }
      ]
    },
    {
      "snippet": "export interface GetLatestVersionResult {\nsuccess: boolean;\nversion?: {\ntemplateId: string;\nversion: string;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 160
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 371
        }
      ]
    },
    {
      "snippet": "version?: {\ntemplateId: string;\nversion: string;\nreleaseDate: string;\ndeprecated?: boolean;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 162
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 373
        }
      ]
    },
    {
      "snippet": "templateId: string;\nversion: string;\nreleaseDate: string;\ndeprecated?: boolean;\ndeprecationMessage?: string;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 163
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 374
        }
      ]
    },
    {
      "snippet": "version: string;\nreleaseDate: string;\ndeprecated?: boolean;\ndeprecationMessage?: string;\n};",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 164
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 375
        }
      ]
    },
    {
      "snippet": "releaseDate: string;\ndeprecated?: boolean;\ndeprecationMessage?: string;\n};\nmessage: string;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 165
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 376
        }
      ]
    },
    {
      "snippet": "deprecated?: boolean;\ndeprecationMessage?: string;\n};\nmessage: string;\n}",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 166
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 377
        }
      ]
    },
    {
      "snippet": "templateId: {\ntype: string;\ndescription: string;\n};\nincludePrerelease: {",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 178
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 276
        }
      ]
    },
    {
      "snippet": "type: string;\ndescription: string;\n};\nincludePrerelease: {\ntype: string;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 179
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 277
        }
      ]
    },
    {
      "snippet": "description: string;\n};\nincludePrerelease: {\ntype: string;\ndescription: string;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 180
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 278
        }
      ]
    },
    {
      "snippet": "};\nincludePrerelease: {\ntype: string;\ndescription: string;\n};",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 181
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 279
        }
      ]
    },
    {
      "snippet": "includePrerelease: {\ntype: string;\ndescription: string;\n};\n};",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 182
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 280
        }
      ]
    },
    {
      "snippet": "export interface CompareVersionsResult {\nsuccess: boolean;\ncomparison?: 'less_than' | 'equal' | 'greater_than';\nmessage: string;\n}",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 196
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 452
        }
      ]
    },
    {
      "snippet": "description: string;\ninputSchema: {\ntype: string;\nproperties: {\nversion1: {",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 204
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 289
        }
      ]
    },
    {
      "snippet": "inputSchema: {\ntype: string;\nproperties: {\nversion1: {\ntype: string;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 205
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 290
        }
      ]
    },
    {
      "snippet": "type: string;\nproperties: {\nversion1: {\ntype: string;\ndescription: string;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 206
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 291
        }
      ]
    },
    {
      "snippet": "properties: {\nversion1: {\ntype: string;\ndescription: string;\n};",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 207
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 292
        }
      ]
    },
    {
      "snippet": "};\n};\nrequired: string[];\n};\n} | {",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 237
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 266
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 283
        }
      ]
    },
    {
      "snippet": "};\nrequired: string[];\n};\n} | {\nname: string;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 238
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 267
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 284
        }
      ]
    },
    {
      "snippet": "required: string[];\n};\n} | {\nname: string;\ndescription: string;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 239
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 268
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 285
        }
      ]
    },
    {
      "snippet": "};\n} | {\nname: string;\ndescription: string;\ninputSchema: {",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 240
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 269
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 286
        }
      ]
    },
    {
      "snippet": "} | {\nname: string;\ndescription: string;\ninputSchema: {\ntype: string;",
      "occurrences": [
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 241
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 270
        },
        {
          "path": "dist/tools/version-template.d.ts",
          "line": 287
        }
      ]
    },
    {
      "snippet": "/**\n* MCP Tool: version_template\n*\n* Exposes version management and migration functionality as MCP tools\n* for use in Claude Desktop and other MCP-compatible environments.",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 10
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 3
        }
      ]
    },
    {
      "snippet": "* MCP Tool: version_template\n*\n* Exposes version management and migration functionality as MCP tools\n* for use in Claude Desktop and other MCP-compatible environments.\n*",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 11
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 4
        }
      ]
    },
    {
      "snippet": "*\n* Exposes version management and migration functionality as MCP tools\n* for use in Claude Desktop and other MCP-compatible environments.\n*\n* Implements SemVer support and migration capabilities from",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 12
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 5
        }
      ]
    },
    {
      "snippet": "* Exposes version management and migration functionality as MCP tools\n* for use in Claude Desktop and other MCP-compatible environments.\n*\n* Implements SemVer support and migration capabilities from B",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 13
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 6
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: true,\ncompatible: result.compatible,\nreason: result.reason,\nsuggestedUpgrade: result.suggestedUpgrade,",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 45
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 89
        }
      ]
    },
    {
      "snippet": "success: true,\ncompatible: result.compatible,\nreason: result.reason,\nsuggestedUpgrade: result.suggestedUpgrade,\nmessage: result.compatible",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 46
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 90
        }
      ]
    },
    {
      "snippet": "compatible: result.compatible,\nreason: result.reason,\nsuggestedUpgrade: result.suggestedUpgrade,\nmessage: result.compatible\n? `Versions ${params.version1} and ${params.version2} are compatible`",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 47
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 91
        }
      ]
    },
    {
      "snippet": "reason: result.reason,\nsuggestedUpgrade: result.suggestedUpgrade,\nmessage: result.compatible\n? `Versions ${params.version1} and ${params.version2} are compatible`\n: `Versions ${params.version1} and ${",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 48
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 92
        }
      ]
    },
    {
      "snippet": "suggestedUpgrade: result.suggestedUpgrade,\nmessage: result.compatible\n? `Versions ${params.version1} and ${params.version2} are compatible`\n: `Versions ${params.version1} and ${params.version2} are NO",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 49
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 93
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: false,\ncompatible: false,\nmessage: `Compatibility check failed: ${error instanceof Error ? error.message : String(error)}`,\n};",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 56
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 99
        }
      ]
    },
    {
      "snippet": "success: false,\ncompatible: false,\nmessage: `Compatibility check failed: ${error instanceof Error ? error.message : String(error)}`,\n};\n}",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 57
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 100
        }
      ]
    },
    {
      "snippet": "compatible: false,\nmessage: `Compatibility check failed: ${error instanceof Error ? error.message : String(error)}`,\n};\n}\n}",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 58
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 101
        }
      ]
    },
    {
      "snippet": "inputSchema: {\ntype: 'object',\nproperties: {\ntemplateId: {\ntype: 'string',",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 66
        },
        {
          "path": "dist/tools/version-template.js",
          "line": 129
        },
        {
          "path": "dist/tools/version-template.js",
          "line": 189
        },
        {
          "path": "dist/tools/version-template.js",
          "line": 248
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 111
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 224
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 327
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 424
        }
      ]
    },
    {
      "snippet": "type: 'object',\nproperties: {\ntemplateId: {\ntype: 'string',\ndescription: 'The template identifier',",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 67
        },
        {
          "path": "dist/tools/version-template.js",
          "line": 130
        },
        {
          "path": "dist/tools/version-template.js",
          "line": 190
        },
        {
          "path": "dist/tools/version-template.js",
          "line": 249
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 112
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 225
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 328
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 425
        }
      ]
    },
    {
      "snippet": "properties: {\ntemplateId: {\ntype: 'string',\ndescription: 'The template identifier',\n},",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 68
        },
        {
          "path": "dist/tools/version-template.js",
          "line": 131
        },
        {
          "path": "dist/tools/version-template.js",
          "line": 191
        },
        {
          "path": "dist/tools/version-template.js",
          "line": 250
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 113
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 226
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 329
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 426
        }
      ]
    },
    {
      "snippet": "templateId: {\ntype: 'string',\ndescription: 'The template identifier',\n},\nversion1: {",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 69
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 114
        }
      ]
    },
    {
      "snippet": "type: 'string',\ndescription: 'The template identifier',\n},\nversion1: {\ntype: 'string',",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 70
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 115
        }
      ]
    },
    {
      "snippet": "description: 'The template identifier',\n},\nversion1: {\ntype: 'string',\ndescription: 'First version to compare (SemVer format: X.Y.Z)',",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 71
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 116
        }
      ]
    },
    {
      "snippet": "},\nversion1: {\ntype: 'string',\ndescription: 'First version to compare (SemVer format: X.Y.Z)',\n},",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 72
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 117
        }
      ]
    },
    {
      "snippet": "version1: {\ntype: 'string',\ndescription: 'First version to compare (SemVer format: X.Y.Z)',\n},\nversion2: {",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 73
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 118
        }
      ]
    },
    {
      "snippet": "type: 'string',\ndescription: 'First version to compare (SemVer format: X.Y.Z)',\n},\nversion2: {\ntype: 'string',",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 74
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 119
        }
      ]
    },
    {
      "snippet": "description: 'First version to compare (SemVer format: X.Y.Z)',\n},\nversion2: {\ntype: 'string',\ndescription: 'Second version to compare (SemVer format: X.Y.Z)',",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 75
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 120
        }
      ]
    },
    {
      "snippet": "},\nversion2: {\ntype: 'string',\ndescription: 'Second version to compare (SemVer format: X.Y.Z)',\n},",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 76
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 121
        }
      ]
    },
    {
      "snippet": "version2: {\ntype: 'string',\ndescription: 'Second version to compare (SemVer format: X.Y.Z)',\n},\n},",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 77
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 122
        }
      ]
    },
    {
      "snippet": "type: 'string',\ndescription: 'Second version to compare (SemVer format: X.Y.Z)',\n},\n},\nrequired: ['templateId', 'version1', 'version2'],",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 78
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 123
        }
      ]
    },
    {
      "snippet": "description: 'Second version to compare (SemVer format: X.Y.Z)',\n},\n},\nrequired: ['templateId', 'version1', 'version2'],\n},",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 79
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 124
        }
      ]
    },
    {
      "snippet": "},\n},\nrequired: ['templateId', 'version1', 'version2'],\n},\n};",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 80
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 125
        }
      ]
    },
    {
      "snippet": "if (!path) {\nreturn {\nsuccess: true,\npathFound: false,\nmessage: `No migration path found from ${params.fromVersion} to ${params.toVersion}`,",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 91
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 184
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: true,\npathFound: false,\nmessage: `No migration path found from ${params.fromVersion} to ${params.toVersion}`,\n};",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 92
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 185
        }
      ]
    },
    {
      "snippet": "success: true,\npathFound: false,\nmessage: `No migration path found from ${params.fromVersion} to ${params.toVersion}`,\n};\n}",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 93
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 186
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: true,\npathFound: true,\npath: {\nfrom: versionManager.versionToString(path.from),",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 98
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 192
        }
      ]
    },
    {
      "snippet": "success: true,\npathFound: true,\npath: {\nfrom: versionManager.versionToString(path.from),\nto: versionManager.versionToString(path.to),",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 99
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 193
        }
      ]
    },
    {
      "snippet": "pathFound: true,\npath: {\nfrom: versionManager.versionToString(path.from),\nto: versionManager.versionToString(path.to),\nsteps: path.steps.map(step => ({",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 100
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 194
        }
      ]
    },
    {
      "snippet": "path: {\nfrom: versionManager.versionToString(path.from),\nto: versionManager.versionToString(path.to),\nsteps: path.steps.map(step => ({\nid: step.id,",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 101
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 195
        }
      ]
    },
    {
      "snippet": "from: versionManager.versionToString(path.from),\nto: versionManager.versionToString(path.to),\nsteps: path.steps.map(step => ({\nid: step.id,\nfromVersion: versionManager.versionToString(step.fromVersion",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 102
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 196
        }
      ]
    },
    {
      "snippet": "to: versionManager.versionToString(path.to),\nsteps: path.steps.map(step => ({\nid: step.id,\nfromVersion: versionManager.versionToString(step.fromVersion),\ntoVersion: versionManager.versionToString(step",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 103
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 197
        }
      ]
    },
    {
      "snippet": "steps: path.steps.map(step => ({\nid: step.id,\nfromVersion: versionManager.versionToString(step.fromVersion),\ntoVersion: versionManager.versionToString(step.toVersion),\ndescription: step.description,",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 104
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 198
        }
      ]
    },
    {
      "snippet": "id: step.id,\nfromVersion: versionManager.versionToString(step.fromVersion),\ntoVersion: versionManager.versionToString(step.toVersion),\ndescription: step.description,\nestimatedDuration: step.estimatedD",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 105
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 199
        }
      ]
    },
    {
      "snippet": "fromVersion: versionManager.versionToString(step.fromVersion),\ntoVersion: versionManager.versionToString(step.toVersion),\ndescription: step.description,\nestimatedDuration: step.estimatedDuration,\nreve",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 106
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 200
        }
      ]
    },
    {
      "snippet": "toVersion: versionManager.versionToString(step.toVersion),\ndescription: step.description,\nestimatedDuration: step.estimatedDuration,\nreversible: step.reversible,\n})),",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 107
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 201
        }
      ]
    },
    {
      "snippet": "description: step.description,\nestimatedDuration: step.estimatedDuration,\nreversible: step.reversible,\n})),\nreversible: path.reversible,",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 108
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 202
        }
      ]
    },
    {
      "snippet": "estimatedDuration: step.estimatedDuration,\nreversible: step.reversible,\n})),\nreversible: path.reversible,\ntotalDuration: path.totalDuration,",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 109
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 203
        }
      ]
    },
    {
      "snippet": "reversible: step.reversible,\n})),\nreversible: path.reversible,\ntotalDuration: path.totalDuration,\n},",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 110
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 204
        }
      ]
    },
    {
      "snippet": "})),\nreversible: path.reversible,\ntotalDuration: path.totalDuration,\n},\nmessage: `Migration path found with ${path.steps.length} step(s), estimated duration: ${path.totalDuration}s`,",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 111
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 205
        }
      ]
    },
    {
      "snippet": "reversible: path.reversible,\ntotalDuration: path.totalDuration,\n},\nmessage: `Migration path found with ${path.steps.length} step(s), estimated duration: ${path.totalDuration}s`,\n};",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 112
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 206
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: false,\npathFound: false,\nmessage: `Failed to find migration path: ${error instanceof Error ? error.message : String(error)}`,\n};",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 119
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 212
        }
      ]
    },
    {
      "snippet": "success: false,\npathFound: false,\nmessage: `Failed to find migration path: ${error instanceof Error ? error.message : String(error)}`,\n};\n}",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 120
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 213
        }
      ]
    },
    {
      "snippet": "pathFound: false,\nmessage: `Failed to find migration path: ${error instanceof Error ? error.message : String(error)}`,\n};\n}\n}",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 121
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 214
        }
      ]
    },
    {
      "snippet": "templateId: {\ntype: 'string',\ndescription: 'The template identifier',\n},\nfromVersion: {",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 132
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 227
        }
      ]
    },
    {
      "snippet": "type: 'string',\ndescription: 'The template identifier',\n},\nfromVersion: {\ntype: 'string',",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 133
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 228
        }
      ]
    },
    {
      "snippet": "description: 'The template identifier',\n},\nfromVersion: {\ntype: 'string',\ndescription: 'Source version (SemVer format: X.Y.Z)',",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 134
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 229
        }
      ]
    },
    {
      "snippet": "},\nfromVersion: {\ntype: 'string',\ndescription: 'Source version (SemVer format: X.Y.Z)',\n},",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 135
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 230
        }
      ]
    },
    {
      "snippet": "fromVersion: {\ntype: 'string',\ndescription: 'Source version (SemVer format: X.Y.Z)',\n},\ntoVersion: {",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 136
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 231
        }
      ]
    },
    {
      "snippet": "type: 'string',\ndescription: 'Source version (SemVer format: X.Y.Z)',\n},\ntoVersion: {\ntype: 'string',",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 137
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 232
        }
      ]
    },
    {
      "snippet": "description: 'Source version (SemVer format: X.Y.Z)',\n},\ntoVersion: {\ntype: 'string',\ndescription: 'Target version (SemVer format: X.Y.Z)',",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 138
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 233
        }
      ]
    },
    {
      "snippet": "},\ntoVersion: {\ntype: 'string',\ndescription: 'Target version (SemVer format: X.Y.Z)',\n},",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 139
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 234
        }
      ]
    },
    {
      "snippet": "toVersion: {\ntype: 'string',\ndescription: 'Target version (SemVer format: X.Y.Z)',\n},\n},",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 140
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 235
        }
      ]
    },
    {
      "snippet": "type: 'string',\ndescription: 'Target version (SemVer format: X.Y.Z)',\n},\n},\nrequired: ['templateId', 'fromVersion', 'toVersion'],",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 141
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 236
        }
      ]
    },
    {
      "snippet": "description: 'Target version (SemVer format: X.Y.Z)',\n},\n},\nrequired: ['templateId', 'fromVersion', 'toVersion'],\n},",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 142
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 237
        }
      ]
    },
    {
      "snippet": "},\n},\nrequired: ['templateId', 'fromVersion', 'toVersion'],\n},\n};",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 143
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 238
        }
      ]
    },
    {
      "snippet": "templateId: params.templateId,\nversion,\nchangelog: params.changelog,\ncompatibleWith: params.compatibleWith\n? { expression: params.compatibleWith }",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 154
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 288
        }
      ]
    },
    {
      "snippet": "version,\nchangelog: params.changelog,\ncompatibleWith: params.compatibleWith\n? { expression: params.compatibleWith }\n: undefined,",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 155
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 289
        }
      ]
    },
    {
      "snippet": "changelog: params.changelog,\ncompatibleWith: params.compatibleWith\n? { expression: params.compatibleWith }\n: undefined,\nreleaseDate,",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 156
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 290
        }
      ]
    },
    {
      "snippet": "compatibleWith: params.compatibleWith\n? { expression: params.compatibleWith }\n: undefined,\nreleaseDate,\n};",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 157
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 291
        }
      ]
    },
    {
      "snippet": "// Validate the version\nconst validation = versionManager.validateVersion(templateVersion);\nif (!validation.valid) {\nthrow new Error(`Invalid template version: ${validation.errors.join(', ')}`);\n}",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 162
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 297
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: true,\nversion: {\ntemplateId: params.templateId,\nversion: params.version,",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 169
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 306
        }
      ]
    },
    {
      "snippet": "success: true,\nversion: {\ntemplateId: params.templateId,\nversion: params.version,\nreleaseDate,",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 170
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 307
        }
      ]
    },
    {
      "snippet": "version: {\ntemplateId: params.templateId,\nversion: params.version,\nreleaseDate,\n},",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 171
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 308
        }
      ]
    },
    {
      "snippet": "templateId: params.templateId,\nversion: params.version,\nreleaseDate,\n},\nmessage: `Template version ${params.templateId}@${params.version} registered successfully`,",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 172
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 309
        }
      ]
    },
    {
      "snippet": "version: params.version,\nreleaseDate,\n},\nmessage: `Template version ${params.templateId}@${params.version} registered successfully`,\n};",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 173
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 310
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: false,\nmessage: `Failed to register template version: ${error instanceof Error ? error.message : String(error)}`,\n};\n}",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 180
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 316
        }
      ]
    },
    {
      "snippet": "success: false,\nmessage: `Failed to register template version: ${error instanceof Error ? error.message : String(error)}`,\n};\n}\n}",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 181
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 317
        }
      ]
    },
    {
      "snippet": "templateId: {\ntype: 'string',\ndescription: 'The template identifier',\n},\nversion: {",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 192
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 330
        }
      ]
    },
    {
      "snippet": "type: 'string',\ndescription: 'The template identifier',\n},\nversion: {\ntype: 'string',",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 193
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 331
        }
      ]
    },
    {
      "snippet": "description: 'The template identifier',\n},\nversion: {\ntype: 'string',\ndescription: 'Version string in SemVer format (X.Y.Z)',",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 194
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 332
        }
      ]
    },
    {
      "snippet": "},\nversion: {\ntype: 'string',\ndescription: 'Version string in SemVer format (X.Y.Z)',\n},",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 195
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 333
        }
      ]
    },
    {
      "snippet": "version: {\ntype: 'string',\ndescription: 'Version string in SemVer format (X.Y.Z)',\n},\nchangelog: {",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 196
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 334
        }
      ]
    },
    {
      "snippet": "type: 'string',\ndescription: 'Version string in SemVer format (X.Y.Z)',\n},\nchangelog: {\ntype: 'string',",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 197
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 335
        }
      ]
    },
    {
      "snippet": "description: 'Version string in SemVer format (X.Y.Z)',\n},\nchangelog: {\ntype: 'string',\ndescription: 'Human-readable changelog entry for this version (optional)',",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 198
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 336
        }
      ]
    },
    {
      "snippet": "},\nchangelog: {\ntype: 'string',\ndescription: 'Human-readable changelog entry for this version (optional)',\n},",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 199
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 337
        }
      ]
    },
    {
      "snippet": "changelog: {\ntype: 'string',\ndescription: 'Human-readable changelog entry for this version (optional)',\n},\ncompatibleWith: {",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 200
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 338
        }
      ]
    },
    {
      "snippet": "type: 'string',\ndescription: 'Human-readable changelog entry for this version (optional)',\n},\ncompatibleWith: {\ntype: 'string',",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 201
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 339
        }
      ]
    },
    {
      "snippet": "},\nreleaseDate: {\ntype: 'string',\ndescription: 'ISO 8601 release date (optional, defaults to now)',\n},",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 207
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 346
        }
      ]
    },
    {
      "snippet": "releaseDate: {\ntype: 'string',\ndescription: 'ISO 8601 release date (optional, defaults to now)',\n},\n},",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 208
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 347
        }
      ]
    },
    {
      "snippet": "type: 'string',\ndescription: 'ISO 8601 release date (optional, defaults to now)',\n},\n},\nrequired: ['templateId', 'version'],",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 209
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 348
        }
      ]
    },
    {
      "snippet": "description: 'ISO 8601 release date (optional, defaults to now)',\n},\n},\nrequired: ['templateId', 'version'],\n},",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 210
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 349
        }
      ]
    },
    {
      "snippet": "},\n},\nrequired: ['templateId', 'version'],\n},\n};",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 211
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 350
        }
      ]
    },
    {
      "snippet": "if (!latest) {\nreturn {\nsuccess: true,\nmessage: `No versions found for template ${params.templateId}`,\n};",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 220
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 394
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: true,\nmessage: `No versions found for template ${params.templateId}`,\n};\n}",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 221
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 395
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: true,\nversion: {\ntemplateId: params.templateId,\nversion: versionManager.versionToString(latest.version),",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 226
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 401
        }
      ]
    },
    {
      "snippet": "success: true,\nversion: {\ntemplateId: params.templateId,\nversion: versionManager.versionToString(latest.version),\nreleaseDate: latest.releaseDate,",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 227
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 402
        }
      ]
    },
    {
      "snippet": "version: {\ntemplateId: params.templateId,\nversion: versionManager.versionToString(latest.version),\nreleaseDate: latest.releaseDate,\ndeprecated: latest.deprecated !== undefined,",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 228
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 403
        }
      ]
    },
    {
      "snippet": "templateId: params.templateId,\nversion: versionManager.versionToString(latest.version),\nreleaseDate: latest.releaseDate,\ndeprecated: latest.deprecated !== undefined,\ndeprecationMessage: latest.depreca",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 229
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 404
        }
      ]
    },
    {
      "snippet": "version: versionManager.versionToString(latest.version),\nreleaseDate: latest.releaseDate,\ndeprecated: latest.deprecated !== undefined,\ndeprecationMessage: latest.deprecated?.message,\n},",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 230
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 405
        }
      ]
    },
    {
      "snippet": "releaseDate: latest.releaseDate,\ndeprecated: latest.deprecated !== undefined,\ndeprecationMessage: latest.deprecated?.message,\n},\nmessage: `Latest version for ${params.templateId}: ${versionManager.ver",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 231
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 406
        }
      ]
    },
    {
      "snippet": "deprecated: latest.deprecated !== undefined,\ndeprecationMessage: latest.deprecated?.message,\n},\nmessage: `Latest version for ${params.templateId}: ${versionManager.versionToString(latest.version)}`,\n}",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 232
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 407
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: false,\nmessage: `Failed to get latest version: ${error instanceof Error ? error.message : String(error)}`,\n};\n}",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 239
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 413
        }
      ]
    },
    {
      "snippet": "success: false,\nmessage: `Failed to get latest version: ${error instanceof Error ? error.message : String(error)}`,\n};\n}\n}",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 240
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 414
        }
      ]
    },
    {
      "snippet": "templateId: {\ntype: 'string',\ndescription: 'The template identifier',\n},\nincludePrerelease: {",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 251
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 427
        }
      ]
    },
    {
      "snippet": "type: 'string',\ndescription: 'The template identifier',\n},\nincludePrerelease: {\ntype: 'boolean',",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 252
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 428
        }
      ]
    },
    {
      "snippet": "description: 'The template identifier',\n},\nincludePrerelease: {\ntype: 'boolean',\ndescription: 'Include pre-release versions (e.g., 1.0.0-alpha) (optional)',",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 253
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 429
        }
      ]
    },
    {
      "snippet": "},\nincludePrerelease: {\ntype: 'boolean',\ndescription: 'Include pre-release versions (e.g., 1.0.0-alpha) (optional)',\n},",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 254
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 430
        }
      ]
    },
    {
      "snippet": "includePrerelease: {\ntype: 'boolean',\ndescription: 'Include pre-release versions (e.g., 1.0.0-alpha) (optional)',\n},\n},",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 255
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 431
        }
      ]
    },
    {
      "snippet": "type: 'boolean',\ndescription: 'Include pre-release versions (e.g., 1.0.0-alpha) (optional)',\n},\n},\nrequired: ['templateId'],",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 256
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 432
        }
      ]
    },
    {
      "snippet": "description: 'Include pre-release versions (e.g., 1.0.0-alpha) (optional)',\n},\n},\nrequired: ['templateId'],\n},",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 257
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 433
        }
      ]
    },
    {
      "snippet": "},\n},\nrequired: ['templateId'],\n},\n};",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 258
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 434
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: true,\ncomparison: comparisonMap[result],\nmessage: `${params.version1} is ${comparisonMap[result].replace('_', ' ')} ${params.version2}`,\n};",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 274
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 475
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: false,\nmessage: `Failed to compare versions: ${error instanceof Error ? error.message : String(error)}`,\n};\n}",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 281
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 481
        }
      ]
    },
    {
      "snippet": "success: false,\nmessage: `Failed to compare versions: ${error instanceof Error ? error.message : String(error)}`,\n};\n}\n}",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 282
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 482
        }
      ]
    },
    {
      "snippet": "inputSchema: {\ntype: 'object',\nproperties: {\nversion1: {\ntype: 'string',",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 290
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 492
        }
      ]
    },
    {
      "snippet": "type: 'object',\nproperties: {\nversion1: {\ntype: 'string',\ndescription: 'First version in SemVer format (X.Y.Z)',",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 291
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 493
        }
      ]
    },
    {
      "snippet": "properties: {\nversion1: {\ntype: 'string',\ndescription: 'First version in SemVer format (X.Y.Z)',\n},",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 292
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 494
        }
      ]
    },
    {
      "snippet": "version1: {\ntype: 'string',\ndescription: 'First version in SemVer format (X.Y.Z)',\n},\nversion2: {",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 293
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 495
        }
      ]
    },
    {
      "snippet": "type: 'string',\ndescription: 'First version in SemVer format (X.Y.Z)',\n},\nversion2: {\ntype: 'string',",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 294
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 496
        }
      ]
    },
    {
      "snippet": "description: 'First version in SemVer format (X.Y.Z)',\n},\nversion2: {\ntype: 'string',\ndescription: 'Second version in SemVer format (X.Y.Z)',",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 295
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 497
        }
      ]
    },
    {
      "snippet": "},\nversion2: {\ntype: 'string',\ndescription: 'Second version in SemVer format (X.Y.Z)',\n},",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 296
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 498
        }
      ]
    },
    {
      "snippet": "version2: {\ntype: 'string',\ndescription: 'Second version in SemVer format (X.Y.Z)',\n},\n},",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 297
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 499
        }
      ]
    },
    {
      "snippet": "type: 'string',\ndescription: 'Second version in SemVer format (X.Y.Z)',\n},\n},\nrequired: ['version1', 'version2'],",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 298
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 500
        }
      ]
    },
    {
      "snippet": "description: 'Second version in SemVer format (X.Y.Z)',\n},\n},\nrequired: ['version1', 'version2'],\n},",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 299
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 501
        }
      ]
    },
    {
      "snippet": "},\n},\nrequired: ['version1', 'version2'],\n},\n};",
      "occurrences": [
        {
          "path": "dist/tools/version-template.js",
          "line": 300
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 502
        }
      ]
    },
    {
      "snippet": "/**\n* Mission Type Definitions\n*\n* Exports core mission types and utilities for the mission system.\n*/",
      "occurrences": [
        {
          "path": "dist/types/mission-types.d.ts",
          "line": 1
        },
        {
          "path": "dist/types/mission-types.js",
          "line": 2
        },
        {
          "path": "src/types/mission-types.ts",
          "line": 1
        }
      ]
    },
    {
      "snippet": "/**\n* Registry Type Definitions\n*\n* Defines the structure for domain pack registry entries and validation results.\n*",
      "occurrences": [
        {
          "path": "dist/types/registry.d.ts",
          "line": 1
        },
        {
          "path": "dist/types/registry.js",
          "line": 2
        },
        {
          "path": "src/types/registry.ts",
          "line": 1
        }
      ]
    },
    {
      "snippet": "* Registry Type Definitions\n*\n* Defines the structure for domain pack registry entries and validation results.\n*\n* @module types/registry",
      "occurrences": [
        {
          "path": "dist/types/registry.d.ts",
          "line": 2
        },
        {
          "path": "dist/types/registry.js",
          "line": 3
        },
        {
          "path": "src/types/registry.ts",
          "line": 2
        }
      ]
    },
    {
      "snippet": "*\n* Defines the structure for domain pack registry entries and validation results.\n*\n* @module types/registry\n*/",
      "occurrences": [
        {
          "path": "dist/types/registry.d.ts",
          "line": 3
        },
        {
          "path": "dist/types/registry.js",
          "line": 4
        },
        {
          "path": "src/types/registry.ts",
          "line": 3
        }
      ]
    },
    {
      "snippet": "/**\n* Domain Pack Entry\n* Represents a single domain pack in the registry\n*/\nexport interface DomainPackEntry {",
      "occurrences": [
        {
          "path": "dist/types/registry.d.ts",
          "line": 8
        },
        {
          "path": "src/types/registry.ts",
          "line": 9
        }
      ]
    },
    {
      "snippet": "* Domain Pack Entry\n* Represents a single domain pack in the registry\n*/\nexport interface DomainPackEntry {\n/** Unique name of the domain pack */",
      "occurrences": [
        {
          "path": "dist/types/registry.d.ts",
          "line": 9
        },
        {
          "path": "src/types/registry.ts",
          "line": 10
        }
      ]
    },
    {
      "snippet": "* Represents a single domain pack in the registry\n*/\nexport interface DomainPackEntry {\n/** Unique name of the domain pack */\nname: string;",
      "occurrences": [
        {
          "path": "dist/types/registry.d.ts",
          "line": 10
        },
        {
          "path": "src/types/registry.ts",
          "line": 11
        }
      ]
    },
    {
      "snippet": "/** Unique name of the domain pack */\nname: string;\n/** Description of the domain pack's purpose */\ndescription: string;\n/** SemVer version (X.Y.Z format) */",
      "occurrences": [
        {
          "path": "dist/types/registry.d.ts",
          "line": 13
        },
        {
          "path": "dist/types/tools.d.ts",
          "line": 13
        }
      ]
    },
    {
      "snippet": "name: string;\n/** Description of the domain pack's purpose */\ndescription: string;\n/** SemVer version (X.Y.Z format) */\nversion: string;",
      "occurrences": [
        {
          "path": "dist/types/registry.d.ts",
          "line": 14
        },
        {
          "path": "dist/types/tools.d.ts",
          "line": 14
        }
      ]
    },
    {
      "snippet": "/** Description of the domain pack's purpose */\ndescription: string;\n/** SemVer version (X.Y.Z format) */\nversion: string;\n/** Optional author information */",
      "occurrences": [
        {
          "path": "dist/types/registry.d.ts",
          "line": 15
        },
        {
          "path": "dist/types/tools.d.ts",
          "line": 15
        }
      ]
    },
    {
      "snippet": "description: string;\n/** SemVer version (X.Y.Z format) */\nversion: string;\n/** Optional author information */\nauthor?: string;",
      "occurrences": [
        {
          "path": "dist/types/registry.d.ts",
          "line": 16
        },
        {
          "path": "dist/types/tools.d.ts",
          "line": 16
        }
      ]
    },
    {
      "snippet": "/**\n* Registry Structure\n* Contains array of domain pack entries\n*/\nexport interface Registry {",
      "occurrences": [
        {
          "path": "dist/types/registry.d.ts",
          "line": 26
        },
        {
          "path": "src/types/registry.ts",
          "line": 33
        }
      ]
    },
    {
      "snippet": "* Registry Structure\n* Contains array of domain pack entries\n*/\nexport interface Registry {\ndomains: DomainPackEntry[];",
      "occurrences": [
        {
          "path": "dist/types/registry.d.ts",
          "line": 27
        },
        {
          "path": "src/types/registry.ts",
          "line": 34
        }
      ]
    },
    {
      "snippet": "* Contains array of domain pack entries\n*/\nexport interface Registry {\ndomains: DomainPackEntry[];\n}",
      "occurrences": [
        {
          "path": "dist/types/registry.d.ts",
          "line": 28
        },
        {
          "path": "src/types/registry.ts",
          "line": 35
        }
      ]
    },
    {
      "snippet": "/**\n* Validation Result\n* Result of validating a domain pack entry\n*/\nexport interface ValidationResult {",
      "occurrences": [
        {
          "path": "dist/types/registry.d.ts",
          "line": 33
        },
        {
          "path": "src/types/registry.ts",
          "line": 41
        }
      ]
    },
    {
      "snippet": "* Validation Result\n* Result of validating a domain pack entry\n*/\nexport interface ValidationResult {\n/** Whether validation passed */",
      "occurrences": [
        {
          "path": "dist/types/registry.d.ts",
          "line": 34
        },
        {
          "path": "src/types/registry.ts",
          "line": 42
        }
      ]
    },
    {
      "snippet": "* Result of validating a domain pack entry\n*/\nexport interface ValidationResult {\n/** Whether validation passed */\nvalid: boolean;",
      "occurrences": [
        {
          "path": "dist/types/registry.d.ts",
          "line": 35
        },
        {
          "path": "src/types/registry.ts",
          "line": 43
        }
      ]
    },
    {
      "snippet": "/**\n* SemVer Components\n* Parsed semantic version\n*/\nexport interface SemVerComponents {",
      "occurrences": [
        {
          "path": "dist/types/registry.d.ts",
          "line": 45
        },
        {
          "path": "src/types/registry.ts",
          "line": 56
        }
      ]
    },
    {
      "snippet": "* SemVer Components\n* Parsed semantic version\n*/\nexport interface SemVerComponents {\nmajor: number;",
      "occurrences": [
        {
          "path": "dist/types/registry.d.ts",
          "line": 46
        },
        {
          "path": "src/types/registry.ts",
          "line": 57
        }
      ]
    },
    {
      "snippet": "* Parsed semantic version\n*/\nexport interface SemVerComponents {\nmajor: number;\nminor: number;",
      "occurrences": [
        {
          "path": "dist/types/registry.d.ts",
          "line": 47
        },
        {
          "path": "src/types/registry.ts",
          "line": 58
        }
      ]
    },
    {
      "snippet": "*/\nexport interface SemVerComponents {\nmajor: number;\nminor: number;\npatch: number;",
      "occurrences": [
        {
          "path": "dist/types/registry.d.ts",
          "line": 48
        },
        {
          "path": "src/types/registry.ts",
          "line": 59
        }
      ]
    },
    {
      "snippet": "export interface SemVerComponents {\nmajor: number;\nminor: number;\npatch: number;\nraw: string;",
      "occurrences": [
        {
          "path": "dist/types/registry.d.ts",
          "line": 49
        },
        {
          "path": "src/types/registry.ts",
          "line": 60
        }
      ]
    },
    {
      "snippet": "major: number;\nminor: number;\npatch: number;\nraw: string;\n}",
      "occurrences": [
        {
          "path": "dist/types/registry.d.ts",
          "line": 50
        },
        {
          "path": "src/types/registry.ts",
          "line": 61
        }
      ]
    },
    {
      "snippet": "export interface JSONSchema {\ntype?: string | string[];\nproperties?: Record<string, JSONSchema>;\nrequired?: string[];\nitems?: JSONSchema;",
      "occurrences": [
        {
          "path": "dist/types/schemas.d.ts",
          "line": 4
        },
        {
          "path": "src/types/schemas.ts",
          "line": 5
        }
      ]
    },
    {
      "snippet": "type?: string | string[];\nproperties?: Record<string, JSONSchema>;\nrequired?: string[];\nitems?: JSONSchema;\nadditionalProperties?: boolean | JSONSchema;",
      "occurrences": [
        {
          "path": "dist/types/schemas.d.ts",
          "line": 5
        },
        {
          "path": "src/types/schemas.ts",
          "line": 6
        }
      ]
    },
    {
      "snippet": "properties?: Record<string, JSONSchema>;\nrequired?: string[];\nitems?: JSONSchema;\nadditionalProperties?: boolean | JSONSchema;\nenum?: any[];",
      "occurrences": [
        {
          "path": "dist/types/schemas.d.ts",
          "line": 6
        },
        {
          "path": "src/types/schemas.ts",
          "line": 7
        }
      ]
    },
    {
      "snippet": "required?: string[];\nitems?: JSONSchema;\nadditionalProperties?: boolean | JSONSchema;\nenum?: any[];\npattern?: string;",
      "occurrences": [
        {
          "path": "dist/types/schemas.d.ts",
          "line": 7
        },
        {
          "path": "src/types/schemas.ts",
          "line": 8
        }
      ]
    },
    {
      "snippet": "items?: JSONSchema;\nadditionalProperties?: boolean | JSONSchema;\nenum?: any[];\npattern?: string;\nminimum?: number;",
      "occurrences": [
        {
          "path": "dist/types/schemas.d.ts",
          "line": 8
        },
        {
          "path": "src/types/schemas.ts",
          "line": 9
        }
      ]
    },
    {
      "snippet": "additionalProperties?: boolean | JSONSchema;\nenum?: any[];\npattern?: string;\nminimum?: number;\nmaximum?: number;",
      "occurrences": [
        {
          "path": "dist/types/schemas.d.ts",
          "line": 9
        },
        {
          "path": "src/types/schemas.ts",
          "line": 10
        }
      ]
    },
    {
      "snippet": "enum?: any[];\npattern?: string;\nminimum?: number;\nmaximum?: number;\nminLength?: number;",
      "occurrences": [
        {
          "path": "dist/types/schemas.d.ts",
          "line": 10
        },
        {
          "path": "src/types/schemas.ts",
          "line": 11
        }
      ]
    },
    {
      "snippet": "pattern?: string;\nminimum?: number;\nmaximum?: number;\nminLength?: number;\nmaxLength?: number;",
      "occurrences": [
        {
          "path": "dist/types/schemas.d.ts",
          "line": 11
        },
        {
          "path": "src/types/schemas.ts",
          "line": 12
        }
      ]
    },
    {
      "snippet": "minimum?: number;\nmaximum?: number;\nminLength?: number;\nmaxLength?: number;\nminItems?: number;",
      "occurrences": [
        {
          "path": "dist/types/schemas.d.ts",
          "line": 12
        },
        {
          "path": "src/types/schemas.ts",
          "line": 13
        }
      ]
    },
    {
      "snippet": "maximum?: number;\nminLength?: number;\nmaxLength?: number;\nminItems?: number;\nmaxItems?: number;",
      "occurrences": [
        {
          "path": "dist/types/schemas.d.ts",
          "line": 13
        },
        {
          "path": "src/types/schemas.ts",
          "line": 14
        }
      ]
    },
    {
      "snippet": "minLength?: number;\nmaxLength?: number;\nminItems?: number;\nmaxItems?: number;\n[key: string]: any;",
      "occurrences": [
        {
          "path": "dist/types/schemas.d.ts",
          "line": 14
        },
        {
          "path": "src/types/schemas.ts",
          "line": 15
        }
      ]
    },
    {
      "snippet": "maxLength?: number;\nminItems?: number;\nmaxItems?: number;\n[key: string]: any;\n}",
      "occurrences": [
        {
          "path": "dist/types/schemas.d.ts",
          "line": 15
        },
        {
          "path": "src/types/schemas.ts",
          "line": 16
        }
      ]
    },
    {
      "snippet": "export interface ValidationResult<T> {\nvalid: boolean;\ndata?: T;\nerrors?: any[];\n}",
      "occurrences": [
        {
          "path": "dist/types/schemas.d.ts",
          "line": 20
        },
        {
          "path": "src/types/schemas.ts",
          "line": 22
        }
      ]
    },
    {
      "snippet": "/**\n* Tool Type Definitions\n*\n* Defines data structures for MCP tools and their outputs.\n*",
      "occurrences": [
        {
          "path": "dist/types/tools.d.ts",
          "line": 1
        },
        {
          "path": "dist/types/tools.js",
          "line": 2
        },
        {
          "path": "src/types/tools.ts",
          "line": 1
        }
      ]
    },
    {
      "snippet": "* Tool Type Definitions\n*\n* Defines data structures for MCP tools and their outputs.\n*\n* @module types/tools",
      "occurrences": [
        {
          "path": "dist/types/tools.d.ts",
          "line": 2
        },
        {
          "path": "dist/types/tools.js",
          "line": 3
        },
        {
          "path": "src/types/tools.ts",
          "line": 2
        }
      ]
    },
    {
      "snippet": "*\n* Defines data structures for MCP tools and their outputs.\n*\n* @module types/tools\n*/",
      "occurrences": [
        {
          "path": "dist/types/tools.d.ts",
          "line": 3
        },
        {
          "path": "dist/types/tools.js",
          "line": 4
        },
        {
          "path": "src/types/tools.ts",
          "line": 3
        }
      ]
    },
    {
      "snippet": "/**\n* Domain Information\n* Simplified view of a domain pack for tool output\n*/\nexport interface DomainInfo {",
      "occurrences": [
        {
          "path": "dist/types/tools.d.ts",
          "line": 8
        },
        {
          "path": "src/types/tools.ts",
          "line": 9
        }
      ]
    },
    {
      "snippet": "* Domain Information\n* Simplified view of a domain pack for tool output\n*/\nexport interface DomainInfo {\n/** Unique name of the domain pack */",
      "occurrences": [
        {
          "path": "dist/types/tools.d.ts",
          "line": 9
        },
        {
          "path": "src/types/tools.ts",
          "line": 10
        }
      ]
    },
    {
      "snippet": "* Simplified view of a domain pack for tool output\n*/\nexport interface DomainInfo {\n/** Unique name of the domain pack */\nname: string;",
      "occurrences": [
        {
          "path": "dist/types/tools.d.ts",
          "line": 10
        },
        {
          "path": "src/types/tools.ts",
          "line": 11
        }
      ]
    },
    {
      "snippet": "/**\n* Get migration statistics\n*/\ngetStatistics(templateId: string): {\ntotalMigrations: number;",
      "occurrences": [
        {
          "path": "dist/versioning/migration-engine.d.ts",
          "line": 58
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 353
        }
      ]
    },
    {
      "snippet": "* Get migration statistics\n*/\ngetStatistics(templateId: string): {\ntotalMigrations: number;\nreversibleCount: number;",
      "occurrences": [
        {
          "path": "dist/versioning/migration-engine.d.ts",
          "line": 59
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 354
        }
      ]
    },
    {
      "snippet": "*/\ngetStatistics(templateId: string): {\ntotalMigrations: number;\nreversibleCount: number;\naverageDuration: number;",
      "occurrences": [
        {
          "path": "dist/versioning/migration-engine.d.ts",
          "line": 60
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 355
        }
      ]
    },
    {
      "snippet": "this.versionManager = versionManager;\nthis.options = {\ncreateBackups: options.createBackups ?? true,\nautoMigrate: options.autoMigrate ?? false,\nstrict: options.strict ?? true,",
      "occurrences": [
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 51
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 28
        }
      ]
    },
    {
      "snippet": "this.options = {\ncreateBackups: options.createBackups ?? true,\nautoMigrate: options.autoMigrate ?? false,\nstrict: options.strict ?? true,\n};",
      "occurrences": [
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 52
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 29
        }
      ]
    },
    {
      "snippet": "createBackups: options.createBackups ?? true,\nautoMigrate: options.autoMigrate ?? false,\nstrict: options.strict ?? true,\n};\n}",
      "occurrences": [
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 53
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 30
        }
      ]
    },
    {
      "snippet": "if (visited.has(versionKey)) {\n// Circular dependency detected\nreturn null;\n}\nvisited.add(versionKey);",
      "occurrences": [
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 82
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 74
        }
      ]
    },
    {
      "snippet": "return {\nfrom: fromVersion,\nto: toVersion,\nsteps: path,\nreversible,",
      "occurrences": [
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 107
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 116
        }
      ]
    },
    {
      "snippet": "from: fromVersion,\nto: toVersion,\nsteps: path,\nreversible,\ntotalDuration,",
      "occurrences": [
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 108
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 117
        }
      ]
    },
    {
      "snippet": "to: toVersion,\nsteps: path,\nreversible,\ntotalDuration,\n};",
      "occurrences": [
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 109
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 118
        }
      ]
    },
    {
      "snippet": "steps: path,\nreversible,\ntotalDuration,\n};\n}",
      "occurrences": [
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 110
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 119
        }
      ]
    },
    {
      "snippet": "try {\n// Create backup if enabled\nif (this.options.createBackups && backupDir) {\nbackupPath = await this.createBackup(templateId, template, backupDir);\n}",
      "occurrences": [
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 124
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 140
        }
      ]
    },
    {
      "snippet": "step: i + 1,\nmigration: migration.id,\nerror,\n});\n}",
      "occurrences": [
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 153
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 183
        }
      ]
    },
    {
      "snippet": "migration: migration.id,\nerror,\n});\n}\n}",
      "occurrences": [
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 154
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 184
        }
      ]
    },
    {
      "snippet": "error,\n});\n}\n}\n}",
      "occurrences": [
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 155
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 185
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: errors.length === 0,\nmigratedTemplate: currentTemplate,\nerrors: errors.length > 0 ? errors : undefined,\nwarnings: warnings.length > 0 ? warnings : undefined,",
      "occurrences": [
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 161
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 193
        }
      ]
    },
    {
      "snippet": "success: errors.length === 0,\nmigratedTemplate: currentTemplate,\nerrors: errors.length > 0 ? errors : undefined,\nwarnings: warnings.length > 0 ? warnings : undefined,\nexecutionTime,",
      "occurrences": [
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 162
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 194
        }
      ]
    },
    {
      "snippet": "migratedTemplate: currentTemplate,\nerrors: errors.length > 0 ? errors : undefined,\nwarnings: warnings.length > 0 ? warnings : undefined,\nexecutionTime,\nbackupPath,",
      "occurrences": [
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 163
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 195
        }
      ]
    },
    {
      "snippet": "errors: errors.length > 0 ? errors : undefined,\nwarnings: warnings.length > 0 ? warnings : undefined,\nexecutionTime,\nbackupPath,\n};",
      "occurrences": [
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 164
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 196
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: false,\nerror: `Rollback failed: ${error instanceof Error ? error.message : String(error)}`,\n};\n}",
      "occurrences": [
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 191
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 231
        }
      ]
    },
    {
      "snippet": "success: false,\nerror: `Rollback failed: ${error instanceof Error ? error.message : String(error)}`,\n};\n}\n}",
      "occurrences": [
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 192
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 232
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: true,\nmigratedTemplate: template,\nexecutionTime: 0,\nwarnings: ['Template is already at the latest version'],",
      "occurrences": [
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 260
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 333
        }
      ]
    },
    {
      "snippet": "success: true,\nmigratedTemplate: template,\nexecutionTime: 0,\nwarnings: ['Template is already at the latest version'],\n};",
      "occurrences": [
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 261
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 334
        }
      ]
    },
    {
      "snippet": "migratedTemplate: template,\nexecutionTime: 0,\nwarnings: ['Template is already at the latest version'],\n};\n}",
      "occurrences": [
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 262
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 335
        }
      ]
    },
    {
      "snippet": "return {\ntotalMigrations,\nreversibleCount,\naverageDuration,\nversionCoverage,",
      "occurrences": [
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 288
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 377
        }
      ]
    },
    {
      "snippet": "totalMigrations,\nreversibleCount,\naverageDuration,\nversionCoverage,\n};",
      "occurrences": [
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 289
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 378
        }
      ]
    },
    {
      "snippet": "reversibleCount,\naverageDuration,\nversionCoverage,\n};\n}",
      "occurrences": [
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 290
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 379
        }
      ]
    },
    {
      "snippet": "return {\nid,\nfromVersion,\ntoVersion,\ndescription,",
      "occurrences": [
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 307
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 407
        }
      ]
    },
    {
      "snippet": "const startTime = Date.now();\ntry {\nconst migratedTemplate = await migrateFn(template);\nreturn {\nsuccess: true,",
      "occurrences": [
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 313
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 413
        }
      ]
    },
    {
      "snippet": "try {\nconst migratedTemplate = await migrateFn(template);\nreturn {\nsuccess: true,\nmigratedTemplate,",
      "occurrences": [
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 314
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 414
        }
      ]
    },
    {
      "snippet": "const migratedTemplate = await migrateFn(template);\nreturn {\nsuccess: true,\nmigratedTemplate,\nexecutionTime: Date.now() - startTime,",
      "occurrences": [
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 315
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 415
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: true,\nmigratedTemplate,\nexecutionTime: Date.now() - startTime,\n};",
      "occurrences": [
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 316
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 416
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: false,\nerrors: [error instanceof Error ? error.message : String(error)],\nexecutionTime: Date.now() - startTime,\n};",
      "occurrences": [
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 323
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 422
        }
      ]
    },
    {
      "snippet": "success: false,\nerrors: [error instanceof Error ? error.message : String(error)],\nexecutionTime: Date.now() - startTime,\n};\n}",
      "occurrences": [
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 324
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 423
        }
      ]
    },
    {
      "snippet": "errors: [error instanceof Error ? error.message : String(error)],\nexecutionTime: Date.now() - startTime,\n};\n}\n},",
      "occurrences": [
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 325
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 424
        }
      ]
    },
    {
      "snippet": "executionTime: Date.now() - startTime,\n};\n}\n},\nrollback: options.rollbackFn,",
      "occurrences": [
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 326
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 425
        }
      ]
    },
    {
      "snippet": "};\n}\n},\nrollback: options.rollbackFn,\nestimatedDuration: options.estimatedDuration,",
      "occurrences": [
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 327
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 426
        }
      ]
    },
    {
      "snippet": "}\n},\nrollback: options.rollbackFn,\nestimatedDuration: options.estimatedDuration,\nreversible: options.rollbackFn !== undefined,",
      "occurrences": [
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 328
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 427
        }
      ]
    },
    {
      "snippet": "},\nrollback: options.rollbackFn,\nestimatedDuration: options.estimatedDuration,\nreversible: options.rollbackFn !== undefined,\n};",
      "occurrences": [
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 329
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 428
        }
      ]
    },
    {
      "snippet": "rollback: options.rollbackFn,\nestimatedDuration: options.estimatedDuration,\nreversible: options.rollbackFn !== undefined,\n};\n}",
      "occurrences": [
        {
          "path": "dist/versioning/migration-engine.js",
          "line": 330
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 429
        }
      ]
    },
    {
      "snippet": "/**\n* Semantic version components (X.Y.Z format)\n*/\nexport interface SemanticVersion {\n/** Major version - incremented for breaking changes */",
      "occurrences": [
        {
          "path": "dist/versioning/types.d.ts",
          "line": 5
        },
        {
          "path": "src/versioning/types.ts",
          "line": 6
        }
      ]
    },
    {
      "snippet": "* Semantic version components (X.Y.Z format)\n*/\nexport interface SemanticVersion {\n/** Major version - incremented for breaking changes */\nmajor: number;",
      "occurrences": [
        {
          "path": "dist/versioning/types.d.ts",
          "line": 6
        },
        {
          "path": "src/versioning/types.ts",
          "line": 7
        }
      ]
    },
    {
      "snippet": "/**\n* SemVer range specification for compatibility checks\n*/\nexport interface VersionRange {\n/** Minimum version (inclusive) */",
      "occurrences": [
        {
          "path": "dist/versioning/types.d.ts",
          "line": 28
        },
        {
          "path": "src/versioning/types.ts",
          "line": 35
        }
      ]
    },
    {
      "snippet": "* SemVer range specification for compatibility checks\n*/\nexport interface VersionRange {\n/** Minimum version (inclusive) */\nmin?: SemanticVersion;",
      "occurrences": [
        {
          "path": "dist/versioning/types.d.ts",
          "line": 29
        },
        {
          "path": "src/versioning/types.ts",
          "line": 36
        }
      ]
    },
    {
      "snippet": "/**\n* Template version metadata\n*/\nexport interface TemplateVersion {\n/** The template identifier */",
      "occurrences": [
        {
          "path": "dist/versioning/types.d.ts",
          "line": 41
        },
        {
          "path": "src/versioning/types.ts",
          "line": 52
        }
      ]
    },
    {
      "snippet": "* Template version metadata\n*/\nexport interface TemplateVersion {\n/** The template identifier */\ntemplateId: string;",
      "occurrences": [
        {
          "path": "dist/versioning/types.d.ts",
          "line": 42
        },
        {
          "path": "src/versioning/types.ts",
          "line": 53
        }
      ]
    },
    {
      "snippet": "/**\n* Version compatibility check result\n*/\nexport interface CompatibilityCheckResult {\n/** Whether versions are compatible */",
      "occurrences": [
        {
          "path": "dist/versioning/types.d.ts",
          "line": 69
        },
        {
          "path": "src/versioning/types.ts",
          "line": 88
        }
      ]
    },
    {
      "snippet": "* Version compatibility check result\n*/\nexport interface CompatibilityCheckResult {\n/** Whether versions are compatible */\ncompatible: boolean;",
      "occurrences": [
        {
          "path": "dist/versioning/types.d.ts",
          "line": 70
        },
        {
          "path": "src/versioning/types.ts",
          "line": 89
        }
      ]
    },
    {
      "snippet": "/** Suggested upgrade path if incompatible */\nsuggestedUpgrade?: {\nfrom: string;\nto: string;\nmigrationRequired: boolean;",
      "occurrences": [
        {
          "path": "dist/versioning/types.d.ts",
          "line": 77
        },
        {
          "path": "src/versioning/types.ts",
          "line": 98
        }
      ]
    },
    {
      "snippet": "from: string;\nto: string;\nmigrationRequired: boolean;\n};\n}",
      "occurrences": [
        {
          "path": "dist/versioning/types.d.ts",
          "line": 79
        },
        {
          "path": "src/versioning/types.ts",
          "line": 100
        }
      ]
    },
    {
      "snippet": "/**\n* Migration script metadata\n*/\nexport interface MigrationScript {\n/** Unique identifier for this migration */",
      "occurrences": [
        {
          "path": "dist/versioning/types.d.ts",
          "line": 84
        },
        {
          "path": "src/versioning/types.ts",
          "line": 106
        }
      ]
    },
    {
      "snippet": "* Migration script metadata\n*/\nexport interface MigrationScript {\n/** Unique identifier for this migration */\nid: string;",
      "occurrences": [
        {
          "path": "dist/versioning/types.d.ts",
          "line": 85
        },
        {
          "path": "src/versioning/types.ts",
          "line": 107
        }
      ]
    },
    {
      "snippet": "/**\n* Result of a migration operation\n*/\nexport interface MigrationResult {\n/** Whether migration succeeded */",
      "occurrences": [
        {
          "path": "dist/versioning/types.d.ts",
          "line": 105
        },
        {
          "path": "src/versioning/types.ts",
          "line": 135
        }
      ]
    },
    {
      "snippet": "* Result of a migration operation\n*/\nexport interface MigrationResult {\n/** Whether migration succeeded */\nsuccess: boolean;",
      "occurrences": [
        {
          "path": "dist/versioning/types.d.ts",
          "line": 106
        },
        {
          "path": "src/versioning/types.ts",
          "line": 136
        }
      ]
    },
    {
      "snippet": "/**\n* Migration path from one version to another\n*/\nexport interface MigrationPath {\n/** Source version */",
      "occurrences": [
        {
          "path": "dist/versioning/types.d.ts",
          "line": 122
        },
        {
          "path": "src/versioning/types.ts",
          "line": 158
        }
      ]
    },
    {
      "snippet": "* Migration path from one version to another\n*/\nexport interface MigrationPath {\n/** Source version */\nfrom: SemanticVersion;",
      "occurrences": [
        {
          "path": "dist/versioning/types.d.ts",
          "line": 123
        },
        {
          "path": "src/versioning/types.ts",
          "line": 159
        }
      ]
    },
    {
      "snippet": "/**\n* Version registry entry\n*/\nexport interface VersionRegistryEntry {\n/** Template identifier */",
      "occurrences": [
        {
          "path": "dist/versioning/types.d.ts",
          "line": 137
        },
        {
          "path": "src/versioning/types.ts",
          "line": 178
        }
      ]
    },
    {
      "snippet": "* Version registry entry\n*/\nexport interface VersionRegistryEntry {\n/** Template identifier */\ntemplateId: string;",
      "occurrences": [
        {
          "path": "dist/versioning/types.d.ts",
          "line": 138
        },
        {
          "path": "src/versioning/types.ts",
          "line": 179
        }
      ]
    },
    {
      "snippet": "/**\n* Version conflict in a template pack combination\n*/\nexport interface VersionConflict {\n/** Template identifier with conflict */",
      "occurrences": [
        {
          "path": "dist/versioning/types.d.ts",
          "line": 150
        },
        {
          "path": "src/versioning/types.ts",
          "line": 195
        }
      ]
    },
    {
      "snippet": "* Version conflict in a template pack combination\n*/\nexport interface VersionConflict {\n/** Template identifier with conflict */\ntemplateId: string;",
      "occurrences": [
        {
          "path": "dist/versioning/types.d.ts",
          "line": 151
        },
        {
          "path": "src/versioning/types.ts",
          "line": 196
        }
      ]
    },
    {
      "snippet": "/** Suggested resolution */\nresolution?: {\nversion: string;\nreason: string;\n};",
      "occurrences": [
        {
          "path": "dist/versioning/types.d.ts",
          "line": 161
        },
        {
          "path": "src/versioning/types.ts",
          "line": 208
        }
      ]
    },
    {
      "snippet": "resolution?: {\nversion: string;\nreason: string;\n};\n}",
      "occurrences": [
        {
          "path": "dist/versioning/types.d.ts",
          "line": 162
        },
        {
          "path": "src/versioning/types.ts",
          "line": 209
        }
      ]
    },
    {
      "snippet": "/**\n* Result of a version resolution operation (for pack combinations)\n*/\nexport interface VersionResolutionResult {\n/** Whether resolution was successful */",
      "occurrences": [
        {
          "path": "dist/versioning/types.d.ts",
          "line": 167
        },
        {
          "path": "src/versioning/types.ts",
          "line": 215
        }
      ]
    },
    {
      "snippet": "* Result of a version resolution operation (for pack combinations)\n*/\nexport interface VersionResolutionResult {\n/** Whether resolution was successful */\nsuccess: boolean;",
      "occurrences": [
        {
          "path": "dist/versioning/types.d.ts",
          "line": 168
        },
        {
          "path": "src/versioning/types.ts",
          "line": 216
        }
      ]
    },
    {
      "snippet": "/**\n* Options for version manager operations\n*/\nexport interface VersionManagerOptions {\n/** Whether to allow pre-release versions */",
      "occurrences": [
        {
          "path": "dist/versioning/types.d.ts",
          "line": 182
        },
        {
          "path": "src/versioning/types.ts",
          "line": 234
        }
      ]
    },
    {
      "snippet": "* Options for version manager operations\n*/\nexport interface VersionManagerOptions {\n/** Whether to allow pre-release versions */\nallowPrerelease?: boolean;",
      "occurrences": [
        {
          "path": "dist/versioning/types.d.ts",
          "line": 183
        },
        {
          "path": "src/versioning/types.ts",
          "line": 235
        }
      ]
    },
    {
      "snippet": "this.options = {\nallowPrerelease: options.allowPrerelease ?? false,\nautoMigrate: options.autoMigrate ?? false,\nstrict: options.strict ?? true,\ncreateBackups: options.createBackups ?? true,",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 15
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 28
        }
      ]
    },
    {
      "snippet": "allowPrerelease: options.allowPrerelease ?? false,\nautoMigrate: options.autoMigrate ?? false,\nstrict: options.strict ?? true,\ncreateBackups: options.createBackups ?? true,\n};",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 16
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 29
        }
      ]
    },
    {
      "snippet": "autoMigrate: options.autoMigrate ?? false,\nstrict: options.strict ?? true,\ncreateBackups: options.createBackups ?? true,\n};\n}",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 17
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 30
        }
      ]
    },
    {
      "snippet": "return {\nmajor: parseInt(match[1], 10),\nminor: parseInt(match[2], 10),\npatch: parseInt(match[3], 10),\nprerelease: match[4],",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 33
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 52
        }
      ]
    },
    {
      "snippet": "major: parseInt(match[1], 10),\nminor: parseInt(match[2], 10),\npatch: parseInt(match[3], 10),\nprerelease: match[4],\nbuildMetadata: match[5],",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 34
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 53
        }
      ]
    },
    {
      "snippet": "minor: parseInt(match[2], 10),\npatch: parseInt(match[3], 10),\nprerelease: match[4],\nbuildMetadata: match[5],\n};",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 35
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 54
        }
      ]
    },
    {
      "snippet": "patch: parseInt(match[3], 10),\nprerelease: match[4],\nbuildMetadata: match[5],\n};\n}",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 36
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 55
        }
      ]
    },
    {
      "snippet": "// Check if version1 is compatible with version2\nif (version1.compatibleWith && !this.satisfiesRange(version2.version, version1.compatibleWith)) {\nreturn {\ncompatible: false,\nreason: `Version ${this.v",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 195
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 244
        }
      ]
    },
    {
      "snippet": "if (version1.compatibleWith && !this.satisfiesRange(version2.version, version1.compatibleWith)) {\nreturn {\ncompatible: false,\nreason: `Version ${this.versionToString(version1.version)} is not compatib",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 196
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 245
        }
      ]
    },
    {
      "snippet": "return {\ncompatible: false,\nreason: `Version ${this.versionToString(version1.version)} is not compatible with ${this.versionToString(version2.version)}`,\nsuggestedUpgrade: this.findUpgradePath(version",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 197
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 246
        }
      ]
    },
    {
      "snippet": "compatible: false,\nreason: `Version ${this.versionToString(version1.version)} is not compatible with ${this.versionToString(version2.version)}`,\nsuggestedUpgrade: this.findUpgradePath(version1, versio",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 198
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 247
        }
      ]
    },
    {
      "snippet": "// Check if version2 is compatible with version1\nif (version2.compatibleWith && !this.satisfiesRange(version1.version, version2.compatibleWith)) {\nreturn {\ncompatible: false,\nreason: `Version ${this.v",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 203
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 253
        }
      ]
    },
    {
      "snippet": "if (version2.compatibleWith && !this.satisfiesRange(version1.version, version2.compatibleWith)) {\nreturn {\ncompatible: false,\nreason: `Version ${this.versionToString(version2.version)} is not compatib",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 204
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 254
        }
      ]
    },
    {
      "snippet": "return {\ncompatible: false,\nreason: `Version ${this.versionToString(version2.version)} is not compatible with ${this.versionToString(version1.version)}`,\nsuggestedUpgrade: this.findUpgradePath(version",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 205
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 255
        }
      ]
    },
    {
      "snippet": "compatible: false,\nreason: `Version ${this.versionToString(version2.version)} is not compatible with ${this.versionToString(version1.version)}`,\nsuggestedUpgrade: this.findUpgradePath(version2, versio",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 206
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 256
        }
      ]
    },
    {
      "snippet": "// Check for deprecation warnings\nif (version1.deprecated || version2.deprecated) {\nconst deprecatedVersion = version1.deprecated ? version1 : version2;\nreturn {\ncompatible: true,",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 211
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 262
        }
      ]
    },
    {
      "snippet": "return {\nfrom: fromStr,\nto: toStr,\nmigrationRequired,\n};",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 229
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 287
        }
      ]
    },
    {
      "snippet": "from: fromStr,\nto: toStr,\nmigrationRequired,\n};\n}",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 230
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 288
        }
      ]
    },
    {
      "snippet": "let entry = this.registry.get(templateId);\nif (!entry) {\nentry = {\ntemplateId,\nversions: [],",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 240
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 300
        }
      ]
    },
    {
      "snippet": "if (!entry) {\nentry = {\ntemplateId,\nversions: [],\nlatestStable: templateVersion.version,",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 241
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 301
        }
      ]
    },
    {
      "snippet": "entry = {\ntemplateId,\nversions: [],\nlatestStable: templateVersion.version,\nlatest: templateVersion.version,",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 242
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 302
        }
      ]
    },
    {
      "snippet": "templateId,\nversions: [],\nlatestStable: templateVersion.version,\nlatest: templateVersion.version,\n};",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 243
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 303
        }
      ]
    },
    {
      "snippet": "versions: [],\nlatestStable: templateVersion.version,\nlatest: templateVersion.version,\n};\nthis.registry.set(templateId, entry);",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 244
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 304
        }
      ]
    },
    {
      "snippet": "latestStable: templateVersion.version,\nlatest: templateVersion.version,\n};\nthis.registry.set(templateId, entry);\n}",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 245
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 305
        }
      ]
    },
    {
      "snippet": "// Update latest stable and latest versions\nentry.latest = entry.versions[0].version;\nconst stableVersions = entry.versions.filter(v => !v.version.prerelease);\nif (stableVersions.length > 0) {\nentry.l",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 254
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 317
        }
      ]
    },
    {
      "snippet": "entry.latest = entry.versions[0].version;\nconst stableVersions = entry.versions.filter(v => !v.version.prerelease);\nif (stableVersions.length > 0) {\nentry.latestStable = stableVersions[0].version;\n}",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 255
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 318
        }
      ]
    },
    {
      "snippet": "const stableVersions = entry.versions.filter(v => !v.version.prerelease);\nif (stableVersions.length > 0) {\nentry.latestStable = stableVersions[0].version;\n}\n}",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 256
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 319
        }
      ]
    },
    {
      "snippet": "for (const [templateId, ranges] of requirements.entries()) {\nconst entry = this.registry.get(templateId);\nif (!entry) {\nconflicts.push({\ntemplateId,",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 290
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 363
        }
      ]
    },
    {
      "snippet": "const entry = this.registry.get(templateId);\nif (!entry) {\nconflicts.push({\ntemplateId,\nconflicts: ranges.map(range => ({",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 291
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 364
        }
      ]
    },
    {
      "snippet": "if (!entry) {\nconflicts.push({\ntemplateId,\nconflicts: ranges.map(range => ({\nrequiredBy: 'unknown',",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 292
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 365
        }
      ]
    },
    {
      "snippet": "conflicts.push({\ntemplateId,\nconflicts: ranges.map(range => ({\nrequiredBy: 'unknown',\nversionRange: range,",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 293
        },
        {
          "path": "dist/versioning/version-manager.js",
          "line": 325
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 366
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 405
        }
      ]
    },
    {
      "snippet": "templateId,\nconflicts: ranges.map(range => ({\nrequiredBy: 'unknown',\nversionRange: range,\n})),",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 294
        },
        {
          "path": "dist/versioning/version-manager.js",
          "line": 326
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 367
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 406
        }
      ]
    },
    {
      "snippet": "conflicts: ranges.map(range => ({\nrequiredBy: 'unknown',\nversionRange: range,\n})),\n});",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 295
        },
        {
          "path": "dist/versioning/version-manager.js",
          "line": 327
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 368
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 407
        }
      ]
    },
    {
      "snippet": "requiredBy: 'unknown',\nversionRange: range,\n})),\n});\ncontinue;",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 296
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 369
        }
      ]
    },
    {
      "snippet": "versionRange: range,\n})),\n});\ncontinue;\n}",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 297
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 370
        }
      ]
    },
    {
      "snippet": "for (const version of entry.versions) {\n// Skip prerelease versions if not allowed\nif (version.version.prerelease && !this.options.allowPrerelease) {\ncontinue;\n}",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 304
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 379
        }
      ]
    },
    {
      "snippet": "if (satisfiesAll) {\ncompatibleVersion = version;\nbreak;\n}\n}",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 311
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 388
        }
      ]
    },
    {
      "snippet": "// No compatible version found\nconflicts.push({\ntemplateId,\nconflicts: ranges.map(range => ({\nrequiredBy: 'unknown',",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 324
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 404
        }
      ]
    },
    {
      "snippet": "requiredBy: 'unknown',\nversionRange: range,\n})),\n});\n}",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 328
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 408
        }
      ]
    },
    {
      "snippet": "versionRange: range,\n})),\n});\n}\n}",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 329
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 409
        }
      ]
    },
    {
      "snippet": "return {\nsuccess: conflicts.length === 0,\nresolvedVersions: conflicts.length === 0 ? resolvedVersions : undefined,\nconflicts: conflicts.length > 0 ? conflicts : undefined,\nwarnings: warnings.length > ",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 334
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 415
        }
      ]
    },
    {
      "snippet": "success: conflicts.length === 0,\nresolvedVersions: conflicts.length === 0 ? resolvedVersions : undefined,\nconflicts: conflicts.length > 0 ? conflicts : undefined,\nwarnings: warnings.length > 0 ? warni",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 335
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 416
        }
      ]
    },
    {
      "snippet": "resolvedVersions: conflicts.length === 0 ? resolvedVersions : undefined,\nconflicts: conflicts.length > 0 ? conflicts : undefined,\nwarnings: warnings.length > 0 ? warnings : undefined,\n};\n}",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 336
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 417
        }
      ]
    },
    {
      "snippet": "// Validate compatibility range\nif (templateVersion.compatibleWith?.expression) {\ntry {\nconst testVersion = { major: 1, minor: 0, patch: 0 };\nthis.evaluateRangeExpression(testVersion, templateVersion.",
      "occurrences": [
        {
          "path": "dist/versioning/version-manager.js",
          "line": 353
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 436
        }
      ]
    },
    {
      "snippet": "const response = await fetch('https://api.anthropic.com/v1/messages/count_tokens', {\nmethod: 'POST',\nheaders: {\n'x-api-key': apiKey,\n'anthropic-version': '2023-06-01',",
      "occurrences": [
        {
          "path": "scripts/validate-token-counts.ts",
          "line": 85
        },
        {
          "path": "tests/intelligence/token-validation.test.ts",
          "line": 140
        }
      ]
    },
    {
      "snippet": "method: 'POST',\nheaders: {\n'x-api-key': apiKey,\n'anthropic-version': '2023-06-01',\n'content-type': 'application/json',",
      "occurrences": [
        {
          "path": "scripts/validate-token-counts.ts",
          "line": 86
        },
        {
          "path": "tests/intelligence/token-validation.test.ts",
          "line": 141
        }
      ]
    },
    {
      "snippet": "headers: {\n'x-api-key': apiKey,\n'anthropic-version': '2023-06-01',\n'content-type': 'application/json',\n},",
      "occurrences": [
        {
          "path": "scripts/validate-token-counts.ts",
          "line": 87
        },
        {
          "path": "tests/intelligence/token-validation.test.ts",
          "line": 142
        }
      ]
    },
    {
      "snippet": "'x-api-key': apiKey,\n'anthropic-version': '2023-06-01',\n'content-type': 'application/json',\n},\nbody: JSON.stringify({",
      "occurrences": [
        {
          "path": "scripts/validate-token-counts.ts",
          "line": 88
        },
        {
          "path": "tests/intelligence/token-validation.test.ts",
          "line": 143
        }
      ]
    },
    {
      "snippet": "'anthropic-version': '2023-06-01',\n'content-type': 'application/json',\n},\nbody: JSON.stringify({\nmodel: 'claude-3-5-sonnet-20241022',",
      "occurrences": [
        {
          "path": "scripts/validate-token-counts.ts",
          "line": 89
        },
        {
          "path": "tests/intelligence/token-validation.test.ts",
          "line": 144
        }
      ]
    },
    {
      "snippet": "'content-type': 'application/json',\n},\nbody: JSON.stringify({\nmodel: 'claude-3-5-sonnet-20241022',\nmessages: [{ role: 'user', content: text }],",
      "occurrences": [
        {
          "path": "scripts/validate-token-counts.ts",
          "line": 90
        },
        {
          "path": "tests/intelligence/token-validation.test.ts",
          "line": 145
        }
      ]
    },
    {
      "snippet": "},\nbody: JSON.stringify({\nmodel: 'claude-3-5-sonnet-20241022',\nmessages: [{ role: 'user', content: text }],\n}),",
      "occurrences": [
        {
          "path": "scripts/validate-token-counts.ts",
          "line": 91
        },
        {
          "path": "tests/intelligence/token-validation.test.ts",
          "line": 146
        }
      ]
    },
    {
      "snippet": "body: JSON.stringify({\nmodel: 'claude-3-5-sonnet-20241022',\nmessages: [{ role: 'user', content: text }],\n}),\n});",
      "occurrences": [
        {
          "path": "scripts/validate-token-counts.ts",
          "line": 92
        },
        {
          "path": "tests/intelligence/token-validation.test.ts",
          "line": 147
        }
      ]
    },
    {
      "snippet": "model: 'claude-3-5-sonnet-20241022',\nmessages: [{ role: 'user', content: text }],\n}),\n});\n",
      "occurrences": [
        {
          "path": "scripts/validate-token-counts.ts",
          "line": 93
        },
        {
          "path": "tests/intelligence/token-validation.test.ts",
          "line": 148
        }
      ]
    },
    {
      "snippet": "{\nmethod: 'POST',\nheaders: { 'content-type': 'application/json' },\nbody: JSON.stringify({\ncontents: [{ parts: [{ text }] }],",
      "occurrences": [
        {
          "path": "scripts/validate-token-counts.ts",
          "line": 118
        },
        {
          "path": "tests/intelligence/token-validation.test.ts",
          "line": 177
        }
      ]
    },
    {
      "snippet": "method: 'POST',\nheaders: { 'content-type': 'application/json' },\nbody: JSON.stringify({\ncontents: [{ parts: [{ text }] }],\n}),",
      "occurrences": [
        {
          "path": "scripts/validate-token-counts.ts",
          "line": 119
        },
        {
          "path": "tests/intelligence/token-validation.test.ts",
          "line": 178
        }
      ]
    },
    {
      "snippet": "headers: { 'content-type': 'application/json' },\nbody: JSON.stringify({\ncontents: [{ parts: [{ text }] }],\n}),\n}",
      "occurrences": [
        {
          "path": "scripts/validate-token-counts.ts",
          "line": 120
        },
        {
          "path": "tests/intelligence/token-validation.test.ts",
          "line": 179
        }
      ]
    },
    {
      "snippet": "body: JSON.stringify({\ncontents: [{ parts: [{ text }] }],\n}),\n}\n);",
      "occurrences": [
        {
          "path": "scripts/validate-token-counts.ts",
          "line": 121
        },
        {
          "path": "tests/intelligence/token-validation.test.ts",
          "line": 180
        }
      ]
    },
    {
      "snippet": "contents: [{ parts: [{ text }] }],\n}),\n}\n);\n",
      "occurrences": [
        {
          "path": "scripts/validate-token-counts.ts",
          "line": 122
        },
        {
          "path": "tests/intelligence/token-validation.test.ts",
          "line": 181
        }
      ]
    },
    {
      "snippet": "results.push(result);\n\nconst status = result.passed ? '\u2705' : '\u274c';\nconsole.log(\n`  ${status} ${result.testCase.padEnd(8)} | Local: ${result.localCount.toString().padStart(5)} | Provider: ${result.provid",
      "occurrences": [
        {
          "path": "scripts/validate-token-counts.ts",
          "line": 195
        },
        {
          "path": "scripts/validate-token-counts.ts",
          "line": 217
        }
      ]
    },
    {
      "snippet": "\nconst status = result.passed ? '\u2705' : '\u274c';\nconsole.log(\n`  ${status} ${result.testCase.padEnd(8)} | Local: ${result.localCount.toString().padStart(5)} | Provider: ${result.providerCount.toString().pad",
      "occurrences": [
        {
          "path": "scripts/validate-token-counts.ts",
          "line": 196
        },
        {
          "path": "scripts/validate-token-counts.ts",
          "line": 218
        }
      ]
    },
    {
      "snippet": "const status = result.passed ? '\u2705' : '\u274c';\nconsole.log(\n`  ${status} ${result.testCase.padEnd(8)} | Local: ${result.localCount.toString().padStart(5)} | Provider: ${result.providerCount.toString().padS",
      "occurrences": [
        {
          "path": "scripts/validate-token-counts.ts",
          "line": 197
        },
        {
          "path": "scripts/validate-token-counts.ts",
          "line": 219
        }
      ]
    },
    {
      "snippet": "console.log(\n`  ${status} ${result.testCase.padEnd(8)} | Local: ${result.localCount.toString().padStart(5)} | Provider: ${result.providerCount.toString().padStart(5)} | Drift: ${result.driftPercent.to",
      "occurrences": [
        {
          "path": "scripts/validate-token-counts.ts",
          "line": 198
        },
        {
          "path": "scripts/validate-token-counts.ts",
          "line": 220
        }
      ]
    },
    {
      "snippet": "`  ${status} ${result.testCase.padEnd(8)} | Local: ${result.localCount.toString().padStart(5)} | Provider: ${result.providerCount.toString().padStart(5)} | Drift: ${result.driftPercent.toFixed(1)}%`\n)",
      "occurrences": [
        {
          "path": "scripts/validate-token-counts.ts",
          "line": 199
        },
        {
          "path": "scripts/validate-token-counts.ts",
          "line": 221
        }
      ]
    },
    {
      "snippet": ");\n} catch (error) {\nconsole.error(`  \u274c ${testCase.name}: ${error instanceof Error ? error.message : String(error)}`);\nprocess.exit(2);\n}",
      "occurrences": [
        {
          "path": "scripts/validate-token-counts.ts",
          "line": 200
        },
        {
          "path": "scripts/validate-token-counts.ts",
          "line": 222
        }
      ]
    },
    {
      "snippet": "} catch (error) {\nconsole.error(`  \u274c ${testCase.name}: ${error instanceof Error ? error.message : String(error)}`);\nprocess.exit(2);\n}\n}",
      "occurrences": [
        {
          "path": "scripts/validate-token-counts.ts",
          "line": 201
        },
        {
          "path": "scripts/validate-token-counts.ts",
          "line": 223
        }
      ]
    },
    {
      "snippet": "console.error(`  \u274c ${testCase.name}: ${error instanceof Error ? error.message : String(error)}`);\nprocess.exit(2);\n}\n}\nconsole.log();",
      "occurrences": [
        {
          "path": "scripts/validate-token-counts.ts",
          "line": 202
        },
        {
          "path": "scripts/validate-token-counts.ts",
          "line": 224
        }
      ]
    },
    {
      "snippet": "process.exit(2);\n}\n}\nconsole.log();\n} else {",
      "occurrences": [
        {
          "path": "scripts/validate-token-counts.ts",
          "line": 203
        },
        {
          "path": "scripts/validate-token-counts.ts",
          "line": 225
        }
      ]
    },
    {
      "snippet": "} catch (error) {\nif (error instanceof Error) {\nerrors.push(error.message);\n}\nreturn {",
      "occurrences": [
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 47
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 84
        }
      ]
    },
    {
      "snippet": "success: false,\nerrors,\n};\n}\n",
      "occurrences": [
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 55
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 69
        }
      ]
    },
    {
      "snippet": "}\n}\n}\n}\n",
      "occurrences": [
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 153
        },
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 368
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 200
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 413
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 337
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 145
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 347
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 73
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 383
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 201
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 146
        }
      ]
    },
    {
      "snippet": "}\n\nreturn {\nvalid: errors.length === 0,\nerrors,",
      "occurrences": [
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 318
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 251
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 230
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 306
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 449
        }
      ]
    },
    {
      "snippet": "\nreturn {\nvalid: errors.length === 0,\nerrors,\n};",
      "occurrences": [
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 319
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 231
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 307
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 450
        }
      ]
    },
    {
      "snippet": "valid: errors.length === 0,\nerrors,\n};\n}\n",
      "occurrences": [
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 321
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 233
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 309
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 452
        }
      ]
    },
    {
      "snippet": "errors,\n};\n}\n\n/**",
      "occurrences": [
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 322
        },
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 234
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 310
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 453
        }
      ]
    },
    {
      "snippet": "}\n}\n}\n\nreturn Array.from(dependencies);",
      "occurrences": [
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 369
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 171
        }
      ]
    },
    {
      "snippet": "}\n}\n\nreturn Array.from(dependencies);\n}",
      "occurrences": [
        {
          "path": "src/combination/dependency-resolver.ts",
          "line": 370
        },
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 172
        }
      ]
    },
    {
      "snippet": "}\n\nmerge(templates: Record<string, unknown>[]): Record<string, unknown> {\nif (templates.length === 0) {\nreturn {};",
      "occurrences": [
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 40
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 96
        }
      ]
    },
    {
      "snippet": "\nmerge(templates: Record<string, unknown>[]): Record<string, unknown> {\nif (templates.length === 0) {\nreturn {};\n}",
      "occurrences": [
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 41
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 97
        }
      ]
    },
    {
      "snippet": "merge(templates: Record<string, unknown>[]): Record<string, unknown> {\nif (templates.length === 0) {\nreturn {};\n}\n",
      "occurrences": [
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 42
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 71
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 98
        }
      ]
    },
    {
      "snippet": "if (templates.length === 0) {\nreturn {};\n}\n\nif (templates.length === 1) {",
      "occurrences": [
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 43
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 99
        }
      ]
    },
    {
      "snippet": "return {};\n}\n\nif (templates.length === 1) {\nreturn { ...templates[0] };",
      "occurrences": [
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 44
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 100
        }
      ]
    },
    {
      "snippet": "}\n\nif (templates.length === 1) {\nreturn { ...templates[0] };\n}",
      "occurrences": [
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 45
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 101
        }
      ]
    },
    {
      "snippet": "\nif (templates.length === 1) {\nreturn { ...templates[0] };\n}\n",
      "occurrences": [
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 46
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 102
        }
      ]
    },
    {
      "snippet": "if (this.matchesPattern(path, pattern)) {\nreturn true;\n}\n}\n",
      "occurrences": [
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 183
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 202
        }
      ]
    },
    {
      "snippet": "return true;\n}\n}\n\nreturn false;",
      "occurrences": [
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 184
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 203
        }
      ]
    },
    {
      "snippet": "}\n}\n\nreturn false;\n}",
      "occurrences": [
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 185
        },
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 204
        }
      ]
    },
    {
      "snippet": "}\n}\n\nreturn true;\n}",
      "occurrences": [
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 229
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 194
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 162
        }
      ]
    },
    {
      "snippet": "*/\nprivate isObject(value: unknown): value is object {\nreturn (\ntypeof value === 'object' &&\nvalue !== null &&",
      "occurrences": [
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 237
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 196
        }
      ]
    },
    {
      "snippet": ");\n}\n}\n\n/**",
      "occurrences": [
        {
          "path": "src/combination/merge-strategies.ts",
          "line": 243
        },
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 74
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 127
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 150
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 229
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 248
        },
        {
          "path": "src/index.ts",
          "line": 547
        },
        {
          "path": "src/merge/deep-merge.ts",
          "line": 204
        },
        {
          "path": "src/registry/semver-validator.ts",
          "line": 102
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 186
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 211
        }
      ]
    },
    {
      "snippet": "warnings,\n};\n}\n}\n",
      "occurrences": [
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 109
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 146
        },
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 343
        }
      ]
    },
    {
      "snippet": "}\n}\n\nif (errors.length > 0) {\nreturn {",
      "occurrences": [
        {
          "path": "src/combination/pack-combiner.ts",
          "line": 285
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 348
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 418
        }
      ]
    },
    {
      "snippet": "dependencies: Array<{\nname: string;\nversion: string;\n}>;\n",
      "occurrences": [
        {
          "path": "src/combination/types.ts",
          "line": 58
        },
        {
          "path": "src/combination/types.ts",
          "line": 78
        }
      ]
    },
    {
      "snippet": "}\n\nreturn template;\n} catch (error) {\nif (error instanceof Error) {",
      "occurrences": [
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 281
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 196
        }
      ]
    },
    {
      "snippet": "}\n\nif (errors.length > 0) {\nreturn { valid: false, errors };\n}",
      "occurrences": [
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 351
        },
        {
          "path": "src/registry/registry-parser.ts",
          "line": 136
        }
      ]
    },
    {
      "snippet": "\nif (errors.length > 0) {\nreturn { valid: false, errors };\n}\n",
      "occurrences": [
        {
          "path": "src/domains/domain-pack-loader.ts",
          "line": 352
        },
        {
          "path": "src/registry/registry-parser.ts",
          "line": 137
        }
      ]
    },
    {
      "snippet": "/** Whether validation passed */\nvalid: boolean;\n\n/** Array of validation error messages (empty if valid) */\nerrors: string[];",
      "occurrences": [
        {
          "path": "src/domains/types.ts",
          "line": 60
        },
        {
          "path": "src/types/registry.ts",
          "line": 46
        }
      ]
    },
    {
      "snippet": "valid: boolean;\n\n/** Array of validation error messages (empty if valid) */\nerrors: string[];\n",
      "occurrences": [
        {
          "path": "src/domains/types.ts",
          "line": 61
        },
        {
          "path": "src/types/registry.ts",
          "line": 47
        }
      ]
    },
    {
      "snippet": "const paramName = this.suggestParameterName(literal, locations[0]);\n\nif (!candidates[paramName]) {\ncandidates[paramName] = [];\n}",
      "occurrences": [
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 123
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 143
        }
      ]
    },
    {
      "snippet": "\nif (!candidates[paramName]) {\ncandidates[paramName] = [];\n}\n",
      "occurrences": [
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 124
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 144
        }
      ]
    },
    {
      "snippet": "if (!candidates[paramName]) {\ncandidates[paramName] = [];\n}\n\ncandidates[paramName].push(...locations.map(loc => ({",
      "occurrences": [
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 125
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 145
        }
      ]
    },
    {
      "snippet": "candidates[paramName] = [];\n}\n\ncandidates[paramName].push(...locations.map(loc => ({\n...loc,",
      "occurrences": [
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 126
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 146
        }
      ]
    },
    {
      "snippet": "}\n\ncandidates[paramName].push(...locations.map(loc => ({\n...loc,\nfrequency,",
      "occurrences": [
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 127
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 147
        }
      ]
    },
    {
      "snippet": "\ncandidates[paramName].push(...locations.map(loc => ({\n...loc,\nfrequency,\nconfidence",
      "occurrences": [
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 128
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 148
        }
      ]
    },
    {
      "snippet": "confidence\n})));\n}\n}\n",
      "occurrences": [
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 132
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 152
        }
      ]
    },
    {
      "snippet": "filePath: string,\nrelativePath: string,\ncontent: string,\nliteralFrequency: Map<string, number>,\nliteralLocations: Map<string, Candidate[]>",
      "occurrences": [
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 314
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 376
        }
      ]
    },
    {
      "snippet": "relativePath: string,\ncontent: string,\nliteralFrequency: Map<string, number>,\nliteralLocations: Map<string, Candidate[]>\n): Promise<void> {",
      "occurrences": [
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 315
        },
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 377
        }
      ]
    },
    {
      "snippet": "});\n}\n}\n}\n",
      "occurrences": [
        {
          "path": "src/extraction/template-extractor.ts",
          "line": 447
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 200
        },
        {
          "path": "src/versioning/migration-engine.ts",
          "line": 186
        }
      ]
    },
    {
      "snippet": "details: { errors },\n};\n}\n\nreturn {",
      "occurrences": [
        {
          "path": "src/import-export/security-validator.ts",
          "line": 356
        },
        {
          "path": "src/import-export/security-validator.ts",
          "line": 426
        }
      ]
    },
    {
      "snippet": "*/\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as YAML from 'yaml';",
      "occurrences": [
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 14
        },
        {
          "path": "src/loaders/yaml-loader.ts",
          "line": 9
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 16
        },
        {
          "path": "tests/import-export/template-exporter.test.ts",
          "line": 9
        },
        {
          "path": "tests/smoke/template-assets-smoke.test.ts",
          "line": 6
        }
      ]
    },
    {
      "snippet": "{ originalError: error }\n);\n}\n}\n",
      "occurrences": [
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 73
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 126
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 149
        }
      ]
    },
    {
      "snippet": "}\n\nreturn resolved;\n}\n",
      "occurrences": [
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 215
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 192
        }
      ]
    },
    {
      "snippet": "\nreturn resolved;\n}\n\n/**",
      "occurrences": [
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 216
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 193
        }
      ]
    },
    {
      "snippet": "}\n\n/**\n* Get the base directory\n*/",
      "occurrences": [
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 249
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 271
        },
        {
          "path": "src/loaders/yaml-loader.ts",
          "line": 204
        }
      ]
    },
    {
      "snippet": "\n/**\n* Get the base directory\n*/\ngetBaseDir(): string {",
      "occurrences": [
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 250
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 272
        },
        {
          "path": "src/loaders/yaml-loader.ts",
          "line": 205
        }
      ]
    },
    {
      "snippet": "/**\n* Get the base directory\n*/\ngetBaseDir(): string {\nreturn this.baseDir;",
      "occurrences": [
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 251
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 273
        },
        {
          "path": "src/loaders/yaml-loader.ts",
          "line": 206
        }
      ]
    },
    {
      "snippet": "* Get the base directory\n*/\ngetBaseDir(): string {\nreturn this.baseDir;\n}",
      "occurrences": [
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 252
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 274
        },
        {
          "path": "src/loaders/yaml-loader.ts",
          "line": 207
        }
      ]
    },
    {
      "snippet": "*/\ngetBaseDir(): string {\nreturn this.baseDir;\n}\n}",
      "occurrences": [
        {
          "path": "src/import-export/template-exporter.ts",
          "line": 253
        },
        {
          "path": "src/import-export/template-importer.ts",
          "line": 275
        },
        {
          "path": "src/loaders/yaml-loader.ts",
          "line": 208
        }
      ]
    },
    {
      "snippet": "errors: string[];\nwarnings: string[];\nperformanceMs: number;\n}\n",
      "occurrences": [
        {
          "path": "src/import-export/types.ts",
          "line": 63
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 34
        }
      ]
    },
    {
      "snippet": "warnings: string[];\nperformanceMs: number;\n}\n\n/**",
      "occurrences": [
        {
          "path": "src/import-export/types.ts",
          "line": 64
        },
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 35
        }
      ]
    },
    {
      "snippet": "\nreturn {\ncontent: [\n{\ntype: 'text',",
      "occurrences": [
        {
          "path": "src/index.ts",
          "line": 207
        },
        {
          "path": "src/index.ts",
          "line": 227
        },
        {
          "path": "src/index.ts",
          "line": 249
        },
        {
          "path": "src/index.ts",
          "line": 268
        },
        {
          "path": "src/index.ts",
          "line": 290
        },
        {
          "path": "src/index.ts",
          "line": 335
        },
        {
          "path": "src/index.ts",
          "line": 371
        },
        {
          "path": "src/index.ts",
          "line": 448
        },
        {
          "path": "src/index.ts",
          "line": 486
        },
        {
          "path": "src/index.ts",
          "line": 521
        }
      ]
    },
    {
      "snippet": "],\nstructuredContent: { ...result },\n};\n}\n",
      "occurrences": [
        {
          "path": "src/index.ts",
          "line": 256
        },
        {
          "path": "src/index.ts",
          "line": 342
        }
      ]
    },
    {
      "snippet": "message: result.message,\n},\n};\n}\n",
      "occurrences": [
        {
          "path": "src/index.ts",
          "line": 278
        },
        {
          "path": "src/index.ts",
          "line": 300
        }
      ]
    },
    {
      "snippet": "}\n\nreturn {\ncontent: [\n{",
      "occurrences": [
        {
          "path": "src/index.ts",
          "line": 334
        },
        {
          "path": "src/index.ts",
          "line": 447
        },
        {
          "path": "src/index.ts",
          "line": 485
        },
        {
          "path": "src/index.ts",
          "line": 520
        }
      ]
    },
    {
      "snippet": "\nconst heuristicWarning =\nresult.tokenUsage?.model === 'gemini'\n? 'Gemini token counts use a conservative 1.5x heuristic and may overestimate usage.'\n: undefined;",
      "occurrences": [
        {
          "path": "src/index.ts",
          "line": 477
        },
        {
          "path": "src/index.ts",
          "line": 512
        }
      ]
    },
    {
      "snippet": "const heuristicWarning =\nresult.tokenUsage?.model === 'gemini'\n? 'Gemini token counts use a conservative 1.5x heuristic and may overestimate usage.'\n: undefined;\n",
      "occurrences": [
        {
          "path": "src/index.ts",
          "line": 478
        },
        {
          "path": "src/index.ts",
          "line": 513
        }
      ]
    },
    {
      "snippet": "result.tokenUsage?.model === 'gemini'\n? 'Gemini token counts use a conservative 1.5x heuristic and may overestimate usage.'\n: undefined;\n\nif (heuristicWarning) {",
      "occurrences": [
        {
          "path": "src/index.ts",
          "line": 479
        },
        {
          "path": "src/index.ts",
          "line": 514
        }
      ]
    },
    {
      "snippet": "? 'Gemini token counts use a conservative 1.5x heuristic and may overestimate usage.'\n: undefined;\n\nif (heuristicWarning) {\nformatted += `\\n\\n\u26a0 ${heuristicWarning}`;",
      "occurrences": [
        {
          "path": "src/index.ts",
          "line": 480
        },
        {
          "path": "src/index.ts",
          "line": 515
        }
      ]
    },
    {
      "snippet": ": undefined;\n\nif (heuristicWarning) {\nformatted += `\\n\\n\u26a0 ${heuristicWarning}`;\n}",
      "occurrences": [
        {
          "path": "src/index.ts",
          "line": 481
        },
        {
          "path": "src/index.ts",
          "line": 516
        }
      ]
    },
    {
      "snippet": "\nif (heuristicWarning) {\nformatted += `\\n\\n\u26a0 ${heuristicWarning}`;\n}\n",
      "occurrences": [
        {
          "path": "src/index.ts",
          "line": 482
        },
        {
          "path": "src/index.ts",
          "line": 517
        }
      ]
    },
    {
      "snippet": "if (heuristicWarning) {\nformatted += `\\n\\n\u26a0 ${heuristicWarning}`;\n}\n\nreturn {",
      "occurrences": [
        {
          "path": "src/index.ts",
          "line": 483
        },
        {
          "path": "src/index.ts",
          "line": 518
        }
      ]
    },
    {
      "snippet": "formatted += `\\n\\n\u26a0 ${heuristicWarning}`;\n}\n\nreturn {\ncontent: [",
      "occurrences": [
        {
          "path": "src/index.ts",
          "line": 484
        },
        {
          "path": "src/index.ts",
          "line": 519
        }
      ]
    },
    {
      "snippet": "heuristicWarning,\n},\n};\n}\n",
      "occurrences": [
        {
          "path": "src/index.ts",
          "line": 503
        },
        {
          "path": "src/index.ts",
          "line": 538
        }
      ]
    },
    {
      "snippet": "\nreturn Math.min(score, 10); // Normalize to 0-10\n}\n\n/**",
      "occurrences": [
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 193
        },
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 230
        }
      ]
    },
    {
      "snippet": "*/\nprivate serializeMission(mission: GenericMission): string {\nconst parts: string[] = [\n`Mission ID: ${mission.missionId}`,\n`\\nObjective: ${mission.objective}`,",
      "occurrences": [
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 369
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 575
        }
      ]
    },
    {
      "snippet": "private serializeMission(mission: GenericMission): string {\nconst parts: string[] = [\n`Mission ID: ${mission.missionId}`,\n`\\nObjective: ${mission.objective}`,\n];",
      "occurrences": [
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 370
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 576
        }
      ]
    },
    {
      "snippet": "const parts: string[] = [\n`Mission ID: ${mission.missionId}`,\n`\\nObjective: ${mission.objective}`,\n];\n",
      "occurrences": [
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 371
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 577
        }
      ]
    },
    {
      "snippet": "}\n\nparts.push(`\\nSuccess Criteria:\\n${mission.successCriteria.map((c, i) => `${i + 1}. ${c}`).join('\\n')}`);\nparts.push(`\\nDeliverables:\\n${mission.deliverables.map((d, i) => `${i + 1}. ${d}`).join('\\",
      "occurrences": [
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 386
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 584
        }
      ]
    },
    {
      "snippet": "\nparts.push(`\\nSuccess Criteria:\\n${mission.successCriteria.map((c, i) => `${i + 1}. ${c}`).join('\\n')}`);\nparts.push(`\\nDeliverables:\\n${mission.deliverables.map((d, i) => `${i + 1}. ${d}`).join('\\n'",
      "occurrences": [
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 387
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 585
        }
      ]
    },
    {
      "snippet": "parts.push(`\\nSuccess Criteria:\\n${mission.successCriteria.map((c, i) => `${i + 1}. ${c}`).join('\\n')}`);\nparts.push(`\\nDeliverables:\\n${mission.deliverables.map((d, i) => `${i + 1}. ${d}`).join('\\n')",
      "occurrences": [
        {
          "path": "src/intelligence/complexity-scorer.ts",
          "line": 388
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 586
        }
      ]
    },
    {
      "snippet": "enabled: true,\n},\n];\n\n/**",
      "occurrences": [
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 79
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 130
        }
      ]
    },
    {
      "snippet": "let result = text;\n\nfor (const rule of rules) {\nif (!rule.enabled) continue;\n",
      "occurrences": [
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 247
        },
        {
          "path": "src/intelligence/compression-rules.ts",
          "line": 264
        }
      ]
    },
    {
      "snippet": "}\n\nreturn parts.join('\\n');\n}\n",
      "occurrences": [
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 150
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 173
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 199
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 237
        }
      ]
    },
    {
      "snippet": "\nreturn parts.join('\\n');\n}\n\n/**",
      "occurrences": [
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 151
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 174
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 200
        },
        {
          "path": "src/intelligence/context-propagator.ts",
          "line": 238
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 395
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 274
        }
      ]
    },
    {
      "snippet": "const missionPattern = /[A-Z]\\d+\\.\\d+/g;\nconst matches = text.match(missionPattern);\n\nif (matches) {\nmatches.forEach(match => references.add(match));",
      "occurrences": [
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 210
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 267
        }
      ]
    },
    {
      "snippet": "const matches = text.match(missionPattern);\n\nif (matches) {\nmatches.forEach(match => references.add(match));\n}",
      "occurrences": [
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 211
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 268
        }
      ]
    },
    {
      "snippet": "\nif (matches) {\nmatches.forEach(match => references.add(match));\n}\n",
      "occurrences": [
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 212
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 269
        }
      ]
    },
    {
      "snippet": "}\n\nreturn Array.from(references);\n}\n",
      "occurrences": [
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 222
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 272
        }
      ]
    },
    {
      "snippet": "\nreturn Array.from(references);\n}\n\n/**",
      "occurrences": [
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 223
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 273
        }
      ]
    },
    {
      "snippet": "const WHITE = 0; // Not visited\nconst GREY = 1;  // Currently visiting\nconst BLACK = 2; // Completely visited\n\nconst color = new Map<string, number>();",
      "occurrences": [
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 232
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 83
        }
      ]
    },
    {
      "snippet": "const GREY = 1;  // Currently visiting\nconst BLACK = 2; // Completely visited\n\nconst color = new Map<string, number>();\nconst parent = new Map<string, string | null>();",
      "occurrences": [
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 233
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 84
        }
      ]
    },
    {
      "snippet": "const BLACK = 2; // Completely visited\n\nconst color = new Map<string, number>();\nconst parent = new Map<string, string | null>();\nconst cycles: string[][] = [];",
      "occurrences": [
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 234
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 85
        }
      ]
    },
    {
      "snippet": "\nconst color = new Map<string, number>();\nconst parent = new Map<string, string | null>();\nconst cycles: string[][] = [];\n",
      "occurrences": [
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 235
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 86
        }
      ]
    },
    {
      "snippet": "const color = new Map<string, number>();\nconst parent = new Map<string, string | null>();\nconst cycles: string[][] = [];\n\n// Initialize all nodes as white",
      "occurrences": [
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 236
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 87
        }
      ]
    },
    {
      "snippet": "color.set(nodeId, WHITE);\nparent.set(nodeId, null);\n}\n\n// DFS helper function",
      "occurrences": [
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 242
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 93
        }
      ]
    },
    {
      "snippet": "continue;\n}\n\nif (color.get(neighbor) === WHITE) {\nparent.set(neighbor, nodeId);",
      "occurrences": [
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 255
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 107
        }
      ]
    },
    {
      "snippet": "}\n}\n}\n\ncolor.set(nodeId, BLACK);",
      "occurrences": [
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 268
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 117
        }
      ]
    },
    {
      "snippet": "};\n}\n\n/**\n* Extract the cycle path when a back edge is detected",
      "occurrences": [
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 289
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 135
        }
      ]
    },
    {
      "snippet": "}\n\n/**\n* Extract the cycle path when a back edge is detected\n*/",
      "occurrences": [
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 290
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 136
        }
      ]
    },
    {
      "snippet": "\n/**\n* Extract the cycle path when a back edge is detected\n*/\nprivate extractCycle(current: string, backEdge: string, parent: Map<string, string | null>): string[] {",
      "occurrences": [
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 291
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 137
        }
      ]
    },
    {
      "snippet": "/**\n* Extract the cycle path when a back edge is detected\n*/\nprivate extractCycle(current: string, backEdge: string, parent: Map<string, string | null>): string[] {\nconst cycle: string[] = [backEdge, ",
      "occurrences": [
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 292
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 138
        }
      ]
    },
    {
      "snippet": "* Extract the cycle path when a back edge is detected\n*/\nprivate extractCycle(current: string, backEdge: string, parent: Map<string, string | null>): string[] {\nconst cycle: string[] = [backEdge, curr",
      "occurrences": [
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 293
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 139
        }
      ]
    },
    {
      "snippet": "*/\nprivate extractCycle(current: string, backEdge: string, parent: Map<string, string | null>): string[] {\nconst cycle: string[] = [backEdge, current];\nlet node = parent.get(current);\n",
      "occurrences": [
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 294
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 140
        }
      ]
    },
    {
      "snippet": "private extractCycle(current: string, backEdge: string, parent: Map<string, string | null>): string[] {\nconst cycle: string[] = [backEdge, current];\nlet node = parent.get(current);\n\nwhile (node && nod",
      "occurrences": [
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 295
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 141
        }
      ]
    },
    {
      "snippet": "const cycle: string[] = [backEdge, current];\nlet node = parent.get(current);\n\nwhile (node && node !== backEdge) {\ncycle.unshift(node);",
      "occurrences": [
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 296
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 142
        }
      ]
    },
    {
      "snippet": "let node = parent.get(current);\n\nwhile (node && node !== backEdge) {\ncycle.unshift(node);\nnode = parent.get(node);",
      "occurrences": [
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 297
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 143
        }
      ]
    },
    {
      "snippet": "\nwhile (node && node !== backEdge) {\ncycle.unshift(node);\nnode = parent.get(node);\n}",
      "occurrences": [
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 298
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 144
        }
      ]
    },
    {
      "snippet": "while (node && node !== backEdge) {\ncycle.unshift(node);\nnode = parent.get(node);\n}\n",
      "occurrences": [
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 299
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 145
        }
      ]
    },
    {
      "snippet": "cycle.unshift(node);\nnode = parent.get(node);\n}\n\ncycle.unshift(backEdge); // Complete the cycle",
      "occurrences": [
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 300
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 146
        }
      ]
    },
    {
      "snippet": "node = parent.get(node);\n}\n\ncycle.unshift(backEdge); // Complete the cycle\nreturn cycle;",
      "occurrences": [
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 301
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 147
        }
      ]
    },
    {
      "snippet": "}\n\ncycle.unshift(backEdge); // Complete the cycle\nreturn cycle;\n}",
      "occurrences": [
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 302
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 148
        }
      ]
    },
    {
      "snippet": "\ncycle.unshift(backEdge); // Complete the cycle\nreturn cycle;\n}\n",
      "occurrences": [
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 303
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 149
        }
      ]
    },
    {
      "snippet": "cycle.unshift(backEdge); // Complete the cycle\nreturn cycle;\n}\n\n/**",
      "occurrences": [
        {
          "path": "src/intelligence/dependency-analyzer.ts",
          "line": 304
        },
        {
          "path": "src/intelligence/graph-validator.ts",
          "line": 150
        }
      ]
    },
    {
      "snippet": "\nreturn inferred;\n}\n\n/**",
      "occurrences": [
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 90
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 143
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 170
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 204
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 257
        }
      ]
    },
    {
      "snippet": "for (const ref of missionRefs) {\nif (ref === missionId || !graph.nodes.has(ref)) {\ncontinue;\n}\n",
      "occurrences": [
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 105
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 157
        }
      ]
    },
    {
      "snippet": "}\n}\n}\n\nreturn inferred;",
      "occurrences": [
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 140
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 201
        }
      ]
    },
    {
      "snippet": "}\n}\n\nreturn inferred;\n}",
      "occurrences": [
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 141
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 202
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 255
        }
      ]
    },
    {
      "snippet": "}\n\nreturn inferred;\n}\n",
      "occurrences": [
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 142
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 169
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 203
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 256
        }
      ]
    },
    {
      "snippet": "for (const [nodeId, node] of graph.nodes.entries()) {\nif (nodeId === missionId) {\ncontinue;\n}\n",
      "occurrences": [
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 185
        },
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 222
        }
      ]
    },
    {
      "snippet": "if (!match) {\nreturn null;\n}\n\nreturn {",
      "occurrences": [
        {
          "path": "src/intelligence/dependency-inferrer.ts",
          "line": 299
        },
        {
          "path": "src/registry/semver-validator.ts",
          "line": 46
        }
      ]
    },
    {
      "snippet": "}\n\nreturn blocks;\n}\n",
      "occurrences": [
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 445
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 489
        }
      ]
    },
    {
      "snippet": "\nreturn blocks;\n}\n\n/**",
      "occurrences": [
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 446
        },
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 490
        }
      ]
    },
    {
      "snippet": "}\n\n/**\n* Serialize mission to text\n*/",
      "occurrences": [
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 571
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 290
        }
      ]
    },
    {
      "snippet": "\n/**\n* Serialize mission to text\n*/\nprivate serializeMission(mission: GenericMission): string {",
      "occurrences": [
        {
          "path": "src/intelligence/mission-splitter.ts",
          "line": 572
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 291
        }
      ]
    },
    {
      "snippet": "}\n}\n\n/**\n* Export singleton instance",
      "occurrences": [
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 177
        },
        {
          "path": "src/intelligence/token-optimizer.ts",
          "line": 209
        }
      ]
    },
    {
      "snippet": "}\n\n/**\n* Export singleton instance\n*/",
      "occurrences": [
        {
          "path": "src/intelligence/model-transpilers.ts",
          "line": 178
        },
        {
          "path": "src/intelligence/token-optimizer.ts",
          "line": 210
        }
      ]
    },
    {
      "snippet": "weight: 0.20,\nmetrics: metricResults\n};\n}\n",
      "occurrences": [
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 69
        },
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 81
        }
      ]
    },
    {
      "snippet": "\nconst score = metricResults.reduce(\n(sum, metric) => sum + metric.normalizedScore * metric.weight,\n0\n);",
      "occurrences": [
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 73
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 63
        }
      ]
    },
    {
      "snippet": "const score = metricResults.reduce(\n(sum, metric) => sum + metric.normalizedScore * metric.weight,\n0\n);\n",
      "occurrences": [
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 74
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 82
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 64
        }
      ]
    },
    {
      "snippet": "(sum, metric) => sum + metric.normalizedScore * metric.weight,\n0\n);\n\nreturn {",
      "occurrences": [
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 75
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 83
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 65
        }
      ]
    },
    {
      "snippet": "0\n);\n\nreturn {\nscore,",
      "occurrences": [
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 76
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 84
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 66
        }
      ]
    },
    {
      "snippet": "metrics: metricResults\n};\n}\n\n/**",
      "occurrences": [
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 82
        },
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 90
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 72
        }
      ]
    },
    {
      "snippet": "if (check.test()) {\nscore += check.weight;\n}\n}\n",
      "occurrences": [
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 153
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 178
        }
      ]
    },
    {
      "snippet": "score += check.weight;\n}\n}\n\nreturn score;",
      "occurrences": [
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 154
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 179
        }
      ]
    },
    {
      "snippet": "}\n}\n\nreturn score;\n}",
      "occurrences": [
        {
          "path": "src/quality/analyzers/ai-readiness-analyzer.ts",
          "line": 155
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 180
        }
      ]
    },
    {
      "snippet": "*/\n\nimport {\nDimensionScore,\nMetricResult,",
      "occurrences": [
        {
          "path": "src/quality/analyzers/clarity-analyzer.ts",
          "line": 4
        },
        {
          "path": "src/quality/analyzers/completeness-analyzer.ts",
          "line": 4
        }
      ]
    },
    {
      "snippet": "\nreturn suggestions;\n}\n\n/**",
      "occurrences": [
        {
          "path": "src/quality/improvement-engine.ts",
          "line": 56
        },
        {
          "path": "src/quality/improvement-engine.ts",
          "line": 82
        }
      ]
    },
    {
      "snippet": "}\n\nreturn {\nmajor: parseInt(match[1], 10),\nminor: parseInt(match[2], 10),",
      "occurrences": [
        {
          "path": "src/registry/semver-validator.ts",
          "line": 48
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 50
        }
      ]
    },
    {
      "snippet": "\nreturn {\nmajor: parseInt(match[1], 10),\nminor: parseInt(match[2], 10),\npatch: parseInt(match[3], 10),",
      "occurrences": [
        {
          "path": "src/registry/semver-validator.ts",
          "line": 49
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 51
        }
      ]
    },
    {
      "snippet": "}\n\nreturn lines.join('\\n');\n}\n",
      "occurrences": [
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 233
        },
        {
          "path": "src/tools/score-quality.ts",
          "line": 136
        }
      ]
    },
    {
      "snippet": "\nreturn lines.join('\\n');\n}\n\n/**",
      "occurrences": [
        {
          "path": "src/tools/analyze-dependencies.ts",
          "line": 234
        },
        {
          "path": "src/tools/score-quality.ts",
          "line": 137
        }
      ]
    },
    {
      "snippet": "*/\n\nimport * as path from 'path';\nimport * as YAML from 'yaml';\nimport { SecureYAMLLoader } from '../loaders/yaml-loader';",
      "occurrences": [
        {
          "path": "src/tools/combine-packs.ts",
          "line": 15
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 17
        }
      ]
    },
    {
      "snippet": "\nimport * as path from 'path';\nimport * as YAML from 'yaml';\nimport { SecureYAMLLoader } from '../loaders/yaml-loader';\nimport { RegistryParser } from '../registry/registry-parser';",
      "occurrences": [
        {
          "path": "src/tools/combine-packs.ts",
          "line": 16
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 18
        }
      ]
    },
    {
      "snippet": "import * as path from 'path';\nimport * as YAML from 'yaml';\nimport { SecureYAMLLoader } from '../loaders/yaml-loader';\nimport { RegistryParser } from '../registry/registry-parser';\nimport { DomainPack",
      "occurrences": [
        {
          "path": "src/tools/combine-packs.ts",
          "line": 17
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 19
        }
      ]
    },
    {
      "snippet": "},\n},\n},\n} as const;\n",
      "occurrences": [
        {
          "path": "src/tools/combine-packs.ts",
          "line": 95
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 73
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 74
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 103
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 91
        }
      ]
    },
    {
      "snippet": "},\n},\n} as const;\n\n/**",
      "occurrences": [
        {
          "path": "src/tools/combine-packs.ts",
          "line": 96
        },
        {
          "path": "src/tools/create-mission.ts",
          "line": 74
        },
        {
          "path": "src/tools/optimize-tokens.ts",
          "line": 75
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 104
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 92
        }
      ]
    },
    {
      "snippet": "};\n} catch (error) {\nif (error instanceof Error) {\nreturn {\nsuccess: false,",
      "occurrences": [
        {
          "path": "src/tools/combine-packs.ts",
          "line": 200
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 258
        }
      ]
    },
    {
      "snippet": "} catch (error) {\nif (error instanceof Error) {\nreturn {\nsuccess: false,\nerrors: [error.message],",
      "occurrences": [
        {
          "path": "src/tools/combine-packs.ts",
          "line": 201
        },
        {
          "path": "src/tools/combine-packs.ts",
          "line": 259
        }
      ]
    },
    {
      "snippet": "try {\n// Validate input parameters\nvalidateParams(params);\n\n// Determine base directory",
      "occurrences": [
        {
          "path": "src/tools/export-template.ts",
          "line": 54
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 81
        }
      ]
    },
    {
      "snippet": "// Validate input parameters\nvalidateParams(params);\n\n// Determine base directory\nconst baseDir = params.baseDir || process.cwd();",
      "occurrences": [
        {
          "path": "src/tools/export-template.ts",
          "line": 55
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 82
        }
      ]
    },
    {
      "snippet": "validateParams(params);\n\n// Determine base directory\nconst baseDir = params.baseDir || process.cwd();\n",
      "occurrences": [
        {
          "path": "src/tools/export-template.ts",
          "line": 56
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 83
        }
      ]
    },
    {
      "snippet": "};\n} catch (error) {\nconst errorMessage = error instanceof Error ? error.message : String(error);\n\nreturn {",
      "occurrences": [
        {
          "path": "src/tools/export-template.ts",
          "line": 91
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 137
        }
      ]
    },
    {
      "snippet": "} catch (error) {\nconst errorMessage = error instanceof Error ? error.message : String(error);\n\nreturn {\nsuccess: false,",
      "occurrences": [
        {
          "path": "src/tools/export-template.ts",
          "line": 92
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 83
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 138
        }
      ]
    },
    {
      "snippet": "}\n}\n\n/**\n* Validate input parameters",
      "occurrences": [
        {
          "path": "src/tools/export-template.ts",
          "line": 99
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 91
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 152
        }
      ]
    },
    {
      "snippet": "}\n\n/**\n* Validate input parameters\n*/",
      "occurrences": [
        {
          "path": "src/tools/export-template.ts",
          "line": 100
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 92
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 153
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 200
        }
      ]
    },
    {
      "snippet": "}\n\n/**\n* MCP Tool Registration\n* This would be called by the MCP server to register the tool",
      "occurrences": [
        {
          "path": "src/tools/export-template.ts",
          "line": 161
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 245
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 188
        }
      ]
    },
    {
      "snippet": "\n/**\n* MCP Tool Registration\n* This would be called by the MCP server to register the tool\n*/",
      "occurrences": [
        {
          "path": "src/tools/export-template.ts",
          "line": 162
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 246
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 189
        }
      ]
    },
    {
      "snippet": "/**\n* MCP Tool Registration\n* This would be called by the MCP server to register the tool\n*/\nexport const mcpToolDefinition = {",
      "occurrences": [
        {
          "path": "src/tools/export-template.ts",
          "line": 163
        },
        {
          "path": "src/tools/extract-template.ts",
          "line": 247
        },
        {
          "path": "src/tools/import-template.ts",
          "line": 190
        }
      ]
    },
    {
      "snippet": "contextWindow: number;\nutilization: number;\n};\n}\n",
      "occurrences": [
        {
          "path": "src/tools/split-mission.ts",
          "line": 68
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 64
        }
      ]
    },
    {
      "snippet": "utilization: number;\n};\n}\n\n/**",
      "occurrences": [
        {
          "path": "src/tools/split-mission.ts",
          "line": 69
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 65
        }
      ]
    },
    {
      "snippet": "private splitter: MissionSplitter;\nprivate complexityScorer: ComplexityScorer;\nprivate model: SupportedModel;\n\nconstructor(",
      "occurrences": [
        {
          "path": "src/tools/split-mission.ts",
          "line": 115
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 102
        }
      ]
    },
    {
      "snippet": "if (!params.missionFile || params.missionFile.trim().length === 0) {\nthrow new Error('missionFile is required');\n}\n\nif (!fs.existsSync(params.missionFile)) {",
      "occurrences": [
        {
          "path": "src/tools/split-mission.ts",
          "line": 206
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 189
        }
      ]
    },
    {
      "snippet": "throw new Error('missionFile is required');\n}\n\nif (!fs.existsSync(params.missionFile)) {\nthrow new Error(`Mission file not found: ${params.missionFile}`);",
      "occurrences": [
        {
          "path": "src/tools/split-mission.ts",
          "line": 207
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 190
        }
      ]
    },
    {
      "snippet": "}\n\nif (!fs.existsSync(params.missionFile)) {\nthrow new Error(`Mission file not found: ${params.missionFile}`);\n}",
      "occurrences": [
        {
          "path": "src/tools/split-mission.ts",
          "line": 208
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 191
        }
      ]
    },
    {
      "snippet": "}\n\n/**\n* Build token usage summary from complexity analysis\n*/",
      "occurrences": [
        {
          "path": "src/tools/split-mission.ts",
          "line": 221
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 167
        }
      ]
    },
    {
      "snippet": "\n/**\n* Build token usage summary from complexity analysis\n*/\nprivate buildTokenUsage(complexity: ComplexityAnalysis) {",
      "occurrences": [
        {
          "path": "src/tools/split-mission.ts",
          "line": 222
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 168
        }
      ]
    },
    {
      "snippet": "/**\n* Build token usage summary from complexity analysis\n*/\nprivate buildTokenUsage(complexity: ComplexityAnalysis) {\nconst contextWindow = this.getContextWindow(this.model);",
      "occurrences": [
        {
          "path": "src/tools/split-mission.ts",
          "line": 223
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 169
        }
      ]
    },
    {
      "snippet": "* Build token usage summary from complexity analysis\n*/\nprivate buildTokenUsage(complexity: ComplexityAnalysis) {\nconst contextWindow = this.getContextWindow(this.model);\nconst totalTokens = complexit",
      "occurrences": [
        {
          "path": "src/tools/split-mission.ts",
          "line": 224
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 170
        }
      ]
    },
    {
      "snippet": "*/\nprivate buildTokenUsage(complexity: ComplexityAnalysis) {\nconst contextWindow = this.getContextWindow(this.model);\nconst totalTokens = complexity.tokenDetails.count;\n",
      "occurrences": [
        {
          "path": "src/tools/split-mission.ts",
          "line": 225
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 171
        }
      ]
    },
    {
      "snippet": "private buildTokenUsage(complexity: ComplexityAnalysis) {\nconst contextWindow = this.getContextWindow(this.model);\nconst totalTokens = complexity.tokenDetails.count;\n\nreturn {",
      "occurrences": [
        {
          "path": "src/tools/split-mission.ts",
          "line": 226
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 172
        }
      ]
    },
    {
      "snippet": "const contextWindow = this.getContextWindow(this.model);\nconst totalTokens = complexity.tokenDetails.count;\n\nreturn {\nmodel: complexity.tokenDetails.model,",
      "occurrences": [
        {
          "path": "src/tools/split-mission.ts",
          "line": 227
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 173
        }
      ]
    },
    {
      "snippet": "const totalTokens = complexity.tokenDetails.count;\n\nreturn {\nmodel: complexity.tokenDetails.model,\ntotalTokens,",
      "occurrences": [
        {
          "path": "src/tools/split-mission.ts",
          "line": 228
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 174
        }
      ]
    },
    {
      "snippet": "\nreturn {\nmodel: complexity.tokenDetails.model,\ntotalTokens,\nestimatedCost: complexity.tokenDetails.estimatedCost,",
      "occurrences": [
        {
          "path": "src/tools/split-mission.ts",
          "line": 229
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 175
        }
      ]
    },
    {
      "snippet": "contextWindow,\nutilization: totalTokens / contextWindow,\n};\n}\n",
      "occurrences": [
        {
          "path": "src/tools/split-mission.ts",
          "line": 234
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 180
        }
      ]
    },
    {
      "snippet": "utilization: totalTokens / contextWindow,\n};\n}\n\n/**",
      "occurrences": [
        {
          "path": "src/tools/split-mission.ts",
          "line": 235
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 181
        }
      ]
    },
    {
      "snippet": "}\n\n/**\n* Load mission from file\n*/",
      "occurrences": [
        {
          "path": "src/tools/split-mission.ts",
          "line": 237
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 196
        }
      ]
    },
    {
      "snippet": "\n/**\n* Load mission from file\n*/\nprivate loadMissionFile(filePath: string): GenericMission | string {",
      "occurrences": [
        {
          "path": "src/tools/split-mission.ts",
          "line": 238
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 197
        }
      ]
    },
    {
      "snippet": "/**\n* Load mission from file\n*/\nprivate loadMissionFile(filePath: string): GenericMission | string {\ntry {",
      "occurrences": [
        {
          "path": "src/tools/split-mission.ts",
          "line": 239
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 198
        }
      ]
    },
    {
      "snippet": "return content;\n}\n} catch (error) {\nif (error instanceof Error) {\nthrow new Error(`Failed to load mission file: ${error.message}`);",
      "occurrences": [
        {
          "path": "src/tools/split-mission.ts",
          "line": 259
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 212
        }
      ]
    },
    {
      "snippet": "}\n} catch (error) {\nif (error instanceof Error) {\nthrow new Error(`Failed to load mission file: ${error.message}`);\n}",
      "occurrences": [
        {
          "path": "src/tools/split-mission.ts",
          "line": 260
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 213
        }
      ]
    },
    {
      "snippet": "} catch (error) {\nif (error instanceof Error) {\nthrow new Error(`Failed to load mission file: ${error.message}`);\n}\nthrow new Error('Failed to load mission file: Unknown error');",
      "occurrences": [
        {
          "path": "src/tools/split-mission.ts",
          "line": 261
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 214
        }
      ]
    },
    {
      "snippet": "}\nthrow new Error('Failed to load mission file: Unknown error');\n}\n}\n",
      "occurrences": [
        {
          "path": "src/tools/split-mission.ts",
          "line": 264
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 217
        }
      ]
    },
    {
      "snippet": "throw new Error('Failed to load mission file: Unknown error');\n}\n}\n\n/**",
      "occurrences": [
        {
          "path": "src/tools/split-mission.ts",
          "line": 265
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 218
        }
      ]
    },
    {
      "snippet": "}\n\n/**\n* Get context window for model\n*/",
      "occurrences": [
        {
          "path": "src/tools/split-mission.ts",
          "line": 397
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 297
        }
      ]
    },
    {
      "snippet": "\n/**\n* Get context window for model\n*/\nprivate getContextWindow(model: SupportedModel): number {",
      "occurrences": [
        {
          "path": "src/tools/split-mission.ts",
          "line": 398
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 298
        }
      ]
    },
    {
      "snippet": "/**\n* Get context window for model\n*/\nprivate getContextWindow(model: SupportedModel): number {\nconst windows: Record<SupportedModel, number> = {",
      "occurrences": [
        {
          "path": "src/tools/split-mission.ts",
          "line": 399
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 299
        }
      ]
    },
    {
      "snippet": "};\nreturn windows[model] || 200000;\n}\n\n/**",
      "occurrences": [
        {
          "path": "src/tools/split-mission.ts",
          "line": 407
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 307
        }
      ]
    },
    {
      "snippet": "return windows[model] || 200000;\n}\n\n/**\n* Format result for LLM consumption",
      "occurrences": [
        {
          "path": "src/tools/split-mission.ts",
          "line": 408
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 308
        }
      ]
    },
    {
      "snippet": "}\n\n/**\n* Format result for LLM consumption\n*/",
      "occurrences": [
        {
          "path": "src/tools/split-mission.ts",
          "line": 409
        },
        {
          "path": "src/tools/suggest-splits.ts",
          "line": 309
        }
      ]
    },
    {
      "snippet": ": [\n'**Token Usage:**',\n'- Token metrics unavailable for this result.',\n];\n",
      "occurrences": [
        {
          "path": "src/tools/split-mission.ts",
          "line": 427
        },
        {
          "path": "src/tools/split-mission.ts",
          "line": 450
        }
      ]
    },
    {
      "snippet": "\n/** Optional version manager options */\noptions?: VersionManagerOptions;\n}\n",
      "occurrences": [
        {
          "path": "src/tools/version-template.ts",
          "line": 48
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 144
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 263
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 366
        }
      ]
    },
    {
      "snippet": "};\n}\n\nreturn {\nsuccess: true,",
      "occurrences": [
        {
          "path": "src/tools/version-template.ts",
          "line": 189
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 398
        }
      ]
    },
    {
      "snippet": "\nreturn {\nsuccess: true,\nversion: {\ntemplateId: params.templateId,",
      "occurrences": [
        {
          "path": "src/tools/version-template.ts",
          "line": 305
        },
        {
          "path": "src/tools/version-template.ts",
          "line": 400
        }
      ]
    },
    {
      "snippet": "/** Unique name of the domain pack */\nname: string;\n\n/** Description of the domain pack's purpose */\ndescription: string;",
      "occurrences": [
        {
          "path": "src/types/registry.ts",
          "line": 14
        },
        {
          "path": "src/types/tools.ts",
          "line": 14
        }
      ]
    },
    {
      "snippet": "name: string;\n\n/** Description of the domain pack's purpose */\ndescription: string;\n",
      "occurrences": [
        {
          "path": "src/types/registry.ts",
          "line": 15
        },
        {
          "path": "src/types/tools.ts",
          "line": 15
        }
      ]
    },
    {
      "snippet": "\n/** Description of the domain pack's purpose */\ndescription: string;\n\n/** SemVer version (X.Y.Z format) */",
      "occurrences": [
        {
          "path": "src/types/registry.ts",
          "line": 16
        },
        {
          "path": "src/types/tools.ts",
          "line": 16
        }
      ]
    },
    {
      "snippet": "/** Description of the domain pack's purpose */\ndescription: string;\n\n/** SemVer version (X.Y.Z format) */\nversion: string;",
      "occurrences": [
        {
          "path": "src/types/registry.ts",
          "line": 17
        },
        {
          "path": "src/types/tools.ts",
          "line": 17
        }
      ]
    },
    {
      "snippet": "description: string;\n\n/** SemVer version (X.Y.Z format) */\nversion: string;\n",
      "occurrences": [
        {
          "path": "src/types/registry.ts",
          "line": 18
        },
        {
          "path": "src/types/tools.ts",
          "line": 18
        }
      ]
    },
    {
      "snippet": "\n/** SemVer version (X.Y.Z format) */\nversion: string;\n\n/** Optional author information */",
      "occurrences": [
        {
          "path": "src/types/registry.ts",
          "line": 19
        },
        {
          "path": "src/types/tools.ts",
          "line": 19
        }
      ]
    },
    {
      "snippet": "/** SemVer version (X.Y.Z format) */\nversion: string;\n\n/** Optional author information */\nauthor?: string;",
      "occurrences": [
        {
          "path": "src/types/registry.ts",
          "line": 20
        },
        {
          "path": "src/types/tools.ts",
          "line": 20
        }
      ]
    },
    {
      "snippet": "const baseVersion = this.parseVersion(expression.slice(1));\nconst comparison = this.compareVersions(version, baseVersion);\n\nif (comparison === VersionComparison.LESS_THAN) return false;\n",
      "occurrences": [
        {
          "path": "src/versioning/version-manager.ts",
          "line": 178
        },
        {
          "path": "src/versioning/version-manager.ts",
          "line": 199
        }
      ]
    },
    {
      "snippet": "});\n\n// Helper function to create mock packs\nfunction createMockPack(\nname: string,",
      "occurrences": [
        {
          "path": "tests/combination/dependency-resolver.test.ts",
          "line": 17
        },
        {
          "path": "tests/combination/pack-combiner.test.ts",
          "line": 17
        }
      ]
    },
    {
      "snippet": "version: string = '1.0.0',\ndependencies: Array<{ name: string; version: string }> = []\n): DomainPack {\nreturn {\nmanifest: {",
      "occurrences": [
        {
          "path": "tests/combination/dependency-resolver.test.ts",
          "line": 22
        },
        {
          "path": "tests/combination/pack-combiner.test.ts",
          "line": 23
        }
      ]
    },
    {
      "snippet": "dependencies: Array<{ name: string; version: string }> = []\n): DomainPack {\nreturn {\nmanifest: {\nname,",
      "occurrences": [
        {
          "path": "tests/combination/dependency-resolver.test.ts",
          "line": 23
        },
        {
          "path": "tests/combination/pack-combiner.test.ts",
          "line": 24
        }
      ]
    },
    {
      "snippet": "): DomainPack {\nreturn {\nmanifest: {\nname,\nversion,",
      "occurrences": [
        {
          "path": "tests/combination/dependency-resolver.test.ts",
          "line": 24
        },
        {
          "path": "tests/combination/pack-combiner.test.ts",
          "line": 25
        }
      ]
    },
    {
      "snippet": "return {\nmanifest: {\nname,\nversion,\ndisplayName: `${name} Pack`,",
      "occurrences": [
        {
          "path": "tests/combination/dependency-resolver.test.ts",
          "line": 25
        },
        {
          "path": "tests/combination/pack-combiner.test.ts",
          "line": 26
        }
      ]
    },
    {
      "snippet": "manifest: {\nname,\nversion,\ndisplayName: `${name} Pack`,\ndescription: `Test pack ${name}`,",
      "occurrences": [
        {
          "path": "tests/combination/dependency-resolver.test.ts",
          "line": 26
        },
        {
          "path": "tests/combination/pack-combiner.test.ts",
          "line": 27
        }
      ]
    },
    {
      "snippet": "const packA = createMockPack('pack-a');\nconst packB = createMockPack('pack-b', '1.0.0', [\n{ name: 'pack-a', version: '1.0.0' },\n]);\nconst packC = createMockPack('pack-c', '1.0.0', [",
      "occurrences": [
        {
          "path": "tests/combination/dependency-resolver.test.ts",
          "line": 66
        },
        {
          "path": "tests/combination/dependency-resolver.test.ts",
          "line": 83
        },
        {
          "path": "tests/combination/dependency-resolver.test.ts",
          "line": 218
        },
        {
          "path": "tests/combination/dependency-resolver.test.ts",
          "line": 234
        }
      ]
    },
    {
      "snippet": "const packB = createMockPack('pack-b', '1.0.0', [\n{ name: 'pack-a', version: '1.0.0' },\n]);\nconst packC = createMockPack('pack-c', '1.0.0', [\n{ name: 'pack-b', version: '1.0.0' },",
      "occurrences": [
        {
          "path": "tests/combination/dependency-resolver.test.ts",
          "line": 67
        },
        {
          "path": "tests/combination/dependency-resolver.test.ts",
          "line": 219
        }
      ]
    },
    {
      "snippet": "{ name: 'pack-a', version: '1.0.0' },\n]);\nconst packC = createMockPack('pack-c', '1.0.0', [\n{ name: 'pack-b', version: '1.0.0' },\n]);",
      "occurrences": [
        {
          "path": "tests/combination/dependency-resolver.test.ts",
          "line": 68
        },
        {
          "path": "tests/combination/dependency-resolver.test.ts",
          "line": 220
        }
      ]
    },
    {
      "snippet": "]);\nconst packC = createMockPack('pack-c', '1.0.0', [\n{ name: 'pack-b', version: '1.0.0' },\n]);\n",
      "occurrences": [
        {
          "path": "tests/combination/dependency-resolver.test.ts",
          "line": 69
        },
        {
          "path": "tests/combination/dependency-resolver.test.ts",
          "line": 221
        }
      ]
    },
    {
      "snippet": "const packB = createMockPack('pack-b', '1.0.0', [\n{ name: 'pack-a', version: '1.0.0' },\n]);\nconst packC = createMockPack('pack-c', '1.0.0', [\n{ name: 'pack-a', version: '1.0.0' },",
      "occurrences": [
        {
          "path": "tests/combination/dependency-resolver.test.ts",
          "line": 84
        },
        {
          "path": "tests/combination/dependency-resolver.test.ts",
          "line": 235
        }
      ]
    },
    {
      "snippet": "{ name: 'pack-a', version: '1.0.0' },\n]);\nconst packC = createMockPack('pack-c', '1.0.0', [\n{ name: 'pack-a', version: '1.0.0' },\n]);",
      "occurrences": [
        {
          "path": "tests/combination/dependency-resolver.test.ts",
          "line": 85
        },
        {
          "path": "tests/combination/dependency-resolver.test.ts",
          "line": 236
        }
      ]
    },
    {
      "snippet": "]);\nconst packC = createMockPack('pack-c', '1.0.0', [\n{ name: 'pack-a', version: '1.0.0' },\n]);\nconst packD = createMockPack('pack-d', '1.0.0', [",
      "occurrences": [
        {
          "path": "tests/combination/dependency-resolver.test.ts",
          "line": 86
        },
        {
          "path": "tests/combination/dependency-resolver.test.ts",
          "line": 237
        }
      ]
    },
    {
      "snippet": "const packC = createMockPack('pack-c', '1.0.0', [\n{ name: 'pack-a', version: '1.0.0' },\n]);\nconst packD = createMockPack('pack-d', '1.0.0', [\n{ name: 'pack-b', version: '1.0.0' },",
      "occurrences": [
        {
          "path": "tests/combination/dependency-resolver.test.ts",
          "line": 87
        },
        {
          "path": "tests/combination/dependency-resolver.test.ts",
          "line": 238
        }
      ]
    },
    {
      "snippet": "{ name: 'pack-a', version: '1.0.0' },\n]);\nconst packD = createMockPack('pack-d', '1.0.0', [\n{ name: 'pack-b', version: '1.0.0' },\n{ name: 'pack-c', version: '1.0.0' },",
      "occurrences": [
        {
          "path": "tests/combination/dependency-resolver.test.ts",
          "line": 88
        },
        {
          "path": "tests/combination/dependency-resolver.test.ts",
          "line": 239
        }
      ]
    },
    {
      "snippet": "]);\nconst packD = createMockPack('pack-d', '1.0.0', [\n{ name: 'pack-b', version: '1.0.0' },\n{ name: 'pack-c', version: '1.0.0' },\n]);",
      "occurrences": [
        {
          "path": "tests/combination/dependency-resolver.test.ts",
          "line": 89
        },
        {
          "path": "tests/combination/dependency-resolver.test.ts",
          "line": 240
        }
      ]
    },
    {
      "snippet": "const packD = createMockPack('pack-d', '1.0.0', [\n{ name: 'pack-b', version: '1.0.0' },\n{ name: 'pack-c', version: '1.0.0' },\n]);\n",
      "occurrences": [
        {
          "path": "tests/combination/dependency-resolver.test.ts",
          "line": 90
        },
        {
          "path": "tests/combination/dependency-resolver.test.ts",
          "line": 241
        }
      ]
    },
    {
      "snippet": "\nexpect(result.valid).toBe(true);\nexpect(result.errors).toEqual([]);\n});\n",
      "occurrences": [
        {
          "path": "tests/combination/dependency-resolver.test.ts",
          "line": 154
        },
        {
          "path": "tests/combination/dependency-resolver.test.ts",
          "line": 166
        }
      ]
    },
    {
      "snippet": "const packA = createMockPack('pack-a');\nconst packB = createMockPack('pack-b', '1.0.0', [\n{ name: 'pack-a', version: '1.0.0' },\n]);\n",
      "occurrences": [
        {
          "path": "tests/combination/dependency-resolver.test.ts",
          "line": 160
        },
        {
          "path": "tests/combination/dependency-resolver.test.ts",
          "line": 206
        },
        {
          "path": "tests/combination/dependency-resolver.test.ts",
          "line": 263
        },
        {
          "path": "tests/combination/dependency-resolver.test.ts",
          "line": 284
        }
      ]
    },
    {
      "snippet": "const packB = createMockPack('pack-b', '1.0.0', [\n{ name: 'pack-a', version: '1.0.0' },\n]);\n\nconst result = resolver.resolve([packB], [packA, packB]);",
      "occurrences": [
        {
          "path": "tests/combination/dependency-resolver.test.ts",
          "line": 264
        },
        {
          "path": "tests/combination/dependency-resolver.test.ts",
          "line": 285
        }
      ]
    },
    {
      "snippet": "{ name: 'pack-a', version: '1.0.0' },\n]);\n\nconst result = resolver.resolve([packB], [packA, packB]);\n",
      "occurrences": [
        {
          "path": "tests/combination/dependency-resolver.test.ts",
          "line": 265
        },
        {
          "path": "tests/combination/dependency-resolver.test.ts",
          "line": 286
        }
      ]
    },
    {
      "snippet": "});\n\nconst result = combiner.combine([packA, packB], [packA, packB], {\nstrategy: 'deep-merge',\nresolveDependencies: false,",
      "occurrences": [
        {
          "path": "tests/combination/pack-combiner.test.ts",
          "line": 51
        },
        {
          "path": "tests/combination/pack-combiner.test.ts",
          "line": 74
        },
        {
          "path": "tests/combination/pack-combiner.test.ts",
          "line": 393
        }
      ]
    },
    {
      "snippet": "\nconst result = combiner.combine([packA, packB], [packA, packB], {\nstrategy: 'deep-merge',\nresolveDependencies: false,\n});",
      "occurrences": [
        {
          "path": "tests/combination/pack-combiner.test.ts",
          "line": 52
        },
        {
          "path": "tests/combination/pack-combiner.test.ts",
          "line": 75
        },
        {
          "path": "tests/combination/pack-combiner.test.ts",
          "line": 394
        }
      ]
    },
    {
      "snippet": "const result = combiner.combine([packA, packB], [packA, packB], {\nstrategy: 'deep-merge',\nresolveDependencies: false,\n});\n",
      "occurrences": [
        {
          "path": "tests/combination/pack-combiner.test.ts",
          "line": 53
        },
        {
          "path": "tests/combination/pack-combiner.test.ts",
          "line": 76
        },
        {
          "path": "tests/combination/pack-combiner.test.ts",
          "line": 395
        }
      ]
    },
    {
      "snippet": "strategy: 'deep-merge',\nresolveDependencies: false,\n});\n\nexpect(result.success).toBe(true);",
      "occurrences": [
        {
          "path": "tests/combination/pack-combiner.test.ts",
          "line": 54
        },
        {
          "path": "tests/combination/pack-combiner.test.ts",
          "line": 77
        },
        {
          "path": "tests/combination/pack-combiner.test.ts",
          "line": 96
        },
        {
          "path": "tests/combination/pack-combiner.test.ts",
          "line": 396
        }
      ]
    },
    {
      "snippet": "\nconst result = combiner.combine([packA, packB], [packA, packB], {\nstrategy: 'override',\nresolveDependencies: false,\n});",
      "occurrences": [
        {
          "path": "tests/combination/pack-combiner.test.ts",
          "line": 116
        },
        {
          "path": "tests/combination/pack-combiner.test.ts",
          "line": 132
        }
      ]
    },
    {
      "snippet": "const result = combiner.combine([packA, packB], [packA, packB], {\nstrategy: 'override',\nresolveDependencies: false,\n});\n",
      "occurrences": [
        {
          "path": "tests/combination/pack-combiner.test.ts",
          "line": 117
        },
        {
          "path": "tests/combination/pack-combiner.test.ts",
          "line": 133
        }
      ]
    },
    {
      "snippet": "strategy: 'override',\nresolveDependencies: false,\n});\n\nexpect(result.success).toBe(true);",
      "occurrences": [
        {
          "path": "tests/combination/pack-combiner.test.ts",
          "line": 118
        },
        {
          "path": "tests/combination/pack-combiner.test.ts",
          "line": 134
        }
      ]
    },
    {
      "snippet": "resolveDependencies: false,\n});\n\nexpect(result.success).toBe(true);\nexpect(result.combinedPack?.template).toEqual({",
      "occurrences": [
        {
          "path": "tests/combination/pack-combiner.test.ts",
          "line": 119
        },
        {
          "path": "tests/combination/pack-combiner.test.ts",
          "line": 159
        },
        {
          "path": "tests/combination/pack-combiner.test.ts",
          "line": 397
        }
      ]
    },
    {
      "snippet": "const packA = createMockPack('pack-a', {});\nconst packB = createMockPack('pack-b', {});\n\nconst result = combiner.combine([packA, packB], [packA, packB], {\nresolveDependencies: false,",
      "occurrences": [
        {
          "path": "tests/combination/pack-combiner.test.ts",
          "line": 256
        },
        {
          "path": "tests/combination/pack-combiner.test.ts",
          "line": 372
        }
      ]
    },
    {
      "snippet": "const packB = createMockPack('pack-b', {});\n\nconst result = combiner.combine([packA, packB], [packA, packB], {\nresolveDependencies: false,\n});",
      "occurrences": [
        {
          "path": "tests/combination/pack-combiner.test.ts",
          "line": 257
        },
        {
          "path": "tests/combination/pack-combiner.test.ts",
          "line": 373
        }
      ]
    },
    {
      "snippet": "\nconst result = combiner.combine([packA, packB], [packA, packB], {\nresolveDependencies: false,\n});\n",
      "occurrences": [
        {
          "path": "tests/combination/pack-combiner.test.ts",
          "line": 258
        },
        {
          "path": "tests/combination/pack-combiner.test.ts",
          "line": 275
        },
        {
          "path": "tests/combination/pack-combiner.test.ts",
          "line": 374
        }
      ]
    },
    {
      "snippet": "const result = combiner.combine([packA, packB], [packA, packB], {\nresolveDependencies: false,\n});\n\nexpect(result.success).toBe(true);",
      "occurrences": [
        {
          "path": "tests/combination/pack-combiner.test.ts",
          "line": 259
        },
        {
          "path": "tests/combination/pack-combiner.test.ts",
          "line": 276
        },
        {
          "path": "tests/combination/pack-combiner.test.ts",
          "line": 375
        }
      ]
    },
    {
      "snippet": "const manifest: DomainPackManifest = {\nname: 'test-pack',\nversion: '1.0.0',\ndisplayName: 'Test Pack',\ndescription: 'A test domain pack',",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 42
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 57
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 122
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 137
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 152
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 168
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 851
        }
      ]
    },
    {
      "snippet": "name: 'test-pack',\nversion: '1.0.0',\ndisplayName: 'Test Pack',\ndescription: 'A test domain pack',\nschema: 'schema.yaml',",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 43
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 169
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 260
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 308
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 327
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 348
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 778
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 852
        }
      ]
    },
    {
      "snippet": "version: '1.0.0',\ndisplayName: 'Test Pack',\ndescription: 'A test domain pack',\nschema: 'schema.yaml',\n};",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 44
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 779
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 853
        }
      ]
    },
    {
      "snippet": "displayName: 'Test Pack',\ndescription: 'A test domain pack',\nschema: 'schema.yaml',\n};\n",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 45
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 110
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 780
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 854
        }
      ]
    },
    {
      "snippet": "description: 'A test domain pack',\nschema: 'schema.yaml',\n};\n\nconst result = packLoader.validateManifest(manifest);",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 46
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 111
        }
      ]
    },
    {
      "snippet": "schema: 'schema.yaml',\n};\n\nconst result = packLoader.validateManifest(manifest);\n",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 47
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 112
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 158
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 560
        }
      ]
    },
    {
      "snippet": "};\n\nconst result = packLoader.validateManifest(manifest);\n\nexpect(result.valid).toBe(true);",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 48
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 67
        }
      ]
    },
    {
      "snippet": "\nconst result = packLoader.validateManifest(manifest);\n\nexpect(result.valid).toBe(true);\nexpect(result.errors).toHaveLength(0);",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 49
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 68
        }
      ]
    },
    {
      "snippet": "const result = packLoader.validateManifest(manifest);\n\nexpect(result.valid).toBe(true);\nexpect(result.errors).toHaveLength(0);\n});",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 50
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 69
        }
      ]
    },
    {
      "snippet": "\nexpect(result.valid).toBe(true);\nexpect(result.errors).toHaveLength(0);\n});\n",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 51
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 70
        }
      ]
    },
    {
      "snippet": "],\n};\n\nconst result = packLoader.validateManifest(manifest);\n",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 66
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 177
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 578
        }
      ]
    },
    {
      "snippet": "\nconst result = packLoader.validateManifest(manifest);\n\nexpect(result.valid).toBe(false);\nexpect(result.errors.length).toBeGreaterThan(0);",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 80
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 99
        }
      ]
    },
    {
      "snippet": "};\n\nconst result = packLoader.validateManifest(manifest);\n\nexpect(result.valid).toBe(false);",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 98
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 113
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 128
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 143
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 159
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 178
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 561
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 579
        }
      ]
    },
    {
      "snippet": "\nexpect(result.valid).toBe(false);\nexpect(result.errors.length).toBeGreaterThan(0);\n});\n",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 101
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 300
        }
      ]
    },
    {
      "snippet": "\nconst result = packLoader.validateManifest(manifest);\n\nexpect(result.valid).toBe(false);\nexpect(result.errors.some(e => e.includes('relative'))).toBe(true);",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 129
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 144
        }
      ]
    },
    {
      "snippet": "const result = packLoader.validateManifest(manifest);\n\nexpect(result.valid).toBe(false);\nexpect(result.errors.some(e => e.includes('relative'))).toBe(true);\n});",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 130
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 145
        }
      ]
    },
    {
      "snippet": "\nexpect(result.valid).toBe(false);\nexpect(result.errors.some(e => e.includes('relative'))).toBe(true);\n});\n",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 131
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 146
        }
      ]
    },
    {
      "snippet": "const schema = {\ntype: 'object',\nproperties: {\nfield1: { type: 'string' },\n},",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 189
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 859
        }
      ]
    },
    {
      "snippet": "type: 'object',\nproperties: {\nfield1: { type: 'string' },\n},\n};",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 190
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 786
        }
      ]
    },
    {
      "snippet": "properties: {\nfield1: { type: 'string' },\n},\n};\n",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 191
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 227
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 787
        }
      ]
    },
    {
      "snippet": "const isValid = (packLoader as any).isValidJSONSchema(schema);\n\nexpect(isValid).toBe(true);\n});\n",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 197
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 210
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 220
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 599
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 612
        }
      ]
    },
    {
      "snippet": "{ type: 'string' },\n{ type: 'number' },\n],\n};\n",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 205
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 607
        }
      ]
    },
    {
      "snippet": "{ type: 'number' },\n],\n};\n\nconst isValid = (packLoader as any).isValidJSONSchema(schema);",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 206
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 608
        }
      ]
    },
    {
      "snippet": "],\n};\n\nconst isValid = (packLoader as any).isValidJSONSchema(schema);\n",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 207
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 596
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 609
        }
      ]
    },
    {
      "snippet": "};\n\nconst isValid = (packLoader as any).isValidJSONSchema(schema);\n\nexpect(isValid).toBe(true);",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 208
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 218
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 597
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 610
        }
      ]
    },
    {
      "snippet": "\nconst isValid = (packLoader as any).isValidJSONSchema(schema);\n\nexpect(isValid).toBe(true);\n});",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 209
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 219
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 598
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 611
        }
      ]
    },
    {
      "snippet": "\nconst isValid = (packLoader as any).isValidJSONSchema(schema);\n\nexpect(isValid).toBe(false);\n});",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 231
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 619
        }
      ]
    },
    {
      "snippet": "\nexpect(isValid).toBe(false);\n});\n});\n",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 251
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 621
        }
      ]
    },
    {
      "snippet": "const pack: DomainPack = {\nmanifest: {\nname: 'test-pack',\nversion: '1.0.0',\ndisplayName: 'Test Pack',",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 258
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 306
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 325
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 346
        }
      ]
    },
    {
      "snippet": "manifest: {\nname: 'test-pack',\nversion: '1.0.0',\ndisplayName: 'Test Pack',\ndescription: 'A test domain pack',",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 259
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 307
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 326
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 347
        }
      ]
    },
    {
      "snippet": "version: '1.0.0',\ndisplayName: 'Test Pack',\ndescription: 'A test domain pack',\nschema: 'schema.yaml',\n},",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 261
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 309
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 328
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 349
        }
      ]
    },
    {
      "snippet": "displayName: 'Test Pack',\ndescription: 'A test domain pack',\nschema: 'schema.yaml',\n},\nschema: {",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 262
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 289
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 329
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 350
        }
      ]
    },
    {
      "snippet": "description: 'A test domain pack',\nschema: 'schema.yaml',\n},\nschema: {\ntype: 'object',",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 263
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 290
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 330
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 351
        }
      ]
    },
    {
      "snippet": "schema: 'schema.yaml',\n},\nschema: {\ntype: 'object',\n},",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 291
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 331
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 352
        }
      ]
    },
    {
      "snippet": "template: {},\n};\n\nconst result = packLoader.validatePack(pack);\n",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 296
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 315
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 657
        }
      ]
    },
    {
      "snippet": "};\n\nconst result = packLoader.validatePack(pack);\n\nexpect(result.valid).toBe(false);",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 297
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 316
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 337
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 358
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 638
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 658
        }
      ]
    },
    {
      "snippet": "\nconst result = packLoader.validatePack(pack);\n\nexpect(result.valid).toBe(false);\nexpect(result.errors.some(e => e.includes('Template'))).toBe(true);",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 338
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 359
        }
      ]
    },
    {
      "snippet": "const result = packLoader.validatePack(pack);\n\nexpect(result.valid).toBe(false);\nexpect(result.errors.some(e => e.includes('Template'))).toBe(true);\n});",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 339
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 360
        }
      ]
    },
    {
      "snippet": "schema_version: '1.0.0',\n},\n];\n\nexpect(() => {",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 375
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 391
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 411
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 437
        }
      ]
    },
    {
      "snippet": "const registryEntries: DomainPackEntry[] = [\n{\nname: 'test-pack',\nversion: '1.0.0',\ndescription: 'Test pack',",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 385
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 405
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 431
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 450
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 473
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 503
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 796
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 831
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 870
        }
      ]
    },
    {
      "snippet": "{\nname: 'test-pack',\nversion: '1.0.0',\ndescription: 'Test pack',\npath: 'nonexistent',",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 406
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 432
        }
      ]
    },
    {
      "snippet": "name: 'test-pack',\nversion: '1.0.0',\ndescription: 'Test pack',\npath: 'nonexistent',\nschema_version: '1.0.0',",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 407
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 433
        }
      ]
    },
    {
      "snippet": "version: '1.0.0',\ndescription: 'Test pack',\npath: 'nonexistent',\nschema_version: '1.0.0',\n},",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 408
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 434
        }
      ]
    },
    {
      "snippet": "description: 'Test pack',\npath: 'nonexistent',\nschema_version: '1.0.0',\n},\n];",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 409
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 435
        }
      ]
    },
    {
      "snippet": "path: 'nonexistent',\nschema_version: '1.0.0',\n},\n];\n",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 410
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 436
        }
      ]
    },
    {
      "snippet": "{\nname: 'test-pack',\nversion: '1.0.0',\ndescription: 'Test pack',\npath: 'test-path',",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 451
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 474
        }
      ]
    },
    {
      "snippet": "name: 'test-pack',\nversion: '1.0.0',\ndescription: 'Test pack',\npath: 'test-path',\nschema_version: '1.0.0',",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 452
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 475
        }
      ]
    },
    {
      "snippet": "version: '1.0.0',\ndescription: 'Test pack',\npath: 'test-path',\nschema_version: '1.0.0',\n},",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 453
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 476
        }
      ]
    },
    {
      "snippet": "description: 'Test pack',\npath: 'test-path',\nschema_version: '1.0.0',\n},\n];",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 454
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 477
        }
      ]
    },
    {
      "snippet": "path: 'test-path',\nschema_version: '1.0.0',\n},\n];\n",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 455
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 478
        }
      ]
    },
    {
      "snippet": "schema_version: '1.0.0',\n},\n];\n\ntry {",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 456
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 479
        }
      ]
    },
    {
      "snippet": "},\n];\n\ntry {\npackLoader.loadPack('test-pack', registryEntries);",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 457
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 480
        }
      ]
    },
    {
      "snippet": "];\n\ntry {\npackLoader.loadPack('test-pack', registryEntries);\n} catch (error) {",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 458
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 481
        }
      ]
    },
    {
      "snippet": "\nexpect(() => {\n(packLoader as any).loadTemplate('test.yaml');\n}).toThrow('Template must be a valid object');\n",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 670
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 680
        }
      ]
    },
    {
      "snippet": "expect(() => {\n(packLoader as any).loadTemplate('test.yaml');\n}).toThrow('Template must be a valid object');\n\nmockLoad.mockRestore();",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 671
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 681
        }
      ]
    },
    {
      "snippet": "(packLoader as any).loadTemplate('test.yaml');\n}).toThrow('Template must be a valid object');\n\nmockLoad.mockRestore();\n});",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 672
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 682
        }
      ]
    },
    {
      "snippet": "}).toThrow('Template must be a valid object');\n\nmockLoad.mockRestore();\n});\n",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 673
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 683
        }
      ]
    },
    {
      "snippet": "const mockLoad = jest.spyOn(loader, 'load').mockImplementationOnce(() => {\nthrow 'string error';\n});\n\nexpect(() => {",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 701
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 737
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 763
        }
      ]
    },
    {
      "snippet": "\nmockLoad.mockRestore();\n});\n});\n",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 708
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 744
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 770
        }
      ]
    },
    {
      "snippet": "};\n\nconst registryEntries: DomainPackEntry[] = [\n{\nname: 'test-pack',",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 794
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 829
        }
      ]
    },
    {
      "snippet": "\nconst registryEntries: DomainPackEntry[] = [\n{\nname: 'test-pack',\nversion: '1.0.0',",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 795
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 830
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 869
        }
      ]
    },
    {
      "snippet": "{\nname: 'test-pack',\nversion: '1.0.0',\ndescription: 'Test pack',\npath: 'packs/test',",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 797
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 832
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 871
        }
      ]
    },
    {
      "snippet": "name: 'test-pack',\nversion: '1.0.0',\ndescription: 'Test pack',\npath: 'packs/test',\nschema_version: '1.0.0',",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 798
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 833
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 872
        }
      ]
    },
    {
      "snippet": "version: '1.0.0',\ndescription: 'Test pack',\npath: 'packs/test',\nschema_version: '1.0.0',\n},",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 799
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 834
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 873
        }
      ]
    },
    {
      "snippet": "description: 'Test pack',\npath: 'packs/test',\nschema_version: '1.0.0',\n},\n];",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 800
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 835
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 874
        }
      ]
    },
    {
      "snippet": "path: 'packs/test',\nschema_version: '1.0.0',\n},\n];\n",
      "occurrences": [
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 801
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 836
        },
        {
          "path": "tests/domains/domain-pack-loader.test.ts",
          "line": 875
        }
      ]
    },
    {
      "snippet": "*/\n\nimport { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport * as fs from 'fs';\nimport * as path from 'path';",
      "occurrences": [
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 3
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 3
        }
      ]
    },
    {
      "snippet": "if (fs.existsSync(tempDir)) {\nfs.rmSync(tempDir, { recursive: true, force: true });\n}\n});\n",
      "occurrences": [
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 24
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 27
        }
      ]
    },
    {
      "snippet": ");\n\nconst config: ExtractionConfig = {\nsourceMissionPath: testMissionDir,\nauthor: 'test@example.com'",
      "occurrences": [
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 36
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 56
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 87
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 240
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 262
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 311
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 373
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 406
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 506
        }
      ]
    },
    {
      "snippet": "\nconst config: ExtractionConfig = {\nsourceMissionPath: testMissionDir,\nauthor: 'test@example.com'\n};",
      "occurrences": [
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 37
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 57
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 88
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 112
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 137
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 220
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 241
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 263
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 312
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 342
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 374
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 407
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 443
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 486
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 507
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 547
        }
      ]
    },
    {
      "snippet": "const config: ExtractionConfig = {\nsourceMissionPath: testMissionDir,\nauthor: 'test@example.com'\n};\n",
      "occurrences": [
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 38
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 58
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 89
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 113
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 138
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 221
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 242
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 264
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 313
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 343
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 375
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 408
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 444
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 459
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 487
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 508
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 548
        }
      ]
    },
    {
      "snippet": "sourceMissionPath: testMissionDir,\nauthor: 'test@example.com'\n};\n\nconst extractor = new TemplateExtractor(config);",
      "occurrences": [
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 39
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 59
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 90
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 114
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 139
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 222
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 243
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 265
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 314
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 344
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 376
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 409
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 445
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 460
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 488
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 509
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 549
        }
      ]
    },
    {
      "snippet": "author: 'test@example.com'\n};\n\nconst extractor = new TemplateExtractor(config);\nconst result = await extractor.identifyCandidates(testMissionDir);",
      "occurrences": [
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 40
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 60
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 91
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 115
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 140
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 223
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 510
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 550
        }
      ]
    },
    {
      "snippet": "};\n\nconst extractor = new TemplateExtractor(config);\nconst result = await extractor.identifyCandidates(testMissionDir);\n",
      "occurrences": [
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 41
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 61
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 92
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 116
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 141
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 169
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 199
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 224
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 511
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 551
        }
      ]
    },
    {
      "snippet": "\nconst extractor = new TemplateExtractor(config);\nconst result = await extractor.identifyCandidates(testMissionDir);\n\nexpect(result.filesAnalyzed).toBe(1);",
      "occurrences": [
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 62
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 93
        }
      ]
    },
    {
      "snippet": "\nconst candidateValues = Object.values(result.candidates)\n.flat()\n.map(c => c.value);\n",
      "occurrences": [
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 98
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 515
        }
      ]
    },
    {
      "snippet": ");\n\nconst config: ExtractionConfig = {\nsourceMissionPath: testMissionDir,\nauthor: 'test@example.com',",
      "occurrences": [
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 163
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 193
        }
      ]
    },
    {
      "snippet": "author: 'test@example.com'\n};\n\nconst extractor = new TemplateExtractor(config);\nconst stage1Result = await extractor.identifyCandidates(testMissionDir);",
      "occurrences": [
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 244
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 266
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 315
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 345
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 377
        }
      ]
    },
    {
      "snippet": "};\n\nconst extractor = new TemplateExtractor(config);\nconst stage1Result = await extractor.identifyCandidates(testMissionDir);\nconst stage2Result = await extractor.generateTemplate(stage1Result.candida",
      "occurrences": [
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 245
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 267
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 288
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 316
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 346
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 378
        }
      ]
    },
    {
      "snippet": "\nconst extractor = new TemplateExtractor(config);\nconst stage1Result = await extractor.identifyCandidates(testMissionDir);\nconst stage2Result = await extractor.generateTemplate(stage1Result.candidates",
      "occurrences": [
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 246
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 268
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 289
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 317
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 347
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 379
        }
      ]
    },
    {
      "snippet": "const extractor = new TemplateExtractor(config);\nconst stage1Result = await extractor.identifyCandidates(testMissionDir);\nconst stage2Result = await extractor.generateTemplate(stage1Result.candidates)",
      "occurrences": [
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 318
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 380
        }
      ]
    },
    {
      "snippet": "fs.writeFileSync(\npath.join(testMissionDir, 'app.js'),\n'const express = require(\"express\");\\nconst app = express();\\napp.listen(3000);'\n);\n",
      "occurrences": [
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 403
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 118
        }
      ]
    },
    {
      "snippet": "author: 'test@example.com'\n};\n\nconst extractor = new TemplateExtractor(config);\nconst result = await extractor.extract();",
      "occurrences": [
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 410
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 426
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 446
        }
      ]
    },
    {
      "snippet": "};\n\nconst extractor = new TemplateExtractor(config);\nconst result = await extractor.extract();\n",
      "occurrences": [
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 411
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 427
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 447
        }
      ]
    },
    {
      "snippet": "\nconst extractor = new TemplateExtractor(config);\nconst result = await extractor.extract();\n\nexpect(result.success).toBe(true);",
      "occurrences": [
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 412
        },
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 448
        }
      ]
    },
    {
      "snippet": "\nexpect(result.success).toBe(false);\nexpect(result.errors).toBeDefined();\nexpect(result.errors!.length).toBeGreaterThan(0);\n});",
      "occurrences": [
        {
          "path": "tests/extraction/template-extractor.test.ts",
          "line": 431
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 389
        }
      ]
    },
    {
      "snippet": "});\n\n// Helper to create a valid template\nfunction createValidTemplate(): MissionTemplate {\nreturn {",
      "occurrences": [
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 25
        },
        {
          "path": "tests/import-export/template-exporter.test.ts",
          "line": 38
        }
      ]
    },
    {
      "snippet": "\n// Helper to create a valid template\nfunction createValidTemplate(): MissionTemplate {\nreturn {\napiVersion: 'mission-template.v1',",
      "occurrences": [
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 26
        },
        {
          "path": "tests/import-export/template-exporter.test.ts",
          "line": 39
        }
      ]
    },
    {
      "snippet": "// Helper to create a valid template\nfunction createValidTemplate(): MissionTemplate {\nreturn {\napiVersion: 'mission-template.v1',\nkind: 'MissionTemplate',",
      "occurrences": [
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 27
        },
        {
          "path": "tests/import-export/template-exporter.test.ts",
          "line": 40
        }
      ]
    },
    {
      "snippet": "function createValidTemplate(): MissionTemplate {\nreturn {\napiVersion: 'mission-template.v1',\nkind: 'MissionTemplate',\nmetadata: {",
      "occurrences": [
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 28
        },
        {
          "path": "tests/import-export/template-exporter.test.ts",
          "line": 41
        }
      ]
    },
    {
      "snippet": "version: '1.0.0',\nauthor: 'test@example.com',\nsignature: {\nkeyId: 'test-key-123',\nalgorithm: 'RS256',",
      "occurrences": [
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 34
        },
        {
          "path": "tests/import-export/template-exporter.test.ts",
          "line": 47
        }
      ]
    },
    {
      "snippet": "phases: [\n{\nname: 'Phase 1',\nsteps: [\n{",
      "occurrences": [
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 44
        },
        {
          "path": "tests/import-export/template-exporter.test.ts",
          "line": 57
        }
      ]
    },
    {
      "snippet": "{\nname: 'Phase 1',\nsteps: [\n{\naction: 'test-action',",
      "occurrences": [
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 45
        },
        {
          "path": "tests/import-export/template-exporter.test.ts",
          "line": 58
        }
      ]
    },
    {
      "snippet": "},\n],\n},\n],\n},",
      "occurrences": [
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 51
        },
        {
          "path": "tests/import-export/template-exporter.test.ts",
          "line": 64
        }
      ]
    },
    {
      "snippet": "],\n},\n],\n},\n};",
      "occurrences": [
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 52
        },
        {
          "path": "tests/import-export/template-exporter.test.ts",
          "line": 65
        }
      ]
    },
    {
      "snippet": "},\n],\n},\n};\n}",
      "occurrences": [
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 53
        },
        {
          "path": "tests/import-export/template-exporter.test.ts",
          "line": 66
        }
      ]
    },
    {
      "snippet": "],\n},\n};\n}\n",
      "occurrences": [
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 54
        },
        {
          "path": "tests/import-export/template-exporter.test.ts",
          "line": 67
        }
      ]
    },
    {
      "snippet": "SecurityValidator.registerTrustedKey({\nkeyId: 'test-key-123',\nalgorithm: 'RS256',\npublicKey: 'public-key-data',\nowner: 'Test Team',",
      "occurrences": [
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 71
        },
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 102
        },
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 127
        },
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 227
        },
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 391
        },
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 129
        },
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 310
        }
      ]
    },
    {
      "snippet": "keyId: 'test-key-123',\nalgorithm: 'RS256',\npublicKey: 'public-key-data',\nowner: 'Test Team',\ntrustLevel: 'verified-internal',",
      "occurrences": [
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 72
        },
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 103
        },
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 128
        },
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 228
        },
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 392
        },
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 130
        },
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 311
        }
      ]
    },
    {
      "snippet": "algorithm: 'RS256',\npublicKey: 'public-key-data',\nowner: 'Test Team',\ntrustLevel: 'verified-internal',\n});",
      "occurrences": [
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 73
        },
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 104
        },
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 129
        },
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 229
        },
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 393
        },
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 131
        },
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 312
        }
      ]
    },
    {
      "snippet": "publicKey: 'public-key-data',\nowner: 'Test Team',\ntrustLevel: 'verified-internal',\n});\n",
      "occurrences": [
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 74
        },
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 105
        },
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 394
        },
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 132
        },
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 313
        }
      ]
    },
    {
      "snippet": "owner: 'Test Team',\ntrustLevel: 'verified-internal',\n});\n\nconst template = createValidTemplate();",
      "occurrences": [
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 75
        },
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 106
        }
      ]
    },
    {
      "snippet": "const result = await validator.validate(template, false);\n\nconst signatureLayer = result.layers.find((l) =>\nl.layer.includes('Signature')\n);",
      "occurrences": [
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 80
        },
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 114
        }
      ]
    },
    {
      "snippet": "\nconst signatureLayer = result.layers.find((l) =>\nl.layer.includes('Signature')\n);\nexpect(signatureLayer?.passed).toBe(true);",
      "occurrences": [
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 81
        },
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 92
        }
      ]
    },
    {
      "snippet": "publicKey: 'public-key-data',\nowner: 'Test Team',\ntrustLevel: 'verified-internal',\n});\n});",
      "occurrences": [
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 130
        },
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 230
        }
      ]
    },
    {
      "snippet": "owner: 'Test Team',\ntrustLevel: 'verified-internal',\n});\n});\n",
      "occurrences": [
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 131
        },
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 231
        }
      ]
    },
    {
      "snippet": "};\n\nconst result = await validator.validate(template, true);\n\nexpect(result.valid).toBe(false);",
      "occurrences": [
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 160
        },
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 172
        }
      ]
    },
    {
      "snippet": "const validatorWithAllowlist = new SecurityValidator({\nurlAllowlist: ['trusted.example.com'],\n});\n\nconst template = createValidTemplate();",
      "occurrences": [
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 267
        },
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 288
        }
      ]
    },
    {
      "snippet": "urlAllowlist: ['trusted.example.com'],\n});\n\nconst template = createValidTemplate();\ntemplate.dependencies = [",
      "occurrences": [
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 268
        },
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 289
        }
      ]
    },
    {
      "snippet": "});\n\nconst template = createValidTemplate();\ntemplate.dependencies = [\n{",
      "occurrences": [
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 269
        },
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 290
        },
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 311
        }
      ]
    },
    {
      "snippet": "},\n];\n\nconst result = await validatorWithAllowlist.validate(template, true);\n",
      "occurrences": [
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 278
        },
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 299
        }
      ]
    },
    {
      "snippet": "version: '1.0.0',\nchecksum: 'sha256:' + 'a'.repeat(64),\n},\n];\n",
      "occurrences": [
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 297
        },
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 318
        },
        {
          "path": "tests/import-export/template-exporter.test.ts",
          "line": 371
        }
      ]
    },
    {
      "snippet": "\nconst depLayer = result.layers.find((l) => l.layer.includes('Dependency'));\nexpect(depLayer?.passed).toBe(true);\n});\n",
      "occurrences": [
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 303
        },
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 324
        }
      ]
    },
    {
      "snippet": "const template = createValidTemplate();\ntemplate.dependencies = [\n{\nname: 'dep',\nsourceUrl: 'file:///local/dep.yaml',",
      "occurrences": [
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 330
        },
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 349
        }
      ]
    },
    {
      "snippet": "},\n];\n\nconst result = await validator.validate(template, true);\n",
      "occurrences": [
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 337
        },
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 356
        }
      ]
    },
    {
      "snippet": "];\n\nconst result = await validator.validate(template, true);\n\nexpect(result.valid).toBe(false);",
      "occurrences": [
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 338
        },
        {
          "path": "tests/import-export/security-validator.test.ts",
          "line": 357
        }
      ]
    },
    {
      "snippet": "\nbeforeAll(() => {\n// Create test directory\nif (!fs.existsSync(testDir)) {\nfs.mkdirSync(testDir, { recursive: true });",
      "occurrences": [
        {
          "path": "tests/import-export/template-exporter.test.ts",
          "line": 20
        },
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 18
        }
      ]
    },
    {
      "snippet": "beforeAll(() => {\n// Create test directory\nif (!fs.existsSync(testDir)) {\nfs.mkdirSync(testDir, { recursive: true });\n}",
      "occurrences": [
        {
          "path": "tests/import-export/template-exporter.test.ts",
          "line": 21
        },
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 19
        }
      ]
    },
    {
      "snippet": "// Create test directory\nif (!fs.existsSync(testDir)) {\nfs.mkdirSync(testDir, { recursive: true });\n}\n});",
      "occurrences": [
        {
          "path": "tests/import-export/template-exporter.test.ts",
          "line": 22
        },
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 20
        }
      ]
    },
    {
      "snippet": "if (!fs.existsSync(testDir)) {\nfs.mkdirSync(testDir, { recursive: true });\n}\n});\n",
      "occurrences": [
        {
          "path": "tests/import-export/template-exporter.test.ts",
          "line": 23
        },
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 21
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 24
        }
      ]
    },
    {
      "snippet": "fs.mkdirSync(testDir, { recursive: true });\n}\n});\n\nbeforeEach(() => {",
      "occurrences": [
        {
          "path": "tests/import-export/template-exporter.test.ts",
          "line": 24
        },
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 22
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 25
        }
      ]
    },
    {
      "snippet": "});\n\nafterAll(() => {\n// Clean up test directory\nif (fs.existsSync(testDir)) {",
      "occurrences": [
        {
          "path": "tests/import-export/template-exporter.test.ts",
          "line": 31
        },
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 32
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 32
        }
      ]
    },
    {
      "snippet": "\nafterAll(() => {\n// Clean up test directory\nif (fs.existsSync(testDir)) {\nfs.rmSync(testDir, { recursive: true, force: true });",
      "occurrences": [
        {
          "path": "tests/import-export/template-exporter.test.ts",
          "line": 32
        },
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 33
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 33
        }
      ]
    },
    {
      "snippet": "afterAll(() => {\n// Clean up test directory\nif (fs.existsSync(testDir)) {\nfs.rmSync(testDir, { recursive: true, force: true });\n}",
      "occurrences": [
        {
          "path": "tests/import-export/template-exporter.test.ts",
          "line": 33
        },
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 34
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 34
        }
      ]
    },
    {
      "snippet": "// Clean up test directory\nif (fs.existsSync(testDir)) {\nfs.rmSync(testDir, { recursive: true, force: true });\n}\n});",
      "occurrences": [
        {
          "path": "tests/import-export/template-exporter.test.ts",
          "line": 34
        },
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 35
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 35
        }
      ]
    },
    {
      "snippet": "if (fs.existsSync(testDir)) {\nfs.rmSync(testDir, { recursive: true, force: true });\n}\n});\n",
      "occurrences": [
        {
          "path": "tests/import-export/template-exporter.test.ts",
          "line": 35
        },
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 36
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 36
        }
      ]
    },
    {
      "snippet": "\nexpect(parsed.apiVersion).toBe('mission-template.v1');\nexpect(parsed.metadata.name).toBe('export-test');\n});\n",
      "occurrences": [
        {
          "path": "tests/import-export/template-exporter.test.ts",
          "line": 89
        },
        {
          "path": "tests/import-export/template-exporter.test.ts",
          "line": 160
        }
      ]
    },
    {
      "snippet": "version: '0.1.0',\nauthor: 'tests',\nsignature: {\nkeyId: 'test',\nalgorithm: 'sha256',",
      "occurrences": [
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 13
        },
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 76
        }
      ]
    },
    {
      "snippet": "author: 'tests',\nsignature: {\nkeyId: 'test',\nalgorithm: 'sha256',\nvalue: 'fake',",
      "occurrences": [
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 14
        },
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 77
        }
      ]
    },
    {
      "snippet": "signature: {\nkeyId: 'test',\nalgorithm: 'sha256',\nvalue: 'fake',\n},",
      "occurrences": [
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 15
        },
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 78
        }
      ]
    },
    {
      "snippet": "keyId: 'test',\nalgorithm: 'sha256',\nvalue: 'fake',\n},\n},",
      "occurrences": [
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 16
        },
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 79
        }
      ]
    },
    {
      "snippet": "algorithm: 'sha256',\nvalue: 'fake',\n},\n},\nspec: {},",
      "occurrences": [
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 17
        },
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 80
        }
      ]
    },
    {
      "snippet": "};\n\nconst loaderMock = {\nload: jest.fn(() => template),\nsanitizePath: jest.fn((value: string) => value),",
      "occurrences": [
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 22
        },
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 93
        }
      ]
    },
    {
      "snippet": "\nconst loaderMock = {\nload: jest.fn(() => template),\nsanitizePath: jest.fn((value: string) => value),\n};",
      "occurrences": [
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 23
        },
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 94
        }
      ]
    },
    {
      "snippet": "const loaderMock = {\nload: jest.fn(() => template),\nsanitizePath: jest.fn((value: string) => value),\n};\n",
      "occurrences": [
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 24
        },
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 95
        }
      ]
    },
    {
      "snippet": "load: jest.fn(() => template),\nsanitizePath: jest.fn((value: string) => value),\n};\n\nconst validatorMock = {",
      "occurrences": [
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 25
        },
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 96
        }
      ]
    },
    {
      "snippet": "sanitizePath: jest.fn((value: string) => value),\n};\n\nconst validatorMock = {\nvalidate: jest.fn(async () => ({",
      "occurrences": [
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 26
        },
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 97
        }
      ]
    },
    {
      "snippet": "})),\n};\n\nlet TemplateImporter: any;\n",
      "occurrences": [
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 37
        },
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 108
        }
      ]
    },
    {
      "snippet": "};\n\nlet TemplateImporter: any;\n\njest.isolateModules(() => {",
      "occurrences": [
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 38
        },
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 109
        }
      ]
    },
    {
      "snippet": "\nlet TemplateImporter: any;\n\njest.isolateModules(() => {\njest.doMock('../../src/loaders/yaml-loader', () => ({",
      "occurrences": [
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 39
        },
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 110
        }
      ]
    },
    {
      "snippet": "let TemplateImporter: any;\n\njest.isolateModules(() => {\njest.doMock('../../src/loaders/yaml-loader', () => ({\nSecureYAMLLoader: jest.fn(() => loaderMock),",
      "occurrences": [
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 40
        },
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 111
        }
      ]
    },
    {
      "snippet": "\njest.isolateModules(() => {\njest.doMock('../../src/loaders/yaml-loader', () => ({\nSecureYAMLLoader: jest.fn(() => loaderMock),\n}));",
      "occurrences": [
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 41
        },
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 112
        }
      ]
    },
    {
      "snippet": "jest.isolateModules(() => {\njest.doMock('../../src/loaders/yaml-loader', () => ({\nSecureYAMLLoader: jest.fn(() => loaderMock),\n}));\n",
      "occurrences": [
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 42
        },
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 113
        }
      ]
    },
    {
      "snippet": "jest.doMock('../../src/loaders/yaml-loader', () => ({\nSecureYAMLLoader: jest.fn(() => loaderMock),\n}));\n\nclass MockSecurityValidator {",
      "occurrences": [
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 43
        },
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 114
        }
      ]
    },
    {
      "snippet": "SecureYAMLLoader: jest.fn(() => loaderMock),\n}));\n\nclass MockSecurityValidator {\nstatic getSchema = jest.fn(() => ({}));",
      "occurrences": [
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 44
        },
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 115
        }
      ]
    },
    {
      "snippet": "}));\n\nclass MockSecurityValidator {\nstatic getSchema = jest.fn(() => ({}));\nconstructor() {}",
      "occurrences": [
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 45
        },
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 116
        }
      ]
    },
    {
      "snippet": "\nclass MockSecurityValidator {\nstatic getSchema = jest.fn(() => ({}));\nconstructor() {}\nvalidate = validatorMock.validate;",
      "occurrences": [
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 46
        },
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 117
        }
      ]
    },
    {
      "snippet": "class MockSecurityValidator {\nstatic getSchema = jest.fn(() => ({}));\nconstructor() {}\nvalidate = validatorMock.validate;\n}",
      "occurrences": [
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 47
        },
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 118
        }
      ]
    },
    {
      "snippet": "static getSchema = jest.fn(() => ({}));\nconstructor() {}\nvalidate = validatorMock.validate;\n}\n",
      "occurrences": [
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 48
        },
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 119
        }
      ]
    },
    {
      "snippet": "constructor() {}\nvalidate = validatorMock.validate;\n}\n\njest.doMock('../../src/import-export/security-validator', () => ({",
      "occurrences": [
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 49
        },
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 120
        }
      ]
    },
    {
      "snippet": "validate = validatorMock.validate;\n}\n\njest.doMock('../../src/import-export/security-validator', () => ({\nSecurityValidator: MockSecurityValidator,",
      "occurrences": [
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 50
        },
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 121
        }
      ]
    },
    {
      "snippet": "}\n\njest.doMock('../../src/import-export/security-validator', () => ({\nSecurityValidator: MockSecurityValidator,\nSecurityValidationError: class {},",
      "occurrences": [
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 51
        },
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 122
        }
      ]
    },
    {
      "snippet": "\njest.doMock('../../src/import-export/security-validator', () => ({\nSecurityValidator: MockSecurityValidator,\nSecurityValidationError: class {},\nImportExportError: class extends Error {},",
      "occurrences": [
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 52
        },
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 123
        }
      ]
    },
    {
      "snippet": "default: MockSecurityValidator,\n}));\n\nTemplateImporter = require('../../src/import-export/template-importer').TemplateImporter;\n});",
      "occurrences": [
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 58
        },
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 129
        }
      ]
    },
    {
      "snippet": "}));\n\nTemplateImporter = require('../../src/import-export/template-importer').TemplateImporter;\n});\n",
      "occurrences": [
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 59
        },
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 130
        }
      ]
    },
    {
      "snippet": "\nTemplateImporter = require('../../src/import-export/template-importer').TemplateImporter;\n});\n\nconst importer = new TemplateImporter(BASE_DIR);",
      "occurrences": [
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 60
        },
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 131
        }
      ]
    },
    {
      "snippet": "TemplateImporter = require('../../src/import-export/template-importer').TemplateImporter;\n});\n\nconst importer = new TemplateImporter(BASE_DIR);\n",
      "occurrences": [
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 61
        },
        {
          "path": "tests/import-export/template-importer.coverage.test.ts",
          "line": 132
        }
      ]
    },
    {
      "snippet": "version: \"1.0.0\"\nauthor: \"test@example.com\"\nsignature:\nkeyId: \"test-key-123\"\nalgorithm: \"RS256\"",
      "occurrences": [
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 53
        },
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 177
        },
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 205
        },
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 242
        }
      ]
    },
    {
      "snippet": "signature:\nkeyId: \"test-key-123\"\nalgorithm: \"RS256\"\nvalue: \"signature\"\n",
      "occurrences": [
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 155
        },
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 179
        },
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 207
        },
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 244
        }
      ]
    },
    {
      "snippet": "keyId: \"test-key-123\"\nalgorithm: \"RS256\"\nvalue: \"signature\"\n\nspec:",
      "occurrences": [
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 156
        },
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 180
        },
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 208
        },
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 245
        }
      ]
    },
    {
      "snippet": "author: \"test@example.com\"\nsignature:\nkeyId: \"test-key-123\"\nalgorithm: \"RS256\"\nvalue: \"signature\"",
      "occurrences": [
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 178
        },
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 206
        },
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 243
        }
      ]
    },
    {
      "snippet": "kind: \"MissionTemplate\"\n\nmetadata:\nname: \"template-with-deps\"\nversion: \"1.0.0\"",
      "occurrences": [
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 201
        },
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 238
        }
      ]
    },
    {
      "snippet": "\nmetadata:\nname: \"template-with-deps\"\nversion: \"1.0.0\"\nauthor: \"test@example.com\"",
      "occurrences": [
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 202
        },
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 239
        }
      ]
    },
    {
      "snippet": "metadata:\nname: \"template-with-deps\"\nversion: \"1.0.0\"\nauthor: \"test@example.com\"\nsignature:",
      "occurrences": [
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 203
        },
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 240
        }
      ]
    },
    {
      "snippet": "name: \"template-with-deps\"\nversion: \"1.0.0\"\nauthor: \"test@example.com\"\nsignature:\nkeyId: \"test-key-123\"",
      "occurrences": [
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 204
        },
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 241
        }
      ]
    },
    {
      "snippet": "algorithm: \"RS256\"\nvalue: \"signature\"\n\nspec:\ndescription: \"Template with dependencies\"",
      "occurrences": [
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 209
        },
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 246
        }
      ]
    },
    {
      "snippet": "value: \"signature\"\n\nspec:\ndescription: \"Template with dependencies\"\n",
      "occurrences": [
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 210
        },
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 247
        }
      ]
    },
    {
      "snippet": "\nspec:\ndescription: \"Template with dependencies\"\n\ndependencies:",
      "occurrences": [
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 211
        },
        {
          "path": "tests/import-export/template-importer.test.ts",
          "line": 248
        }
      ]
    },
    {
      "snippet": "import { SecureYAMLLoader } from '../../src/loaders/yaml-loader';\nimport { RegistryParser } from '../../src/registry/registry-parser';\nimport { ListDomainsToolImpl } from '../../src/tools/list-domains",
      "occurrences": [
        {
          "path": "tests/integration/full-flow.test.ts",
          "line": 2
        },
        {
          "path": "tests/integration/mcp-server.test.ts",
          "line": 14
        }
      ]
    },
    {
      "snippet": "import * as fs from 'fs';\nimport * as YAML from 'yaml';\nimport { SecureYAMLLoader } from '../../src/loaders/yaml-loader';\nimport { RegistryParser } from '../../src/registry/registry-parser';\nimport { ",
      "occurrences": [
        {
          "path": "tests/integration/phase2-flow.test.ts",
          "line": 10
        },
        {
          "path": "tests/tools/create-mission.coverage.test.ts",
          "line": 8
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 16
        }
      ]
    },
    {
      "snippet": "import * as YAML from 'yaml';\nimport { SecureYAMLLoader } from '../../src/loaders/yaml-loader';\nimport { RegistryParser } from '../../src/registry/registry-parser';\nimport { DomainPackLoader } from '.",
      "occurrences": [
        {
          "path": "tests/integration/phase2-flow.test.ts",
          "line": 11
        },
        {
          "path": "tests/tools/create-mission.coverage.test.ts",
          "line": 9
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 17
        }
      ]
    },
    {
      "snippet": "import { SecureYAMLLoader } from '../../src/loaders/yaml-loader';\nimport { RegistryParser } from '../../src/registry/registry-parser';\nimport { DomainPackLoader } from '../../src/domains/domain-pack-l",
      "occurrences": [
        {
          "path": "tests/integration/phase2-flow.test.ts",
          "line": 12
        },
        {
          "path": "tests/smoke/template-assets-smoke.test.ts",
          "line": 12
        },
        {
          "path": "tests/tools/create-mission.coverage.test.ts",
          "line": 10
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 18
        }
      ]
    },
    {
      "snippet": "import { RegistryParser } from '../../src/registry/registry-parser';\nimport { DomainPackLoader } from '../../src/domains/domain-pack-loader';\nimport { MissionMerger } from '../../src/merge/deep-merge'",
      "occurrences": [
        {
          "path": "tests/integration/phase2-flow.test.ts",
          "line": 13
        },
        {
          "path": "tests/smoke/template-assets-smoke.test.ts",
          "line": 13
        }
      ]
    },
    {
      "snippet": "\nconst mission1 = YAML.parse(result1) as GenericMission;\nconst mission2 = YAML.parse(result2) as GenericMission;\n\nexpect(mission1.missionId).not.toBe(mission2.missionId);",
      "occurrences": [
        {
          "path": "tests/integration/phase2-flow.test.ts",
          "line": 115
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 157
        }
      ]
    },
    {
      "snippet": "},\nentries\n);\n\nconst mission = YAML.parse(result) as GenericMission;",
      "occurrences": [
        {
          "path": "tests/integration/phase2-flow.test.ts",
          "line": 145
        },
        {
          "path": "tests/integration/phase2-flow.test.ts",
          "line": 196
        },
        {
          "path": "tests/integration/phase2-flow.test.ts",
          "line": 288
        },
        {
          "path": "tests/integration/phase2-flow.test.ts",
          "line": 315
        }
      ]
    },
    {
      "snippet": "entries\n);\n\nconst mission = YAML.parse(result) as GenericMission;\n",
      "occurrences": [
        {
          "path": "tests/integration/phase2-flow.test.ts",
          "line": 146
        },
        {
          "path": "tests/integration/phase2-flow.test.ts",
          "line": 197
        },
        {
          "path": "tests/integration/phase2-flow.test.ts",
          "line": 289
        },
        {
          "path": "tests/integration/phase2-flow.test.ts",
          "line": 316
        }
      ]
    },
    {
      "snippet": ");\n\nconst mission = YAML.parse(result) as GenericMission;\n\n// Verify core fields",
      "occurrences": [
        {
          "path": "tests/integration/phase2-flow.test.ts",
          "line": 147
        },
        {
          "path": "tests/integration/phase2-flow.test.ts",
          "line": 198
        }
      ]
    },
    {
      "snippet": "expect(() => {\nconst pack = packLoader.loadPack(entry.name, entries);\nexpect(pack).toBeDefined();\nexpect(pack.manifest).toBeDefined();\nexpect(pack.schema).toBeDefined();",
      "occurrences": [
        {
          "path": "tests/integration/phase2-flow.test.ts",
          "line": 268
        },
        {
          "path": "tests/integration/template-runtime-store.test.ts",
          "line": 97
        }
      ]
    },
    {
      "snippet": "const pack = packLoader.loadPack(entry.name, entries);\nexpect(pack).toBeDefined();\nexpect(pack.manifest).toBeDefined();\nexpect(pack.schema).toBeDefined();\nexpect(pack.template).toBeDefined();",
      "occurrences": [
        {
          "path": "tests/integration/phase2-flow.test.ts",
          "line": 269
        },
        {
          "path": "tests/integration/template-runtime-store.test.ts",
          "line": 98
        }
      ]
    },
    {
      "snippet": "expect(pack).toBeDefined();\nexpect(pack.manifest).toBeDefined();\nexpect(pack.schema).toBeDefined();\nexpect(pack.template).toBeDefined();\n}).not.toThrow();",
      "occurrences": [
        {
          "path": "tests/integration/phase2-flow.test.ts",
          "line": 270
        },
        {
          "path": "tests/integration/template-runtime-store.test.ts",
          "line": 99
        }
      ]
    },
    {
      "snippet": "const entries = registry.loadRegistry('registry.yaml');\n\nexpect(() => {\ncreateMissionTool.execute(\n{",
      "occurrences": [
        {
          "path": "tests/integration/phase2-flow.test.ts",
          "line": 334
        },
        {
          "path": "tests/integration/phase2-flow.test.ts",
          "line": 359
        }
      ]
    },
    {
      "snippet": "const initialQuality = await scoreQuality({\nmissionFile: missionPath,\nverbose: true,\n});\n",
      "occurrences": [
        {
          "path": "tests/integration/phase4-intelligence-flow.test.ts",
          "line": 57
        },
        {
          "path": "tests/integration/phase4-intelligence-flow.test.ts",
          "line": 466
        }
      ]
    },
    {
      "snippet": "missionFile: missionPath,\nverbose: true,\n});\n\nexpect(initialQuality.success).toBe(true);",
      "occurrences": [
        {
          "path": "tests/integration/phase4-intelligence-flow.test.ts",
          "line": 58
        },
        {
          "path": "tests/integration/phase4-intelligence-flow.test.ts",
          "line": 467
        }
      ]
    },
    {
      "snippet": "missionFile: missionPath,\ntargetModel: 'claude',\ncompressionLevel: 'balanced',\ndryRun: false,\n});",
      "occurrences": [
        {
          "path": "tests/integration/phase4-intelligence-flow.test.ts",
          "line": 68
        },
        {
          "path": "tests/integration/phase4-intelligence-flow.test.ts",
          "line": 276
        },
        {
          "path": "tests/integration/phase4-intelligence-flow.test.ts",
          "line": 476
        }
      ]
    },
    {
      "snippet": "targetModel: 'claude',\ncompressionLevel: 'balanced',\ndryRun: false,\n});\n",
      "occurrences": [
        {
          "path": "tests/integration/phase4-intelligence-flow.test.ts",
          "line": 69
        },
        {
          "path": "tests/integration/phase4-intelligence-flow.test.ts",
          "line": 277
        },
        {
          "path": "tests/integration/phase4-intelligence-flow.test.ts",
          "line": 477
        }
      ]
    },
    {
      "snippet": "\n// Cleanup\nfs.unlinkSync(missionPath);\n});\n});",
      "occurrences": [
        {
          "path": "tests/integration/phase4-intelligence-flow.test.ts",
          "line": 83
        },
        {
          "path": "tests/integration/phase4-intelligence-flow.test.ts",
          "line": 173
        },
        {
          "path": "tests/integration/phase4-intelligence-flow.test.ts",
          "line": 332
        },
        {
          "path": "tests/integration/phase4-intelligence-flow.test.ts",
          "line": 390
        },
        {
          "path": "tests/integration/phase4-intelligence-flow.test.ts",
          "line": 499
        }
      ]
    },
    {
      "snippet": "// Cleanup\nfs.unlinkSync(missionPath);\n});\n});\n",
      "occurrences": [
        {
          "path": "tests/integration/phase4-intelligence-flow.test.ts",
          "line": 84
        },
        {
          "path": "tests/integration/phase4-intelligence-flow.test.ts",
          "line": 174
        },
        {
          "path": "tests/integration/phase4-intelligence-flow.test.ts",
          "line": 333
        },
        {
          "path": "tests/integration/phase4-intelligence-flow.test.ts",
          "line": 391
        },
        {
          "path": "tests/integration/phase4-intelligence-flow.test.ts",
          "line": 500
        }
      ]
    },
    {
      "snippet": "\n// Cleanup\nfs.unlinkSync(missionPath);\n});\n",
      "occurrences": [
        {
          "path": "tests/integration/phase4-intelligence-flow.test.ts",
          "line": 130
        },
        {
          "path": "tests/integration/phase4-intelligence-flow.test.ts",
          "line": 295
        },
        {
          "path": "tests/integration/phase4-intelligence-flow.test.ts",
          "line": 360
        }
      ]
    },
    {
      "snippet": "missionFile: missionPath,\ntargetModel: 'claude',\ncompressionLevel: 'balanced',\ndryRun: true,\n});",
      "occurrences": [
        {
          "path": "tests/integration/phase4-intelligence-flow.test.ts",
          "line": 318
        },
        {
          "path": "tests/integration/phase4-intelligence-flow.test.ts",
          "line": 381
        }
      ]
    },
    {
      "snippet": "});\n\nexpect(result.success).toBe(false);\nexpect(result.error).toBeDefined();\n});",
      "occurrences": [
        {
          "path": "tests/integration/phase4-intelligence-flow.test.ts",
          "line": 418
        },
        {
          "path": "tests/integration/quality-scoring.test.ts",
          "line": 60
        }
      ]
    },
    {
      "snippet": "let scorer: QualityScorer;\n\nbeforeEach(() => {\nscorer = new QualityScorer();\n});",
      "occurrences": [
        {
          "path": "tests/integration/quality-scoring.test.ts",
          "line": 12
        },
        {
          "path": "tests/quality/quality-scorer.test.ts",
          "line": 9
        }
      ]
    },
    {
      "snippet": "\nbeforeEach(() => {\nscorer = new QualityScorer();\n});\n",
      "occurrences": [
        {
          "path": "tests/integration/quality-scoring.test.ts",
          "line": 13
        },
        {
          "path": "tests/quality/quality-scorer.test.ts",
          "line": 10
        }
      ]
    },
    {
      "snippet": "if (!fs.existsSync(missionFile)) {\nconsole.warn('Skipping test: current.yaml not found');\nreturn;\n}\n",
      "occurrences": [
        {
          "path": "tests/integration/quality-scoring.test.ts",
          "line": 23
        },
        {
          "path": "tests/integration/quality-scoring.test.ts",
          "line": 43
        }
      ]
    },
    {
      "snippet": "console.warn('Skipping test: current.yaml not found');\nreturn;\n}\n\nconst result = await scoreQuality({ missionFile, verbose: true });",
      "occurrences": [
        {
          "path": "tests/integration/quality-scoring.test.ts",
          "line": 24
        },
        {
          "path": "tests/integration/quality-scoring.test.ts",
          "line": 44
        }
      ]
    },
    {
      "snippet": "return;\n}\n\nconst result = await scoreQuality({ missionFile, verbose: true });\n",
      "occurrences": [
        {
          "path": "tests/integration/quality-scoring.test.ts",
          "line": 25
        },
        {
          "path": "tests/integration/quality-scoring.test.ts",
          "line": 45
        }
      ]
    },
    {
      "snippet": "}\n\nconst result = await scoreQuality({ missionFile, verbose: true });\n\nexpect(result.success).toBe(true);",
      "occurrences": [
        {
          "path": "tests/integration/quality-scoring.test.ts",
          "line": 26
        },
        {
          "path": "tests/integration/quality-scoring.test.ts",
          "line": 46
        }
      ]
    },
    {
      "snippet": "\nexpect(result.success).toBe(false);\nexpect(result.error).toBeDefined();\n});\n});",
      "occurrences": [
        {
          "path": "tests/integration/quality-scoring.test.ts",
          "line": 61
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 411
        }
      ]
    },
    {
      "snippet": "expect(result.success).toBe(false);\nexpect(result.error).toBeDefined();\n});\n});\n",
      "occurrences": [
        {
          "path": "tests/integration/quality-scoring.test.ts",
          "line": 62
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 412
        }
      ]
    },
    {
      "snippet": "]\n}\n};\n\nconst result = await scorer.score(mission, mission.missionId);",
      "occurrences": [
        {
          "path": "tests/integration/quality-scoring.test.ts",
          "line": 88
        },
        {
          "path": "tests/integration/quality-scoring.test.ts",
          "line": 126
        }
      ]
    },
    {
      "snippet": "}\n};\n\nconst result = await scorer.score(mission, mission.missionId);\n",
      "occurrences": [
        {
          "path": "tests/integration/quality-scoring.test.ts",
          "line": 89
        },
        {
          "path": "tests/integration/quality-scoring.test.ts",
          "line": 127
        },
        {
          "path": "tests/quality/quality-scorer.test.ts",
          "line": 34
        }
      ]
    },
    {
      "snippet": "context: 'This mission implements the findings from Technical Research mission R4.4. The system will assess missions on Clarity, Completeness, and AI-Readiness dimensions. The scope includes multiple ",
      "occurrences": [
        {
          "path": "tests/integration/quality-scoring.test.ts",
          "line": 103
        },
        {
          "path": "tests/quality/quality-scorer.test.ts",
          "line": 20
        }
      ]
    },
    {
      "snippet": "};\n\nconst result = await scorer.score(mission);\n\nexpect(result.suggestions.length).toBeGreaterThan(0);",
      "occurrences": [
        {
          "path": "tests/integration/quality-scoring.test.ts",
          "line": 231
        },
        {
          "path": "tests/quality/quality-scorer.test.ts",
          "line": 81
        }
      ]
    },
    {
      "snippet": "\nconst result = await scorer.score(mission);\n\nexpect(result.suggestions.length).toBeGreaterThan(0);\n",
      "occurrences": [
        {
          "path": "tests/integration/quality-scoring.test.ts",
          "line": 232
        },
        {
          "path": "tests/quality/quality-scorer.test.ts",
          "line": 82
        }
      ]
    },
    {
      "snippet": "estimatedCost: 0,\n};\n}\n}\n",
      "occurrences": [
        {
          "path": "tests/intelligence/complexity-scorer.test.ts",
          "line": 22
        },
        {
          "path": "tests/intelligence/mission-splitter.test.ts",
          "line": 21
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 24
        }
      ]
    },
    {
      "snippet": "domainFields: {},\n};\n\nconst analysis = await scorer.calculateCCS(mission);\n",
      "occurrences": [
        {
          "path": "tests/intelligence/complexity-scorer.test.ts",
          "line": 50
        },
        {
          "path": "tests/intelligence/complexity-scorer.test.ts",
          "line": 148
        },
        {
          "path": "tests/intelligence/complexity-scorer.test.ts",
          "line": 202
        },
        {
          "path": "tests/intelligence/complexity-scorer.test.ts",
          "line": 355
        },
        {
          "path": "tests/intelligence/complexity-scorer.test.ts",
          "line": 375
        }
      ]
    },
    {
      "snippet": "};\n\nconst analysis = await scorer.calculateCCS(mission);\n\nexpect(analysis).toBeDefined();",
      "occurrences": [
        {
          "path": "tests/intelligence/complexity-scorer.test.ts",
          "line": 51
        },
        {
          "path": "tests/intelligence/complexity-scorer.test.ts",
          "line": 356
        },
        {
          "path": "tests/intelligence/complexity-scorer.test.ts",
          "line": 376
        }
      ]
    },
    {
      "snippet": "\nconst analysis = await scorer.calculateCCS(mission);\n\nexpect(analysis).toBeDefined();\nexpect(analysis.compositeScore).toBeGreaterThanOrEqual(0);",
      "occurrences": [
        {
          "path": "tests/intelligence/complexity-scorer.test.ts",
          "line": 52
        },
        {
          "path": "tests/intelligence/complexity-scorer.test.ts",
          "line": 357
        }
      ]
    },
    {
      "snippet": "'Documentation',\n],\ndomainFields: {},\n};\n",
      "occurrences": [
        {
          "path": "tests/intelligence/complexity-scorer.test.ts",
          "line": 96
        },
        {
          "path": "tests/intelligence/mission-splitter.test.ts",
          "line": 69
        }
      ]
    },
    {
      "snippet": "context: {},\nsuccessCriteria: ['Done'],\ndeliverables: ['Output'],\ndomainFields: {},\n};",
      "occurrences": [
        {
          "path": "tests/intelligence/complexity-scorer.test.ts",
          "line": 199
        },
        {
          "path": "tests/intelligence/complexity-scorer.test.ts",
          "line": 258
        },
        {
          "path": "tests/intelligence/complexity-scorer.test.ts",
          "line": 330
        },
        {
          "path": "tests/intelligence/complexity-scorer.test.ts",
          "line": 352
        },
        {
          "path": "tests/intelligence/mission-splitter.test.ts",
          "line": 224
        },
        {
          "path": "tests/intelligence/mission-splitter.test.ts",
          "line": 468
        },
        {
          "path": "tests/intelligence/mission-splitter.test.ts",
          "line": 485
        }
      ]
    },
    {
      "snippet": "successCriteria: ['Done'],\ndeliverables: ['Output'],\ndomainFields: {},\n};\n",
      "occurrences": [
        {
          "path": "tests/intelligence/complexity-scorer.test.ts",
          "line": 200
        },
        {
          "path": "tests/intelligence/complexity-scorer.test.ts",
          "line": 259
        },
        {
          "path": "tests/intelligence/complexity-scorer.test.ts",
          "line": 331
        },
        {
          "path": "tests/intelligence/complexity-scorer.test.ts",
          "line": 353
        },
        {
          "path": "tests/intelligence/mission-splitter.test.ts",
          "line": 225
        },
        {
          "path": "tests/intelligence/mission-splitter.test.ts",
          "line": 469
        },
        {
          "path": "tests/intelligence/mission-splitter.test.ts",
          "line": 486
        }
      ]
    },
    {
      "snippet": "deliverables: ['Output'],\ndomainFields: {},\n};\n\nconst analysis = await scorer.calculateCCS(mission);",
      "occurrences": [
        {
          "path": "tests/intelligence/complexity-scorer.test.ts",
          "line": 201
        },
        {
          "path": "tests/intelligence/complexity-scorer.test.ts",
          "line": 354
        }
      ]
    },
    {
      "snippet": "objective: 'Simple task',\ncontext: {},\nsuccessCriteria: ['Done'],\ndeliverables: ['Output'],\ndomainFields: {},",
      "occurrences": [
        {
          "path": "tests/intelligence/complexity-scorer.test.ts",
          "line": 257
        },
        {
          "path": "tests/intelligence/mission-splitter.test.ts",
          "line": 223
        }
      ]
    },
    {
      "snippet": "const testScorer = new ComplexityScorer(mockTokenCounter, {\nmodel: 'claude',\ncontextWindow: 200000,\nagentTimeHorizon: 60,\nthresholds: {",
      "occurrences": [
        {
          "path": "tests/intelligence/complexity-scorer.test.ts",
          "line": 272
        },
        {
          "path": "tests/intelligence/complexity-scorer.test.ts",
          "line": 314
        }
      ]
    },
    {
      "snippet": "tokenPercentage: 0.80,\ntimeHorizonMultiplier: 1.5,\n},\n});\n",
      "occurrences": [
        {
          "path": "tests/intelligence/complexity-scorer.test.ts",
          "line": 278
        },
        {
          "path": "tests/intelligence/complexity-scorer.test.ts",
          "line": 320
        }
      ]
    },
    {
      "snippet": "objective: 'Test',\ncontext: {},\nsuccessCriteria: ['Done'],\ndeliverables: ['Output'],\ndomainFields: {},",
      "occurrences": [
        {
          "path": "tests/intelligence/complexity-scorer.test.ts",
          "line": 351
        },
        {
          "path": "tests/intelligence/mission-splitter.test.ts",
          "line": 484
        }
      ]
    },
    {
      "snippet": "successCriteria: ['Complete'],\ndeliverables: ['Result'],\ndomainFields: {},\n};\n",
      "occurrences": [
        {
          "path": "tests/intelligence/complexity-scorer.test.ts",
          "line": 373
        },
        {
          "path": "tests/intelligence/mission-splitter.test.ts",
          "line": 243
        }
      ]
    },
    {
      "snippet": "},\nsuccessCriteria: Array(10).fill('Criterion'),\ndeliverables: Array(10).fill('Deliverable'),\ndomainFields: {},\n};",
      "occurrences": [
        {
          "path": "tests/intelligence/complexity-scorer.test.ts",
          "line": 413
        },
        {
          "path": "tests/intelligence/mission-splitter.test.ts",
          "line": 204
        },
        {
          "path": "tests/intelligence/mission-splitter.test.ts",
          "line": 547
        }
      ]
    },
    {
      "snippet": "successCriteria: Array(10).fill('Criterion'),\ndeliverables: Array(10).fill('Deliverable'),\ndomainFields: {},\n};\n",
      "occurrences": [
        {
          "path": "tests/intelligence/complexity-scorer.test.ts",
          "line": 414
        },
        {
          "path": "tests/intelligence/mission-splitter.test.ts",
          "line": 205
        },
        {
          "path": "tests/intelligence/mission-splitter.test.ts",
          "line": 548
        }
      ]
    },
    {
      "snippet": "deliverables: Array(10).fill('Deliverable'),\ndomainFields: {},\n};\n\nconst startTime = Date.now();",
      "occurrences": [
        {
          "path": "tests/intelligence/complexity-scorer.test.ts",
          "line": 415
        },
        {
          "path": "tests/intelligence/mission-splitter.test.ts",
          "line": 549
        }
      ]
    },
    {
      "snippet": "domainFields: {\nresearchFoundation: [\n{ finding: 'Use DAGs', sourceMission: 'R4.3' }\n]\n},",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 21
        },
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 24
        }
      ]
    },
    {
      "snippet": "]\n},\nfilePath: 'missions/B4.3.yaml'\n}\n];",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 24
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 195
        }
      ]
    },
    {
      "snippet": "},\nfilePath: 'missions/B4.3.yaml'\n}\n];\n",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 25
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 196
        }
      ]
    },
    {
      "snippet": "filePath: 'missions/B4.3.yaml'\n}\n];\n\nconst result = await analyzer.analyze(missions);",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 26
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 197
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 241
        }
      ]
    },
    {
      "snippet": "}\n];\n\nconst result = await analyzer.analyze(missions);\n",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 27
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 53
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 91
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 124
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 170
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 273
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 320
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 343
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 385
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 417
        }
      ]
    },
    {
      "snippet": "const missions = [\n{\nmissionId: 'A',\nfilePath: 'missions/A.yaml'\n},",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 39
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 139
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 209
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 405
        }
      ]
    },
    {
      "snippet": "{\nmissionId: 'A',\nfilePath: 'missions/A.yaml'\n},\n{",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 40
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 140
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 210
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 406
        }
      ]
    },
    {
      "snippet": "missionId: 'A',\nfilePath: 'missions/A.yaml'\n},\n{\nmissionId: 'B',",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 41
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 141
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 211
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 407
        }
      ]
    },
    {
      "snippet": "filePath: 'missions/C.yaml'\n}\n];\n\nconst result = await analyzer.analyze(missions);",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 52
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 90
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 416
        }
      ]
    },
    {
      "snippet": "const missions = [\n{\nmissionId: 'A',\ndomainFields: {\nhandoffContext: {",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 64
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 255
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 284
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 334
        },
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 169
        },
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 246
        }
      ]
    },
    {
      "snippet": "domainFields: {\nhandoffContext: {\ndependencies: ['C']\n}\n},",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 67
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 296
        }
      ]
    },
    {
      "snippet": "}\n},\nfilePath: 'missions/A.yaml'\n},\n{",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 70
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 261
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 290
        }
      ]
    },
    {
      "snippet": "},\nfilePath: 'missions/A.yaml'\n},\n{\nmissionId: 'B',",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 71
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 262
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 291
        }
      ]
    },
    {
      "snippet": "filePath: 'missions/A.yaml'\n},\n{\nmissionId: 'B',\ndomainFields: {",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 72
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 142
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 212
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 263
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 292
        }
      ]
    },
    {
      "snippet": "},\n{\nmissionId: 'B',\ndomainFields: {\nhandoffContext: {",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 73
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 143
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 213
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 264
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 293
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 363
        },
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 177
        },
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 254
        }
      ]
    },
    {
      "snippet": "{\nmissionId: 'B',\ndomainFields: {\nhandoffContext: {\ndependencies: ['A']",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 74
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 103
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 144
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 214
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 265
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 364
        },
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 255
        }
      ]
    },
    {
      "snippet": "missionId: 'B',\ndomainFields: {\nhandoffContext: {\ndependencies: ['A']\n}",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 75
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 104
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 145
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 215
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 266
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 365
        },
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 256
        }
      ]
    },
    {
      "snippet": "domainFields: {\nhandoffContext: {\ndependencies: ['A']\n}\n},",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 76
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 105
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 146
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 164
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 216
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 267
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 337
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 366
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 375
        }
      ]
    },
    {
      "snippet": "handoffContext: {\ndependencies: ['A']\n}\n},\nfilePath: 'missions/B.yaml'",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 77
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 106
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 147
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 217
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 268
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 367
        }
      ]
    },
    {
      "snippet": "dependencies: ['A']\n}\n},\nfilePath: 'missions/B.yaml'\n},",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 78
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 107
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 148
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 368
        }
      ]
    },
    {
      "snippet": "}\n},\nfilePath: 'missions/B.yaml'\n},\n{",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 79
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 108
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 149
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 299
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 369
        }
      ]
    },
    {
      "snippet": "},\nfilePath: 'missions/B.yaml'\n},\n{\nmissionId: 'C',",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 80
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 109
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 150
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 300
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 370
        }
      ]
    },
    {
      "snippet": "filePath: 'missions/B.yaml'\n},\n{\nmissionId: 'C',\ndomainFields: {",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 81
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 110
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 151
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 301
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 371
        }
      ]
    },
    {
      "snippet": "},\n{\nmissionId: 'C',\ndomainFields: {\nhandoffContext: {",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 82
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 111
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 152
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 302
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 372
        },
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 185
        }
      ]
    },
    {
      "snippet": "{\nmissionId: 'C',\ndomainFields: {\nhandoffContext: {\ndependencies: ['B']",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 83
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 112
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 153
        }
      ]
    },
    {
      "snippet": "missionId: 'C',\ndomainFields: {\nhandoffContext: {\ndependencies: ['B']\n}",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 84
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 113
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 154
        }
      ]
    },
    {
      "snippet": "domainFields: {\nhandoffContext: {\ndependencies: ['B']\n}\n},",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 85
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 114
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 155
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 258
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 287
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 314
        }
      ]
    },
    {
      "snippet": "handoffContext: {\ndependencies: ['B']\n}\n},\nfilePath: 'missions/C.yaml'",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 86
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 115
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 156
        }
      ]
    },
    {
      "snippet": "];\n\nconst result = await analyzer.analyze(missions);\n\nexpect(result.hasCycles).toBe(true);",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 92
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 274
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 321
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 344
        }
      ]
    },
    {
      "snippet": "\nconst result = await analyzer.analyze(missions);\n\nexpect(result.hasCycles).toBe(true);\nexpect(result.cycles).toBeDefined();",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 93
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 275
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 322
        }
      ]
    },
    {
      "snippet": "dependencies: ['B']\n}\n},\nfilePath: 'missions/C.yaml'\n},",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 116
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 157
        }
      ]
    },
    {
      "snippet": "}\n},\nfilePath: 'missions/C.yaml'\n},\n{",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 117
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 158
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 308
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 378
        }
      ]
    },
    {
      "snippet": "},\nfilePath: 'missions/C.yaml'\n},\n{\nmissionId: 'A',",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 118
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 379
        }
      ]
    },
    {
      "snippet": "filePath: 'missions/C.yaml'\n},\n{\nmissionId: 'A',\nfilePath: 'missions/A.yaml'",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 119
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 380
        }
      ]
    },
    {
      "snippet": "},\n{\nmissionId: 'A',\nfilePath: 'missions/A.yaml'\n}",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 120
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 381
        }
      ]
    },
    {
      "snippet": "{\nmissionId: 'A',\nfilePath: 'missions/A.yaml'\n}\n];",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 121
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 382
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 430
        }
      ]
    },
    {
      "snippet": "missionId: 'A',\nfilePath: 'missions/A.yaml'\n}\n];\n",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 122
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 383
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 431
        }
      ]
    },
    {
      "snippet": "filePath: 'missions/A.yaml'\n}\n];\n\nconst result = await analyzer.analyze(missions);",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 123
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 342
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 384
        }
      ]
    },
    {
      "snippet": "];\n\nconst result = await analyzer.analyze(missions);\n\nexpect(result.executionOrder).toBeDefined();",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 125
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 386
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 418
        }
      ]
    },
    {
      "snippet": "\nconst result = await analyzer.analyze(missions);\n\nexpect(result.executionOrder).toBeDefined();\nconst order = result.executionOrder!;",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 126
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 387
        }
      ]
    },
    {
      "snippet": "const result = await analyzer.analyze(missions);\n\nexpect(result.executionOrder).toBeDefined();\nconst order = result.executionOrder!;\n",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 127
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 388
        }
      ]
    },
    {
      "snippet": "},\nfilePath: 'missions/C.yaml'\n},\n{\nmissionId: 'D',",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 159
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 309
        }
      ]
    },
    {
      "snippet": "filePath: 'missions/C.yaml'\n},\n{\nmissionId: 'D',\ndomainFields: {",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 160
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 310
        }
      ]
    },
    {
      "snippet": "},\n{\nmissionId: 'D',\ndomainFields: {\nhandoffContext: {",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 161
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 311
        }
      ]
    },
    {
      "snippet": "}\n},\nfilePath: 'missions/D.yaml'\n}\n];",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 167
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 317
        }
      ]
    },
    {
      "snippet": "},\nfilePath: 'missions/D.yaml'\n}\n];\n",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 168
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 318
        }
      ]
    },
    {
      "snippet": "filePath: 'missions/D.yaml'\n}\n];\n\nconst result = await analyzer.analyze(missions);",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 169
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 319
        }
      ]
    },
    {
      "snippet": "const missions = [\n{\nmissionId: 'R4.3',\nfilePath: 'missions/R4.3.yaml'\n},",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 185
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 233
        }
      ]
    },
    {
      "snippet": "{\nmissionId: 'R4.3',\nfilePath: 'missions/R4.3.yaml'\n},\n{",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 186
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 234
        }
      ]
    },
    {
      "snippet": "missionId: 'R4.3',\nfilePath: 'missions/R4.3.yaml'\n},\n{\nmissionId: 'B4.3',",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 187
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 235
        }
      ]
    },
    {
      "snippet": "}\n];\n\nconst result = await analyzer.analyze(missions);\nconst b43Node = result.graph.nodes.get('B4.3');",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 198
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 242
        }
      ]
    },
    {
      "snippet": "];\n\nconst result = await analyzer.analyze(missions);\nconst b43Node = result.graph.nodes.get('B4.3');\n",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 199
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 243
        }
      ]
    },
    {
      "snippet": "\nconst result = await analyzer.analyze(missions);\nconst b43Node = result.graph.nodes.get('B4.3');\n\nexpect(b43Node).toBeDefined();",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 200
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 244
        }
      ]
    },
    {
      "snippet": "const result = await analyzer.analyze(missions);\nconst b43Node = result.graph.nodes.get('B4.3');\n\nexpect(b43Node).toBeDefined();\nexpect(b43Node!.dependencies).toContain('R4.3');",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 201
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 245
        }
      ]
    },
    {
      "snippet": "const b43Node = result.graph.nodes.get('B4.3');\n\nexpect(b43Node).toBeDefined();\nexpect(b43Node!.dependencies).toContain('R4.3');\n});",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 202
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 246
        }
      ]
    },
    {
      "snippet": "dependencies: ['A']\n}\n},\nfilePath: 'missions/B.yaml'\n}",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 218
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 269
        }
      ]
    },
    {
      "snippet": "}\n},\nfilePath: 'missions/B.yaml'\n}\n];",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 219
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 270
        }
      ]
    },
    {
      "snippet": "},\nfilePath: 'missions/B.yaml'\n}\n];\n",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 220
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 271
        }
      ]
    },
    {
      "snippet": "filePath: 'missions/B.yaml'\n}\n];\n\nconst result = await analyzer.analyze(missions);",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 221
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 272
        }
      ]
    },
    {
      "snippet": "{\nmissionId: 'A',\ndomainFields: {\nhandoffContext: {\ndependencies: ['B']",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 256
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 285
        },
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 170
        },
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 247
        }
      ]
    },
    {
      "snippet": "missionId: 'A',\ndomainFields: {\nhandoffContext: {\ndependencies: ['B']\n}",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 257
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 286
        },
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 171
        },
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 248
        }
      ]
    },
    {
      "snippet": "handoffContext: {\ndependencies: ['B']\n}\n},\nfilePath: 'missions/A.yaml'",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 259
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 288
        }
      ]
    },
    {
      "snippet": "dependencies: ['B']\n}\n},\nfilePath: 'missions/A.yaml'\n},",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 260
        },
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 289
        }
      ]
    },
    {
      "snippet": "{\nmissionId: 'B',\ndomainFields: {\nhandoffContext: {\ndependencies: ['C']",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 294
        },
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 178
        }
      ]
    },
    {
      "snippet": "missionId: 'B',\ndomainFields: {\nhandoffContext: {\ndependencies: ['C']\n}",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 295
        },
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 179
        }
      ]
    },
    {
      "snippet": "{\nmissionId: 'C',\ndomainFields: {\nhandoffContext: {\ndependencies: ['A']",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 373
        },
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 186
        }
      ]
    },
    {
      "snippet": "missionId: 'C',\ndomainFields: {\nhandoffContext: {\ndependencies: ['A']\n}",
      "occurrences": [
        {
          "path": "tests/intelligence/dependency-analyzer.test.ts",
          "line": 374
        },
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 187
        }
      ]
    },
    {
      "snippet": "const graph: DependencyGraph = {\nnodes: new Map([\n['A', { missionId: 'A', filePath: 'A.yaml', dependencies: [] }],\n['B', { missionId: 'B', filePath: 'B.yaml', dependencies: ['A'] }],\n['C', { missionId",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 13
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 207
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 225
        }
      ]
    },
    {
      "snippet": "nodes: new Map([\n['A', { missionId: 'A', filePath: 'A.yaml', dependencies: [] }],\n['B', { missionId: 'B', filePath: 'B.yaml', dependencies: ['A'] }],\n['C', { missionId: 'C', filePath: 'C.yaml', depend",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 14
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 208
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 226
        }
      ]
    },
    {
      "snippet": "['A', { missionId: 'A', filePath: 'A.yaml', dependencies: [] }],\n['B', { missionId: 'B', filePath: 'B.yaml', dependencies: ['A'] }],\n['C', { missionId: 'C', filePath: 'C.yaml', dependencies: ['B'] }]\n",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 15
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 209
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 227
        }
      ]
    },
    {
      "snippet": "['B', { missionId: 'B', filePath: 'B.yaml', dependencies: ['A'] }],\n['C', { missionId: 'C', filePath: 'C.yaml', dependencies: ['B'] }]\n]),\nedges: new Map([\n['A', new Set()],",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 16
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 210
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 228
        }
      ]
    },
    {
      "snippet": "['C', { missionId: 'C', filePath: 'C.yaml', dependencies: ['B'] }]\n]),\nedges: new Map([\n['A', new Set()],\n['B', new Set(['A'])],",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 17
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 211
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 229
        }
      ]
    },
    {
      "snippet": "]),\nedges: new Map([\n['A', new Set()],\n['B', new Set(['A'])],\n['C', new Set(['B'])]",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 18
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 212
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 230
        }
      ]
    },
    {
      "snippet": "edges: new Map([\n['A', new Set()],\n['B', new Set(['A'])],\n['C', new Set(['B'])]\n])",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 19
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 213
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 231
        }
      ]
    },
    {
      "snippet": "['A', new Set()],\n['B', new Set(['A'])],\n['C', new Set(['B'])]\n])\n};",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 20
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 214
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 232
        }
      ]
    },
    {
      "snippet": "['B', new Set(['A'])],\n['C', new Set(['B'])]\n])\n};\n",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 21
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 215
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 233
        }
      ]
    },
    {
      "snippet": "])\n};\n\nconst result = validator.validate(graph);\n",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 23
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 45
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 63
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 79
        }
      ]
    },
    {
      "snippet": "const graph: DependencyGraph = {\nnodes: new Map([\n['A', { missionId: 'A', filePath: 'A.yaml', dependencies: ['B'] }],\n['B', { missionId: 'B', filePath: 'B.yaml', dependencies: ['C'] }],\n['C', { missio",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 35
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 277
        }
      ]
    },
    {
      "snippet": "nodes: new Map([\n['A', { missionId: 'A', filePath: 'A.yaml', dependencies: ['B'] }],\n['B', { missionId: 'B', filePath: 'B.yaml', dependencies: ['C'] }],\n['C', { missionId: 'C', filePath: 'C.yaml', dep",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 36
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 278
        }
      ]
    },
    {
      "snippet": "['A', { missionId: 'A', filePath: 'A.yaml', dependencies: ['B'] }],\n['B', { missionId: 'B', filePath: 'B.yaml', dependencies: ['C'] }],\n['C', { missionId: 'C', filePath: 'C.yaml', dependencies: ['A'] ",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 37
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 279
        }
      ]
    },
    {
      "snippet": "['B', { missionId: 'B', filePath: 'B.yaml', dependencies: ['C'] }],\n['C', { missionId: 'C', filePath: 'C.yaml', dependencies: ['A'] }]\n]),\nedges: new Map([\n['A', new Set(['B'])],",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 38
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 280
        }
      ]
    },
    {
      "snippet": "['C', { missionId: 'C', filePath: 'C.yaml', dependencies: ['A'] }]\n]),\nedges: new Map([\n['A', new Set(['B'])],\n['B', new Set(['C'])],",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 39
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 281
        }
      ]
    },
    {
      "snippet": "]),\nedges: new Map([\n['A', new Set(['B'])],\n['B', new Set(['C'])],\n['C', new Set(['A'])]",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 40
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 282
        }
      ]
    },
    {
      "snippet": "edges: new Map([\n['A', new Set(['B'])],\n['B', new Set(['C'])],\n['C', new Set(['A'])]\n])",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 41
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 283
        }
      ]
    },
    {
      "snippet": "['A', new Set(['B'])],\n['B', new Set(['C'])],\n['C', new Set(['A'])]\n])\n};",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 42
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 284
        }
      ]
    },
    {
      "snippet": "['B', new Set(['C'])],\n['C', new Set(['A'])]\n])\n};\n",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 43
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 285
        }
      ]
    },
    {
      "snippet": "const graph: DependencyGraph = {\nnodes: new Map([\n['A', { missionId: 'A', filePath: 'A.yaml', dependencies: ['A'] }]\n]),\nedges: new Map([",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 73
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 299
        }
      ]
    },
    {
      "snippet": "nodes: new Map([\n['A', { missionId: 'A', filePath: 'A.yaml', dependencies: ['A'] }]\n]),\nedges: new Map([\n['A', new Set(['A'])]",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 74
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 300
        }
      ]
    },
    {
      "snippet": "['A', { missionId: 'A', filePath: 'A.yaml', dependencies: ['A'] }]\n]),\nedges: new Map([\n['A', new Set(['A'])]\n])",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 75
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 301
        }
      ]
    },
    {
      "snippet": "]),\nedges: new Map([\n['A', new Set(['A'])]\n])\n};",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 76
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 302
        }
      ]
    },
    {
      "snippet": "edges: new Map([\n['A', new Set(['A'])]\n])\n};\n",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 77
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 303
        }
      ]
    },
    {
      "snippet": "const graph: DependencyGraph = {\nnodes: new Map([\n['A', { missionId: 'A', filePath: 'A.yaml', dependencies: [] }],\n['B', { missionId: 'B', filePath: 'B.yaml', dependencies: ['A'] }]\n]),",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 91
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 175
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 243
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 261
        }
      ]
    },
    {
      "snippet": "nodes: new Map([\n['A', { missionId: 'A', filePath: 'A.yaml', dependencies: [] }],\n['B', { missionId: 'B', filePath: 'B.yaml', dependencies: ['A'] }]\n]),\nedges: new Map([",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 92
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 176
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 244
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 262
        }
      ]
    },
    {
      "snippet": "['A', { missionId: 'A', filePath: 'A.yaml', dependencies: [] }],\n['B', { missionId: 'B', filePath: 'B.yaml', dependencies: ['A'] }]\n]),\nedges: new Map([\n['A', new Set()],",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 93
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 177
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 245
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 263
        }
      ]
    },
    {
      "snippet": "['B', { missionId: 'B', filePath: 'B.yaml', dependencies: ['A'] }]\n]),\nedges: new Map([\n['A', new Set()],\n['B', new Set(['A'])]",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 94
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 178
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 246
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 264
        }
      ]
    },
    {
      "snippet": "]),\nedges: new Map([\n['A', new Set()],\n['B', new Set(['A'])]\n])",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 95
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 179
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 247
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 265
        }
      ]
    },
    {
      "snippet": "edges: new Map([\n['A', new Set()],\n['B', new Set(['A'])]\n])\n};",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 96
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 180
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 248
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 266
        }
      ]
    },
    {
      "snippet": "['A', new Set()],\n['B', new Set(['A'])]\n])\n};\n",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 97
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 181
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 249
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 267
        }
      ]
    },
    {
      "snippet": "['B', new Set(['A'])]\n])\n};\n\nconst result = validator.detectCycles(graph);",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 98
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 116
        }
      ]
    },
    {
      "snippet": "])\n};\n\nconst result = validator.detectCycles(graph);\n",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 99
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 117
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 142
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 164
        }
      ]
    },
    {
      "snippet": "};\n\nconst result = validator.detectCycles(graph);\n\nexpect(result.hasCycles).toBe(false);",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 100
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 165
        }
      ]
    },
    {
      "snippet": "const graph: DependencyGraph = {\nnodes: new Map([\n['A', { missionId: 'A', filePath: 'A.yaml', dependencies: ['B'] }],\n['B', { missionId: 'B', filePath: 'B.yaml', dependencies: ['A'] }]\n]),",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 109
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 190
        }
      ]
    },
    {
      "snippet": "nodes: new Map([\n['A', { missionId: 'A', filePath: 'A.yaml', dependencies: ['B'] }],\n['B', { missionId: 'B', filePath: 'B.yaml', dependencies: ['A'] }]\n]),\nedges: new Map([",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 110
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 191
        }
      ]
    },
    {
      "snippet": "['A', { missionId: 'A', filePath: 'A.yaml', dependencies: ['B'] }],\n['B', { missionId: 'B', filePath: 'B.yaml', dependencies: ['A'] }]\n]),\nedges: new Map([\n['A', new Set(['B'])],",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 111
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 192
        }
      ]
    },
    {
      "snippet": "['B', { missionId: 'B', filePath: 'B.yaml', dependencies: ['A'] }]\n]),\nedges: new Map([\n['A', new Set(['B'])],\n['B', new Set(['A'])]",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 112
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 193
        }
      ]
    },
    {
      "snippet": "]),\nedges: new Map([\n['A', new Set(['B'])],\n['B', new Set(['A'])]\n])",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 113
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 194
        }
      ]
    },
    {
      "snippet": "edges: new Map([\n['A', new Set(['B'])],\n['B', new Set(['A'])]\n])\n};",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 114
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 195
        }
      ]
    },
    {
      "snippet": "['A', new Set(['B'])],\n['B', new Set(['A'])]\n])\n};\n",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 115
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 196
        }
      ]
    },
    {
      "snippet": "};\n\nconst result = validator.detectCycles(graph);\n\nexpect(result.hasCycles).toBe(true);",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 118
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 143
        }
      ]
    },
    {
      "snippet": "\nconst result = validator.detectCycles(graph);\n\nexpect(result.hasCycles).toBe(true);\nexpect(result.cycles.length).toBeGreaterThan(0);",
      "occurrences": [
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 119
        },
        {
          "path": "tests/intelligence/graph-validator.test.ts",
          "line": 144
        }
      ]
    },
    {
      "snippet": "\n/**\n* Mock token counter\n*/\nclass MockTokenCounter implements ITokenCounter {",
      "occurrences": [
        {
          "path": "tests/intelligence/mission-splitter.test.ts",
          "line": 12
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 15
        }
      ]
    },
    {
      "snippet": "/**\n* Mock token counter\n*/\nclass MockTokenCounter implements ITokenCounter {\nasync count(text: string, model: SupportedModel): Promise<TokenCount> {",
      "occurrences": [
        {
          "path": "tests/intelligence/mission-splitter.test.ts",
          "line": 13
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 16
        }
      ]
    },
    {
      "snippet": "* Mock token counter\n*/\nclass MockTokenCounter implements ITokenCounter {\nasync count(text: string, model: SupportedModel): Promise<TokenCount> {\nreturn {",
      "occurrences": [
        {
          "path": "tests/intelligence/mission-splitter.test.ts",
          "line": 14
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 17
        }
      ]
    },
    {
      "snippet": "*/\nclass MockTokenCounter implements ITokenCounter {\nasync count(text: string, model: SupportedModel): Promise<TokenCount> {\nreturn {\nmodel,",
      "occurrences": [
        {
          "path": "tests/intelligence/mission-splitter.test.ts",
          "line": 15
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 18
        }
      ]
    },
    {
      "snippet": "class MockTokenCounter implements ITokenCounter {\nasync count(text: string, model: SupportedModel): Promise<TokenCount> {\nreturn {\nmodel,\ncount: Math.ceil(text.length * 0.25),",
      "occurrences": [
        {
          "path": "tests/intelligence/mission-splitter.test.ts",
          "line": 16
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 19
        }
      ]
    },
    {
      "snippet": "async count(text: string, model: SupportedModel): Promise<TokenCount> {\nreturn {\nmodel,\ncount: Math.ceil(text.length * 0.25),\nestimatedCost: 0,",
      "occurrences": [
        {
          "path": "tests/intelligence/mission-splitter.test.ts",
          "line": 17
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 20
        }
      ]
    },
    {
      "snippet": "return {\nmodel,\ncount: Math.ceil(text.length * 0.25),\nestimatedCost: 0,\n};",
      "occurrences": [
        {
          "path": "tests/intelligence/mission-splitter.test.ts",
          "line": 18
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 21
        }
      ]
    },
    {
      "snippet": "model,\ncount: Math.ceil(text.length * 0.25),\nestimatedCost: 0,\n};\n}",
      "occurrences": [
        {
          "path": "tests/intelligence/mission-splitter.test.ts",
          "line": 19
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 22
        }
      ]
    },
    {
      "snippet": "count: Math.ceil(text.length * 0.25),\nestimatedCost: 0,\n};\n}\n}",
      "occurrences": [
        {
          "path": "tests/intelligence/mission-splitter.test.ts",
          "line": 20
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 23
        }
      ]
    },
    {
      "snippet": "context: {},\nsuccessCriteria: ['A', 'B', 'C', 'D'],\ndeliverables: ['W', 'X', 'Y', 'Z'],\ndomainFields: {},\n};",
      "occurrences": [
        {
          "path": "tests/intelligence/mission-splitter.test.ts",
          "line": 146
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 390
        }
      ]
    },
    {
      "snippet": "successCriteria: ['A', 'B', 'C', 'D'],\ndeliverables: ['W', 'X', 'Y', 'Z'],\ndomainFields: {},\n};\n",
      "occurrences": [
        {
          "path": "tests/intelligence/mission-splitter.test.ts",
          "line": 147
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 391
        }
      ]
    },
    {
      "snippet": "domainFields: {},\n};\n\nconst result = await splitter.split(mission);\n",
      "occurrences": [
        {
          "path": "tests/intelligence/mission-splitter.test.ts",
          "line": 149
        },
        {
          "path": "tests/intelligence/mission-splitter.test.ts",
          "line": 169
        },
        {
          "path": "tests/intelligence/mission-splitter.test.ts",
          "line": 430
        },
        {
          "path": "tests/intelligence/mission-splitter.test.ts",
          "line": 450
        },
        {
          "path": "tests/intelligence/mission-splitter.test.ts",
          "line": 471
        },
        {
          "path": "tests/intelligence/mission-splitter.test.ts",
          "line": 488
        },
        {
          "path": "tests/intelligence/mission-splitter.test.ts",
          "line": 525
        }
      ]
    },
    {
      "snippet": "domainFields: {},\n};\n\nconst suggestion = await splitter.suggestSplits(complexMission);\n",
      "occurrences": [
        {
          "path": "tests/intelligence/mission-splitter.test.ts",
          "line": 207
        },
        {
          "path": "tests/intelligence/mission-splitter.test.ts",
          "line": 273
        }
      ]
    },
    {
      "snippet": "`;\n\nconst result = await splitter.split(missionText);\n\nexpect(result.splitPoints).toBeDefined();",
      "occurrences": [
        {
          "path": "tests/intelligence/mission-splitter.test.ts",
          "line": 314
        },
        {
          "path": "tests/intelligence/mission-splitter.test.ts",
          "line": 330
        }
      ]
    },
    {
      "snippet": "\nconst result = await splitter.split(missionText);\n\nexpect(result.splitPoints).toBeDefined();\n});",
      "occurrences": [
        {
          "path": "tests/intelligence/mission-splitter.test.ts",
          "line": 315
        },
        {
          "path": "tests/intelligence/mission-splitter.test.ts",
          "line": 331
        }
      ]
    },
    {
      "snippet": "deliverables: ['Output'],\ndomainFields: {},\n};\n\nconst result = await splitter.split(mission);",
      "occurrences": [
        {
          "path": "tests/intelligence/mission-splitter.test.ts",
          "line": 470
        },
        {
          "path": "tests/intelligence/mission-splitter.test.ts",
          "line": 487
        }
      ]
    },
    {
      "snippet": "});\n\nafterEach(() => {\nregisterTelemetryHandler(null);\n});",
      "occurrences": [
        {
          "path": "tests/intelligence/telemetry.test.ts",
          "line": 7
        },
        {
          "path": "tests/intelligence/token-validation.test.ts",
          "line": 26
        }
      ]
    },
    {
      "snippet": "\nafterEach(() => {\nregisterTelemetryHandler(null);\n});\n",
      "occurrences": [
        {
          "path": "tests/intelligence/telemetry.test.ts",
          "line": 8
        },
        {
          "path": "tests/intelligence/token-validation.test.ts",
          "line": 27
        }
      ]
    },
    {
      "snippet": "return async (text: string) => ({\ninput_ids: {\ndata: Array(Math.max(1, Math.ceil(text.length / 3.5))).fill(0),\n},\n});",
      "occurrences": [
        {
          "path": "tests/intelligence/token-counters.api.test.ts",
          "line": 28
        },
        {
          "path": "tests/intelligence/token-counters.api.test.ts",
          "line": 78
        }
      ]
    },
    {
      "snippet": "\nconst result = await optimizer.optimize(content, {\nmodel: 'claude',\nlevel: 'balanced',\n});",
      "occurrences": [
        {
          "path": "tests/intelligence/token-optimizer.test.ts",
          "line": 26
        },
        {
          "path": "tests/intelligence/token-optimizer.test.ts",
          "line": 112
        },
        {
          "path": "tests/intelligence/token-optimizer.test.ts",
          "line": 159
        },
        {
          "path": "tests/intelligence/token-optimizer.test.ts",
          "line": 175
        },
        {
          "path": "tests/intelligence/token-optimizer.test.ts",
          "line": 189
        }
      ]
    },
    {
      "snippet": "const result = await optimizer.optimize(content, {\nmodel: 'claude',\nlevel: 'balanced',\n});\n",
      "occurrences": [
        {
          "path": "tests/intelligence/token-optimizer.test.ts",
          "line": 27
        },
        {
          "path": "tests/intelligence/token-optimizer.test.ts",
          "line": 113
        },
        {
          "path": "tests/intelligence/token-optimizer.test.ts",
          "line": 160
        },
        {
          "path": "tests/intelligence/token-optimizer.test.ts",
          "line": 176
        },
        {
          "path": "tests/intelligence/token-optimizer.test.ts",
          "line": 190
        }
      ]
    },
    {
      "snippet": "const content = 'objective: Test mission';\n\nconst result = await optimizer.optimize(content, {\nmodel: 'gpt',\nlevel: 'balanced',",
      "occurrences": [
        {
          "path": "tests/intelligence/token-optimizer.test.ts",
          "line": 75
        },
        {
          "path": "tests/intelligence/token-optimizer.test.ts",
          "line": 200
        }
      ]
    },
    {
      "snippet": "\nconst result = await optimizer.optimize(content, {\nmodel: 'gpt',\nlevel: 'balanced',\n});",
      "occurrences": [
        {
          "path": "tests/intelligence/token-optimizer.test.ts",
          "line": 76
        },
        {
          "path": "tests/intelligence/token-optimizer.test.ts",
          "line": 201
        }
      ]
    },
    {
      "snippet": "const result = await optimizer.optimize(content, {\nmodel: 'gpt',\nlevel: 'balanced',\n});\n",
      "occurrences": [
        {
          "path": "tests/intelligence/token-optimizer.test.ts",
          "line": 77
        },
        {
          "path": "tests/intelligence/token-optimizer.test.ts",
          "line": 202
        }
      ]
    },
    {
      "snippet": "const content = 'objective: Test content';\n\nconst result = await optimizer.optimize(content, {\nmodel: 'claude',\nlevel: 'balanced',",
      "occurrences": [
        {
          "path": "tests/intelligence/token-optimizer.test.ts",
          "line": 97
        },
        {
          "path": "tests/intelligence/token-optimizer.test.ts",
          "line": 174
        }
      ]
    },
    {
      "snippet": "expect(result.count).toBeGreaterThan(0);\nexpect(result.estimatedCost).toBeDefined();\n\n// Should have emitted telemetry\nexpect(telemetryEvents.length).toBeGreaterThan(0);",
      "occurrences": [
        {
          "path": "tests/intelligence/token-validation.test.ts",
          "line": 99
        },
        {
          "path": "tests/intelligence/token-validation.test.ts",
          "line": 110
        }
      ]
    },
    {
      "snippet": "expect(result.estimatedCost).toBeDefined();\n\n// Should have emitted telemetry\nexpect(telemetryEvents.length).toBeGreaterThan(0);\n});",
      "occurrences": [
        {
          "path": "tests/intelligence/token-validation.test.ts",
          "line": 100
        },
        {
          "path": "tests/intelligence/token-validation.test.ts",
          "line": 111
        }
      ]
    },
    {
      "snippet": "\n// Should have emitted telemetry\nexpect(telemetryEvents.length).toBeGreaterThan(0);\n});\n",
      "occurrences": [
        {
          "path": "tests/intelligence/token-validation.test.ts",
          "line": 101
        },
        {
          "path": "tests/intelligence/token-validation.test.ts",
          "line": 112
        }
      ]
    },
    {
      "snippet": "*/\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as os from 'os';",
      "occurrences": [
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 4
        },
        {
          "path": "tests/security/path-traversal.test.ts",
          "line": 4
        }
      ]
    },
    {
      "snippet": "\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as os from 'os';\nimport { SecureYAMLLoader } from '../../src/loaders/yaml-loader';",
      "occurrences": [
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 5
        },
        {
          "path": "tests/security/path-traversal.test.ts",
          "line": 5
        }
      ]
    },
    {
      "snippet": "\nconst schema: JSONSchema = {\ntype: 'object',\nrequired: ['name', 'version'],\nproperties: {",
      "occurrences": [
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 218
        },
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 237
        },
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 387
        }
      ]
    },
    {
      "snippet": "const schema: JSONSchema = {\ntype: 'object',\nrequired: ['name', 'version'],\nproperties: {\nname: { type: 'string' },",
      "occurrences": [
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 219
        },
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 238
        },
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 388
        }
      ]
    },
    {
      "snippet": "type: 'object',\nrequired: ['name', 'version'],\nproperties: {\nname: { type: 'string' },\nversion: { type: 'string' }",
      "occurrences": [
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 220
        },
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 239
        }
      ]
    },
    {
      "snippet": "required: ['name', 'version'],\nproperties: {\nname: { type: 'string' },\nversion: { type: 'string' }\n}",
      "occurrences": [
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 221
        },
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 240
        }
      ]
    },
    {
      "snippet": "properties: {\nname: { type: 'string' },\nversion: { type: 'string' }\n}\n};",
      "occurrences": [
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 222
        },
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 241
        },
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 261
        }
      ]
    },
    {
      "snippet": "name: { type: 'string' },\nversion: { type: 'string' }\n}\n};\n",
      "occurrences": [
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 223
        },
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 242
        },
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 262
        }
      ]
    },
    {
      "snippet": "version: { type: 'string' }\n}\n};\n\nexpect(() => {",
      "occurrences": [
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 243
        },
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 263
        }
      ]
    },
    {
      "snippet": "\nconst schema: JSONSchema = {\ntype: 'object',\nproperties: {\nname: { type: 'string' },",
      "occurrences": [
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 258
        },
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 416
        }
      ]
    },
    {
      "snippet": "}\n}\n}\n};\n",
      "occurrences": [
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 290
        },
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 321
        }
      ]
    },
    {
      "snippet": "\nconst schema: JSONSchema = {\ntype: 'object',\nproperties: {\nstatus: {",
      "occurrences": [
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 335
        },
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 355
        }
      ]
    },
    {
      "snippet": "const schema: JSONSchema = {\ntype: 'object',\nproperties: {\nstatus: {\ntype: 'string',",
      "occurrences": [
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 336
        },
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 356
        }
      ]
    },
    {
      "snippet": "type: 'object',\nproperties: {\nstatus: {\ntype: 'string',\nenum: ['active', 'inactive', 'pending']",
      "occurrences": [
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 337
        },
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 357
        }
      ]
    },
    {
      "snippet": "properties: {\nstatus: {\ntype: 'string',\nenum: ['active', 'inactive', 'pending']\n}",
      "occurrences": [
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 338
        },
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 358
        }
      ]
    },
    {
      "snippet": "status: {\ntype: 'string',\nenum: ['active', 'inactive', 'pending']\n}\n}",
      "occurrences": [
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 339
        },
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 359
        }
      ]
    },
    {
      "snippet": "type: 'string',\nenum: ['active', 'inactive', 'pending']\n}\n}\n};",
      "occurrences": [
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 340
        },
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 360
        }
      ]
    },
    {
      "snippet": "enum: ['active', 'inactive', 'pending']\n}\n}\n};\n",
      "occurrences": [
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 341
        },
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 361
        }
      ]
    },
    {
      "snippet": "properties: {\nname: { type: 'string' },\nversion: { type: 'number' }\n}\n};",
      "occurrences": [
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 391
        },
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 419
        }
      ]
    },
    {
      "snippet": "name: { type: 'string' },\nversion: { type: 'number' }\n}\n};\n",
      "occurrences": [
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 392
        },
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 420
        }
      ]
    },
    {
      "snippet": "}\n}\n});\n});\n",
      "occurrences": [
        {
          "path": "tests/loaders/yaml-loader.test.ts",
          "line": 432
        },
        {
          "path": "tests/security/path-traversal.test.ts",
          "line": 188
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 410
        }
      ]
    },
    {
      "snippet": "dependencies: ['dep1']\n}\n};\nconst extension = {\ncontext: {",
      "occurrences": [
        {
          "path": "tests/merge/deep-merge.test.ts",
          "line": 45
        },
        {
          "path": "tests/merge/deep-merge.test.ts",
          "line": 188
        }
      ]
    },
    {
      "snippet": "}\n};\nconst result = merger.merge(base, extension);\n\nexpect(result).toEqual({",
      "occurrences": [
        {
          "path": "tests/merge/deep-merge.test.ts",
          "line": 52
        },
        {
          "path": "tests/merge/deep-merge.test.ts",
          "line": 82
        },
        {
          "path": "tests/merge/deep-merge.test.ts",
          "line": 194
        }
      ]
    },
    {
      "snippet": "};\nconst result = merger.merge(base, extension);\n\nexpect(result).toEqual({\ncontext: {",
      "occurrences": [
        {
          "path": "tests/merge/deep-merge.test.ts",
          "line": 53
        },
        {
          "path": "tests/merge/deep-merge.test.ts",
          "line": 195
        }
      ]
    },
    {
      "snippet": "const extension = { a: 1 };\nconst result = merger.merge(base, extension);\n\nexpect(result).toEqual({ a: 1 });\n});",
      "occurrences": [
        {
          "path": "tests/merge/deep-merge.test.ts",
          "line": 215
        },
        {
          "path": "tests/merge/deep-merge.test.ts",
          "line": 267
        }
      ]
    },
    {
      "snippet": "const result = merger.merge(base, extension);\n\nexpect(result).toEqual({ a: 1 });\n});\n",
      "occurrences": [
        {
          "path": "tests/merge/deep-merge.test.ts",
          "line": 216
        },
        {
          "path": "tests/merge/deep-merge.test.ts",
          "line": 268
        },
        {
          "path": "tests/merge/deep-merge.test.ts",
          "line": 276
        },
        {
          "path": "tests/merge/deep-merge.test.ts",
          "line": 441
        }
      ]
    },
    {
      "snippet": "const extension = { value: 'scalar' };\nconst result = merger.merge(base, extension);\n\nexpect(result).toEqual({ value: 'scalar' });\n});",
      "occurrences": [
        {
          "path": "tests/merge/deep-merge.test.ts",
          "line": 233
        },
        {
          "path": "tests/merge/deep-merge.test.ts",
          "line": 249
        }
      ]
    },
    {
      "snippet": "const result = merger.merge(base, extension);\n\nexpect(result).toEqual({ value: 'scalar' });\n});\n",
      "occurrences": [
        {
          "path": "tests/merge/deep-merge.test.ts",
          "line": 234
        },
        {
          "path": "tests/merge/deep-merge.test.ts",
          "line": 250
        }
      ]
    },
    {
      "snippet": "domainFields: {\ntechStack: 'TypeScript',\nframework: 'Node.js',\ntestingFramework: 'Jest'\n}",
      "occurrences": [
        {
          "path": "tests/merge/deep-merge.test.ts",
          "line": 366
        },
        {
          "path": "tests/merge/deep-merge.test.ts",
          "line": 387
        }
      ]
    },
    {
      "snippet": "version: 1.0.0\npath: domains/test\nschema_version: 1.0.0\n`.trim()\n);",
      "occurrences": [
        {
          "path": "tests/registry/registry-parser.test.ts",
          "line": 38
        },
        {
          "path": "tests/registry/registry-parser.test.ts",
          "line": 122
        }
      ]
    },
    {
      "snippet": "path: domains/test\nschema_version: 1.0.0\n`.trim()\n);\n",
      "occurrences": [
        {
          "path": "tests/registry/registry-parser.test.ts",
          "line": 39
        },
        {
          "path": "tests/registry/registry-parser.test.ts",
          "line": 123
        },
        {
          "path": "tests/registry/registry-parser.test.ts",
          "line": 140
        },
        {
          "path": "tests/registry/registry-parser.test.ts",
          "line": 211
        }
      ]
    },
    {
      "snippet": "fs.writeFileSync(\nregistryPath,\n`\ndomains:\n- name: test",
      "occurrences": [
        {
          "path": "tests/registry/registry-parser.test.ts",
          "line": 133
        },
        {
          "path": "tests/registry/registry-parser.test.ts",
          "line": 150
        },
        {
          "path": "tests/registry/registry-parser.test.ts",
          "line": 169
        },
        {
          "path": "tests/registry/registry-parser.test.ts",
          "line": 186
        },
        {
          "path": "tests/registry/registry-parser.test.ts",
          "line": 203
        }
      ]
    },
    {
      "snippet": "version: '1.0.0',\npath: 'domains/test',\nschema_version: '1.0.0',\n};\n",
      "occurrences": [
        {
          "path": "tests/registry/registry-parser.test.ts",
          "line": 225
        },
        {
          "path": "tests/registry/registry-parser.test.ts",
          "line": 241
        }
      ]
    },
    {
      "snippet": "path: 'domains/test',\nschema_version: '1.0.0',\n};\n\nconst result = parser.validateEntry(entry);",
      "occurrences": [
        {
          "path": "tests/registry/registry-parser.test.ts",
          "line": 226
        },
        {
          "path": "tests/registry/registry-parser.test.ts",
          "line": 242
        },
        {
          "path": "tests/registry/registry-parser.test.ts",
          "line": 257
        }
      ]
    },
    {
      "snippet": "schema_version: '1.0.0',\n};\n\nconst result = parser.validateEntry(entry);\n",
      "occurrences": [
        {
          "path": "tests/registry/registry-parser.test.ts",
          "line": 227
        },
        {
          "path": "tests/registry/registry-parser.test.ts",
          "line": 243
        },
        {
          "path": "tests/registry/registry-parser.test.ts",
          "line": 258
        }
      ]
    },
    {
      "snippet": "};\n\nconst result = parser.validateEntry(entry);\n\nexpect(result.valid).toBe(false);",
      "occurrences": [
        {
          "path": "tests/registry/registry-parser.test.ts",
          "line": 244
        },
        {
          "path": "tests/registry/registry-parser.test.ts",
          "line": 259
        },
        {
          "path": "tests/registry/registry-parser.test.ts",
          "line": 274
        }
      ]
    },
    {
      "snippet": "version: '1.0.0',\npath: 'domains/v1',\nschema_version: '1.0.0',\n},\n{",
      "occurrences": [
        {
          "path": "tests/registry/registry-parser.test.ts",
          "line": 288
        },
        {
          "path": "tests/registry/registry-parser.test.ts",
          "line": 347
        }
      ]
    },
    {
      "snippet": "major: 1,\nminor: 0,\npatch: 0,\nraw: '1.0.0',\n});",
      "occurrences": [
        {
          "path": "tests/registry/semver-validator.test.ts",
          "line": 61
        },
        {
          "path": "tests/registry/semver-validator.test.ts",
          "line": 90
        }
      ]
    },
    {
      "snippet": "context: {},\nsuccessCriteria: [\"Criterion 1\"],\ndeliverables: [\"Deliverable 1\"],\ndomainFields: {},\n};",
      "occurrences": [
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 25
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 88
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 106
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 123
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 139
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 211
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 240
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 255
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 270
        }
      ]
    },
    {
      "snippet": "successCriteria: [\"Criterion 1\"],\ndeliverables: [\"Deliverable 1\"],\ndomainFields: {},\n};\n",
      "occurrences": [
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 26
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 89
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 107
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 124
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 140
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 193
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 212
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 241
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 256
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 271
        }
      ]
    },
    {
      "snippet": "deliverables: [\"Deliverable 1\"],\ndomainFields: {},\n};\n\nconst isValid = validate(mission);",
      "occurrences": [
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 27
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 90
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 108
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 125
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 141
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 158
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 194
        }
      ]
    },
    {
      "snippet": "domainFields: {},\n};\n\nconst isValid = validate(mission);\nexpect(isValid).toBe(true);",
      "occurrences": [
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 28
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 73
        }
      ]
    },
    {
      "snippet": "};\n\nconst isValid = validate(mission);\nexpect(isValid).toBe(true);\nexpect(validate.errors).toBeNull();",
      "occurrences": [
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 29
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 53
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 74
        }
      ]
    },
    {
      "snippet": "\nconst isValid = validate(mission);\nexpect(isValid).toBe(true);\nexpect(validate.errors).toBeNull();\n});",
      "occurrences": [
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 30
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 54
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 75
        }
      ]
    },
    {
      "snippet": "const isValid = validate(mission);\nexpect(isValid).toBe(true);\nexpect(validate.errors).toBeNull();\n});\n",
      "occurrences": [
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 31
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 55
        }
      ]
    },
    {
      "snippet": "domainFields: {},\n};\n\nconst isValid = validate(mission);\nexpect(isValid).toBe(false);",
      "occurrences": [
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 91
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 109
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 126
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 142
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 159
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 176
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 195
        }
      ]
    },
    {
      "snippet": "};\n\nconst isValid = validate(mission);\nexpect(isValid).toBe(false);\nexpect(validate.errors).toBeDefined();",
      "occurrences": [
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 92
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 110
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 127
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 160
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 177
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 196
        }
      ]
    },
    {
      "snippet": "objective: \"Test\",\ncontext: {},\nsuccessCriteria: [\"Criterion 1\"],\ndeliverables: [\"Deliverable 1\"],\ndomainFields: {},",
      "occurrences": [
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 105
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 122
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 138
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 210
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 239
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 254
        }
      ]
    },
    {
      "snippet": "\nconst isValid = validate(mission);\nexpect(isValid).toBe(false);\nexpect(validate.errors).toBeDefined();\n});",
      "occurrences": [
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 111
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 128
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 161
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 178
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 197
        }
      ]
    },
    {
      "snippet": "const isValid = validate(mission);\nexpect(isValid).toBe(false);\nexpect(validate.errors).toBeDefined();\n});\n",
      "occurrences": [
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 112
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 129
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 162
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 179
        }
      ]
    },
    {
      "snippet": "objective: \"Test\",\ncontext: {},\nsuccessCriteria: [],\ndeliverables: [\"Deliverable 1\"],\ndomainFields: {},",
      "occurrences": [
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 155
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 284
        }
      ]
    },
    {
      "snippet": "context: {},\nsuccessCriteria: [],\ndeliverables: [\"Deliverable 1\"],\ndomainFields: {},\n};",
      "occurrences": [
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 156
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 285
        }
      ]
    },
    {
      "snippet": "successCriteria: [],\ndeliverables: [\"Deliverable 1\"],\ndomainFields: {},\n};\n",
      "occurrences": [
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 157
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 286
        }
      ]
    },
    {
      "snippet": "deliverables: [\"Deliverable 1\"],\ndomainFields: {},\n};\n\nexpect(isGenericMission(mission)).toBe(false);",
      "occurrences": [
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 242
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 257
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 272
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 287
        }
      ]
    },
    {
      "snippet": "domainFields: {},\n};\n\nexpect(isGenericMission(mission)).toBe(false);\n});",
      "occurrences": [
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 243
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 258
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 273
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 288
        }
      ]
    },
    {
      "snippet": "};\n\nexpect(isGenericMission(mission)).toBe(false);\n});\n",
      "occurrences": [
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 244
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 259
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 274
        },
        {
          "path": "tests/schemas/generic-mission.test.ts",
          "line": 289
        }
      ]
    },
    {
      "snippet": "expect(() => {\nloader.sanitizePath('../etc/passwd');\n}).toThrow(PathTraversalError);\n});\n",
      "occurrences": [
        {
          "path": "tests/security/path-traversal.test.ts",
          "line": 35
        },
        {
          "path": "tests/security/path-traversal.test.ts",
          "line": 71
        }
      ]
    },
    {
      "snippet": "} finally {\n// Cleanup\nif (fs.existsSync(symlinkPath)) {\nfs.unlinkSync(symlinkPath);\n}",
      "occurrences": [
        {
          "path": "tests/security/path-traversal.test.ts",
          "line": 159
        },
        {
          "path": "tests/security/path-traversal.test.ts",
          "line": 184
        }
      ]
    },
    {
      "snippet": "// Cleanup\nif (fs.existsSync(symlinkPath)) {\nfs.unlinkSync(symlinkPath);\n}\n}",
      "occurrences": [
        {
          "path": "tests/security/path-traversal.test.ts",
          "line": 160
        },
        {
          "path": "tests/security/path-traversal.test.ts",
          "line": 185
        }
      ]
    },
    {
      "snippet": "if (fs.existsSync(symlinkPath)) {\nfs.unlinkSync(symlinkPath);\n}\n}\n});",
      "occurrences": [
        {
          "path": "tests/security/path-traversal.test.ts",
          "line": 161
        },
        {
          "path": "tests/security/path-traversal.test.ts",
          "line": 186
        }
      ]
    },
    {
      "snippet": "},\ncontext\n);\n\nconst tokenUsage = (result.structuredContent as any)?.tokenUsage;",
      "occurrences": [
        {
          "path": "tests/smoke/mcp-intelligence-tools-smoke.test.ts",
          "line": 76
        },
        {
          "path": "tests/smoke/mcp-intelligence-tools-smoke.test.ts",
          "line": 96
        },
        {
          "path": "tests/smoke/mcp-intelligence-tools-smoke.test.ts",
          "line": 114
        }
      ]
    },
    {
      "snippet": "context\n);\n\nconst tokenUsage = (result.structuredContent as any)?.tokenUsage;\n",
      "occurrences": [
        {
          "path": "tests/smoke/mcp-intelligence-tools-smoke.test.ts",
          "line": 77
        },
        {
          "path": "tests/smoke/mcp-intelligence-tools-smoke.test.ts",
          "line": 97
        },
        {
          "path": "tests/smoke/mcp-intelligence-tools-smoke.test.ts",
          "line": 115
        }
      ]
    },
    {
      "snippet": ");\n\nconst tokenUsage = (result.structuredContent as any)?.tokenUsage;\n\nexpect(result.content?.[0]?.text).toContain('Token Usage');",
      "occurrences": [
        {
          "path": "tests/smoke/mcp-intelligence-tools-smoke.test.ts",
          "line": 98
        },
        {
          "path": "tests/smoke/mcp-intelligence-tools-smoke.test.ts",
          "line": 116
        }
      ]
    },
    {
      "snippet": "\nconst tokenUsage = (result.structuredContent as any)?.tokenUsage;\n\nexpect(result.content?.[0]?.text).toContain('Token Usage');\nexpect(tokenUsage).toBeDefined();",
      "occurrences": [
        {
          "path": "tests/smoke/mcp-intelligence-tools-smoke.test.ts",
          "line": 99
        },
        {
          "path": "tests/smoke/mcp-intelligence-tools-smoke.test.ts",
          "line": 117
        }
      ]
    },
    {
      "snippet": "const tokenUsage = (result.structuredContent as any)?.tokenUsage;\n\nexpect(result.content?.[0]?.text).toContain('Token Usage');\nexpect(tokenUsage).toBeDefined();\nexpect(tokenUsage.model).toBe('gpt');",
      "occurrences": [
        {
          "path": "tests/smoke/mcp-intelligence-tools-smoke.test.ts",
          "line": 100
        },
        {
          "path": "tests/smoke/mcp-intelligence-tools-smoke.test.ts",
          "line": 118
        }
      ]
    },
    {
      "snippet": "\nexpect(result.content?.[0]?.text).toContain('Token Usage');\nexpect(tokenUsage).toBeDefined();\nexpect(tokenUsage.model).toBe('gpt');\nexpect(tokenUsage.totalTokens).toBeGreaterThan(0);",
      "occurrences": [
        {
          "path": "tests/smoke/mcp-intelligence-tools-smoke.test.ts",
          "line": 101
        },
        {
          "path": "tests/smoke/mcp-intelligence-tools-smoke.test.ts",
          "line": 119
        }
      ]
    },
    {
      "snippet": "expect(result.content?.[0]?.text).toContain('Token Usage');\nexpect(tokenUsage).toBeDefined();\nexpect(tokenUsage.model).toBe('gpt');\nexpect(tokenUsage.totalTokens).toBeGreaterThan(0);\n});",
      "occurrences": [
        {
          "path": "tests/smoke/mcp-intelligence-tools-smoke.test.ts",
          "line": 102
        },
        {
          "path": "tests/smoke/mcp-intelligence-tools-smoke.test.ts",
          "line": 120
        }
      ]
    },
    {
      "snippet": "expect(tokenUsage).toBeDefined();\nexpect(tokenUsage.model).toBe('gpt');\nexpect(tokenUsage.totalTokens).toBeGreaterThan(0);\n});\n",
      "occurrences": [
        {
          "path": "tests/smoke/mcp-intelligence-tools-smoke.test.ts",
          "line": 103
        },
        {
          "path": "tests/smoke/mcp-intelligence-tools-smoke.test.ts",
          "line": 121
        }
      ]
    },
    {
      "snippet": "},\ncontext\n);\n\nconst text = result.content?.[0]?.text ?? '';",
      "occurrences": [
        {
          "path": "tests/smoke/mcp-intelligence-tools-smoke.test.ts",
          "line": 181
        },
        {
          "path": "tests/smoke/mcp-intelligence-tools-smoke.test.ts",
          "line": 196
        }
      ]
    },
    {
      "snippet": "const result = await analyzeDependencies({\nmissionDirectory: testDir,\nincludeInferred: true\n});\n",
      "occurrences": [
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 132
        },
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 295
        }
      ]
    },
    {
      "snippet": "\nconst missions = [\n{\nmissionId: 'A',\ndomainFields: {",
      "occurrences": [
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 168
        },
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 245
        }
      ]
    },
    {
      "snippet": "domainFields: {\nhandoffContext: {\ndependencies: ['B']\n}\n}",
      "occurrences": [
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 172
        },
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 249
        }
      ]
    },
    {
      "snippet": "handoffContext: {\ndependencies: ['B']\n}\n}\n},",
      "occurrences": [
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 173
        },
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 250
        }
      ]
    },
    {
      "snippet": "dependencies: ['B']\n}\n}\n},\n{",
      "occurrences": [
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 174
        },
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 251
        }
      ]
    },
    {
      "snippet": "}\n}\n},\n{\nmissionId: 'B',",
      "occurrences": [
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 175
        },
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 252
        }
      ]
    },
    {
      "snippet": "}\n},\n{\nmissionId: 'B',\ndomainFields: {",
      "occurrences": [
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 176
        },
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 253
        }
      ]
    },
    {
      "snippet": "domainFields: {\nhandoffContext: {\ndependencies: ['A']\n}\n}",
      "occurrences": [
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 188
        },
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 257
        }
      ]
    },
    {
      "snippet": "handoffContext: {\ndependencies: ['A']\n}\n}\n}",
      "occurrences": [
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 189
        },
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 258
        }
      ]
    },
    {
      "snippet": "dependencies: ['A']\n}\n}\n}\n];",
      "occurrences": [
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 190
        },
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 259
        }
      ]
    },
    {
      "snippet": "}\n}\n}\n];\n",
      "occurrences": [
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 191
        },
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 260
        }
      ]
    },
    {
      "snippet": "}\n}\n];\n\nfor (const mission of missions) {",
      "occurrences": [
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 192
        },
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 261
        }
      ]
    },
    {
      "snippet": "const result = await analyzeDependencies({\nmissionDirectory: testDir\n});\n\nconst formatted = formatAnalysisResult(result);",
      "occurrences": [
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 229
        },
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 308
        }
      ]
    },
    {
      "snippet": "missionDirectory: testDir\n});\n\nconst formatted = formatAnalysisResult(result);\n",
      "occurrences": [
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 230
        },
        {
          "path": "tests/tools/analyze-dependencies.test.ts",
          "line": 309
        }
      ]
    },
    {
      "snippet": "const tool = new CombinePacksToolImpl(\npackLoaderMock as any,\ncombinerMock as any,\nregistryMock as any,\nloaderMock",
      "occurrences": [
        {
          "path": "tests/tools/combine-packs.test.ts",
          "line": 96
        },
        {
          "path": "tests/tools/combine-packs.test.ts",
          "line": 110
        },
        {
          "path": "tests/tools/combine-packs.test.ts",
          "line": 134
        }
      ]
    },
    {
      "snippet": "packLoaderMock as any,\ncombinerMock as any,\nregistryMock as any,\nloaderMock\n);",
      "occurrences": [
        {
          "path": "tests/tools/combine-packs.test.ts",
          "line": 97
        },
        {
          "path": "tests/tools/combine-packs.test.ts",
          "line": 111
        },
        {
          "path": "tests/tools/combine-packs.test.ts",
          "line": 135
        }
      ]
    },
    {
      "snippet": "combinerMock as any,\nregistryMock as any,\nloaderMock\n);\n",
      "occurrences": [
        {
          "path": "tests/tools/combine-packs.test.ts",
          "line": 98
        },
        {
          "path": "tests/tools/combine-packs.test.ts",
          "line": 112
        },
        {
          "path": "tests/tools/combine-packs.test.ts",
          "line": 136
        }
      ]
    },
    {
      "snippet": "registryMock as any,\nloaderMock\n);\n\nregistryMock.loadRegistry.mockReturnValue([{ name: 'a' }]);",
      "occurrences": [
        {
          "path": "tests/tools/combine-packs.test.ts",
          "line": 113
        },
        {
          "path": "tests/tools/combine-packs.test.ts",
          "line": 137
        }
      ]
    },
    {
      "snippet": "loaderMock\n);\n\nregistryMock.loadRegistry.mockReturnValue([{ name: 'a' }]);\npackLoaderMock.loadPack.mockImplementation(name => ({ manifest: { name } }));",
      "occurrences": [
        {
          "path": "tests/tools/combine-packs.test.ts",
          "line": 114
        },
        {
          "path": "tests/tools/combine-packs.test.ts",
          "line": 138
        }
      ]
    },
    {
      "snippet": ");\n\nregistryMock.loadRegistry.mockReturnValue([{ name: 'a' }]);\npackLoaderMock.loadPack.mockImplementation(name => ({ manifest: { name } }));\ncombinerMock.combine.mockReturnValue({",
      "occurrences": [
        {
          "path": "tests/tools/combine-packs.test.ts",
          "line": 115
        },
        {
          "path": "tests/tools/combine-packs.test.ts",
          "line": 139
        }
      ]
    },
    {
      "snippet": "*/\n\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport * as YAML from 'yaml';",
      "occurrences": [
        {
          "path": "tests/tools/create-mission.coverage.test.ts",
          "line": 5
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 13
        }
      ]
    },
    {
      "snippet": "\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport * as YAML from 'yaml';\nimport { SecureYAMLLoader } from '../../src/loaders/yaml-loader';",
      "occurrences": [
        {
          "path": "tests/tools/create-mission.coverage.test.ts",
          "line": 6
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 14
        }
      ]
    },
    {
      "snippet": "import * as path from 'path';\nimport * as fs from 'fs';\nimport * as YAML from 'yaml';\nimport { SecureYAMLLoader } from '../../src/loaders/yaml-loader';\nimport { RegistryParser } from '../../src/regist",
      "occurrences": [
        {
          "path": "tests/tools/create-mission.coverage.test.ts",
          "line": 7
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 15
        }
      ]
    },
    {
      "snippet": "let loader: SecureYAMLLoader;\nlet parser: RegistryParser;\nlet packLoader: DomainPackLoader;\nlet merger: MissionMerger;\nlet tool: CreateMissionToolImpl;",
      "occurrences": [
        {
          "path": "tests/tools/create-mission.coverage.test.ts",
          "line": 19
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 28
        }
      ]
    },
    {
      "snippet": "let parser: RegistryParser;\nlet packLoader: DomainPackLoader;\nlet merger: MissionMerger;\nlet tool: CreateMissionToolImpl;\n",
      "occurrences": [
        {
          "path": "tests/tools/create-mission.coverage.test.ts",
          "line": 20
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 29
        }
      ]
    },
    {
      "snippet": "let packLoader: DomainPackLoader;\nlet merger: MissionMerger;\nlet tool: CreateMissionToolImpl;\n\nbeforeAll(() => {",
      "occurrences": [
        {
          "path": "tests/tools/create-mission.coverage.test.ts",
          "line": 21
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 30
        }
      ]
    },
    {
      "snippet": "if (!fs.existsSync(testDataDir)) {\nfs.mkdirSync(testDataDir, { recursive: true });\n}\n});\n",
      "occurrences": [
        {
          "path": "tests/tools/create-mission.coverage.test.ts",
          "line": 26
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 36
        },
        {
          "path": "tests/tools/list-domains.test.ts",
          "line": 26
        }
      ]
    },
    {
      "snippet": "fs.mkdirSync(testDataDir, { recursive: true });\n}\n});\n\nbeforeEach(() => {",
      "occurrences": [
        {
          "path": "tests/tools/create-mission.coverage.test.ts",
          "line": 27
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 37
        },
        {
          "path": "tests/tools/list-domains.test.ts",
          "line": 27
        }
      ]
    },
    {
      "snippet": "}\n});\n\nbeforeEach(() => {\nloader = new SecureYAMLLoader({ baseDir: testDataDir });",
      "occurrences": [
        {
          "path": "tests/tools/create-mission.coverage.test.ts",
          "line": 28
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 38
        },
        {
          "path": "tests/tools/list-domains.test.ts",
          "line": 28
        }
      ]
    },
    {
      "snippet": "});\n\nbeforeEach(() => {\nloader = new SecureYAMLLoader({ baseDir: testDataDir });\nparser = new RegistryParser(loader);",
      "occurrences": [
        {
          "path": "tests/tools/create-mission.coverage.test.ts",
          "line": 29
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 39
        },
        {
          "path": "tests/tools/list-domains.test.ts",
          "line": 29
        }
      ]
    },
    {
      "snippet": "\nbeforeEach(() => {\nloader = new SecureYAMLLoader({ baseDir: testDataDir });\nparser = new RegistryParser(loader);\npackLoader = new DomainPackLoader(loader, parser);",
      "occurrences": [
        {
          "path": "tests/tools/create-mission.coverage.test.ts",
          "line": 30
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 40
        }
      ]
    },
    {
      "snippet": "beforeEach(() => {\nloader = new SecureYAMLLoader({ baseDir: testDataDir });\nparser = new RegistryParser(loader);\npackLoader = new DomainPackLoader(loader, parser);\nmerger = new MissionMerger();",
      "occurrences": [
        {
          "path": "tests/tools/create-mission.coverage.test.ts",
          "line": 31
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 41
        }
      ]
    },
    {
      "snippet": "loader = new SecureYAMLLoader({ baseDir: testDataDir });\nparser = new RegistryParser(loader);\npackLoader = new DomainPackLoader(loader, parser);\nmerger = new MissionMerger();\ntool = new CreateMissionT",
      "occurrences": [
        {
          "path": "tests/tools/create-mission.coverage.test.ts",
          "line": 32
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 42
        }
      ]
    },
    {
      "snippet": "parser = new RegistryParser(loader);\npackLoader = new DomainPackLoader(loader, parser);\nmerger = new MissionMerger();\ntool = new CreateMissionToolImpl(packLoader, merger, parser, loader);\n",
      "occurrences": [
        {
          "path": "tests/tools/create-mission.coverage.test.ts",
          "line": 33
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 43
        }
      ]
    },
    {
      "snippet": "const genericTemplate = `\nschemaType: \"Mission\"\nschemaVersion: \"2.0\"\nmissionId: \"placeholder\"\nobjective: \"placeholder\"",
      "occurrences": [
        {
          "path": "tests/tools/create-mission.coverage.test.ts",
          "line": 39
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 49
        }
      ]
    },
    {
      "snippet": "schemaType: \"Mission\"\nschemaVersion: \"2.0\"\nmissionId: \"placeholder\"\nobjective: \"placeholder\"\ncontext:",
      "occurrences": [
        {
          "path": "tests/tools/create-mission.coverage.test.ts",
          "line": 40
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 50
        }
      ]
    },
    {
      "snippet": "schemaVersion: \"2.0\"\nmissionId: \"placeholder\"\nobjective: \"placeholder\"\ncontext:\nbackground: \"\"",
      "occurrences": [
        {
          "path": "tests/tools/create-mission.coverage.test.ts",
          "line": 41
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 51
        }
      ]
    },
    {
      "snippet": "missionId: \"placeholder\"\nobjective: \"placeholder\"\ncontext:\nbackground: \"\"\ndependencies: []",
      "occurrences": [
        {
          "path": "tests/tools/create-mission.coverage.test.ts",
          "line": 42
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 52
        }
      ]
    },
    {
      "snippet": "objective: \"placeholder\"\ncontext:\nbackground: \"\"\ndependencies: []\nconstraints: []",
      "occurrences": [
        {
          "path": "tests/tools/create-mission.coverage.test.ts",
          "line": 43
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 53
        }
      ]
    },
    {
      "snippet": "context:\nbackground: \"\"\ndependencies: []\nconstraints: []\nsuccessCriteria:",
      "occurrences": [
        {
          "path": "tests/tools/create-mission.coverage.test.ts",
          "line": 44
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 54
        }
      ]
    },
    {
      "snippet": "background: \"\"\ndependencies: []\nconstraints: []\nsuccessCriteria:\n- \"placeholder\"",
      "occurrences": [
        {
          "path": "tests/tools/create-mission.coverage.test.ts",
          "line": 45
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 55
        }
      ]
    },
    {
      "snippet": "dependencies: []\nconstraints: []\nsuccessCriteria:\n- \"placeholder\"\ndeliverables:",
      "occurrences": [
        {
          "path": "tests/tools/create-mission.coverage.test.ts",
          "line": 46
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 56
        }
      ]
    },
    {
      "snippet": "constraints: []\nsuccessCriteria:\n- \"placeholder\"\ndeliverables:\n- \"placeholder\"",
      "occurrences": [
        {
          "path": "tests/tools/create-mission.coverage.test.ts",
          "line": 47
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 57
        }
      ]
    },
    {
      "snippet": "successCriteria:\n- \"placeholder\"\ndeliverables:\n- \"placeholder\"\ndomainFields: {}",
      "occurrences": [
        {
          "path": "tests/tools/create-mission.coverage.test.ts",
          "line": 48
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 58
        }
      ]
    },
    {
      "snippet": "- \"placeholder\"\ndeliverables:\n- \"placeholder\"\ndomainFields: {}\n`;",
      "occurrences": [
        {
          "path": "tests/tools/create-mission.coverage.test.ts",
          "line": 49
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 59
        }
      ]
    },
    {
      "snippet": "deliverables:\n- \"placeholder\"\ndomainFields: {}\n`;\nfs.writeFileSync(path.join(testDataDir, 'generic_mission.yaml'), genericTemplate);",
      "occurrences": [
        {
          "path": "tests/tools/create-mission.coverage.test.ts",
          "line": 50
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 60
        }
      ]
    },
    {
      "snippet": "- \"placeholder\"\ndomainFields: {}\n`;\nfs.writeFileSync(path.join(testDataDir, 'generic_mission.yaml'), genericTemplate);\n});",
      "occurrences": [
        {
          "path": "tests/tools/create-mission.coverage.test.ts",
          "line": 51
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 61
        }
      ]
    },
    {
      "snippet": "domainFields: {}\n`;\nfs.writeFileSync(path.join(testDataDir, 'generic_mission.yaml'), genericTemplate);\n});\n",
      "occurrences": [
        {
          "path": "tests/tools/create-mission.coverage.test.ts",
          "line": 52
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 62
        }
      ]
    },
    {
      "snippet": "`;\nfs.writeFileSync(path.join(testDataDir, 'generic_mission.yaml'), genericTemplate);\n});\n\nafterEach(() => {",
      "occurrences": [
        {
          "path": "tests/tools/create-mission.coverage.test.ts",
          "line": 53
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 63
        }
      ]
    },
    {
      "snippet": "\nbeforeAll(() => {\n// Create test data directory\nif (!fs.existsSync(testDataDir)) {\nfs.mkdirSync(testDataDir, { recursive: true });",
      "occurrences": [
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 33
        },
        {
          "path": "tests/tools/list-domains.test.ts",
          "line": 23
        }
      ]
    },
    {
      "snippet": "beforeAll(() => {\n// Create test data directory\nif (!fs.existsSync(testDataDir)) {\nfs.mkdirSync(testDataDir, { recursive: true });\n}",
      "occurrences": [
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 34
        },
        {
          "path": "tests/tools/list-domains.test.ts",
          "line": 24
        }
      ]
    },
    {
      "snippet": "// Create test data directory\nif (!fs.existsSync(testDataDir)) {\nfs.mkdirSync(testDataDir, { recursive: true });\n}\n});",
      "occurrences": [
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 35
        },
        {
          "path": "tests/tools/list-domains.test.ts",
          "line": 25
        }
      ]
    },
    {
      "snippet": "});\n\nafterEach(() => {\n// Clean up test files\nconst files = fs.readdirSync(testDataDir);",
      "occurrences": [
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 65
        },
        {
          "path": "tests/tools/list-domains.test.ts",
          "line": 35
        }
      ]
    },
    {
      "snippet": "\nafterEach(() => {\n// Clean up test files\nconst files = fs.readdirSync(testDataDir);\nfiles.forEach(file => {",
      "occurrences": [
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 66
        },
        {
          "path": "tests/tools/list-domains.test.ts",
          "line": 36
        }
      ]
    },
    {
      "snippet": "};\n\nconst result = tool.execute(params, []);\nconst mission = YAML.parse(result) as GenericMission;\n",
      "occurrences": [
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 85
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 106
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 125
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 142
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 351
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 490
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 508
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 529
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 542
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 559
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 572
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 585
        }
      ]
    },
    {
      "snippet": "],\n};\n\nconst result = tool.execute(params, []);\nconst mission = YAML.parse(result) as GenericMission;",
      "occurrences": [
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 105
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 124
        }
      ]
    },
    {
      "snippet": "};\n\nconst result = tool.execute(params, registryEntries);\nconst mission = YAML.parse(result) as GenericMission;\n",
      "occurrences": [
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 228
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 246
        }
      ]
    },
    {
      "snippet": "};\n\nexpect(() => {\ntool.execute(params, []);\n}).toThrow(/objective.*required/i);",
      "occurrences": [
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 273
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 291
        }
      ]
    },
    {
      "snippet": "\nexpect(() => {\ntool.execute(params, []);\n}).toThrow(/objective.*required/i);\n});",
      "occurrences": [
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 274
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 282
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 292
        }
      ]
    },
    {
      "snippet": "expect(() => {\ntool.execute(params, []);\n}).toThrow(/objective.*required/i);\n});\n",
      "occurrences": [
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 275
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 283
        },
        {
          "path": "tests/tools/create-mission.test.ts",
          "line": 293
        }
      ]
    },
    {
      "snippet": "context: 'Smoke testing harness',\n},\nmetadata\n);\n",
      "occurrences": [
        {
          "path": "tests/tools/export-template.test.ts",
          "line": 25
        },
        {
          "path": "tests/tools/export-template.test.ts",
          "line": 51
        }
      ]
    },
    {
      "snippet": "},\nmetadata\n);\n\nconst result = await exportTemplate({",
      "occurrences": [
        {
          "path": "tests/tools/export-template.test.ts",
          "line": 26
        },
        {
          "path": "tests/tools/export-template.test.ts",
          "line": 52
        }
      ]
    },
    {
      "snippet": "metadata\n);\n\nconst result = await exportTemplate({\ntemplate,",
      "occurrences": [
        {
          "path": "tests/tools/export-template.test.ts",
          "line": 27
        },
        {
          "path": "tests/tools/export-template.test.ts",
          "line": 53
        }
      ]
    },
    {
      "snippet": ");\n\nconst result = await exportTemplate({\ntemplate,\noutputPath,",
      "occurrences": [
        {
          "path": "tests/tools/export-template.test.ts",
          "line": 28
        },
        {
          "path": "tests/tools/export-template.test.ts",
          "line": 54
        }
      ]
    },
    {
      "snippet": "\nconst result = await exportTemplate({\ntemplate,\noutputPath,\nbaseDir,",
      "occurrences": [
        {
          "path": "tests/tools/export-template.test.ts",
          "line": 29
        },
        {
          "path": "tests/tools/export-template.test.ts",
          "line": 55
        }
      ]
    },
    {
      "snippet": "templateName: 'test-template',\nauthor: 'test@example.com'\n};\n\nconst result = await extractTemplate(params);",
      "occurrences": [
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 35
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 73
        }
      ]
    },
    {
      "snippet": "author: 'test@example.com'\n};\n\nconst result = await extractTemplate(params);\n",
      "occurrences": [
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 36
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 49
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 74
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 89
        }
      ]
    },
    {
      "snippet": "};\n\nconst result = await extractTemplate(params);\n\nexpect(result.success).toBe(false);",
      "occurrences": [
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 37
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 50
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 62
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 75
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 90
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 106
        }
      ]
    },
    {
      "snippet": "\nconst params: ExtractTemplateParams = {\nmissionFile: testMissionDir,\ntemplateName: 'test-template',\nauthor: 'test@example.com',",
      "occurrences": [
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 100
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 178
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 283
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 360
        }
      ]
    },
    {
      "snippet": "author: 'test@example.com',\noutputDir\n};\n\nconst result = await extractTemplate(params);",
      "occurrences": [
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 134
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 160
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 265
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 287
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 364
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 409
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 437
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 474
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 495
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 512
        }
      ]
    },
    {
      "snippet": "outputDir\n};\n\nconst result = await extractTemplate(params);\n",
      "occurrences": [
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 135
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 161
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 239
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 266
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 288
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 365
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 410
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 438
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 475
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 496
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 513
        }
      ]
    },
    {
      "snippet": "};\n\nconst result = await extractTemplate(params);\n\nexpect(result.success).toBe(true);",
      "occurrences": [
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 136
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 162
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 185
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 240
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 267
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 289
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 366
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 411
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 439
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 476
        }
      ]
    },
    {
      "snippet": "\nconst result = await extractTemplate(params);\n\nexpect(result.success).toBe(true);\nexpect(result.template).toBeDefined();",
      "occurrences": [
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 137
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 186
        }
      ]
    },
    {
      "snippet": "\nconst result = await extractTemplate(params);\n\nexpect(result.success).toBe(true);\n",
      "occurrences": [
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 163
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 207
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 241
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 268
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 290
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 367
        }
      ]
    },
    {
      "snippet": ");\n\nconst params: ExtractTemplateParams = {\nmissionFile: testMissionDir,\ntemplateName: 'test-template',",
      "occurrences": [
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 177
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 197
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 233
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 282
        }
      ]
    },
    {
      "snippet": "fs.writeFileSync(\npath.join(testMissionDir, 'app.js'),\n'console.log(\"test\")'\n);\n",
      "occurrences": [
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 194
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 380
        }
      ]
    },
    {
      "snippet": "path.join(testMissionDir, 'app.js'),\n'console.log(\"test\")'\n);\n\nconst params: ExtractTemplateParams = {",
      "occurrences": [
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 195
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 381
        }
      ]
    },
    {
      "snippet": "'console.log(\"test\")'\n);\n\nconst params: ExtractTemplateParams = {\nmissionFile: testMissionDir,",
      "occurrences": [
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 196
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 382
        }
      ]
    },
    {
      "snippet": "const params: ExtractTemplateParams = {\nmissionFile: testMissionDir,\ntemplateName: 'test-template',\nauthor: 'test@example.com',\noutputDir",
      "occurrences": [
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 284
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 361
        }
      ]
    },
    {
      "snippet": "missionFile: testMissionDir,\ntemplateName: 'test-template',\nauthor: 'test@example.com',\noutputDir\n};",
      "occurrences": [
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 285
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 362
        }
      ]
    },
    {
      "snippet": "templateName: 'test-template',\nauthor: 'test@example.com',\noutputDir\n};\n",
      "occurrences": [
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 286
        },
        {
          "path": "tests/tools/extract-template.test.ts",
          "line": 363
        }
      ]
    },
    {
      "snippet": "const registryContent = `\ndomains:\n- name: foundation\ndescription: Core infrastructure\nversion: 1.0.0",
      "occurrences": [
        {
          "path": "tests/tools/list-domains.test.ts",
          "line": 52
        },
        {
          "path": "tests/tools/list-domains.test.ts",
          "line": 75
        },
        {
          "path": "tests/tools/list-domains.test.ts",
          "line": 105
        },
        {
          "path": "tests/tools/list-domains.test.ts",
          "line": 151
        }
      ]
    },
    {
      "snippet": "\nexpect(result).toHaveLength(1);\nexpect(result[0]).toEqual({\nname: 'foundation',\ndescription: 'Core infrastructure',",
      "occurrences": [
        {
          "path": "tests/tools/list-domains.test.ts",
          "line": 64
        },
        {
          "path": "tests/tools/list-domains.test.ts",
          "line": 116
        }
      ]
    },
    {
      "snippet": "expect(result).toHaveLength(1);\nexpect(result[0]).toEqual({\nname: 'foundation',\ndescription: 'Core infrastructure',\nversion: '1.0.0',",
      "occurrences": [
        {
          "path": "tests/tools/list-domains.test.ts",
          "line": 65
        },
        {
          "path": "tests/tools/list-domains.test.ts",
          "line": 117
        }
      ]
    },
    {
      "snippet": "domains:\n- name: foundation\ndescription: Core infrastructure\nversion: 1.0.0\npath: domains/foundation",
      "occurrences": [
        {
          "path": "tests/tools/list-domains.test.ts",
          "line": 76
        },
        {
          "path": "tests/tools/list-domains.test.ts",
          "line": 106
        },
        {
          "path": "tests/tools/list-domains.test.ts",
          "line": 152
        }
      ]
    },
    {
      "snippet": "- name: foundation\ndescription: Core infrastructure\nversion: 1.0.0\npath: domains/foundation\nschema_version: 1.0.0",
      "occurrences": [
        {
          "path": "tests/tools/list-domains.test.ts",
          "line": 77
        },
        {
          "path": "tests/tools/list-domains.test.ts",
          "line": 107
        },
        {
          "path": "tests/tools/list-domains.test.ts",
          "line": 153
        }
      ]
    },
    {
      "snippet": "description: Core infrastructure\nversion: 1.0.0\npath: domains/foundation\nschema_version: 1.0.0\n`;",
      "occurrences": [
        {
          "path": "tests/tools/list-domains.test.ts",
          "line": 108
        },
        {
          "path": "tests/tools/list-domains.test.ts",
          "line": 154
        }
      ]
    },
    {
      "snippet": "const domains: DomainInfo[] = [\n{\nname: 'foundation',\ndescription: 'Core infrastructure',\nversion: '1.0.0',",
      "occurrences": [
        {
          "path": "tests/tools/list-domains.test.ts",
          "line": 177
        },
        {
          "path": "tests/tools/list-domains.test.ts",
          "line": 195
        },
        {
          "path": "tests/tools/list-domains.test.ts",
          "line": 220
        }
      ]
    },
    {
      "snippet": "},\n];\n\nconst result = tool.formatForLLM(domains);\n",
      "occurrences": [
        {
          "path": "tests/tools/list-domains.test.ts",
          "line": 183
        },
        {
          "path": "tests/tools/list-domains.test.ts",
          "line": 206
        },
        {
          "path": "tests/tools/list-domains.test.ts",
          "line": 225
        },
        {
          "path": "tests/tools/list-domains.test.ts",
          "line": 260
        },
        {
          "path": "tests/tools/list-domains.test.ts",
          "line": 277
        }
      ]
    },
    {
      "snippet": "{\nname: 'foundation',\ndescription: 'Core infrastructure',\nversion: '1.0.0',\n},",
      "occurrences": [
        {
          "path": "tests/tools/list-domains.test.ts",
          "line": 196
        },
        {
          "path": "tests/tools/list-domains.test.ts",
          "line": 221
        }
      ]
    },
    {
      "snippet": "version: '1.0.0',\n},\n];\n\nconst result = tool.formatForLLM(domains);",
      "occurrences": [
        {
          "path": "tests/tools/list-domains.test.ts",
          "line": 224
        },
        {
          "path": "tests/tools/list-domains.test.ts",
          "line": 259
        },
        {
          "path": "tests/tools/list-domains.test.ts",
          "line": 276
        }
      ]
    },
    {
      "snippet": "});\n\nafterEach(async () => {\n// Clean up temp directory\ntry {",
      "occurrences": [
        {
          "path": "tests/tools/optimize-tokens.test.ts",
          "line": 20
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 44
        }
      ]
    },
    {
      "snippet": "\nafterEach(async () => {\n// Clean up temp directory\ntry {\nawait fs.rm(tempDir, { recursive: true, force: true });",
      "occurrences": [
        {
          "path": "tests/tools/optimize-tokens.test.ts",
          "line": 21
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 45
        }
      ]
    },
    {
      "snippet": "afterEach(async () => {\n// Clean up temp directory\ntry {\nawait fs.rm(tempDir, { recursive: true, force: true });\n} catch {",
      "occurrences": [
        {
          "path": "tests/tools/optimize-tokens.test.ts",
          "line": 22
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 46
        }
      ]
    },
    {
      "snippet": "// Clean up temp directory\ntry {\nawait fs.rm(tempDir, { recursive: true, force: true });\n} catch {\n// Ignore cleanup errors",
      "occurrences": [
        {
          "path": "tests/tools/optimize-tokens.test.ts",
          "line": 23
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 47
        }
      ]
    },
    {
      "snippet": "try {\nawait fs.rm(tempDir, { recursive: true, force: true });\n} catch {\n// Ignore cleanup errors\n}",
      "occurrences": [
        {
          "path": "tests/tools/optimize-tokens.test.ts",
          "line": 24
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 48
        }
      ]
    },
    {
      "snippet": "await fs.rm(tempDir, { recursive: true, force: true });\n} catch {\n// Ignore cleanup errors\n}\n});",
      "occurrences": [
        {
          "path": "tests/tools/optimize-tokens.test.ts",
          "line": 25
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 49
        }
      ]
    },
    {
      "snippet": "} catch {\n// Ignore cleanup errors\n}\n});\n",
      "occurrences": [
        {
          "path": "tests/tools/optimize-tokens.test.ts",
          "line": 26
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 50
        }
      ]
    },
    {
      "snippet": "// Ignore cleanup errors\n}\n});\n\ndescribe('execute', () => {",
      "occurrences": [
        {
          "path": "tests/tools/optimize-tokens.test.ts",
          "line": 27
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 51
        }
      ]
    },
    {
      "snippet": "\nawait fs.writeFile(testFilePath, missionContent, 'utf-8');\n\nconst params: OptimizeTokensParams = {\nmissionFile: testFilePath,",
      "occurrences": [
        {
          "path": "tests/tools/optimize-tokens.test.ts",
          "line": 36
        },
        {
          "path": "tests/tools/optimize-tokens.test.ts",
          "line": 150
        }
      ]
    },
    {
      "snippet": "await fs.writeFile(testFilePath, missionContent, 'utf-8');\n\nconst params: OptimizeTokensParams = {\nmissionFile: testFilePath,\ntargetModel: 'claude',",
      "occurrences": [
        {
          "path": "tests/tools/optimize-tokens.test.ts",
          "line": 37
        },
        {
          "path": "tests/tools/optimize-tokens.test.ts",
          "line": 151
        },
        {
          "path": "tests/tools/optimize-tokens.test.ts",
          "line": 189
        }
      ]
    },
    {
      "snippet": "};\n\nconst result = await tool.execute(params);\n\nexpect(result.success).toBe(true);",
      "occurrences": [
        {
          "path": "tests/tools/optimize-tokens.test.ts",
          "line": 43
        },
        {
          "path": "tests/tools/optimize-tokens.test.ts",
          "line": 158
        }
      ]
    },
    {
      "snippet": "\nconst params: OptimizeTokensParams = {\nmissionFile: testFilePath,\ntargetModel: 'claude',\ndryRun: true,",
      "occurrences": [
        {
          "path": "tests/tools/optimize-tokens.test.ts",
          "line": 76
        },
        {
          "path": "tests/tools/optimize-tokens.test.ts",
          "line": 169
        },
        {
          "path": "tests/tools/optimize-tokens.test.ts",
          "line": 190
        }
      ]
    },
    {
      "snippet": "const params: OptimizeTokensParams = {\nmissionFile: testFilePath,\ntargetModel: 'claude',\ndryRun: true,\n};",
      "occurrences": [
        {
          "path": "tests/tools/optimize-tokens.test.ts",
          "line": 77
        },
        {
          "path": "tests/tools/optimize-tokens.test.ts",
          "line": 170
        },
        {
          "path": "tests/tools/optimize-tokens.test.ts",
          "line": 191
        }
      ]
    },
    {
      "snippet": "missionFile: testFilePath,\ntargetModel: 'claude',\ndryRun: true,\n};\n",
      "occurrences": [
        {
          "path": "tests/tools/optimize-tokens.test.ts",
          "line": 78
        },
        {
          "path": "tests/tools/optimize-tokens.test.ts",
          "line": 171
        },
        {
          "path": "tests/tools/optimize-tokens.test.ts",
          "line": 192
        }
      ]
    },
    {
      "snippet": "targetModel: 'claude',\ndryRun: true,\n};\n\nconst result = await tool.execute(params);",
      "occurrences": [
        {
          "path": "tests/tools/optimize-tokens.test.ts",
          "line": 79
        },
        {
          "path": "tests/tools/optimize-tokens.test.ts",
          "line": 172
        },
        {
          "path": "tests/tools/optimize-tokens.test.ts",
          "line": 193
        }
      ]
    },
    {
      "snippet": "dryRun: true,\n};\n\nconst result = await tool.execute(params);\n",
      "occurrences": [
        {
          "path": "tests/tools/optimize-tokens.test.ts",
          "line": 80
        },
        {
          "path": "tests/tools/optimize-tokens.test.ts",
          "line": 157
        },
        {
          "path": "tests/tools/optimize-tokens.test.ts",
          "line": 173
        },
        {
          "path": "tests/tools/optimize-tokens.test.ts",
          "line": 194
        }
      ]
    },
    {
      "snippet": "targetModel: 'claude',\n};\n\nconst result = await tool.execute(params);\n",
      "occurrences": [
        {
          "path": "tests/tools/optimize-tokens.test.ts",
          "line": 95
        },
        {
          "path": "tests/tools/optimize-tokens.test.ts",
          "line": 217
        }
      ]
    },
    {
      "snippet": "dryRun: true,\n};\n\nconst result = await tool.execute(params);\nexpect(result.success).toBe(true);",
      "occurrences": [
        {
          "path": "tests/tools/optimize-tokens.test.ts",
          "line": 120
        },
        {
          "path": "tests/tools/optimize-tokens.test.ts",
          "line": 138
        }
      ]
    },
    {
      "snippet": "};\n\nconst result = await tool.execute(params);\nexpect(result.success).toBe(true);\n}",
      "occurrences": [
        {
          "path": "tests/tools/optimize-tokens.test.ts",
          "line": 121
        },
        {
          "path": "tests/tools/optimize-tokens.test.ts",
          "line": 139
        }
      ]
    },
    {
      "snippet": "\nconst result = await tool.execute(params);\nexpect(result.success).toBe(true);\n}\n});",
      "occurrences": [
        {
          "path": "tests/tools/optimize-tokens.test.ts",
          "line": 122
        },
        {
          "path": "tests/tools/optimize-tokens.test.ts",
          "line": 140
        }
      ]
    },
    {
      "snippet": "const result = await tool.execute(params);\nexpect(result.success).toBe(true);\n}\n});\n",
      "occurrences": [
        {
          "path": "tests/tools/optimize-tokens.test.ts",
          "line": 123
        },
        {
          "path": "tests/tools/optimize-tokens.test.ts",
          "line": 141
        }
      ]
    },
    {
      "snippet": "outputDir: tempDir,\n};\n\nconst result = await tool.execute(params);\n",
      "occurrences": [
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 97
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 173
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 216
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 262
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 321
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 400
        }
      ]
    },
    {
      "snippet": "domainFields: {},\n};\n\nawait fs.writeFile(testMissionPath, YAML.stringify(mission), 'utf-8');\n",
      "occurrences": [
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 166
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 209
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 254
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 281
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 393
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 425
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 474
        }
      ]
    },
    {
      "snippet": "};\n\nawait fs.writeFile(testMissionPath, YAML.stringify(mission), 'utf-8');\n\nconst params: SplitMissionParams = {",
      "occurrences": [
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 167
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 210
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 255
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 282
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 394
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 426
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 475
        }
      ]
    },
    {
      "snippet": "\nawait fs.writeFile(testMissionPath, YAML.stringify(mission), 'utf-8');\n\nconst params: SplitMissionParams = {\nmissionFile: testMissionPath,",
      "occurrences": [
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 168
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 211
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 256
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 283
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 395
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 427
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 476
        }
      ]
    },
    {
      "snippet": "await fs.writeFile(testMissionPath, YAML.stringify(mission), 'utf-8');\n\nconst params: SplitMissionParams = {\nmissionFile: testMissionPath,\noutputDir: tempDir,",
      "occurrences": [
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 169
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 212
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 396
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 428
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 477
        }
      ]
    },
    {
      "snippet": "\nconst params: SplitMissionParams = {\nmissionFile: testMissionPath,\noutputDir: tempDir,\n};",
      "occurrences": [
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 170
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 213
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 318
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 397
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 429
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 478
        }
      ]
    },
    {
      "snippet": "const params: SplitMissionParams = {\nmissionFile: testMissionPath,\noutputDir: tempDir,\n};\n",
      "occurrences": [
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 171
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 214
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 319
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 398
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 430
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 479
        }
      ]
    },
    {
      "snippet": "missionFile: testMissionPath,\noutputDir: tempDir,\n};\n\nconst result = await tool.execute(params);",
      "occurrences": [
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 172
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 215
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 320
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 399
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 431
        }
      ]
    },
    {
      "snippet": "};\n\nconst result = await tool.execute(params);\n\nif (result.shouldSplit && result.subMissionFiles) {",
      "occurrences": [
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 174
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 263
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 401
        }
      ]
    },
    {
      "snippet": "context: {},\nsuccessCriteria: ['A', 'B', 'C'],\ndeliverables: ['X', 'Y', 'Z'],\ndomainFields: {},\n};",
      "occurrences": [
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 278
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 422
        }
      ]
    },
    {
      "snippet": "successCriteria: ['A', 'B', 'C'],\ndeliverables: ['X', 'Y', 'Z'],\ndomainFields: {},\n};\n",
      "occurrences": [
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 279
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 423
        }
      ]
    },
    {
      "snippet": "deliverables: ['X', 'Y', 'Z'],\ndomainFields: {},\n};\n\nawait fs.writeFile(testMissionPath, YAML.stringify(mission), 'utf-8');",
      "occurrences": [
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 280
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 424
        }
      ]
    },
    {
      "snippet": "\nexpect(result).toBeDefined();\nexpect(result.complexity).toBeDefined();\n});\n});",
      "occurrences": [
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 325
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 377
        }
      ]
    },
    {
      "snippet": "expect(result).toBeDefined();\nexpect(result.complexity).toBeDefined();\n});\n});\n",
      "occurrences": [
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 326
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 378
        }
      ]
    },
    {
      "snippet": "};\n\nawait expect(tool.execute(params)).rejects.toThrow();\n});\n",
      "occurrences": [
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 343
        },
        {
          "path": "tests/tools/split-mission.test.ts",
          "line": 354
        }
      ]
    },
    {
      "snippet": "reasoning: 'Mock reasoning',\n};\n\nconst result = await new Promise<any>((resolve, reject) => {\njest.isolateModules(() => {",
      "occurrences": [
        {
          "path": "tests/tools/suggest-splits.execute.test.ts",
          "line": 48
        },
        {
          "path": "tests/tools/suggest-splits.execute.test.ts",
          "line": 102
        }
      ]
    },
    {
      "snippet": "};\n\nconst result = await new Promise<any>((resolve, reject) => {\njest.isolateModules(() => {\njest.doMock('../../src/intelligence/mission-splitter', () => ({",
      "occurrences": [
        {
          "path": "tests/tools/suggest-splits.execute.test.ts",
          "line": 49
        },
        {
          "path": "tests/tools/suggest-splits.execute.test.ts",
          "line": 103
        }
      ]
    },
    {
      "snippet": "\nconst result = await new Promise<any>((resolve, reject) => {\njest.isolateModules(() => {\njest.doMock('../../src/intelligence/mission-splitter', () => ({\nMissionSplitter: class {",
      "occurrences": [
        {
          "path": "tests/tools/suggest-splits.execute.test.ts",
          "line": 50
        },
        {
          "path": "tests/tools/suggest-splits.execute.test.ts",
          "line": 104
        }
      ]
    },
    {
      "snippet": "const result = await new Promise<any>((resolve, reject) => {\njest.isolateModules(() => {\njest.doMock('../../src/intelligence/mission-splitter', () => ({\nMissionSplitter: class {\nasync suggestSplits() ",
      "occurrences": [
        {
          "path": "tests/tools/suggest-splits.execute.test.ts",
          "line": 51
        },
        {
          "path": "tests/tools/suggest-splits.execute.test.ts",
          "line": 105
        }
      ]
    },
    {
      "snippet": "jest.isolateModules(() => {\njest.doMock('../../src/intelligence/mission-splitter', () => ({\nMissionSplitter: class {\nasync suggestSplits() {\nreturn mockSuggestion;",
      "occurrences": [
        {
          "path": "tests/tools/suggest-splits.execute.test.ts",
          "line": 52
        },
        {
          "path": "tests/tools/suggest-splits.execute.test.ts",
          "line": 106
        }
      ]
    },
    {
      "snippet": "jest.doMock('../../src/intelligence/mission-splitter', () => ({\nMissionSplitter: class {\nasync suggestSplits() {\nreturn mockSuggestion;\n}",
      "occurrences": [
        {
          "path": "tests/tools/suggest-splits.execute.test.ts",
          "line": 53
        },
        {
          "path": "tests/tools/suggest-splits.execute.test.ts",
          "line": 107
        }
      ]
    },
    {
      "snippet": "MissionSplitter: class {\nasync suggestSplits() {\nreturn mockSuggestion;\n}\n},",
      "occurrences": [
        {
          "path": "tests/tools/suggest-splits.execute.test.ts",
          "line": 54
        },
        {
          "path": "tests/tools/suggest-splits.execute.test.ts",
          "line": 108
        }
      ]
    },
    {
      "snippet": "async suggestSplits() {\nreturn mockSuggestion;\n}\n},\n}));",
      "occurrences": [
        {
          "path": "tests/tools/suggest-splits.execute.test.ts",
          "line": 55
        },
        {
          "path": "tests/tools/suggest-splits.execute.test.ts",
          "line": 109
        }
      ]
    },
    {
      "snippet": "return mockSuggestion;\n}\n},\n}));\njest.doMock('../../src/intelligence/complexity-scorer', () => ({",
      "occurrences": [
        {
          "path": "tests/tools/suggest-splits.execute.test.ts",
          "line": 56
        },
        {
          "path": "tests/tools/suggest-splits.execute.test.ts",
          "line": 110
        }
      ]
    },
    {
      "snippet": "}\n},\n}));\njest.doMock('../../src/intelligence/complexity-scorer', () => ({\nComplexityScorer: class {},",
      "occurrences": [
        {
          "path": "tests/tools/suggest-splits.execute.test.ts",
          "line": 57
        },
        {
          "path": "tests/tools/suggest-splits.execute.test.ts",
          "line": 111
        }
      ]
    },
    {
      "snippet": "},\n}));\njest.doMock('../../src/intelligence/complexity-scorer', () => ({\nComplexityScorer: class {},\n}));",
      "occurrences": [
        {
          "path": "tests/tools/suggest-splits.execute.test.ts",
          "line": 58
        },
        {
          "path": "tests/tools/suggest-splits.execute.test.ts",
          "line": 112
        }
      ]
    },
    {
      "snippet": "}));\njest.doMock('../../src/intelligence/complexity-scorer', () => ({\nComplexityScorer: class {},\n}));\n",
      "occurrences": [
        {
          "path": "tests/tools/suggest-splits.execute.test.ts",
          "line": 59
        },
        {
          "path": "tests/tools/suggest-splits.execute.test.ts",
          "line": 113
        }
      ]
    },
    {
      "snippet": "jest.doMock('../../src/intelligence/complexity-scorer', () => ({\nComplexityScorer: class {},\n}));\n\nconst { SuggestSplitsToolImpl } = require('../../src/tools/suggest-splits');",
      "occurrences": [
        {
          "path": "tests/tools/suggest-splits.execute.test.ts",
          "line": 60
        },
        {
          "path": "tests/tools/suggest-splits.execute.test.ts",
          "line": 114
        }
      ]
    },
    {
      "snippet": "ComplexityScorer: class {},\n}));\n\nconst { SuggestSplitsToolImpl } = require('../../src/tools/suggest-splits');\nconst tokenCounter = {",
      "occurrences": [
        {
          "path": "tests/tools/suggest-splits.execute.test.ts",
          "line": 61
        },
        {
          "path": "tests/tools/suggest-splits.execute.test.ts",
          "line": 115
        }
      ]
    },
    {
      "snippet": "versionManager.parseVersion('1.0.0'),\nversionManager.parseVersion('1.1.0'),\n'Test migration',\nasync (template) => template\n);",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 45
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 309
        }
      ]
    },
    {
      "snippet": "versionManager.parseVersion('1.1.0'),\n'Test migration',\nasync (template) => template\n);\n",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 46
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 310
        }
      ]
    },
    {
      "snippet": "'Test migration',\nasync (template) => template\n);\n\nmigrationEngine.registerMigration('test-template', migration);",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 47
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 311
        }
      ]
    },
    {
      "snippet": "async (template) => template\n);\n\nmigrationEngine.registerMigration('test-template', migration);\n",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 48
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 312
        }
      ]
    },
    {
      "snippet": ")\n);\n\nmigrationEngine.registerMigration(\n'test-template',",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 97
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 109
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 194
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 267
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 565
        }
      ]
    },
    {
      "snippet": ");\n\nmigrationEngine.registerMigration(\n'test-template',\ncreateMigration(",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 98
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 110
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 195
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 268
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 566
        }
      ]
    },
    {
      "snippet": "async (template) => template,\n{ estimatedDuration: 20 }\n)\n);\n});",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 119
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 575
        }
      ]
    },
    {
      "snippet": "{ estimatedDuration: 20 }\n)\n);\n});\n",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 120
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 576
        }
      ]
    },
    {
      "snippet": "const path = migrationEngine.findMigrationPath(\n'test-template',\nversionManager.parseVersion('1.0.0'),\nversionManager.parseVersion('1.1.0')\n);",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 126
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 234
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 317
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 353
        }
      ]
    },
    {
      "snippet": "'test-template',\nversionManager.parseVersion('1.0.0'),\nversionManager.parseVersion('1.1.0')\n);\n",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 127
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 235
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 318
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 354
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 382
        }
      ]
    },
    {
      "snippet": "const path = migrationEngine.findMigrationPath(\n'test-template',\nversionManager.parseVersion('1.0.0'),\nversionManager.parseVersion('2.0.0')\n);",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 138
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 152
        }
      ]
    },
    {
      "snippet": "'test-template',\nversionManager.parseVersion('1.0.0'),\nversionManager.parseVersion('2.0.0')\n);\n",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 139
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 153
        }
      ]
    },
    {
      "snippet": "versionManager.parseVersion('1.0.0'),\nversionManager.parseVersion('2.0.0')\n);\n\nexpect(path).not.toBeNull();",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 140
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 154
        }
      ]
    },
    {
      "snippet": ");\n\nexpect(path).toBeNull();\n});\n",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 167
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 177
        }
      ]
    },
    {
      "snippet": ")\n);\n\nconst path = migrationEngine.findMigrationPath(\n'test-template',",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 205
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 281
        }
      ]
    },
    {
      "snippet": ");\n\nconst path = migrationEngine.findMigrationPath(\n'test-template',\nversionManager.parseVersion('1.0.0'),",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 206
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 282
        }
      ]
    },
    {
      "snippet": "\nconst path = migrationEngine.findMigrationPath(\n'test-template',\nversionManager.parseVersion('1.0.0'),\nversionManager.parseVersion('1.2.0')",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 207
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 283
        }
      ]
    },
    {
      "snippet": "const path = migrationEngine.findMigrationPath(\n'test-template',\nversionManager.parseVersion('1.0.0'),\nversionManager.parseVersion('1.2.0')\n);",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 208
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 284
        }
      ]
    },
    {
      "snippet": "'test-template',\nversionManager.parseVersion('1.0.0'),\nversionManager.parseVersion('1.2.0')\n);\n",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 209
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 285
        }
      ]
    },
    {
      "snippet": ");\n\nmigrationEngine.registerMigration('test-template', migration);\n\nconst path = migrationEngine.findMigrationPath(",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 230
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 313
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 349
        }
      ]
    },
    {
      "snippet": "\nmigrationEngine.registerMigration('test-template', migration);\n\nconst path = migrationEngine.findMigrationPath(\n'test-template',",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 231
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 314
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 350
        }
      ]
    },
    {
      "snippet": "migrationEngine.registerMigration('test-template', migration);\n\nconst path = migrationEngine.findMigrationPath(\n'test-template',\nversionManager.parseVersion('1.0.0'),",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 232
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 315
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 351
        }
      ]
    },
    {
      "snippet": "\nconst path = migrationEngine.findMigrationPath(\n'test-template',\nversionManager.parseVersion('1.0.0'),\nversionManager.parseVersion('1.1.0')",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 233
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 316
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 352
        }
      ]
    },
    {
      "snippet": "versionManager.parseVersion('1.0.0'),\nversionManager.parseVersion('1.1.0')\n);\n\nconst template = { name: 'test' };",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 236
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 319
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 355
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 383
        }
      ]
    },
    {
      "snippet": "versionManager.parseVersion('1.1.0')\n);\n\nconst template = { name: 'test' };\nconst result = await migrationEngine.migrate(",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 237
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 320
        }
      ]
    },
    {
      "snippet": ");\n\nconst template = { name: 'test' };\nconst result = await migrationEngine.migrate(\n'test-template',",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 238
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 288
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 321
        }
      ]
    },
    {
      "snippet": "\nconst template = { name: 'test' };\nconst result = await migrationEngine.migrate(\n'test-template',\ntemplate,",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 239
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 289
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 322
        }
      ]
    },
    {
      "snippet": "const template = { name: 'test' };\nconst result = await migrationEngine.migrate(\n'test-template',\ntemplate,\npath!,",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 240
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 290
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 323
        }
      ]
    },
    {
      "snippet": "const result = await migrationEngine.migrate(\n'test-template',\ntemplate,\npath!,\ntestDir",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 241
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 291
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 324
        }
      ]
    },
    {
      "snippet": "'test-template',\ntemplate,\npath!,\ntestDir\n);",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 242
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 292
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 325
        }
      ]
    },
    {
      "snippet": "template,\npath!,\ntestDir\n);\n",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 243
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 293
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 326
        }
      ]
    },
    {
      "snippet": "path!,\ntestDir\n);\n\nexpect(result.success).toBe(true);",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 244
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 294
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 327
        }
      ]
    },
    {
      "snippet": "testDir\n);\n\nexpect(result.success).toBe(true);\nexpect(result.migratedTemplate).toEqual({",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 245
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 295
        }
      ]
    },
    {
      "snippet": ");\n\nexpect(result.success).toBe(true);\nexpect(result.migratedTemplate).toEqual({\nname: 'test',",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 246
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 296
        }
      ]
    },
    {
      "snippet": "'test',\nversionManager.parseVersion('1.0.0'),\nversionManager.parseVersion('1.1.0'),\n'Test migration',\nasync (template) => template",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 308
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 605
        }
      ]
    },
    {
      "snippet": "const migration = createMigration(\n'failing-migration',\nversionManager.parseVersion('1.0.0'),\nversionManager.parseVersion('1.1.0'),\n'Failing migration',",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 341
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 369
        }
      ]
    },
    {
      "snippet": "'failing-migration',\nversionManager.parseVersion('1.0.0'),\nversionManager.parseVersion('1.1.0'),\n'Failing migration',\nasync () => {",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 342
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 370
        }
      ]
    },
    {
      "snippet": "versionManager.parseVersion('1.0.0'),\nversionManager.parseVersion('1.1.0'),\n'Failing migration',\nasync () => {\nthrow new Error('Migration failed');",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 343
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 371
        }
      ]
    },
    {
      "snippet": "versionManager.parseVersion('1.1.0'),\n'Failing migration',\nasync () => {\nthrow new Error('Migration failed');\n}",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 344
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 372
        }
      ]
    },
    {
      "snippet": "'Failing migration',\nasync () => {\nthrow new Error('Migration failed');\n}\n);",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 345
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 373
        }
      ]
    },
    {
      "snippet": "async () => {\nthrow new Error('Migration failed');\n}\n);\n",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 346
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 374
        }
      ]
    },
    {
      "snippet": "async (template) => template\n);\n\nconst validation = migrationEngine.validateMigration(migration);\nexpect(validation.valid).toBe(false);",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 439
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 453
        }
      ]
    },
    {
      "snippet": "versionManager.registerVersion({\ntemplateId: 'test-template',\nversion: versionManager.parseVersion('1.0.0'),\nreleaseDate: '2025-01-01T00:00:00Z',\n});",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 484
        },
        {
          "path": "tests/versioning/version-manager.test.ts",
          "line": 247
        },
        {
          "path": "tests/versioning/version-manager.test.ts",
          "line": 271
        },
        {
          "path": "tests/versioning/version-manager.test.ts",
          "line": 288
        }
      ]
    },
    {
      "snippet": "templateId: 'test-template',\nversion: versionManager.parseVersion('1.0.0'),\nreleaseDate: '2025-01-01T00:00:00Z',\n});\n",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 485
        },
        {
          "path": "tests/versioning/version-manager.test.ts",
          "line": 248
        },
        {
          "path": "tests/versioning/version-manager.test.ts",
          "line": 272
        },
        {
          "path": "tests/versioning/version-manager.test.ts",
          "line": 289
        }
      ]
    },
    {
      "snippet": "version: versionManager.parseVersion('1.0.0'),\nreleaseDate: '2025-01-01T00:00:00Z',\n});\n\nversionManager.registerVersion({",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 486
        },
        {
          "path": "tests/versioning/version-manager.test.ts",
          "line": 249
        },
        {
          "path": "tests/versioning/version-manager.test.ts",
          "line": 273
        },
        {
          "path": "tests/versioning/version-manager.test.ts",
          "line": 290
        },
        {
          "path": "tests/versioning/version-manager.test.ts",
          "line": 371
        }
      ]
    },
    {
      "snippet": "releaseDate: '2025-01-01T00:00:00Z',\n});\n\nversionManager.registerVersion({\ntemplateId: 'test-template',",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 487
        },
        {
          "path": "tests/versioning/version-manager.test.ts",
          "line": 250
        },
        {
          "path": "tests/versioning/version-manager.test.ts",
          "line": 274
        },
        {
          "path": "tests/versioning/version-manager.test.ts",
          "line": 291
        }
      ]
    },
    {
      "snippet": "\nexpect(\nmigrationEngine.canMigrate(\n'test-template',\nversionManager.parseVersion('1.0.0'),",
      "occurrences": [
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 612
        },
        {
          "path": "tests/versioning/migration-engine.test.ts",
          "line": 620
        }
      ]
    },
    {
      "snippet": "major: 1,\nminor: 2,\npatch: 3,\nprerelease: 'beta.1',\nbuildMetadata: 'build.123',",
      "occurrences": [
        {
          "path": "tests/versioning/version-manager.test.ts",
          "line": 45
        },
        {
          "path": "tests/versioning/version-manager.test.ts",
          "line": 79
        }
      ]
    },
    {
      "snippet": "const v2 = versionManager.parseVersion('1.0.0-alpha');\nexpect(versionManager.compareVersions(v1, v2)).toBe(VersionComparison.GREATER_THAN);\nexpect(versionManager.compareVersions(v2, v1)).toBe(VersionC",
      "occurrences": [
        {
          "path": "tests/versioning/version-manager.test.ts",
          "line": 119
        },
        {
          "path": "tests/versioning/version-manager.test.ts",
          "line": 126
        }
      ]
    },
    {
      "snippet": "});\n\nversionManager.registerVersion({\ntemplateId: 'test-template',\nversion: versionManager.parseVersion('2.0.0-beta'),",
      "occurrences": [
        {
          "path": "tests/versioning/version-manager.test.ts",
          "line": 257
        },
        {
          "path": "tests/versioning/version-manager.test.ts",
          "line": 275
        },
        {
          "path": "tests/versioning/version-manager.test.ts",
          "line": 292
        }
      ]
    },
    {
      "snippet": "\nversionManager.registerVersion({\ntemplateId: 'test-template',\nversion: versionManager.parseVersion('2.0.0-beta'),\nreleaseDate: '2025-01-02T00:00:00Z',",
      "occurrences": [
        {
          "path": "tests/versioning/version-manager.test.ts",
          "line": 276
        },
        {
          "path": "tests/versioning/version-manager.test.ts",
          "line": 293
        }
      ]
    },
    {
      "snippet": "versionManager.registerVersion({\ntemplateId: 'test-template',\nversion: versionManager.parseVersion('2.0.0-beta'),\nreleaseDate: '2025-01-02T00:00:00Z',\n});",
      "occurrences": [
        {
          "path": "tests/versioning/version-manager.test.ts",
          "line": 277
        },
        {
          "path": "tests/versioning/version-manager.test.ts",
          "line": 294
        }
      ]
    },
    {
      "snippet": "templateId: 'test-template',\nversion: versionManager.parseVersion('2.0.0-beta'),\nreleaseDate: '2025-01-02T00:00:00Z',\n});\n",
      "occurrences": [
        {
          "path": "tests/versioning/version-manager.test.ts",
          "line": 278
        },
        {
          "path": "tests/versioning/version-manager.test.ts",
          "line": 295
        }
      ]
    },
    {
      "snippet": "releaseDate: '2025-01-01T00:00:00Z',\n};\n\nconst v2: TemplateVersion = {\ntemplateId: 'test-template',",
      "occurrences": [
        {
          "path": "tests/versioning/version-manager.test.ts",
          "line": 311
        },
        {
          "path": "tests/versioning/version-manager.test.ts",
          "line": 329
        },
        {
          "path": "tests/versioning/version-manager.test.ts",
          "line": 351
        }
      ]
    }
  ],
  "todo_comments": []
}