{
  "workaround": [
    {
      "file": "cmos/docs/Architectural Blueprint for a Production-Grade_Memory-Server.md",
      "line": 56,
      "snippet": "port \n\nLimited; requires extensions and workarounds \n\nGrowing support, but not as core to the design as FastAPI\nLearning Curve\t\nSteeper due to async patterns an"
    }
  ],
  "deprecated": [
    {
      "file": "package-lock.json",
      "line": 3322,
      "snippet": "Wcy/FZR3/4IgflMgKLOsvPDrGCJA==\",\n      \"deprecated\": \"This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and "
    },
    {
      "file": "package-lock.json",
      "line": 5779,
      "snippet": "YJtOlYt9v6dvszD2BGRqBL+iQK9Q==\",\n      \"deprecated\": \"Glob versions prior to v9 are no longer supported\",\n      \"dev\": true,\n      \"license\": \"ISC\",\n      \"depe"
    },
    {
      "file": "dist/tools/version-template.js",
      "line": 232,
      "snippet": "te: latest.releaseDate,\n                deprecated: latest.deprecated !== undefined,\n                deprecationMessage: latest.deprecated?.message,\n           "
    },
    {
      "file": "dist/tools/version-template.js",
      "line": 232,
      "snippet": "ate,\n                deprecated: latest.deprecated !== undefined,\n                deprecationMessage: latest.deprecated?.message,\n            },\n            mes"
    },
    {
      "file": "dist/tools/version-template.js",
      "line": 233,
      "snippet": "             deprecationMessage: latest.deprecated?.message,\n            },\n            message: `Latest version for ${params.templateId}: ${versionManager.vers"
    },
    {
      "file": "dist/tools/version-template.d.ts",
      "line": 166,
      "snippet": "g;\n        releaseDate: string;\n        deprecated?: boolean;\n        deprecationMessage?: string;\n    };\n    message: string;\n}\nexport declare function getLate"
    },
    {
      "file": "dist/versioning/types.d.ts",
      "line": 63,
      "snippet": "* Deprecation notice if this version is deprecated */\n    deprecated?: {\n        message: string;\n        replacedBy?: string;\n    };\n}\n/**\n * Version compatibi"
    },
    {
      "file": "dist/versioning/types.d.ts",
      "line": 64,
      "snippet": "ce if this version is deprecated */\n    deprecated?: {\n        message: string;\n        replacedBy?: string;\n    };\n}\n/**\n * Version compatibility check result\n"
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 212,
      "snippet": "precation warnings\n        if (version1.deprecated || version2.deprecated) {\n            const deprecatedVersion = version1.deprecated ? version1 : version2;\n  "
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 212,
      "snippet": "    if (version1.deprecated || version2.deprecated) {\n            const deprecatedVersion = version1.deprecated ? version1 : version2;\n            return {\n    "
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 213,
      "snippet": "ersion2.deprecated) {\n            const deprecatedVersion = version1.deprecated ? version1 : version2;\n            return {\n                compatible: true,\n  "
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 213,
      "snippet": "     const deprecatedVersion = version1.deprecated ? version1 : version2;\n            return {\n                compatible: true,\n                reason: `Warnin"
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 216,
      "snippet": "Warning: Version ${this.versionToString(deprecatedVersion.version)} is deprecated. ${deprecatedVersion.deprecated.message}`,\n            };\n        }\n        re"
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 216,
      "snippet": "ToString(deprecatedVersion.version)} is deprecated. ${deprecatedVersion.deprecated.message}`,\n            };\n        }\n        return { compatible: true };\n    "
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 216,
      "snippet": "catedVersion.version)} is deprecated. ${deprecatedVersion.deprecated.message}`,\n            };\n        }\n        return { compatible: true };\n    }\n    /**\n    "
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 216,
      "snippet": "on)} is deprecated. ${deprecatedVersion.deprecated.message}`,\n            };\n        }\n        return { compatible: true };\n    }\n    /**\n     * Find an upgrade"
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 319,
      "snippet": "g\n                if (compatibleVersion.deprecated) {\n                    warnings.push(`${templateId}@${this.versionToString(compatibleVersion.version)} is dep"
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 320,
      "snippet": "ToString(compatibleVersion.version)} is deprecated: ${compatibleVersion.deprecated.message}`);\n                }\n            }\n            else {\n              "
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 320,
      "snippet": "on)} is deprecated: ${compatibleVersion.deprecated.message}`);\n                }\n            }\n            else {\n                // No compatible version found"
    },
    {
      "file": "tests/versioning/version-manager.test.ts",
      "line": 343,
      "snippet": ");\n    });\n\n    test('should warn about deprecated versions', () => {\n      const v1: TemplateVersion = {\n        templateId: 'test-template',\n        version: "
    },
    {
      "file": "tests/versioning/version-manager.test.ts",
      "line": 347,
      "snippet": "nManager.parseVersion('1.0.0'),\n        deprecated: {\n          message: 'This version is deprecated',\n          replacedBy: '2.0.0',\n        },\n        release"
    },
    {
      "file": "tests/versioning/version-manager.test.ts",
      "line": 348,
      "snippet": ": {\n          message: 'This version is deprecated',\n          replacedBy: '2.0.0',\n        },\n        releaseDate: '2025-01-01T00:00:00Z',\n      };\n\n      cons"
    },
    {
      "file": "tests/versioning/version-manager.test.ts",
      "line": 362,
      "snippet": "\n      expect(result.reason).toContain('deprecated');\n    });\n  });\n\n  describe('Version Resolution', () => {\n    beforeEach(() => {\n      // Register multiple "
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 504,
      "snippet": "low\n\n**Scenario**: Mark old versions as deprecated and guide users to new versions.\n\n```typescript\nasync function deprecateVersion(\n  templateId: string,\n  depr"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 509,
      "snippet": "precateVersion(\n  templateId: string,\n  deprecatedVersion: string,\n  replacedBy: string,\n  message: string\n) {\n  const versionManager = new VersionManager();\n\n "
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 516,
      "snippet": "= versionManager.getVersion(templateId, deprecatedVersion);\n  if (!version) {\n    throw new Error(`Version ${deprecatedVersion} not found`);\n  }\n\n  // Update wi"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 518,
      "snippet": "rsion) {\n    throw new Error(`Version ${deprecatedVersion} not found`);\n  }\n\n  // Update with deprecation info\n  version.deprecated = {\n    message,\n    replace"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 522,
      "snippet": " Update with deprecation info\n  version.deprecated = {\n    message,\n    replacedBy,\n    date: new Date().toISOString()\n  };\n\n  // Re-register with deprecation\n "
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 531,
      "snippet": "n(version);\n\n  console.log(`\u2713 Version ${deprecatedVersion} marked as deprecated`);\n  console.log(`  Replaced by: ${replacedBy}`);\n  console.log(`  Message: ${me"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 531,
      "snippet": " Version ${deprecatedVersion} marked as deprecated`);\n  console.log(`  Replaced by: ${replacedBy}`);\n  console.log(`  Message: ${message}`);\n\n  // Create migrat"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 535,
      "snippet": "message}`);\n\n  // Create migration from deprecated to replacement\n  const migrationEngine = new MigrationEngine(versionManager);\n  migrationEngine.registerMigra"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 538,
      "snippet": "isterMigration({\n    id: `deprecation-${deprecatedVersion}-to-${replacedBy}`,\n    templateId,\n    fromVersion: versionManager.parseVersion(deprecatedVersion),\n "
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 540,
      "snippet": "romVersion: versionManager.parseVersion(deprecatedVersion),\n    toVersion: versionManager.parseVersion(replacedBy),\n    description: `Migrate from deprecated ${"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 542,
      "snippet": "acedBy),\n    description: `Migrate from deprecated ${deprecatedVersion} to ${replacedBy}`,\n    transform: (data) => {\n      // Add transformation logic\n      re"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 542,
      "snippet": "description: `Migrate from deprecated ${deprecatedVersion} to ${replacedBy}`,\n    transform: (data) => {\n      // Add transformation logic\n      return {\n      "
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 548,
      "snippet": "_migrated: true,\n        _migratedFrom: deprecatedVersion,\n        _migratedAt: new Date().toISOString()\n      };\n    },\n    reversible: false\n  });\n\n  return {"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 555,
      "snippet": "    reversible: false\n  });\n\n  return { deprecated: true, replacedBy };\n}\n\n// Usage\nawait deprecateVersion(\n  'api-template',\n  '1.0.0',\n  '2.0.0',\n  'Version 1"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 415,
      "snippet": "n: string;\n    releaseDate: string;\n    deprecated?: boolean;\n    deprecationMessage?: string;\n  };\n  message: string;\n}\n```\n\n---\n\n### compare_versions\n\nCompare"
    },
    {
      "file": "templates/packs/engineering.adr/schema.json",
      "line": 15,
      "snippet": "      \"enum\": [\"Proposed\", \"Accepted\", \"Deprecated\", \"Superseded\"],\n      \"description\": \"Current status of the decision\"\n    },\n    \"decision\": {\n      \"type\":"
    },
    {
      "file": "src/tools/version-template.ts",
      "line": 377,
      "snippet": "n: string;\n    releaseDate: string;\n    deprecated?: boolean;\n    deprecationMessage?: string;\n  };\n  message: string;\n}\n\nexport async function getLatestVersion"
    },
    {
      "file": "src/tools/version-template.ts",
      "line": 407,
      "snippet": "eleaseDate: latest.releaseDate,\n        deprecated: latest.deprecated !== undefined,\n        deprecationMessage: latest.deprecated?.message,\n      },\n      mess"
    },
    {
      "file": "src/tools/version-template.ts",
      "line": 407,
      "snippet": "releaseDate,\n        deprecated: latest.deprecated !== undefined,\n        deprecationMessage: latest.deprecated?.message,\n      },\n      message: `Latest versio"
    },
    {
      "file": "src/tools/version-template.ts",
      "line": 408,
      "snippet": "ned,\n        deprecationMessage: latest.deprecated?.message,\n      },\n      message: `Latest version for ${params.templateId}: ${versionManager.versionToString("
    },
    {
      "file": "src/versioning/types.ts",
      "line": 81,
      "snippet": "* Deprecation notice if this version is deprecated */\n  deprecated?: {\n    message: string;\n    replacedBy?: string; // suggested replacement version\n  };\n}\n\n/*"
    },
    {
      "file": "src/versioning/types.ts",
      "line": 82,
      "snippet": "tice if this version is deprecated */\n  deprecated?: {\n    message: string;\n    replacedBy?: string; // suggested replacement version\n  };\n}\n\n/**\n * Version com"
    },
    {
      "file": "src/versioning/version-manager.ts",
      "line": 263,
      "snippet": "r deprecation warnings\n    if (version1.deprecated || version2.deprecated) {\n      const deprecatedVersion = version1.deprecated ? version1 : version2;\n      re"
    },
    {
      "file": "src/versioning/version-manager.ts",
      "line": 263,
      "snippet": "    if (version1.deprecated || version2.deprecated) {\n      const deprecatedVersion = version1.deprecated ? version1 : version2;\n      return {\n        compatib"
    },
    {
      "file": "src/versioning/version-manager.ts",
      "line": 264,
      "snippet": "d || version2.deprecated) {\n      const deprecatedVersion = version1.deprecated ? version1 : version2;\n      return {\n        compatible: true,\n        reason: "
    },
    {
      "file": "src/versioning/version-manager.ts",
      "line": 264,
      "snippet": "     const deprecatedVersion = version1.deprecated ? version1 : version2;\n      return {\n        compatible: true,\n        reason: `Warning: Version ${this.vers"
    },
    {
      "file": "src/versioning/version-manager.ts",
      "line": 267,
      "snippet": "Warning: Version ${this.versionToString(deprecatedVersion.version)} is deprecated. ${deprecatedVersion.deprecated!.message}`,\n      };\n    }\n\n    return { compa"
    },
    {
      "file": "src/versioning/version-manager.ts",
      "line": 267,
      "snippet": "ToString(deprecatedVersion.version)} is deprecated. ${deprecatedVersion.deprecated!.message}`,\n      };\n    }\n\n    return { compatible: true };\n  }\n\n  /**\n   * "
    },
    {
      "file": "src/versioning/version-manager.ts",
      "line": 267,
      "snippet": "catedVersion.version)} is deprecated. ${deprecatedVersion.deprecated!.message}`,\n      };\n    }\n\n    return { compatible: true };\n  }\n\n  /**\n   * Find an upgrad"
    },
    {
      "file": "src/versioning/version-manager.ts",
      "line": 267,
      "snippet": "on)} is deprecated. ${deprecatedVersion.deprecated!.message}`,\n      };\n    }\n\n    return { compatible: true };\n  }\n\n  /**\n   * Find an upgrade path between two"
    },
    {
      "file": "src/versioning/version-manager.ts",
      "line": 398,
      "snippet": "n warning\n        if (compatibleVersion.deprecated) {\n          warnings.push(\n            `${templateId}@${this.versionToString(compatibleVersion.version)} is "
    },
    {
      "file": "src/versioning/version-manager.ts",
      "line": 400,
      "snippet": "ToString(compatibleVersion.version)} is deprecated: ${compatibleVersion.deprecated.message}`\n          );\n        }\n      } else {\n        // No compatible vers"
    },
    {
      "file": "src/versioning/version-manager.ts",
      "line": 400,
      "snippet": "on)} is deprecated: ${compatibleVersion.deprecated.message}`\n          );\n        }\n      } else {\n        // No compatible version found\n        conflicts.push"
    }
  ],
  "commented_code": [
    {
      "file": "jest.config.js",
      "line": 1,
      "snippet": "// Dynamically adjust coverage thresholds when running a focused subset\n// e.g.,"
    },
    {
      "file": "jest.config.js",
      "line": 2,
      "snippet": "// e.g., `npm test -- import-export` should validate functionality without faili"
    },
    {
      "file": "jest.config.js",
      "line": 20,
      "snippet": "        // Looser thresholds for focused suites to prevent unrelated files from "
    },
    {
      "file": "jest.config.js",
      "line": 29,
      "snippet": "        // Project-wide targets (Phase 3 mission requires >=90%)\n        global:"
    },
    {
      "file": "README.md",
      "line": 1,
      "snippet": "# Mission Protocol v2\n\nAn AI-powered mission planning and execution system with "
    },
    {
      "file": "README.md",
      "line": 4,
      "snippet": "\n## Project Status\n\n**Sprint 1 - Template Recovery: In Progress** \u2705\n\n- **Tests**"
    },
    {
      "file": "README.md",
      "line": 14,
      "snippet": "\n## Quick Start\n\nMission Protocol v2 provides MCP tools for autonomous mission m"
    },
    {
      "file": "README.md",
      "line": 18,
      "snippet": "\n### Phase 4: Intelligence Layer (Current)\n- **`score_quality`** - Assess missio"
    },
    {
      "file": "README.md",
      "line": 24,
      "snippet": "\n### Phase 3: Extension System\n- **`extract_template`** - Convert missions into "
    },
    {
      "file": "README.md",
      "line": 30,
      "snippet": "\n### Phase 1-2: Foundation\n- **`list_available_domains`** - Browse domain packs "
    },
    {
      "file": "README.md",
      "line": 34,
      "snippet": "\n## Documentation\n\n### User Guides\n- **[Intelligence Layer Guide](docs/Intellige"
    },
    {
      "file": "README.md",
      "line": 36,
      "snippet": "\n### User Guides\n- **[Intelligence Layer Guide](docs/Intelligence_Layer_Guide.md"
    },
    {
      "file": "README.md",
      "line": 41,
      "snippet": "\n### API References\n- **[Phase 4 API Documentation](docs/API_Documentation_Phase"
    },
    {
      "file": "README.md",
      "line": 45,
      "snippet": "\n### Project Planning\n- **`cmos/Phase_4_Completion_Report.md`** \u2013 Intelligence L"
    },
    {
      "file": "README.md",
      "line": 51,
      "snippet": "\n## Installation & Usage\n\n1. Install dependencies\n   ```bash\n   npm install\n   `"
    },
    {
      "file": "README.md",
      "line": 66,
      "snippet": "\n### MCP Integration\n\nConfigure in Claude Desktop (`claude_desktop_config.json`)"
    },
    {
      "file": "README.md",
      "line": 88,
      "snippet": "\n#### Token Counting & Async Usage\n\n- Intelligence tools return `structuredConte"
    },
    {
      "file": "README.md",
      "line": 101,
      "snippet": "\n## Project Structure\n\n```\nmission-protocol-v2/\n\u251c\u2500\u2500 cmos/                       "
    },
    {
      "file": "dist/index.js",
      "line": 1,
      "snippet": "#!/usr/bin/env node\n\"use strict\";\n/* istanbul ignore file */\nvar __createBinding"
    },
    {
      "file": "dist/index.js",
      "line": 111,
      "snippet": "    // Initialize secure YAML loader\n    const loader = new yaml_loader_1.Secure"
    },
    {
      "file": "dist/index.js",
      "line": 117,
      "snippet": "    // Initialize registry parser\n    const registry = new registry_parser_1.Reg"
    },
    {
      "file": "dist/index.js",
      "line": 119,
      "snippet": "    // Initialize domain pack loader and merger\n    const packLoader = new domai"
    },
    {
      "file": "dist/index.js",
      "line": 123,
      "snippet": "    // Initialize token counter for intelligence tools\n    const tokenCounter = "
    },
    {
      "file": "dist/index.js",
      "line": 125,
      "snippet": "    // Initialize tools\n    const listDomainsTool = new list_domains_1.ListDomai"
    },
    {
      "file": "dist/index.js",
      "line": 151,
      "snippet": "    // List available tools\n    server.setRequestHandler(types_js_1.ListToolsReq"
    },
    {
      "file": "dist/index.js",
      "line": 157,
      "snippet": "    // Handle tool execution\n    server.setRequestHandler(types_js_1.CallToolReq"
    },
    {
      "file": "dist/index.js",
      "line": 167,
      "snippet": "            // Handle errors gracefully\n            const errorMessage = error i"
    },
    {
      "file": "dist/index.js",
      "line": 169,
      "snippet": "            // Log error to stderr (won't interfere with stdio protocol)\n       "
    },
    {
      "file": "dist/index.js",
      "line": 503,
      "snippet": "        // Initialize all server components\n        const context = await initia"
    },
    {
      "file": "dist/index.js",
      "line": 505,
      "snippet": "        // Register tool handlers\n        registerToolHandlers(context);\n       "
    },
    {
      "file": "dist/index.js",
      "line": 507,
      "snippet": "        // Create stdio transport\n        const transport = new stdio_js_1.Stdio"
    },
    {
      "file": "dist/index.js",
      "line": 509,
      "snippet": "        // Connect server to transport\n        await server.connect(transport);\n"
    },
    {
      "file": "dist/index.js",
      "line": 520,
      "snippet": "// Handle graceful shutdown\nprocess.on('SIGINT', async () => {\n    console.error"
    },
    {
      "file": "dist/index.js",
      "line": 531,
      "snippet": "// Start the server\nif (require.main === module) {\n    main().catch((error) => {"
    },
    {
      "file": "dist/index.js",
      "line": 538,
      "snippet": "//# sourceMappingURL=index.js.map"
    },
    {
      "file": "dist/index.d.ts",
      "line": 1,
      "snippet": "#!/usr/bin/env node\nimport { CallToolResult } from '@modelcontextprotocol/sdk/ty"
    },
    {
      "file": "dist/index.d.ts",
      "line": 390,
      "snippet": "//# sourceMappingURL=index.d.ts.map"
    },
    {
      "file": "dist/tools/suggest-splits.js",
      "line": 91,
      "snippet": "        // Initialize complexity scorer\n        const contextWindow = this.getCo"
    },
    {
      "file": "dist/tools/suggest-splits.js",
      "line": 98,
      "snippet": "        // Initialize splitter\n        this.splitter = new mission_splitter_1.Mi"
    },
    {
      "file": "dist/tools/suggest-splits.js",
      "line": 105,
      "snippet": "        // Validate input\n        this.validateParams(params);\n        // Load m"
    },
    {
      "file": "dist/tools/suggest-splits.js",
      "line": 107,
      "snippet": "        // Load mission\n        const mission = this.loadMissionFile(params.miss"
    },
    {
      "file": "dist/tools/suggest-splits.js",
      "line": 109,
      "snippet": "        // Get split suggestions from splitter\n        const suggestion = await "
    },
    {
      "file": "dist/tools/suggest-splits.js",
      "line": 111,
      "snippet": "        // Build detailed result\n        const result = {\n            shouldSpli"
    },
    {
      "file": "dist/tools/suggest-splits.js",
      "line": 126,
      "snippet": "        // Add breakpoint details if split is recommended\n        if (suggestion"
    },
    {
      "file": "dist/tools/suggest-splits.js",
      "line": 330,
      "snippet": "//# sourceMappingURL=suggest-splits.js.map"
    },
    {
      "file": "dist/tools/import-template.d.ts",
      "line": 118,
      "snippet": "//# sourceMappingURL=import-template.d.ts.map"
    },
    {
      "file": "dist/tools/list-domains.js",
      "line": 31,
      "snippet": "            // Load all domain entries from registry\n            const entries ="
    },
    {
      "file": "dist/tools/list-domains.js",
      "line": 33,
      "snippet": "            // Convert to simplified DomainInfo format\n            return entrie"
    },
    {
      "file": "dist/tools/list-domains.js",
      "line": 37,
      "snippet": "            // Handle empty registry gracefully\n            if (error instanceof"
    },
    {
      "file": "dist/tools/list-domains.js",
      "line": 102,
      "snippet": "//# sourceMappingURL=list-domains.js.map"
    },
    {
      "file": "dist/tools/extract-template.js",
      "line": 54,
      "snippet": "        // Validate input parameters\n        validateParams(params);\n        // "
    },
    {
      "file": "dist/tools/extract-template.js",
      "line": 56,
      "snippet": "        // Resolve the mission path\n        const missionPath = path.resolve(par"
    },
    {
      "file": "dist/tools/extract-template.js",
      "line": 58,
      "snippet": "        // Determine if it's a file or directory\n        const stats = fs.statSy"
    },
    {
      "file": "dist/tools/extract-template.js",
      "line": 61,
      "snippet": "        // Create extraction config\n        const config = {\n            sourceM"
    },
    {
      "file": "dist/tools/extract-template.js",
      "line": 77,
      "snippet": "        // Run the extraction\n        const extractor = new template_extractor_1"
    },
    {
      "file": "dist/tools/extract-template.js",
      "line": 80,
      "snippet": "        // If successful, write the template to disk\n        if (result.success "
    },
    {
      "file": "dist/tools/extract-template.js",
      "line": 122,
      "snippet": "    // Validate template name format\n    if (!/^[a-zA-Z0-9-_]+$/.test(params.tem"
    },
    {
      "file": "dist/tools/extract-template.js",
      "line": 135,
      "snippet": "    // Create template directory\n    fs.mkdirSync(templateDir, { recursive: true"
    },
    {
      "file": "dist/tools/extract-template.js",
      "line": 137,
      "snippet": "    // Write template files\n    for (const file of template.fileStructure) {\n   "
    },
    {
      "file": "dist/tools/extract-template.js",
      "line": 141,
      "snippet": "        // Create directory if it doesn't exist\n        fs.mkdirSync(fileDir, { "
    },
    {
      "file": "dist/tools/extract-template.js",
      "line": 143,
      "snippet": "        // Write file content\n        fs.writeFileSync(filePath, file.content, '"
    },
    {
      "file": "dist/tools/extract-template.js",
      "line": 146,
      "snippet": "    // Write metadata file\n    const metadataPath = path.join(templateDir, 'temp"
    },
    {
      "file": "dist/tools/extract-template.js",
      "line": 149,
      "snippet": "    // Write extraction report\n    const reportPath = path.join(templateDir, 'EX"
    },
    {
      "file": "dist/tools/extract-template.js",
      "line": 153,
      "snippet": "    // Write hooks if present\n    if (template.hooks?.preGenerate) {\n        con"
    },
    {
      "file": "dist/tools/extract-template.js",
      "line": 259,
      "snippet": "//# sourceMappingURL=extract-template.js.map"
    },
    {
      "file": "dist/tools/split-mission.d.ts",
      "line": 148,
      "snippet": "//# sourceMappingURL=split-mission.d.ts.map"
    },
    {
      "file": "dist/tools/score-quality.js",
      "line": 50,
      "snippet": "        // Load mission file\n        const missionFile = path.resolve(input.miss"
    },
    {
      "file": "dist/tools/score-quality.js",
      "line": 58,
      "snippet": "        // Create scorer with default configuration\n        const scorer = new q"
    },
    {
      "file": "dist/tools/score-quality.js",
      "line": 60,
      "snippet": "        // Score the mission\n        const score = await scorer.score(mission, m"
    },
    {
      "file": "dist/tools/score-quality.js",
      "line": 62,
      "snippet": "        // Generate summary\n        const summary = formatQualitySummary(score, "
    },
    {
      "file": "dist/tools/score-quality.js",
      "line": 82,
      "snippet": "    // Header\n    lines.push('=== Mission Quality Assessment ===\\n');\n    // Ove"
    },
    {
      "file": "dist/tools/score-quality.js",
      "line": 84,
      "snippet": "    // Overall score\n    const totalPercent = (score.total * 100).toFixed(1);\n  "
    },
    {
      "file": "dist/tools/score-quality.js",
      "line": 88,
      "snippet": "    // Dimensional breakdown\n    lines.push('Dimensional Scores:');\n    lines.pu"
    },
    {
      "file": "dist/tools/score-quality.js",
      "line": 94,
      "snippet": "    // Performance\n    lines.push(`Processing Time: ${score.metadata.processingT"
    },
    {
      "file": "dist/tools/score-quality.js",
      "line": 97,
      "snippet": "    // Suggestions\n    if (score.suggestions.length > 0) {\n        lines.push('I"
    },
    {
      "file": "dist/tools/score-quality.js",
      "line": 125,
      "snippet": "    // Verbose metrics breakdown\n    if (verbose) {\n        lines.push('\\n=== De"
    },
    {
      "file": "dist/tools/score-quality.js",
      "line": 180,
      "snippet": "//# sourceMappingURL=score-quality.js.map"
    },
    {
      "file": "dist/tools/export-template.d.ts",
      "line": 117,
      "snippet": "//# sourceMappingURL=export-template.d.ts.map"
    },
    {
      "file": "dist/tools/list-domains.d.ts",
      "line": 58,
      "snippet": "//# sourceMappingURL=list-domains.d.ts.map"
    },
    {
      "file": "dist/tools/export-template.js",
      "line": 54,
      "snippet": "        // Validate input parameters\n        validateParams(params);\n        // "
    },
    {
      "file": "dist/tools/export-template.js",
      "line": 56,
      "snippet": "        // Determine base directory\n        const baseDir = params.baseDir || pr"
    },
    {
      "file": "dist/tools/export-template.js",
      "line": 58,
      "snippet": "        // Build export options\n        const options = {\n            format: pa"
    },
    {
      "file": "dist/tools/export-template.js",
      "line": 64,
      "snippet": "        // Create exporter\n        const exporter = new template_exporter_1.Temp"
    },
    {
      "file": "dist/tools/export-template.js",
      "line": 66,
      "snippet": "        // Execute export\n        const success = exporter.export(params.templat"
    },
    {
      "file": "dist/tools/export-template.js",
      "line": 71,
      "snippet": "        // Generate preview\n        const content = exporter.exportToString(para"
    },
    {
      "file": "dist/tools/export-template.js",
      "line": 74,
      "snippet": "        // Resolve output path for display\n        const resolvedPath = path.res"
    },
    {
      "file": "dist/tools/export-template.js",
      "line": 102,
      "snippet": "    // Validate template structure\n    if (!params.template.apiVersion || params"
    },
    {
      "file": "dist/tools/export-template.js",
      "line": 115,
      "snippet": "    // Validate format if provided\n    if (params.format && !['yaml', 'json'].in"
    },
    {
      "file": "dist/tools/export-template.js",
      "line": 195,
      "snippet": "//# sourceMappingURL=export-template.js.map"
    },
    {
      "file": "dist/tools/analyze-dependencies.js",
      "line": 53,
      "snippet": "        // Validate input\n        if (!args.missionDirectory) {\n            thro"
    },
    {
      "file": "dist/tools/analyze-dependencies.js",
      "line": 60,
      "snippet": "        // Find all mission files\n        const missionFiles = await findMission"
    },
    {
      "file": "dist/tools/analyze-dependencies.js",
      "line": 65,
      "snippet": "        // Load mission data\n        const missions = await loadMissionFiles(mis"
    },
    {
      "file": "dist/tools/analyze-dependencies.js",
      "line": 67,
      "snippet": "        // Create analyzer and analyze dependencies\n        const analyzer = new"
    },
    {
      "file": "dist/tools/analyze-dependencies.js",
      "line": 70,
      "snippet": "        // Validate graph\n        const validator = new graph_validator_1.GraphV"
    },
    {
      "file": "dist/tools/analyze-dependencies.js",
      "line": 73,
      "snippet": "        // Infer implicit dependencies if requested\n        let inferredDependen"
    },
    {
      "file": "dist/tools/analyze-dependencies.js",
      "line": 82,
      "snippet": "            // Filter by confidence\n            const minConfidence = args.minCo"
    },
    {
      "file": "dist/tools/analyze-dependencies.js",
      "line": 87,
      "snippet": "        // Return result\n        return {\n            totalMissions: missionFile"
    },
    {
      "file": "dist/tools/analyze-dependencies.js",
      "line": 130,
      "snippet": "                // Skip node_modules, .git, etc.\n                if (!entry.name"
    },
    {
      "file": "dist/tools/analyze-dependencies.js",
      "line": 136,
      "snippet": "                // Check if it's a YAML mission file\n                if (entry.n"
    },
    {
      "file": "dist/tools/analyze-dependencies.js",
      "line": 156,
      "snippet": "                // Add file path to mission data\n                missionData.fil"
    },
    {
      "file": "dist/tools/analyze-dependencies.js",
      "line": 245,
      "snippet": "//# sourceMappingURL=analyze-dependencies.js.map"
    },
    {
      "file": "dist/tools/optimize-tokens.js",
      "line": 104,
      "snippet": "            // Validate mission file exists\n            const absolutePath = pat"
    },
    {
      "file": "dist/tools/optimize-tokens.js",
      "line": 115,
      "snippet": "            // Read mission content\n            const content = await fs.readFil"
    },
    {
      "file": "dist/tools/optimize-tokens.js",
      "line": 117,
      "snippet": "            // Optimize\n            const result = await this.optimizer.optimize"
    },
    {
      "file": "dist/tools/optimize-tokens.js",
      "line": 124,
      "snippet": "            // Write optimized content back if not dry run\n            if (!para"
    },
    {
      "file": "dist/tools/optimize-tokens.js",
      "line": 172,
      "snippet": "//# sourceMappingURL=optimize-tokens.js.map"
    },
    {
      "file": "dist/tools/import-template.js",
      "line": 19,
      "snippet": "        // Validate input parameters\n        validateParams(params);\n        // "
    },
    {
      "file": "dist/tools/import-template.js",
      "line": 21,
      "snippet": "        // Determine base directory\n        const baseDir = params.baseDir || pr"
    },
    {
      "file": "dist/tools/import-template.js",
      "line": 23,
      "snippet": "        // Build semantic validation rules\n        const semanticRules = {\n     "
    },
    {
      "file": "dist/tools/import-template.js",
      "line": 30,
      "snippet": "        // Build import options\n        const options = {\n            skipSignat"
    },
    {
      "file": "dist/tools/import-template.js",
      "line": 36,
      "snippet": "        // Create importer\n        const importer = new template_importer_1.Temp"
    },
    {
      "file": "dist/tools/import-template.js",
      "line": 38,
      "snippet": "        // Execute import with full 6-layer validation\n        const result = aw"
    },
    {
      "file": "dist/tools/import-template.js",
      "line": 40,
      "snippet": "        // Convert dependencies map to object for JSON serialization\n        con"
    },
    {
      "file": "dist/tools/import-template.js",
      "line": 48,
      "snippet": "        // Build success response\n        return {\n            success: true,\n  "
    },
    {
      "file": "dist/tools/import-template.js",
      "line": 91,
      "snippet": "    // Validate trust level if provided\n    if (params.trustLevel) {\n        con"
    },
    {
      "file": "dist/tools/import-template.js",
      "line": 98,
      "snippet": "    // Validate resource limits if provided\n    if (params.maxResourceMemory !=="
    },
    {
      "file": "dist/tools/import-template.js",
      "line": 105,
      "snippet": "    // Warn if signature verification is skipped\n    if (params.skipSignatureVer"
    },
    {
      "file": "dist/tools/import-template.js",
      "line": 159,
      "snippet": "//# sourceMappingURL=import-template.js.map"
    },
    {
      "file": "dist/tools/extract-template.d.ts",
      "line": 71,
      "snippet": "//# sourceMappingURL=extract-template.d.ts.map"
    },
    {
      "file": "dist/tools/combine-packs.js",
      "line": 125,
      "snippet": "            // Step 1: Validate inputs\n            if (!params.packNames || para"
    },
    {
      "file": "dist/tools/combine-packs.js",
      "line": 142,
      "snippet": "            // Step 2: Load registry\n            const registryEntries = this.re"
    },
    {
      "file": "dist/tools/combine-packs.js",
      "line": 144,
      "snippet": "            // Step 3: Load all available packs (for dependency resolution)\n    "
    },
    {
      "file": "dist/tools/combine-packs.js",
      "line": 146,
      "snippet": "            // Step 4: Load requested packs\n            const requestedPacks = p"
    },
    {
      "file": "dist/tools/combine-packs.js",
      "line": 148,
      "snippet": "            // Step 5: Combine packs\n            const result = this.combiner.co"
    },
    {
      "file": "dist/tools/combine-packs.js",
      "line": 163,
      "snippet": "            // Step 6: Format output\n            const format = params.format ||"
    },
    {
      "file": "dist/tools/combine-packs.js",
      "line": 196,
      "snippet": "            // Load registry and packs\n            const registryEntries = this."
    },
    {
      "file": "dist/tools/combine-packs.js",
      "line": 200,
      "snippet": "            // Get preview\n            const preview = this.combiner.preview(req"
    },
    {
      "file": "dist/tools/combine-packs.js",
      "line": 233,
      "snippet": "        // YAML format (default)\n        const doc = new YAML.Document(combinedP"
    },
    {
      "file": "dist/tools/combine-packs.js",
      "line": 256,
      "snippet": "    // Format response with metadata\n    let response = `\u2713 Successfully combined"
    },
    {
      "file": "dist/tools/combine-packs.js",
      "line": 277,
      "snippet": "//# sourceMappingURL=combine-packs.js.map"
    },
    {
      "file": "dist/tools/create-mission.d.ts",
      "line": 157,
      "snippet": "//# sourceMappingURL=create-mission.d.ts.map"
    },
    {
      "file": "dist/tools/analyze-dependencies.d.ts",
      "line": 71,
      "snippet": "//# sourceMappingURL=analyze-dependencies.d.ts.map"
    },
    {
      "file": "dist/tools/score-quality.d.ts",
      "line": 43,
      "snippet": "//# sourceMappingURL=score-quality.d.ts.map"
    },
    {
      "file": "dist/tools/version-template.js",
      "line": 20,
      "snippet": "// Global instances (in production, these would be injected)\nlet versionManager;"
    },
    {
      "file": "dist/tools/version-template.js",
      "line": 35,
      "snippet": "        // Get the two versions from the registry\n        const templateVersion1"
    },
    {
      "file": "dist/tools/version-template.js",
      "line": 162,
      "snippet": "        // Validate the version\n        const validation = versionManager.valida"
    },
    {
      "file": "dist/tools/version-template.js",
      "line": 167,
      "snippet": "        // Register the version\n        versionManager.registerVersion(templateV"
    },
    {
      "file": "dist/tools/version-template.js",
      "line": 305,
      "snippet": "// ============================================================================\n"
    },
    {
      "file": "dist/tools/version-template.js",
      "line": 306,
      "snippet": "// Export all tool definitions for MCP registration\n// ========================="
    },
    {
      "file": "dist/tools/version-template.js",
      "line": 307,
      "snippet": "// ============================================================================\n"
    },
    {
      "file": "dist/tools/version-template.js",
      "line": 315,
      "snippet": "//# sourceMappingURL=version-template.js.map"
    },
    {
      "file": "dist/tools/version-template.d.ts",
      "line": 305,
      "snippet": "//# sourceMappingURL=version-template.d.ts.map"
    },
    {
      "file": "dist/tools/combine-packs.d.ts",
      "line": 142,
      "snippet": "//# sourceMappingURL=combine-packs.d.ts.map"
    },
    {
      "file": "dist/tools/optimize-tokens.d.ts",
      "line": 136,
      "snippet": "//# sourceMappingURL=optimize-tokens.d.ts.map"
    },
    {
      "file": "dist/tools/create-mission.js",
      "line": 113,
      "snippet": "        // Validate input parameters\n        this.validateParams(params);\n      "
    },
    {
      "file": "dist/tools/create-mission.js",
      "line": 115,
      "snippet": "        // 1. Load generic template\n        const genericTemplate = this.loadGen"
    },
    {
      "file": "dist/tools/create-mission.js",
      "line": 117,
      "snippet": "        // 2. Generate mission ID\n        const missionId = this.generateMission"
    },
    {
      "file": "dist/tools/create-mission.js",
      "line": 119,
      "snippet": "        // 3. Populate core fields from params\n        let mission = this.popula"
    },
    {
      "file": "dist/tools/create-mission.js",
      "line": 121,
      "snippet": "        // 4. If domain specified, load and merge domainFields\n        if (param"
    },
    {
      "file": "dist/tools/create-mission.js",
      "line": 125,
      "snippet": "        // 5. Validate final mission\n        this.validateMission(mission);\n    "
    },
    {
      "file": "dist/tools/create-mission.js",
      "line": 127,
      "snippet": "        // 6. Return YAML string\n        return this.toYAML(mission);\n    }\n    "
    },
    {
      "file": "dist/tools/create-mission.js",
      "line": 165,
      "snippet": "        // Add random suffix for uniqueness when called rapidly\n        const ra"
    },
    {
      "file": "dist/tools/create-mission.js",
      "line": 177,
      "snippet": "            // Load without schema validation to avoid readonly type issues\n    "
    },
    {
      "file": "dist/tools/create-mission.js",
      "line": 179,
      "snippet": "            // Ensure template has required structure\n            if (!(0, gener"
    },
    {
      "file": "dist/tools/create-mission.js",
      "line": 201,
      "snippet": "        // Create a new mission object (no mutation)\n        const mission = {\n "
    },
    {
      "file": "dist/tools/create-mission.js",
      "line": 210,
      "snippet": "            // Ensure successCriteria is never empty (requirement from schema)\n "
    },
    {
      "file": "dist/tools/create-mission.js",
      "line": 214,
      "snippet": "            // Ensure deliverables is never empty (requirement from schema)\n    "
    },
    {
      "file": "dist/tools/create-mission.js",
      "line": 230,
      "snippet": "            // Load domain pack\n            const domainPack = this.packLoader.l"
    },
    {
      "file": "dist/tools/create-mission.js",
      "line": 232,
      "snippet": "            // Create extension object with domainFields\n            const exten"
    },
    {
      "file": "dist/tools/create-mission.js",
      "line": 236,
      "snippet": "            // Merge using deep merge logic\n            const merged = this.merg"
    },
    {
      "file": "dist/tools/create-mission.js",
      "line": 242,
      "snippet": "                // Provide helpful error message if domain not found\n           "
    },
    {
      "file": "dist/tools/create-mission.js",
      "line": 258,
      "snippet": "        // Use type guard for validation instead of ajv to avoid readonly type i"
    },
    {
      "file": "dist/tools/create-mission.js",
      "line": 262,
      "snippet": "        // Additional structural validation\n        if (!mission.schemaType || m"
    },
    {
      "file": "dist/tools/create-mission.js",
      "line": 290,
      "snippet": "            // Use YAML.stringify for clean output\n            const yamlString "
    },
    {
      "file": "dist/tools/create-mission.js",
      "line": 332,
      "snippet": "//# sourceMappingURL=create-mission.js.map"
    },
    {
      "file": "dist/tools/split-mission.js",
      "line": 102,
      "snippet": "        // Initialize complexity scorer with model-specific config\n        const"
    },
    {
      "file": "dist/tools/split-mission.js",
      "line": 109,
      "snippet": "        // Initialize mission splitter\n        this.splitter = new mission_split"
    },
    {
      "file": "dist/tools/split-mission.js",
      "line": 119,
      "snippet": "        // Validate input\n        this.validateParams(params);\n        // 1. Loa"
    },
    {
      "file": "dist/tools/split-mission.js",
      "line": 121,
      "snippet": "        // 1. Load mission file\n        const mission = this.loadMissionFile(par"
    },
    {
      "file": "dist/tools/split-mission.js",
      "line": 123,
      "snippet": "        // 2. Analyze complexity\n        const complexity = await this.complexit"
    },
    {
      "file": "dist/tools/split-mission.js",
      "line": 126,
      "snippet": "        // 3. Check if split is needed\n        if (!complexity.shouldSplit) {\n  "
    },
    {
      "file": "dist/tools/split-mission.js",
      "line": 138,
      "snippet": "        // 4. Split mission\n        const splitResult = await this.splitter.spli"
    },
    {
      "file": "dist/tools/split-mission.js",
      "line": 143,
      "snippet": "        // 5. Generate sub-mission files\n        const outputDir = params.output"
    },
    {
      "file": "dist/tools/split-mission.js",
      "line": 146,
      "snippet": "        // 6. Create execution plan\n        const executionPlan = this.createExe"
    },
    {
      "file": "dist/tools/split-mission.js",
      "line": 148,
      "snippet": "        // 7. Generate summary\n        const summary = this.generateSummary(comp"
    },
    {
      "file": "dist/tools/split-mission.js",
      "line": 198,
      "snippet": "            // Try to load as YAML\n            const content = fs.readFileSync(f"
    },
    {
      "file": "dist/tools/split-mission.js",
      "line": 202,
      "snippet": "                // Check if it's a GenericMission\n                if ((0, generi"
    },
    {
      "file": "dist/tools/split-mission.js",
      "line": 206,
      "snippet": "                // Otherwise return as text\n                return content;\n    "
    },
    {
      "file": "dist/tools/split-mission.js",
      "line": 210,
      "snippet": "                // If YAML parsing fails, return as text\n                return "
    },
    {
      "file": "dist/tools/split-mission.js",
      "line": 229,
      "snippet": "            // Convert SubMission to GenericMission format\n            const mis"
    },
    {
      "file": "dist/tools/split-mission.js",
      "line": 231,
      "snippet": "            // Write file\n            fs.writeFileSync(filePath, missionYaml, 'u"
    },
    {
      "file": "dist/tools/split-mission.js",
      "line": 378,
      "snippet": "\n## Files Created\n\n${result.subMissionFiles?.map((f, i) => `${i + 1}. \\`${f}\\``)"
    },
    {
      "file": "dist/tools/split-mission.js",
      "line": 382,
      "snippet": "\n## Execution Plan\n\n${result.executionPlan?.map(ep => `**Step ${ep.order}:** ${e"
    },
    {
      "file": "dist/tools/split-mission.js",
      "line": 391,
      "snippet": "//# sourceMappingURL=split-mission.js.map"
    },
    {
      "file": "dist/tools/suggest-splits.d.ts",
      "line": 139,
      "snippet": "//# sourceMappingURL=suggest-splits.d.ts.map"
    },
    {
      "file": "dist/types/tools.js",
      "line": 10,
      "snippet": "//# sourceMappingURL=tools.js.map"
    },
    {
      "file": "dist/types/registry.js",
      "line": 10,
      "snippet": "//# sourceMappingURL=registry.js.map"
    },
    {
      "file": "dist/types/registry.d.ts",
      "line": 55,
      "snippet": "//# sourceMappingURL=registry.d.ts.map"
    },
    {
      "file": "dist/types/mission-types.d.ts",
      "line": 8,
      "snippet": "//# sourceMappingURL=mission-types.d.ts.map"
    },
    {
      "file": "dist/types/errors.d.ts",
      "line": 17,
      "snippet": "//# sourceMappingURL=errors.d.ts.map"
    },
    {
      "file": "dist/types/mission-types.js",
      "line": 12,
      "snippet": "//# sourceMappingURL=mission-types.js.map"
    },
    {
      "file": "dist/types/tools.d.ts",
      "line": 22,
      "snippet": "//# sourceMappingURL=tools.d.ts.map"
    },
    {
      "file": "dist/types/errors.js",
      "line": 36,
      "snippet": "//# sourceMappingURL=errors.js.map"
    },
    {
      "file": "dist/types/schemas.d.ts",
      "line": 25,
      "snippet": "//# sourceMappingURL=schemas.d.ts.map"
    },
    {
      "file": "dist/types/schemas.js",
      "line": 6,
      "snippet": "//# sourceMappingURL=schemas.js.map"
    },
    {
      "file": "dist/domains/types.js",
      "line": 10,
      "snippet": "//# sourceMappingURL=types.js.map"
    },
    {
      "file": "dist/domains/types.d.ts",
      "line": 64,
      "snippet": "//# sourceMappingURL=types.d.ts.map"
    },
    {
      "file": "dist/domains/domain-pack-loader.js",
      "line": 119,
      "snippet": "        // Step 1: Find pack in registry\n        const registryEntry = this.regi"
    },
    {
      "file": "dist/domains/domain-pack-loader.js",
      "line": 124,
      "snippet": "        // Step 2: Load pack.yaml manifest\n        const manifestPath = path.joi"
    },
    {
      "file": "dist/domains/domain-pack-loader.js",
      "line": 127,
      "snippet": "        // Step 3: Validate manifest\n        const validationResult = this.valid"
    },
    {
      "file": "dist/domains/domain-pack-loader.js",
      "line": 132,
      "snippet": "        // Step 4: Load domain schema\n        const schemaPath = path.join(regis"
    },
    {
      "file": "dist/domains/domain-pack-loader.js",
      "line": 135,
      "snippet": "        // Step 5: Load domain template\n        const templatePath = path.join(r"
    },
    {
      "file": "dist/domains/domain-pack-loader.js",
      "line": 138,
      "snippet": "        // Validate template against schema for safety before returning\n        "
    },
    {
      "file": "dist/domains/domain-pack-loader.js",
      "line": 143,
      "snippet": "        // Step 6: Return complete pack\n        return {\n            manifest,\n "
    },
    {
      "file": "dist/domains/domain-pack-loader.js",
      "line": 183,
      "snippet": "        // Validate required fields\n        if (!manifest.name || manifest.name."
    },
    {
      "file": "dist/domains/domain-pack-loader.js",
      "line": 203,
      "snippet": "            // Validate schema path is relative (no traversal)\n            if (m"
    },
    {
      "file": "dist/domains/domain-pack-loader.js",
      "line": 208,
      "snippet": "        // Validate author if present\n        if (manifest.author !== undefined "
    },
    {
      "file": "dist/domains/domain-pack-loader.js",
      "line": 212,
      "snippet": "        // Validate dependencies if present\n        if (manifest.dependencies) {"
    },
    {
      "file": "dist/domains/domain-pack-loader.js",
      "line": 243,
      "snippet": "            // Load schema file (can be YAML or JSON)\n            const schema ="
    },
    {
      "file": "dist/domains/domain-pack-loader.js",
      "line": 245,
      "snippet": "            // Validate it's a valid JSON Schema structure\n            if (!this"
    },
    {
      "file": "dist/domains/domain-pack-loader.js",
      "line": 268,
      "snippet": "            // Ensure template is an object\n            if (typeof template !== "
    },
    {
      "file": "dist/domains/domain-pack-loader.js",
      "line": 311,
      "snippet": "        // Validate manifest\n        const manifestValidation = this.validateMan"
    },
    {
      "file": "dist/domains/domain-pack-loader.js",
      "line": 316,
      "snippet": "        // Validate schema\n        if (!this.isValidJSONSchema(pack.schema)) {\n "
    },
    {
      "file": "dist/domains/domain-pack-loader.js",
      "line": 320,
      "snippet": "        // Validate template is an object\n        if (typeof pack.template !== '"
    },
    {
      "file": "dist/domains/domain-pack-loader.js",
      "line": 326,
      "snippet": "        // Could add template validation against schema here if needed\n        /"
    },
    {
      "file": "dist/domains/domain-pack-loader.js",
      "line": 327,
      "snippet": "        // Validate template conforms to schema\n        const schemaValidation ="
    },
    {
      "file": "dist/domains/domain-pack-loader.js",
      "line": 364,
      "snippet": "        // Must have at least a 'type' property or be a schema composition\n     "
    },
    {
      "file": "dist/domains/domain-pack-loader.js",
      "line": 386,
      "snippet": "//# sourceMappingURL=domain-pack-loader.js.map"
    },
    {
      "file": "dist/domains/domain-pack-loader.d.ts",
      "line": 141,
      "snippet": "//# sourceMappingURL=domain-pack-loader.d.ts.map"
    },
    {
      "file": "dist/quality/types.js",
      "line": 33,
      "snippet": "//# sourceMappingURL=types.js.map"
    },
    {
      "file": "dist/quality/improvement-engine.d.ts",
      "line": 37,
      "snippet": "//# sourceMappingURL=improvement-engine.d.ts.map"
    },
    {
      "file": "dist/quality/types.d.ts",
      "line": 91,
      "snippet": "//# sourceMappingURL=types.d.ts.map"
    },
    {
      "file": "dist/quality/quality-scorer.js",
      "line": 31,
      "snippet": "        // Analyze all dimensions in parallel for performance\n        const [cla"
    },
    {
      "file": "dist/quality/quality-scorer.js",
      "line": 37,
      "snippet": "        // Calculate total weighted score\n        const totalScore = this.calcul"
    },
    {
      "file": "dist/quality/quality-scorer.js",
      "line": 39,
      "snippet": "        // Generate improvement suggestions\n        const suggestions = this.imp"
    },
    {
      "file": "dist/quality/quality-scorer.js",
      "line": 42,
      "snippet": "        // Validate performance target\n        if (processingTimeMs > this.perfo"
    },
    {
      "file": "dist/quality/quality-scorer.js",
      "line": 69,
      "snippet": "        // Ensure score is between 0 and 1\n        return Math.max(0, Math.min(1"
    },
    {
      "file": "dist/quality/quality-scorer.js",
      "line": 77,
      "snippet": "        // Adapted formula: MMI = 171 - 5.2 * ln(Volume) - 0.23 * CC - 16.2 * ln"
    },
    {
      "file": "dist/quality/quality-scorer.js",
      "line": 78,
      "snippet": "        // Simplified for mission context with empirical weights\n        const v"
    },
    {
      "file": "dist/quality/quality-scorer.js",
      "line": 83,
      "snippet": "        // Normalize to 0-100 scale\n        return Math.max(0, Math.min(100, mmi"
    },
    {
      "file": "dist/quality/quality-scorer.js",
      "line": 95,
      "snippet": "//# sourceMappingURL=quality-scorer.js.map"
    },
    {
      "file": "dist/quality/improvement-engine.js",
      "line": 18,
      "snippet": "        // Process clarity metrics\n        for (const metric of clarityScore.met"
    },
    {
      "file": "dist/quality/improvement-engine.js",
      "line": 22,
      "snippet": "        // Process completeness metrics\n        for (const metric of completenes"
    },
    {
      "file": "dist/quality/improvement-engine.js",
      "line": 26,
      "snippet": "        // Process AI-readiness metrics\n        for (const metric of aiReadiness"
    },
    {
      "file": "dist/quality/improvement-engine.js",
      "line": 30,
      "snippet": "        // Sort by severity (critical first, then important, then info)\n        "
    },
    {
      "file": "dist/quality/improvement-engine.js",
      "line": 58,
      "snippet": "        // Syntactic Validity (Critical)\n        this.addRule('Syntactic Validit"
    },
    {
      "file": "dist/quality/improvement-engine.js",
      "line": 65,
      "snippet": "        // Structural Completeness\n        this.addRule('Structural Completeness"
    },
    {
      "file": "dist/quality/improvement-engine.js",
      "line": 75,
      "snippet": "        // Mission Cyclomatic Complexity\n        this.addRule('Mission Cyclomati"
    },
    {
      "file": "dist/quality/improvement-engine.js",
      "line": 89,
      "snippet": "        // Flesch-Kincaid Grade Level\n        this.addRule('Flesch-Kincaid Grade"
    },
    {
      "file": "dist/quality/improvement-engine.js",
      "line": 102,
      "snippet": "        // Lexical Density\n        this.addRule('Lexical Density', {\n           "
    },
    {
      "file": "dist/quality/improvement-engine.js",
      "line": 109,
      "snippet": "        // Referential Ambiguity\n        this.addRule('Referential Ambiguity', {"
    },
    {
      "file": "dist/quality/improvement-engine.js",
      "line": 117,
      "snippet": "        // Lexical Ambiguity\n        this.addRule('Lexical Ambiguity', {\n       "
    },
    {
      "file": "dist/quality/improvement-engine.js",
      "line": 125,
      "snippet": "        // Information Density\n        this.addRule('Information Density', {\n   "
    },
    {
      "file": "dist/quality/improvement-engine.js",
      "line": 141,
      "snippet": "        // Information Breadth\n        this.addRule('Information Breadth', {\n   "
    },
    {
      "file": "dist/quality/improvement-engine.js",
      "line": 149,
      "snippet": "        // Semantic Coverage\n        this.addRule('Semantic Coverage', {\n       "
    },
    {
      "file": "dist/quality/improvement-engine.js",
      "line": 157,
      "snippet": "        // Instruction Specificity\n        this.addRule('Instruction Specificity"
    },
    {
      "file": "dist/quality/improvement-engine.js",
      "line": 186,
      "snippet": "        // Linting Score\n        this.addRule('Linting Score', {\n            con"
    },
    {
      "file": "dist/quality/improvement-engine.js",
      "line": 218,
      "snippet": "//# sourceMappingURL=improvement-engine.js.map"
    },
    {
      "file": "dist/quality/quality-scorer.d.ts",
      "line": 36,
      "snippet": "//# sourceMappingURL=quality-scorer.d.ts.map"
    },
    {
      "file": "dist/quality/analyzers/clarity-analyzer.js",
      "line": 15,
      "snippet": "        // Calculate all clarity metrics\n        const metrics = {\n            f"
    },
    {
      "file": "dist/quality/analyzers/clarity-analyzer.js",
      "line": 24,
      "snippet": "        // Normalize and create metric results\n        const metricResults = [\n "
    },
    {
      "file": "dist/quality/analyzers/clarity-analyzer.js",
      "line": 70,
      "snippet": "        // Calculate weighted dimension score\n        const score = metricResult"
    },
    {
      "file": "dist/quality/analyzers/clarity-analyzer.js",
      "line": 100,
      "snippet": "        // Function words (articles, prepositions, pronouns, conjunctions)\n     "
    },
    {
      "file": "dist/quality/analyzers/clarity-analyzer.js",
      "line": 121,
      "snippet": "        // Common ambiguous words in technical contexts\n        const ambiguousW"
    },
    {
      "file": "dist/quality/analyzers/clarity-analyzer.js",
      "line": 140,
      "snippet": "            // Patterns that often lead to syntactic ambiguity\n            const"
    },
    {
      "file": "dist/quality/analyzers/clarity-analyzer.js",
      "line": 166,
      "snippet": "                    // Simple heuristic: pronoun at sentence start is more likel"
    },
    {
      "file": "dist/quality/analyzers/clarity-analyzer.js",
      "line": 170,
      "snippet": "                    // Pronoun without clear antecedent in previous words\n      "
    },
    {
      "file": "dist/quality/analyzers/clarity-analyzer.js",
      "line": 188,
      "snippet": "        // Conditional keywords\n        const conditionalKeywords = [\n          "
    },
    {
      "file": "dist/quality/analyzers/clarity-analyzer.js",
      "line": 194,
      "snippet": "        // Logical operators\n        const logicalOperators = [\n            /\\ba"
    },
    {
      "file": "dist/quality/analyzers/clarity-analyzer.js",
      "line": 198,
      "snippet": "        // Implicit loops\n        const loopPatterns = [\n            /\\bfor each"
    },
    {
      "file": "dist/quality/analyzers/clarity-analyzer.js",
      "line": 202,
      "snippet": "        // Count decision points\n        [...conditionalKeywords, ...logicalOper"
    },
    {
      "file": "dist/quality/analyzers/clarity-analyzer.js",
      "line": 208,
      "snippet": "        // Check for optional fields in structure\n        if (mission.domainFiel"
    },
    {
      "file": "dist/quality/analyzers/clarity-analyzer.js",
      "line": 210,
      "snippet": "            // Optional sections add complexity\n            const optionalSectio"
    },
    {
      "file": "dist/quality/analyzers/clarity-analyzer.js",
      "line": 219,
      "snippet": "    // Helper methods\n    extractTextContent(mission) {\n        const textParts "
    },
    {
      "file": "dist/quality/analyzers/clarity-analyzer.js",
      "line": 258,
      "snippet": "        // Adjust for silent e\n        if (word.endsWith('e'))\n            count"
    },
    {
      "file": "dist/quality/analyzers/clarity-analyzer.js",
      "line": 270,
      "snippet": "    // Normalization functions\n    normalizeFleschKincaid(fkgl) {\n        // Tar"
    },
    {
      "file": "dist/quality/analyzers/clarity-analyzer.js",
      "line": 272,
      "snippet": "        // Target: 10-12, penalize > 15\n        if (fkgl < 10)\n            retur"
    },
    {
      "file": "dist/quality/analyzers/clarity-analyzer.js",
      "line": 282,
      "snippet": "        // Target: > 50%\n        if (density >= 50)\n            return 1.0;\n    "
    },
    {
      "file": "dist/quality/analyzers/clarity-analyzer.js",
      "line": 288,
      "snippet": "        // MCC 1-10: 1.0-0.5, MCC > 20: 0.0\n        if (mcc <= 10)\n            r"
    },
    {
      "file": "dist/quality/analyzers/clarity-analyzer.js",
      "line": 315,
      "snippet": "//# sourceMappingURL=clarity-analyzer.js.map"
    },
    {
      "file": "dist/quality/analyzers/ai-readiness-analyzer.js",
      "line": 11,
      "snippet": "        // Weak phrases that indicate vagueness (from NASA requirements quality "
    },
    {
      "file": "dist/quality/analyzers/ai-readiness-analyzer.js",
      "line": 53,
      "snippet": "        // If syntactic validity fails, entire dimension scores 0\n        if (!m"
    },
    {
      "file": "dist/quality/analyzers/ai-readiness-analyzer.js",
      "line": 74,
      "snippet": "            // Mission is already parsed, but check for basic structure\n        "
    },
    {
      "file": "dist/quality/analyzers/ai-readiness-analyzer.js",
      "line": 78,
      "snippet": "            // Check for basic required structure\n            const hasBasicStru"
    },
    {
      "file": "dist/quality/analyzers/ai-readiness-analyzer.js",
      "line": 94,
      "snippet": "            // 1. Explicit Goal\n            {\n                name: 'Explicit go"
    },
    {
      "file": "dist/quality/analyzers/ai-readiness-analyzer.js",
      "line": 100,
      "snippet": "            // 2. Defined Scope\n            {\n                name: 'Defined sco"
    },
    {
      "file": "dist/quality/analyzers/ai-readiness-analyzer.js",
      "line": 106,
      "snippet": "            // 3. Format Specification\n            {\n                name: 'Form"
    },
    {
      "file": "dist/quality/analyzers/ai-readiness-analyzer.js",
      "line": 112,
      "snippet": "            // 4. Constraint Declaration\n            {\n                name: 'Co"
    },
    {
      "file": "dist/quality/analyzers/ai-readiness-analyzer.js",
      "line": 118,
      "snippet": "            // 5. Success Criteria Definition\n            {\n                name"
    },
    {
      "file": "dist/quality/analyzers/ai-readiness-analyzer.js",
      "line": 139,
      "snippet": "        // Check for consistent data types\n        if (mission.successCriteria &"
    },
    {
      "file": "dist/quality/analyzers/ai-readiness-analyzer.js",
      "line": 141,
      "snippet": "            // Prefer array over multi-line string\n            if (mission.succe"
    },
    {
      "file": "dist/quality/analyzers/ai-readiness-analyzer.js",
      "line": 151,
      "snippet": "        // Check for vague language\n        const fullText = JSON.stringify(miss"
    },
    {
      "file": "dist/quality/analyzers/ai-readiness-analyzer.js",
      "line": 162,
      "snippet": "        // Check for proper field naming\n        if (mission.domainFields) {\n   "
    },
    {
      "file": "dist/quality/analyzers/ai-readiness-analyzer.js",
      "line": 166,
      "snippet": "                // Check for camelCase convention\n                if (!/^[a-z][a"
    },
    {
      "file": "dist/quality/analyzers/ai-readiness-analyzer.js",
      "line": 172,
      "snippet": "        // Check for empty fields\n        const emptyFields = this.findEmptyFiel"
    },
    {
      "file": "dist/quality/analyzers/ai-readiness-analyzer.js",
      "line": 177,
      "snippet": "        // Calculate score: 1 - (violations / total possible lines)\n        cons"
    },
    {
      "file": "dist/quality/analyzers/ai-readiness-analyzer.js",
      "line": 182,
      "snippet": "    // Helper methods for instruction specificity\n    hasExplicitGoal(objective)"
    },
    {
      "file": "dist/quality/analyzers/ai-readiness-analyzer.js",
      "line": 187,
      "snippet": "        // Should contain action verbs\n        const actionVerbs = ['implement',"
    },
    {
      "file": "dist/quality/analyzers/ai-readiness-analyzer.js",
      "line": 191,
      "snippet": "        // Should be substantive (>10 words)\n        const wordCount = objective"
    },
    {
      "file": "dist/quality/analyzers/ai-readiness-analyzer.js",
      "line": 193,
      "snippet": "        // Should start with \"To\" or contain action verb\n        const isWellFor"
    },
    {
      "file": "dist/quality/analyzers/ai-readiness-analyzer.js",
      "line": 201,
      "snippet": "        // Look for scope indicators\n        const scopeIndicators = [\n         "
    },
    {
      "file": "dist/quality/analyzers/ai-readiness-analyzer.js",
      "line": 207,
      "snippet": "        // Context should be detailed (>25 words)\n        const wordCount = cont"
    },
    {
      "file": "dist/quality/analyzers/ai-readiness-analyzer.js",
      "line": 213,
      "snippet": "        // Look for format specifications\n        const formatIndicators = [\n   "
    },
    {
      "file": "dist/quality/analyzers/ai-readiness-analyzer.js",
      "line": 222,
      "snippet": "        // Look for negative constraints\n        const constraintIndicators = [\n"
    },
    {
      "file": "dist/quality/analyzers/ai-readiness-analyzer.js",
      "line": 228,
      "snippet": "        // Or positive constraints\n        const positiveConstraints = [\n       "
    },
    {
      "file": "dist/quality/analyzers/ai-readiness-analyzer.js",
      "line": 234,
      "snippet": "        // Check domainFields for constraints\n        const hasConstraintsField "
    },
    {
      "file": "dist/quality/analyzers/ai-readiness-analyzer.js",
      "line": 242,
      "snippet": "            // Should have at least 3 criteria\n            if (successCriteria.l"
    },
    {
      "file": "dist/quality/analyzers/ai-readiness-analyzer.js",
      "line": 245,
      "snippet": "            // Each criterion should be specific (>5 words)\n            const al"
    },
    {
      "file": "dist/quality/analyzers/ai-readiness-analyzer.js",
      "line": 250,
      "snippet": "            // If string, should be detailed\n            return successCriteria."
    },
    {
      "file": "dist/quality/analyzers/ai-readiness-analyzer.js",
      "line": 255,
      "snippet": "    // Helper methods for linting\n    findEmptyFields(obj, path = '') {\n        "
    },
    {
      "file": "dist/quality/analyzers/ai-readiness-analyzer.js",
      "line": 293,
      "snippet": "//# sourceMappingURL=ai-readiness-analyzer.js.map"
    },
    {
      "file": "dist/quality/analyzers/clarity-analyzer.d.ts",
      "line": 52,
      "snippet": "//# sourceMappingURL=clarity-analyzer.d.ts.map"
    },
    {
      "file": "dist/quality/analyzers/completeness-analyzer.js",
      "line": 11,
      "snippet": "        // Required fields based on mission schema\n        this.REQUIRED_FIELDS "
    },
    {
      "file": "dist/quality/analyzers/completeness-analyzer.js",
      "line": 70,
      "snippet": "                // Check for non-empty content\n                if (typeof value "
    },
    {
      "file": "dist/quality/analyzers/completeness-analyzer.js",
      "line": 90,
      "snippet": "            // Core mission elements\n            { name: 'Has objective', test: "
    },
    {
      "file": "dist/quality/analyzers/completeness-analyzer.js",
      "line": 95,
      "snippet": "            // Domain-specific elements\n            { name: 'Has domain type', t"
    },
    {
      "file": "dist/quality/analyzers/completeness-analyzer.js",
      "line": 98,
      "snippet": "            // Rich content indicators\n            { name: 'Multiple success cri"
    },
    {
      "file": "dist/quality/analyzers/completeness-analyzer.js",
      "line": 101,
      "snippet": "            // Domain-specific breadth (varies by type)\n            { name: 'Has"
    },
    {
      "file": "dist/quality/analyzers/completeness-analyzer.js",
      "line": 114,
      "snippet": "            // Objective should be substantive (>10 words)\n            {\n       "
    },
    {
      "file": "dist/quality/analyzers/completeness-analyzer.js",
      "line": 120,
      "snippet": "            // Context should be detailed (>25 words)\n            {\n            "
    },
    {
      "file": "dist/quality/analyzers/completeness-analyzer.js",
      "line": 126,
      "snippet": "            // Success criteria should have multiple items with detail\n         "
    },
    {
      "file": "dist/quality/analyzers/completeness-analyzer.js",
      "line": 138,
      "snippet": "            // Deliverables should be specific\n            {\n                nam"
    },
    {
      "file": "dist/quality/analyzers/completeness-analyzer.js",
      "line": 161,
      "snippet": "        // In full implementation, this would use topic modeling or embeddings\n "
    },
    {
      "file": "dist/quality/analyzers/completeness-analyzer.js",
      "line": 162,
      "snippet": "        // For now, using heuristic-based scoring\n        const missionType = mi"
    },
    {
      "file": "dist/quality/analyzers/completeness-analyzer.js",
      "line": 166,
      "snippet": "        // Define expected topic keywords for different mission types\n        co"
    },
    {
      "file": "dist/quality/analyzers/completeness-analyzer.js",
      "line": 169,
      "snippet": "            // Unknown type, give benefit of doubt\n            return 0.7;\n     "
    },
    {
      "file": "dist/quality/analyzers/completeness-analyzer.js",
      "line": 172,
      "snippet": "        // Check how many expected topics are covered\n        const coveredTopic"
    },
    {
      "file": "dist/quality/analyzers/completeness-analyzer.js",
      "line": 175,
      "snippet": "        // Also check for depth: are topics mentioned multiple times?\n        co"
    },
    {
      "file": "dist/quality/analyzers/completeness-analyzer.js",
      "line": 177,
      "snippet": "        // Combine coverage and depth\n        return coverage * 0.7 + depth * 0."
    },
    {
      "file": "dist/quality/analyzers/completeness-analyzer.js",
      "line": 180,
      "snippet": "    // Helper methods\n    hasNonEmpty(value) {\n        if (value === undefined |"
    },
    {
      "file": "dist/quality/analyzers/completeness-analyzer.js",
      "line": 268,
      "snippet": "        // Normalize: depth score based on average mentions per topic\n        co"
    },
    {
      "file": "dist/quality/analyzers/completeness-analyzer.js",
      "line": 270,
      "snippet": "        // Scale: 1 mention = 0.3, 2 = 0.6, 3+ = 1.0\n        if (avgMentions >= "
    },
    {
      "file": "dist/quality/analyzers/completeness-analyzer.js",
      "line": 310,
      "snippet": "//# sourceMappingURL=completeness-analyzer.js.map"
    },
    {
      "file": "dist/quality/analyzers/completeness-analyzer.d.ts",
      "line": 45,
      "snippet": "//# sourceMappingURL=completeness-analyzer.d.ts.map"
    },
    {
      "file": "dist/quality/analyzers/ai-readiness-analyzer.d.ts",
      "line": 35,
      "snippet": "//# sourceMappingURL=ai-readiness-analyzer.d.ts.map"
    },
    {
      "file": "dist/merge/deep-merge.js",
      "line": 48,
      "snippet": "        // Handle null/undefined cases\n        if (base === null || base === und"
    },
    {
      "file": "dist/merge/deep-merge.js",
      "line": 55,
      "snippet": "        // Handle arrays\n        if (Array.isArray(base) && Array.isArray(extens"
    },
    {
      "file": "dist/merge/deep-merge.js",
      "line": 59,
      "snippet": "        // Handle objects\n        if (this.isObject(base) && this.isObject(exten"
    },
    {
      "file": "dist/merge/deep-merge.js",
      "line": 63,
      "snippet": "        // Scalars: extension replaces base\n        return extension;\n    }\n    "
    },
    {
      "file": "dist/merge/deep-merge.js",
      "line": 78,
      "snippet": "            // Skip undefined values (they don't override)\n            if (exten"
    },
    {
      "file": "dist/merge/deep-merge.js",
      "line": 82,
      "snippet": "            // Domain null removes field\n            if (extensionValue === null"
    },
    {
      "file": "dist/merge/deep-merge.js",
      "line": 87,
      "snippet": "            // Merge the value\n            result[key] = this.mergeValue(baseVal"
    },
    {
      "file": "dist/merge/deep-merge.js",
      "line": 104,
      "snippet": "        // Default: concat (generic first, then domain)\n        if (options.list"
    },
    {
      "file": "dist/merge/deep-merge.js",
      "line": 106,
      "snippet": "            // Remove duplicates while preserving order\n            const combin"
    },
    {
      "file": "dist/merge/deep-merge.js",
      "line": 111,
      "snippet": "        // Default append strategy\n        return [...base, ...extension];\n    }"
    },
    {
      "file": "dist/merge/deep-merge.js",
      "line": 123,
      "snippet": "        // Extension null removes the field\n        if (extensionValue === null)"
    },
    {
      "file": "dist/merge/deep-merge.js",
      "line": 127,
      "snippet": "        // If base doesn't exist, use extension\n        if (baseValue === undefi"
    },
    {
      "file": "dist/merge/deep-merge.js",
      "line": 131,
      "snippet": "        // Arrays\n        if (Array.isArray(baseValue) && Array.isArray(extensio"
    },
    {
      "file": "dist/merge/deep-merge.js",
      "line": 135,
      "snippet": "        // Objects\n        if (this.isObject(baseValue) && this.isObject(extensi"
    },
    {
      "file": "dist/merge/deep-merge.js",
      "line": 139,
      "snippet": "        // Scalars: extension wins\n        return extensionValue;\n    }\n    /**\n"
    },
    {
      "file": "dist/merge/deep-merge.js",
      "line": 169,
      "snippet": "//# sourceMappingURL=deep-merge.js.map"
    },
    {
      "file": "dist/merge/deep-merge.d.ts",
      "line": 93,
      "snippet": "//# sourceMappingURL=deep-merge.d.ts.map"
    },
    {
      "file": "dist/intelligence/mission-splitter.d.ts",
      "line": 147,
      "snippet": "//# sourceMappingURL=mission-splitter.d.ts.map"
    },
    {
      "file": "dist/intelligence/model-transpilers.js",
      "line": 60,
      "snippet": "        // Wrap sections in XML tags\n        result = this.wrapSection(result, '"
    },
    {
      "file": "dist/intelligence/model-transpilers.js",
      "line": 65,
      "snippet": "        // Convert markdown headers to XML sections\n        result = result.repl"
    },
    {
      "file": "dist/intelligence/model-transpilers.js",
      "line": 77,
      "snippet": "        // Add clear delimiters for major sections\n        result = this.addDeli"
    },
    {
      "file": "dist/intelligence/model-transpilers.js",
      "line": 82,
      "snippet": "        // Structure examples for few-shot learning if present\n        result = "
    },
    {
      "file": "dist/intelligence/model-transpilers.js",
      "line": 119,
      "snippet": "        // Look for example patterns\n        const exampleRegex = /example:?\\s*("
    },
    {
      "file": "dist/intelligence/model-transpilers.js",
      "line": 131,
      "snippet": "        // Default PTCF structure\n        const ptcf = {\n            persona: 'Y"
    },
    {
      "file": "dist/intelligence/model-transpilers.js",
      "line": 138,
      "snippet": "        // Extract objective as task\n        const objectiveMatch = content.matc"
    },
    {
      "file": "dist/intelligence/model-transpilers.js",
      "line": 143,
      "snippet": "        // Extract context\n        const contextMatch = content.match(/context:?"
    },
    {
      "file": "dist/intelligence/model-transpilers.js",
      "line": 148,
      "snippet": "        // Extract deliverables as format guidance\n        const deliverablesMat"
    },
    {
      "file": "dist/intelligence/model-transpilers.js",
      "line": 174,
      "snippet": "            // Check for XML tags\n            return /<\\w+>.*<\\/\\w+>/s.test(cont"
    },
    {
      "file": "dist/intelligence/model-transpilers.js",
      "line": 177,
      "snippet": "            // Check for ### delimiters\n            return /###\\s+\\w+/.test(cont"
    },
    {
      "file": "dist/intelligence/model-transpilers.js",
      "line": 180,
      "snippet": "            // Check for PTCF structure\n            return /Persona:.*Task:.*Con"
    },
    {
      "file": "dist/intelligence/model-transpilers.js",
      "line": 186,
      "snippet": "//# sourceMappingURL=model-transpilers.js.map"
    },
    {
      "file": "dist/intelligence/types.js",
      "line": 8,
      "snippet": "//# sourceMappingURL=types.js.map"
    },
    {
      "file": "dist/intelligence/telemetry.js",
      "line": 36,
      "snippet": "            // Fall through to console.warn so the warning is not lost.\n        "
    },
    {
      "file": "dist/intelligence/telemetry.js",
      "line": 47,
      "snippet": "//# sourceMappingURL=telemetry.js.map"
    },
    {
      "file": "dist/intelligence/types.d.ts",
      "line": 111,
      "snippet": "//# sourceMappingURL=types.d.ts.map"
    },
    {
      "file": "dist/intelligence/complexity-scorer.js",
      "line": 72,
      "snippet": "        // Calculate individual components\n        const tokenCount = await this"
    },
    {
      "file": "dist/intelligence/complexity-scorer.js",
      "line": 84,
      "snippet": "        // Calculate composite score using weighted sum\n        const compositeS"
    },
    {
      "file": "dist/intelligence/complexity-scorer.js",
      "line": 86,
      "snippet": "        // Determine if split is needed\n        const { shouldSplit, reasons } ="
    },
    {
      "file": "dist/intelligence/complexity-scorer.js",
      "line": 103,
      "snippet": "        // Normalize to 0-10 scale, with 1.0 ratio = 10\n        return Math.min("
    },
    {
      "file": "dist/intelligence/complexity-scorer.js",
      "line": 112,
      "snippet": "        // Count discrete instructions (bullet points, numbered items, sentences"
    },
    {
      "file": "dist/intelligence/complexity-scorer.js",
      "line": 115,
      "snippet": "        // Count logical operators\n        const logicalOps = this.countLogicalO"
    },
    {
      "file": "dist/intelligence/complexity-scorer.js",
      "line": 118,
      "snippet": "        // Count dependencies\n        if (mission?.context?.dependencies) {\n    "
    },
    {
      "file": "dist/intelligence/complexity-scorer.js",
      "line": 122,
      "snippet": "        // Count nested structures (indentation, sub-items)\n        const nestin"
    },
    {
      "file": "dist/intelligence/complexity-scorer.js",
      "line": 125,
      "snippet": "        // Count deliverables (more deliverables = more complex)\n        if (mis"
    },
    {
      "file": "dist/intelligence/complexity-scorer.js",
      "line": 138,
      "snippet": "        // Normalize to 0-10 scale, with ratio > 1.0 indicating exceeding capaci"
    },
    {
      "file": "dist/intelligence/complexity-scorer.js",
      "line": 147,
      "snippet": "        // Check for complexity indicators\n        for (const [type, pattern] of"
    },
    {
      "file": "dist/intelligence/complexity-scorer.js",
      "line": 157,
      "snippet": "        // Check for exponential complexity keywords\n        const exponentialKe"
    },
    {
      "file": "dist/intelligence/complexity-scorer.js",
      "line": 180,
      "snippet": "        // Check composite score threshold\n        if (compositeScore > this.con"
    },
    {
      "file": "dist/intelligence/complexity-scorer.js",
      "line": 185,
      "snippet": "        // Check token threshold\n        const tokenRatio = components.tokenScor"
    },
    {
      "file": "dist/intelligence/complexity-scorer.js",
      "line": 191,
      "snippet": "        // Check time horizon threshold\n        const timeRatio = components.tim"
    },
    {
      "file": "dist/intelligence/complexity-scorer.js",
      "line": 203,
      "snippet": "        // Base estimate on word count (avg reading speed ~200 wpm)\n        cons"
    },
    {
      "file": "dist/intelligence/complexity-scorer.js",
      "line": 206,
      "snippet": "        // Adjust based on deliverables (30 min per deliverable)\n        if (mis"
    },
    {
      "file": "dist/intelligence/complexity-scorer.js",
      "line": 210,
      "snippet": "        // Adjust based on success criteria (15 min per criterion)\n        if (m"
    },
    {
      "file": "dist/intelligence/complexity-scorer.js",
      "line": 214,
      "snippet": "        // Adjust for complexity indicators\n        for (const pattern of Object"
    },
    {
      "file": "dist/intelligence/complexity-scorer.js",
      "line": 225,
      "snippet": "        // Count numbered items\n        const numberedItems = (text.match(/^\\s*\\"
    },
    {
      "file": "dist/intelligence/complexity-scorer.js",
      "line": 227,
      "snippet": "        // Count bullet points\n        const bulletPoints = (text.match(/^\\s*[-*"
    },
    {
      "file": "dist/intelligence/complexity-scorer.js",
      "line": 229,
      "snippet": "        // Count sentences with imperative verbs (crude estimate)\n        const "
    },
    {
      "file": "dist/intelligence/complexity-scorer.js",
      "line": 240,
      "snippet": "        // Count conditionals\n        count += (text.match(COMPLEXITY_INDICATORS"
    },
    {
      "file": "dist/intelligence/complexity-scorer.js",
      "line": 242,
      "snippet": "        // Count loops\n        count += (text.match(COMPLEXITY_INDICATORS.loops)"
    },
    {
      "file": "dist/intelligence/complexity-scorer.js",
      "line": 244,
      "snippet": "        // Count dependency keywords\n        for (const keyword of DEPENDENCY_KE"
    },
    {
      "file": "dist/intelligence/complexity-scorer.js",
      "line": 258,
      "snippet": "            // Count leading spaces/tabs\n            const leadingWhitespace = l"
    },
    {
      "file": "dist/intelligence/complexity-scorer.js",
      "line": 291,
      "snippet": "//# sourceMappingURL=complexity-scorer.js.map"
    },
    {
      "file": "dist/intelligence/token-counters.d.ts",
      "line": 75,
      "snippet": "//# sourceMappingURL=token-counters.d.ts.map"
    },
    {
      "file": "dist/intelligence/compression-rules.js",
      "line": 18,
      "snippet": "    // Remove conversational fillers\n    {\n        type: 'regex_replace',\n      "
    },
    {
      "file": "dist/intelligence/compression-rules.js",
      "line": 43,
      "snippet": "    // Remove redundant phrases\n    {\n        type: 'regex_replace',\n        pat"
    },
    {
      "file": "dist/intelligence/compression-rules.js",
      "line": 68,
      "snippet": "    // Normalize whitespace\n    {\n        type: 'regex_replace',\n        pattern"
    },
    {
      "file": "dist/intelligence/compression-rules.js",
      "line": 105,
      "snippet": "    // Simplify verbose constructions\n    {\n        type: 'regex_replace',\n     "
    },
    {
      "file": "dist/intelligence/compression-rules.js",
      "line": 190,
      "snippet": "    // Check if text contains sequential delimiters\n    let delimiterCount = 0;\n"
    },
    {
      "file": "dist/intelligence/compression-rules.js",
      "line": 197,
      "snippet": "    // Only convert if we have multiple sequential items\n    if (delimiterCount "
    },
    {
      "file": "dist/intelligence/compression-rules.js",
      "line": 201,
      "snippet": "    // Split by delimiters and create a list\n    let result = text;\n    for (con"
    },
    {
      "file": "dist/intelligence/compression-rules.js",
      "line": 204,
      "snippet": "        // Create list item format\n        const delimiterRegex = new RegExp(`\\\\"
    },
    {
      "file": "dist/intelligence/compression-rules.js",
      "line": 214,
      "snippet": "    // Simple pattern matching for common passive constructions\n    const passiv"
    },
    {
      "file": "dist/intelligence/compression-rules.js",
      "line": 296,
      "snippet": "//# sourceMappingURL=compression-rules.js.map"
    },
    {
      "file": "dist/intelligence/dependency-inferrer.js",
      "line": 18,
      "snippet": "        // Extract mission ID\n        const missionId = missionData.missionId;\n "
    },
    {
      "file": "dist/intelligence/dependency-inferrer.js",
      "line": 20,
      "snippet": "        // Infer from context field using keyword matching\n        if (missionDa"
    },
    {
      "file": "dist/intelligence/dependency-inferrer.js",
      "line": 25,
      "snippet": "        // Infer from objective field\n        if (missionData.objective) {\n     "
    },
    {
      "file": "dist/intelligence/dependency-inferrer.js",
      "line": 30,
      "snippet": "        // Infer from success criteria\n        if (missionData.successCriteria) "
    },
    {
      "file": "dist/intelligence/dependency-inferrer.js",
      "line": 35,
      "snippet": "        // Infer from deliverables\n        if (missionData.deliverables) {\n     "
    },
    {
      "file": "dist/intelligence/dependency-inferrer.js",
      "line": 40,
      "snippet": "        // Structural inference: missions with similar names might be related\n  "
    },
    {
      "file": "dist/intelligence/dependency-inferrer.js",
      "line": 51,
      "snippet": "        // Find all mission references in text\n        const missionRefs = this."
    },
    {
      "file": "dist/intelligence/dependency-inferrer.js",
      "line": 53,
      "snippet": "        // For each mission reference, look for nearby dependency keywords\n     "
    },
    {
      "file": "dist/intelligence/dependency-inferrer.js",
      "line": 58,
      "snippet": "            // Check if there's a dependency keyword near this reference\n       "
    },
    {
      "file": "dist/intelligence/dependency-inferrer.js",
      "line": 62,
      "snippet": "                    // Determine direction based on keyword position\n           "
    },
    {
      "file": "dist/intelligence/dependency-inferrer.js",
      "line": 74,
      "snippet": "            // Check for temporal keywords\n            for (const keyword of Dep"
    },
    {
      "file": "dist/intelligence/dependency-inferrer.js",
      "line": 97,
      "snippet": "        // Look for mission references in criteria\n        const missionRefs = t"
    },
    {
      "file": "dist/intelligence/dependency-inferrer.js",
      "line": 119,
      "snippet": "        // Extract file paths from deliverables\n        const filePaths = this.e"
    },
    {
      "file": "dist/intelligence/dependency-inferrer.js",
      "line": 121,
      "snippet": "        // Check if any other missions reference these files\n        for (const "
    },
    {
      "file": "dist/intelligence/dependency-inferrer.js",
      "line": 126,
      "snippet": "            // Check if this mission's deliverables are referenced by other miss"
    },
    {
      "file": "dist/intelligence/dependency-inferrer.js",
      "line": 148,
      "snippet": "        // Extract mission number (e.g., \"B3.2\" -> {prefix: \"B\", major: 3, minor"
    },
    {
      "file": "dist/intelligence/dependency-inferrer.js",
      "line": 153,
      "snippet": "        // Look for missions with same prefix and lower minor version\n        fo"
    },
    {
      "file": "dist/intelligence/dependency-inferrer.js",
      "line": 162,
      "snippet": "            // Same sprint (major version), previous mission (minor - 1)\n       "
    },
    {
      "file": "dist/intelligence/dependency-inferrer.js",
      "line": 174,
      "snippet": "            // Research missions that build missions depend on\n            if (p"
    },
    {
      "file": "dist/intelligence/dependency-inferrer.js",
      "line": 206,
      "snippet": "        // Match patterns like: app/src/file.ts, tests/test.ts\n        const pat"
    },
    {
      "file": "dist/intelligence/dependency-inferrer.js",
      "line": 252,
      "snippet": "// Dependency keywords that signal relationships\nDependencyInferrer.DEPENDENCY_K"
    },
    {
      "file": "dist/intelligence/dependency-inferrer.js",
      "line": 269,
      "snippet": "// Temporal keywords that suggest sequence\nDependencyInferrer.TEMPORAL_KEYWORDS "
    },
    {
      "file": "dist/intelligence/dependency-inferrer.js",
      "line": 281,
      "snippet": "//# sourceMappingURL=dependency-inferrer.js.map"
    },
    {
      "file": "dist/intelligence/graph-validator.d.ts",
      "line": 61,
      "snippet": "//# sourceMappingURL=graph-validator.d.ts.map"
    },
    {
      "file": "dist/intelligence/compression-rules.d.ts",
      "line": 62,
      "snippet": "//# sourceMappingURL=compression-rules.d.ts.map"
    },
    {
      "file": "dist/intelligence/telemetry.d.ts",
      "line": 25,
      "snippet": "//# sourceMappingURL=telemetry.d.ts.map"
    },
    {
      "file": "dist/intelligence/mission-splitter.js",
      "line": 41,
      "snippet": "        // Analyze complexity\n        const complexity = await this.complexitySc"
    },
    {
      "file": "dist/intelligence/mission-splitter.js",
      "line": 45,
      "snippet": "        // Phase 1: Semantic Proposal - find topic shifts\n        const proposed"
    },
    {
      "file": "dist/intelligence/mission-splitter.js",
      "line": 47,
      "snippet": "        // Phase 2: Structural Validation - identify atomic operations\n        c"
    },
    {
      "file": "dist/intelligence/mission-splitter.js",
      "line": 49,
      "snippet": "        // Phase 3: Reconciliation - validate breakpoints don't break atomic ops"
    },
    {
      "file": "dist/intelligence/mission-splitter.js",
      "line": 51,
      "snippet": "        // Generate sub-missions from validated split points\n        const subMi"
    },
    {
      "file": "dist/intelligence/mission-splitter.js",
      "line": 53,
      "snippet": "        // Extract preserved context\n        const preservedContext = this.extra"
    },
    {
      "file": "dist/intelligence/mission-splitter.js",
      "line": 77,
      "snippet": "        // Generate split suggestions\n        const proposed = this.proposeSeman"
    },
    {
      "file": "dist/intelligence/mission-splitter.js",
      "line": 95,
      "snippet": "        // Simple semantic analysis: look for transitions and topic shifts\n     "
    },
    {
      "file": "dist/intelligence/mission-splitter.js",
      "line": 99,
      "snippet": "            // Calculate semantic distance (simplified - in production use embed"
    },
    {
      "file": "dist/intelligence/mission-splitter.js",
      "line": 101,
      "snippet": "            // Propose breakpoint if distance exceeds threshold (80th percentile"
    },
    {
      "file": "dist/intelligence/mission-splitter.js",
      "line": 112,
      "snippet": "        // Also propose breaks at structural boundaries\n        const structural"
    },
    {
      "file": "dist/intelligence/mission-splitter.js",
      "line": 131,
      "snippet": "        // Identify numbered/bulleted lists\n        const listBlocks = this.find"
    },
    {
      "file": "dist/intelligence/mission-splitter.js",
      "line": 139,
      "snippet": "        // Identify dependency chains\n        const dependencyChains = this.find"
    },
    {
      "file": "dist/intelligence/mission-splitter.js",
      "line": 147,
      "snippet": "        // Identify code blocks\n        const codeBlocks = this.findCodeBlocks(m"
    },
    {
      "file": "dist/intelligence/mission-splitter.js",
      "line": 165,
      "snippet": "            // Check if this breakpoint falls within an atomic operation\n       "
    },
    {
      "file": "dist/intelligence/mission-splitter.js",
      "line": 167,
      "snippet": "            // Check minimum chunk size\n            const tooClose = breakpoint."
    },
    {
      "file": "dist/intelligence/mission-splitter.js",
      "line": 178,
      "snippet": "        // Limit number of splits\n        const maxSplits = options.maxSubMissio"
    },
    {
      "file": "dist/intelligence/mission-splitter.js",
      "line": 187,
      "snippet": "        // Add start and end positions for easier chunking\n        const positio"
    },
    {
      "file": "dist/intelligence/mission-splitter.js",
      "line": 196,
      "snippet": "        // Infer dependencies between sub-missions\n        this.inferDependencie"
    },
    {
      "file": "dist/intelligence/mission-splitter.js",
      "line": 222,
      "snippet": "            // By default, each mission depends on the previous one\n            "
    },
    {
      "file": "dist/intelligence/mission-splitter.js",
      "line": 224,
      "snippet": "            // Check for explicit references to earlier missions\n            con"
    },
    {
      "file": "dist/intelligence/mission-splitter.js",
      "line": 229,
      "snippet": "                // If current mission mentions previous mission's objective\n    "
    },
    {
      "file": "dist/intelligence/mission-splitter.js",
      "line": 240,
      "snippet": "        // Simplified implementation - in production use sentence embeddings\n   "
    },
    {
      "file": "dist/intelligence/mission-splitter.js",
      "line": 245,
      "snippet": "        // Jaccard distance\n        return 1 - (intersection.size / union.size);"
    },
    {
      "file": "dist/intelligence/mission-splitter.js",
      "line": 253,
      "snippet": "        // Double newlines indicate paragraph breaks\n        const paragraphBrea"
    },
    {
      "file": "dist/intelligence/mission-splitter.js",
      "line": 256,
      "snippet": "        // Section headers (lines starting with #)\n        const sectionHeaders "
    },
    {
      "file": "dist/intelligence/mission-splitter.js",
      "line": 259,
      "snippet": "        // Horizontal rules\n        const rules = [...text.matchAll(/\\n---+\\n/g)"
    },
    {
      "file": "dist/intelligence/mission-splitter.js",
      "line": 295,
      "snippet": "            // Check if next sentence starts with dependency keyword\n           "
    },
    {
      "file": "dist/intelligence/mission-splitter.js",
      "line": 345,
      "snippet": "        // Look for objective-like statements\n        const objectiveMatch = chu"
    },
    {
      "file": "dist/intelligence/mission-splitter.js",
      "line": 350,
      "snippet": "        // Look for imperative verbs\n        const firstSentence = chunk.split(/"
    },
    {
      "file": "dist/intelligence/mission-splitter.js",
      "line": 362,
      "snippet": "        // Remove metadata and keep core instructions\n        return chunk.repla"
    },
    {
      "file": "dist/intelligence/mission-splitter.js",
      "line": 370,
      "snippet": "        // Look for file mentions\n        const filePattern = /(?:file|create|im"
    },
    {
      "file": "dist/intelligence/mission-splitter.js",
      "line": 420,
      "snippet": "//# sourceMappingURL=mission-splitter.js.map"
    },
    {
      "file": "dist/intelligence/token-optimizer.d.ts",
      "line": 52,
      "snippet": "//# sourceMappingURL=token-optimizer.d.ts.map"
    },
    {
      "file": "dist/intelligence/dependency-analyzer.d.ts",
      "line": 90,
      "snippet": "//# sourceMappingURL=dependency-analyzer.d.ts.map"
    },
    {
      "file": "dist/intelligence/complexity-scorer.d.ts",
      "line": 111,
      "snippet": "//# sourceMappingURL=complexity-scorer.d.ts.map"
    },
    {
      "file": "dist/intelligence/context-propagator.d.ts",
      "line": 108,
      "snippet": "//# sourceMappingURL=context-propagator.d.ts.map"
    },
    {
      "file": "dist/intelligence/context-propagator.js",
      "line": 57,
      "snippet": "        // For short chains, use full context\n        if (completedResults.lengt"
    },
    {
      "file": "dist/intelligence/context-propagator.js",
      "line": 61,
      "snippet": "        // For medium chains, use extractive\n        if (completedResults.length"
    },
    {
      "file": "dist/intelligence/context-propagator.js",
      "line": 65,
      "snippet": "        // For long chains, use map-reduce\n        return 'map-reduce';\n    }\n  "
    },
    {
      "file": "dist/intelligence/context-propagator.js",
      "line": 109,
      "snippet": "        // In a production system, this would call an LLM to generate summaries\n"
    },
    {
      "file": "dist/intelligence/context-propagator.js",
      "line": 110,
      "snippet": "        // For now, we'll use extractive as a fallback with narrative structure\n"
    },
    {
      "file": "dist/intelligence/context-propagator.js",
      "line": 129,
      "snippet": "        // Map phase: Summarize each result individually\n        const individua"
    },
    {
      "file": "dist/intelligence/context-propagator.js",
      "line": 138,
      "snippet": "        // Reduce phase: Group and synthesize summaries\n        const grouped = "
    },
    {
      "file": "dist/intelligence/context-propagator.js",
      "line": 162,
      "snippet": "        // Score sentences by importance\n        const scoredSentences = sentenc"
    },
    {
      "file": "dist/intelligence/context-propagator.js",
      "line": 165,
      "snippet": "            // Keywords indicating importance\n            const importantKeyword"
    },
    {
      "file": "dist/intelligence/context-propagator.js",
      "line": 182,
      "snippet": "            // Position bias - earlier sentences often more important\n          "
    },
    {
      "file": "dist/intelligence/context-propagator.js",
      "line": 188,
      "snippet": "            // Length - prefer medium-length sentences\n            if (sentence."
    },
    {
      "file": "dist/intelligence/context-propagator.js",
      "line": 194,
      "snippet": "        // Sort by score and take top sentences\n        const keySentences = sco"
    },
    {
      "file": "dist/intelligence/context-propagator.js",
      "line": 199,
      "snippet": "        // Extract key phrases (simple noun phrase extraction)\n        const key"
    },
    {
      "file": "dist/intelligence/context-propagator.js",
      "line": 212,
      "snippet": "        // Extract quoted text\n        const quoted = text.match(/\"([^\"]+)\"/g) |"
    },
    {
      "file": "dist/intelligence/context-propagator.js",
      "line": 215,
      "snippet": "        // Extract capitalized multi-word terms\n        const capitalized = text"
    },
    {
      "file": "dist/intelligence/context-propagator.js",
      "line": 224,
      "snippet": "        // Look for objective/goal statements\n        const objectiveMatch = mis"
    },
    {
      "file": "dist/intelligence/context-propagator.js",
      "line": 229,
      "snippet": "        // Fallback: first sentence\n        const firstSentence = missionText.sp"
    },
    {
      "file": "dist/intelligence/context-propagator.js",
      "line": 237,
      "snippet": "        // Simple grouping by sequential order\n        // In production, this wo"
    },
    {
      "file": "dist/intelligence/context-propagator.js",
      "line": 238,
      "snippet": "        // In production, this would use embedding similarity\n        const grou"
    },
    {
      "file": "dist/intelligence/context-propagator.js",
      "line": 256,
      "snippet": "        // Rough estimate: 1 token \u2248 4 characters\n        return Math.ceil(text."
    },
    {
      "file": "dist/intelligence/context-propagator.js",
      "line": 279,
      "snippet": "//# sourceMappingURL=context-propagator.js.map"
    },
    {
      "file": "dist/intelligence/graph-validator.js",
      "line": 18,
      "snippet": "        // Check for missing dependencies\n        this.checkMissingDependencies("
    },
    {
      "file": "dist/intelligence/graph-validator.js",
      "line": 20,
      "snippet": "        // Detect cycles using DFS with back-edge detection\n        const cycleD"
    },
    {
      "file": "dist/intelligence/graph-validator.js",
      "line": 64,
      "snippet": "        // Initialize all nodes as white\n        for (const nodeId of graph.node"
    },
    {
      "file": "dist/intelligence/graph-validator.js",
      "line": 69,
      "snippet": "        // DFS helper function\n        const dfs = (nodeId, recursionStack) => {"
    },
    {
      "file": "dist/intelligence/graph-validator.js",
      "line": 76,
      "snippet": "                    // Skip if neighbor doesn't exist in graph\n                 "
    },
    {
      "file": "dist/intelligence/graph-validator.js",
      "line": 85,
      "snippet": "                        // Back edge found - we have a cycle\n                   "
    },
    {
      "file": "dist/intelligence/graph-validator.js",
      "line": 94,
      "snippet": "        // Run DFS from each unvisited node\n        for (const nodeId of graph.n"
    },
    {
      "file": "dist/intelligence/graph-validator.js",
      "line": 129,
      "snippet": "        // Create a position map\n        const position = new Map();\n        exe"
    },
    {
      "file": "dist/intelligence/graph-validator.js",
      "line": 134,
      "snippet": "        // Check that all dependencies come before dependents\n        // In our "
    },
    {
      "file": "dist/intelligence/graph-validator.js",
      "line": 135,
      "snippet": "        // In our graph: edge from A to B means A depends on B, so B must execut"
    },
    {
      "file": "dist/intelligence/graph-validator.js",
      "line": 149,
      "snippet": "                // Dependency (depId) must come before the node that depends on "
    },
    {
      "file": "dist/intelligence/graph-validator.js",
      "line": 189,
      "snippet": "            // If nodeId is a root node, pop the stack and create an SCC\n       "
    },
    {
      "file": "dist/intelligence/graph-validator.js",
      "line": 212,
      "snippet": "//# sourceMappingURL=graph-validator.js.map"
    },
    {
      "file": "dist/intelligence/dependency-inferrer.d.ts",
      "line": 68,
      "snippet": "//# sourceMappingURL=dependency-inferrer.d.ts.map"
    },
    {
      "file": "dist/intelligence/model-transpilers.d.ts",
      "line": 59,
      "snippet": "//# sourceMappingURL=model-transpilers.d.ts.map"
    },
    {
      "file": "dist/intelligence/dependency-analyzer.js",
      "line": 56,
      "snippet": "        // Clear previous graph\n        this.graph = {\n            nodes: new Ma"
    },
    {
      "file": "dist/intelligence/dependency-analyzer.js",
      "line": 61,
      "snippet": "        // Build graph from missions\n        await this.buildGraph(missions);\n  "
    },
    {
      "file": "dist/intelligence/dependency-analyzer.js",
      "line": 63,
      "snippet": "        // Detect cycles using DFS\n        const { hasCycles, cycles } = this.de"
    },
    {
      "file": "dist/intelligence/dependency-analyzer.js",
      "line": 65,
      "snippet": "        // If no cycles, compute execution order using topological sort\n        "
    },
    {
      "file": "dist/intelligence/dependency-analyzer.js",
      "line": 89,
      "snippet": "                // Mission is a file path\n                filePath = mission;\n  "
    },
    {
      "file": "dist/intelligence/dependency-analyzer.js",
      "line": 95,
      "snippet": "                // Mission is already an object\n                missionData = mi"
    },
    {
      "file": "dist/intelligence/dependency-analyzer.js",
      "line": 100,
      "snippet": "            // Extract explicit dependencies from various fields\n            con"
    },
    {
      "file": "dist/intelligence/dependency-analyzer.js",
      "line": 102,
      "snippet": "            // Create node\n            const node = {\n                missionId,"
    },
    {
      "file": "dist/intelligence/dependency-analyzer.js",
      "line": 108,
      "snippet": "            // Add node to graph\n            this.graph.nodes.set(missionId, nod"
    },
    {
      "file": "dist/intelligence/dependency-analyzer.js",
      "line": 110,
      "snippet": "            // Add edges\n            if (!this.graph.edges.has(missionId)) {\n   "
    },
    {
      "file": "dist/intelligence/dependency-analyzer.js",
      "line": 125,
      "snippet": "        // Check researchFoundation field\n        if (missionData.domainFields?."
    },
    {
      "file": "dist/intelligence/dependency-analyzer.js",
      "line": 129,
      "snippet": "                    // Extract mission ID from source mission reference\n        "
    },
    {
      "file": "dist/intelligence/dependency-analyzer.js",
      "line": 137,
      "snippet": "        // Check handoffContext dependencies\n        if (missionData.domainField"
    },
    {
      "file": "dist/intelligence/dependency-analyzer.js",
      "line": 146,
      "snippet": "        // Check context field for mission references\n        if (missionData.co"
    },
    {
      "file": "dist/intelligence/dependency-analyzer.js",
      "line": 151,
      "snippet": "        // Check blockers field\n        if (missionData.domainFields?.handoffCon"
    },
    {
      "file": "dist/intelligence/dependency-analyzer.js",
      "line": 167,
      "snippet": "        // Remove angle brackets if present\n        const cleaned = ref.replace("
    },
    {
      "file": "dist/intelligence/dependency-analyzer.js",
      "line": 169,
      "snippet": "        // Extract mission ID pattern (e.g., R4.3, B3.2, etc.)\n        const mat"
    },
    {
      "file": "dist/intelligence/dependency-analyzer.js",
      "line": 174,
      "snippet": "        // If no pattern match, check if it's a simple single-letter ID (for tes"
    },
    {
      "file": "dist/intelligence/dependency-analyzer.js",
      "line": 178,
      "snippet": "        // Return the whole string if it looks like a mission ID\n        return "
    },
    {
      "file": "dist/intelligence/dependency-analyzer.js",
      "line": 187,
      "snippet": "        // Pattern to match mission IDs like R4.3, B3.2, etc.\n        const miss"
    },
    {
      "file": "dist/intelligence/dependency-analyzer.js",
      "line": 193,
      "snippet": "        // Also match simple single-letter mission IDs (for tests)\n        const"
    },
    {
      "file": "dist/intelligence/dependency-analyzer.js",
      "line": 212,
      "snippet": "        // Initialize all nodes as white\n        for (const nodeId of this.graph"
    },
    {
      "file": "dist/intelligence/dependency-analyzer.js",
      "line": 217,
      "snippet": "        // DFS helper function\n        const dfs = (nodeId) => {\n            col"
    },
    {
      "file": "dist/intelligence/dependency-analyzer.js",
      "line": 223,
      "snippet": "                    // Skip if neighbor doesn't exist in graph\n                 "
    },
    {
      "file": "dist/intelligence/dependency-analyzer.js",
      "line": 234,
      "snippet": "                        // Back edge found - we have a cycle\n                   "
    },
    {
      "file": "dist/intelligence/dependency-analyzer.js",
      "line": 244,
      "snippet": "        // Run DFS from each unvisited node\n        let hasCycles = false;\n     "
    },
    {
      "file": "dist/intelligence/dependency-analyzer.js",
      "line": 281,
      "snippet": "        // Initialize out-degree for all nodes (count of dependencies)\n        f"
    },
    {
      "file": "dist/intelligence/dependency-analyzer.js",
      "line": 287,
      "snippet": "        // Add all nodes with out-degree 0 to queue (nodes with no dependencies)"
    },
    {
      "file": "dist/intelligence/dependency-analyzer.js",
      "line": 293,
      "snippet": "        // Process queue\n        while (queue.length > 0) {\n            const no"
    },
    {
      "file": "dist/intelligence/dependency-analyzer.js",
      "line": 297,
      "snippet": "            // Find all nodes that depend on this node\n            for (const [o"
    },
    {
      "file": "dist/intelligence/dependency-analyzer.js",
      "line": 300,
      "snippet": "                    // otherId depends on nodeId, so reduce its out-degree\n     "
    },
    {
      "file": "dist/intelligence/dependency-analyzer.js",
      "line": 319,
      "snippet": "        // For this implementation, we'll use longest path in DAG\n        // In "
    },
    {
      "file": "dist/intelligence/dependency-analyzer.js",
      "line": 320,
      "snippet": "        // In our graph, edge A->B means A depends on B, so we need to reverse f"
    },
    {
      "file": "dist/intelligence/dependency-analyzer.js",
      "line": 323,
      "snippet": "        // Initialize distances to 0 for all nodes\n        for (const nodeId of "
    },
    {
      "file": "dist/intelligence/dependency-analyzer.js",
      "line": 328,
      "snippet": "        // Get topological order (dependencies come before dependents)\n        c"
    },
    {
      "file": "dist/intelligence/dependency-analyzer.js",
      "line": 330,
      "snippet": "        // Calculate longest path: iterate in topological order\n        // For e"
    },
    {
      "file": "dist/intelligence/dependency-analyzer.js",
      "line": 331,
      "snippet": "        // For each node, find max distance from all its dependencies\n        fo"
    },
    {
      "file": "dist/intelligence/dependency-analyzer.js",
      "line": 352,
      "snippet": "        // Find the node with maximum distance (end of critical path)\n        le"
    },
    {
      "file": "dist/intelligence/dependency-analyzer.js",
      "line": 361,
      "snippet": "        // Reconstruct path from end to start\n        const path = [];\n        i"
    },
    {
      "file": "dist/intelligence/dependency-analyzer.js",
      "line": 381,
      "snippet": "//# sourceMappingURL=dependency-analyzer.js.map"
    },
    {
      "file": "dist/intelligence/token-optimizer.js",
      "line": 63,
      "snippet": "        // Get default ruleset and merge with custom rules\n        const finalRu"
    },
    {
      "file": "dist/intelligence/token-optimizer.js",
      "line": 68,
      "snippet": "        // Add custom preserve tags if provided\n        if (preserveTags && pres"
    },
    {
      "file": "dist/intelligence/token-optimizer.js",
      "line": 74,
      "snippet": "        // Count original tokens\n        const originalTokenCount = await this.t"
    },
    {
      "file": "dist/intelligence/token-optimizer.js",
      "line": 76,
      "snippet": "        // Track passes applied\n        const passesApplied = [];\n        let re"
    },
    {
      "file": "dist/intelligence/token-optimizer.js",
      "line": 81,
      "snippet": "            // Extract and preserve protected sections\n            const preserv"
    },
    {
      "file": "dist/intelligence/token-optimizer.js",
      "line": 84,
      "snippet": "            // Pass 1: Sanitization & Normalization\n            if (finalRuleset"
    },
    {
      "file": "dist/intelligence/token-optimizer.js",
      "line": 89,
      "snippet": "            // Pass 2: Structural Refactoring\n            if (finalRuleset.struc"
    },
    {
      "file": "dist/intelligence/token-optimizer.js",
      "line": 94,
      "snippet": "            // Pass 3: Linguistic Simplification\n            if (finalRuleset.li"
    },
    {
      "file": "dist/intelligence/token-optimizer.js",
      "line": 99,
      "snippet": "            // Restore preserved sections\n            result = (0, compression_r"
    },
    {
      "file": "dist/intelligence/token-optimizer.js",
      "line": 101,
      "snippet": "            // Pass 4: Model-Specific Templating\n            result = this.trans"
    },
    {
      "file": "dist/intelligence/token-optimizer.js",
      "line": 104,
      "snippet": "            // Count compressed tokens\n            const compressedTokenCount = "
    },
    {
      "file": "dist/intelligence/token-optimizer.js",
      "line": 107,
      "snippet": "            // Calculate stats\n            const stats = {\n                origi"
    },
    {
      "file": "dist/intelligence/token-optimizer.js",
      "line": 122,
      "snippet": "            // Check if we achieved target reduction\n            if (stats.reduc"
    },
    {
      "file": "dist/intelligence/token-optimizer.js",
      "line": 126,
      "snippet": "            // If dry run, return original content\n            if (dryRun) {\n   "
    },
    {
      "file": "dist/intelligence/token-optimizer.js",
      "line": 191,
      "snippet": "//# sourceMappingURL=token-optimizer.js.map"
    },
    {
      "file": "dist/intelligence/token-counters.js",
      "line": 74,
      "snippet": "            // Dynamic import of gpt-tokenizer\n            const { encode } = aw"
    },
    {
      "file": "dist/intelligence/token-counters.js",
      "line": 85,
      "snippet": "            // Fallback to heuristic if library fails\n            return this.fa"
    },
    {
      "file": "dist/intelligence/token-counters.js",
      "line": 98,
      "snippet": "            // Tokenize the text\n            const encoded = await tokenizer(tex"
    },
    {
      "file": "dist/intelligence/token-counters.js",
      "line": 101,
      "snippet": "            // Emit telemetry warning about potential drift\n            (0, tele"
    },
    {
      "file": "dist/intelligence/token-counters.js",
      "line": 115,
      "snippet": "            // Fallback to heuristic if tokenizer fails to load\n            retu"
    },
    {
      "file": "dist/intelligence/token-counters.js",
      "line": 146,
      "snippet": "        // Enhanced heuristic: base estimate with 50% safety margin\n        cons"
    },
    {
      "file": "dist/intelligence/token-counters.js",
      "line": 222,
      "snippet": "//# sourceMappingURL=token-counters.js.map"
    },
    {
      "file": "dist/combination/dependency-resolver.js",
      "line": 35,
      "snippet": "        // Step 1: Build dependency graph\n        try {\n            this.buildGr"
    },
    {
      "file": "dist/combination/dependency-resolver.js",
      "line": 51,
      "snippet": "        // Step 2: Detect circular dependencies\n        const circularDeps = thi"
    },
    {
      "file": "dist/combination/dependency-resolver.js",
      "line": 64,
      "snippet": "        // Step 3: Perform topological sort\n        try {\n            const load"
    },
    {
      "file": "dist/combination/dependency-resolver.js",
      "line": 92,
      "snippet": "        // Create a map of available packs by name for quick lookup\n        cons"
    },
    {
      "file": "dist/combination/dependency-resolver.js",
      "line": 97,
      "snippet": "        // Also add requested packs to the map\n        for (const pack of packs)"
    },
    {
      "file": "dist/combination/dependency-resolver.js",
      "line": 101,
      "snippet": "        // Process each requested pack\n        const toProcess = [...packs];\n   "
    },
    {
      "file": "dist/combination/dependency-resolver.js",
      "line": 107,
      "snippet": "            // Skip if already processed\n            if (processed.has(packName)"
    },
    {
      "file": "dist/combination/dependency-resolver.js",
      "line": 111,
      "snippet": "            // Create dependency node\n            const node = {\n               "
    },
    {
      "file": "dist/combination/dependency-resolver.js",
      "line": 120,
      "snippet": "            // Add dependencies to processing queue\n            if (pack.manifes"
    },
    {
      "file": "dist/combination/dependency-resolver.js",
      "line": 133,
      "snippet": "        // Mark all nodes as resolved (dependencies exist)\n        for (const no"
    },
    {
      "file": "dist/combination/dependency-resolver.js",
      "line": 151,
      "snippet": "                // Found a cycle\n                const cycleStart = currentPath."
    },
    {
      "file": "dist/combination/dependency-resolver.js",
      "line": 172,
      "snippet": "        // Run DFS from each unvisited node\n        for (const nodeName of graph"
    },
    {
      "file": "dist/combination/dependency-resolver.js",
      "line": 190,
      "snippet": "        // Initialize in-degree and adjacency list\n        for (const [name, nod"
    },
    {
      "file": "dist/combination/dependency-resolver.js",
      "line": 199,
      "snippet": "                // Add edge from dependency to dependent\n                if (!ad"
    },
    {
      "file": "dist/combination/dependency-resolver.js",
      "line": 204,
      "snippet": "                // Increment in-degree of dependent\n                inDegree.set"
    },
    {
      "file": "dist/combination/dependency-resolver.js",
      "line": 208,
      "snippet": "        // Find all nodes with in-degree 0 (no dependencies)\n        const queue"
    },
    {
      "file": "dist/combination/dependency-resolver.js",
      "line": 215,
      "snippet": "        // Process nodes in topological order\n        while (queue.length > 0) {"
    },
    {
      "file": "dist/combination/dependency-resolver.js",
      "line": 219,
      "snippet": "            // Reduce in-degree of dependent nodes\n            const dependents "
    },
    {
      "file": "dist/combination/dependency-resolver.js",
      "line": 229,
      "snippet": "        // Check if all nodes were processed\n        if (result.length !== graph"
    },
    {
      "file": "dist/combination/dependency-resolver.js",
      "line": 254,
      "snippet": "            // Simple version check (exact match for now)\n            // Could b"
    },
    {
      "file": "dist/combination/dependency-resolver.js",
      "line": 255,
      "snippet": "            // Could be extended to support SemVer ranges\n            if (availa"
    },
    {
      "file": "dist/combination/dependency-resolver.js",
      "line": 303,
      "snippet": "//# sourceMappingURL=dependency-resolver.js.map"
    },
    {
      "file": "dist/combination/types.js",
      "line": 39,
      "snippet": "//# sourceMappingURL=types.js.map"
    },
    {
      "file": "dist/combination/types.d.ts",
      "line": 112,
      "snippet": "//# sourceMappingURL=types.d.ts.map"
    },
    {
      "file": "dist/combination/pack-combiner.d.ts",
      "line": 84,
      "snippet": "//# sourceMappingURL=pack-combiner.d.ts.map"
    },
    {
      "file": "dist/combination/dependency-resolver.d.ts",
      "line": 69,
      "snippet": "//# sourceMappingURL=dependency-resolver.d.ts.map"
    },
    {
      "file": "dist/combination/pack-combiner.js",
      "line": 50,
      "snippet": "        // Validate inputs\n        if (packs.length === 0) {\n            return "
    },
    {
      "file": "dist/combination/pack-combiner.js",
      "line": 58,
      "snippet": "        // Step 1: Resolve dependencies\n        let packsToLoad = packs;\n       "
    },
    {
      "file": "dist/combination/pack-combiner.js",
      "line": 71,
      "snippet": "            // Load packs in dependency order\n            const packMap = new Ma"
    },
    {
      "file": "dist/combination/pack-combiner.js",
      "line": 90,
      "snippet": "        // Step 2: Merge packs using selected strategy\n        try {\n           "
    },
    {
      "file": "dist/combination/pack-combiner.js",
      "line": 94,
      "snippet": "            // Step 3: Validate if requested\n            if (opts.validate) {\n  "
    },
    {
      "file": "dist/combination/pack-combiner.js",
      "line": 129,
      "snippet": "        // Extract templates from all packs\n        const templates = packs.map("
    },
    {
      "file": "dist/combination/pack-combiner.js",
      "line": 131,
      "snippet": "        // Merge templates using strategy\n        const combinedTemplate = strat"
    },
    {
      "file": "dist/combination/pack-combiner.js",
      "line": 133,
      "snippet": "        // Combine manifests\n        const firstPack = packs[0];\n        const p"
    },
    {
      "file": "dist/combination/pack-combiner.js",
      "line": 160,
      "snippet": "                    // Keep the first version encountered (from dependency order"
    },
    {
      "file": "dist/combination/pack-combiner.js",
      "line": 178,
      "snippet": "        // Validate manifest\n        if (!pack.manifest.name || pack.manifest.na"
    },
    {
      "file": "dist/combination/pack-combiner.js",
      "line": 188,
      "snippet": "        // Validate template\n        if (typeof pack.template !== 'object' || pa"
    },
    {
      "file": "dist/combination/pack-combiner.js",
      "line": 192,
      "snippet": "        // Validate combination order matches source packs\n        if (pack.comb"
    },
    {
      "file": "dist/combination/pack-combiner.js",
      "line": 197,
      "snippet": "        // Warn if template is empty\n        if (Object.keys(pack.template).leng"
    },
    {
      "file": "dist/combination/pack-combiner.js",
      "line": 251,
      "snippet": "        // Resolve dependencies\n        const dependencies = this.resolver.resol"
    },
    {
      "file": "dist/combination/pack-combiner.js",
      "line": 261,
      "snippet": "        // Validate each pack's dependencies\n        for (const pack of packs) {"
    },
    {
      "file": "dist/combination/pack-combiner.js",
      "line": 288,
      "snippet": "//# sourceMappingURL=pack-combiner.js.map"
    },
    {
      "file": "dist/combination/merge-strategies.d.ts",
      "line": 87,
      "snippet": "//# sourceMappingURL=merge-strategies.d.ts.map"
    },
    {
      "file": "dist/combination/merge-strategies.js",
      "line": 32,
      "snippet": "        // Merge templates left to right\n        let result = { ...templates[0] "
    },
    {
      "file": "dist/combination/merge-strategies.js",
      "line": 55,
      "snippet": "        // Return a copy of the last template\n        return { ...templates[temp"
    },
    {
      "file": "dist/combination/merge-strategies.js",
      "line": 79,
      "snippet": "        // Start with first template\n        let result = { ...templates[0] };\n "
    },
    {
      "file": "dist/combination/merge-strategies.js",
      "line": 81,
      "snippet": "        // Merge each subsequent template\n        for (let i = 1; i < templates."
    },
    {
      "file": "dist/combination/merge-strategies.js",
      "line": 94,
      "snippet": "            // Check if this path should be overridden\n            if (this.shou"
    },
    {
      "file": "dist/combination/merge-strategies.js",
      "line": 99,
      "snippet": "            // Check if this path should be merged\n            if (this.shouldMe"
    },
    {
      "file": "dist/combination/merge-strategies.js",
      "line": 102,
      "snippet": "                // Merge arrays by concatenation\n                if (Array.isArr"
    },
    {
      "file": "dist/combination/merge-strategies.js",
      "line": 106,
      "snippet": "                // Merge objects recursively\n                else if (this.isObj"
    },
    {
      "file": "dist/combination/merge-strategies.js",
      "line": 110,
      "snippet": "                // Scalars: extension overrides\n                else {\n         "
    },
    {
      "file": "dist/combination/merge-strategies.js",
      "line": 116,
      "snippet": "            // Default behavior: deep merge\n            const baseValue = base[k"
    },
    {
      "file": "dist/combination/merge-strategies.js",
      "line": 131,
      "snippet": "        // Exact match or wildcard match\n        if (this.overridePaths.has(path"
    },
    {
      "file": "dist/combination/merge-strategies.js",
      "line": 135,
      "snippet": "        // Check wildcard patterns (e.g., \"spec.resources.*\")\n        for (const"
    },
    {
      "file": "dist/combination/merge-strategies.js",
      "line": 147,
      "snippet": "        // Exact match or wildcard match\n        if (this.mergePaths.has(path)) "
    },
    {
      "file": "dist/combination/merge-strategies.js",
      "line": 151,
      "snippet": "        // Check wildcard patterns\n        for (const pattern of this.mergePaths"
    },
    {
      "file": "dist/combination/merge-strategies.js",
      "line": 212,
      "snippet": "//# sourceMappingURL=merge-strategies.js.map"
    },
    {
      "file": "dist/schemas/generic-mission.js",
      "line": 118,
      "snippet": "//# sourceMappingURL=generic-mission.js.map"
    },
    {
      "file": "dist/schemas/generic-mission.d.ts",
      "line": 120,
      "snippet": "//# sourceMappingURL=generic-mission.d.ts.map"
    },
    {
      "file": "dist/import-export/security-validator.d.ts",
      "line": 93,
      "snippet": "//# sourceMappingURL=security-validator.d.ts.map"
    },
    {
      "file": "dist/import-export/template-importer.d.ts",
      "line": 93,
      "snippet": "//# sourceMappingURL=template-importer.d.ts.map"
    },
    {
      "file": "dist/import-export/types.js",
      "line": 41,
      "snippet": "//# sourceMappingURL=types.js.map"
    },
    {
      "file": "dist/import-export/template-importer.js",
      "line": 68,
      "snippet": "        // Initialize SecureYAMLLoader (Layers 1-3)\n        this.yamlLoader = ne"
    },
    {
      "file": "dist/import-export/template-importer.js",
      "line": 74,
      "snippet": "        // Initialize SecurityValidator (Layers 4-6)\n        this.validator = ne"
    },
    {
      "file": "dist/import-export/template-importer.js",
      "line": 89,
      "snippet": "            // Step 1-3: Load with path sanitization, safe parsing, and schema v"
    },
    {
      "file": "dist/import-export/template-importer.js",
      "line": 91,
      "snippet": "            // Step 4-6: Security validation (signature, semantics, dependencies"
    },
    {
      "file": "dist/import-export/template-importer.js",
      "line": 93,
      "snippet": "            // Check if validation passed\n            if (!validationReport.vali"
    },
    {
      "file": "dist/import-export/template-importer.js",
      "line": 98,
      "snippet": "            // Step 7: Resolve dependencies (recursive validation)\n            c"
    },
    {
      "file": "dist/import-export/template-importer.js",
      "line": 101,
      "snippet": "            // Check performance target (<1 second for typical templates)\n      "
    },
    {
      "file": "dist/import-export/template-importer.js",
      "line": 127,
      "snippet": "            // Load with SecureYAMLLoader (Layers 1-3)\n            const schema "
    },
    {
      "file": "dist/import-export/template-importer.js",
      "line": 150,
      "snippet": "        // Process dependencies sequentially (could be parallelized in productio"
    },
    {
      "file": "dist/import-export/template-importer.js",
      "line": 153,
      "snippet": "                // Fetch dependency (simplified - in production would handle URL"
    },
    {
      "file": "dist/import-export/template-importer.js",
      "line": 155,
      "snippet": "                // Verify checksum\n                this.verifyDependencyChecksum"
    },
    {
      "file": "dist/import-export/template-importer.js",
      "line": 157,
      "snippet": "                // Recursively validate dependency through full pipeline\n       "
    },
    {
      "file": "dist/import-export/template-importer.js",
      "line": 178,
      "snippet": "            // For now, treat sourceUrl as a local file path\n            // In p"
    },
    {
      "file": "dist/import-export/template-importer.js",
      "line": 179,
      "snippet": "            // In production, this would:\n            // 1. Check URL against al"
    },
    {
      "file": "dist/import-export/template-importer.js",
      "line": 180,
      "snippet": "            // 1. Check URL against allowlist\n            // 2. Use HTTPS to fet"
    },
    {
      "file": "dist/import-export/template-importer.js",
      "line": 181,
      "snippet": "            // 2. Use HTTPS to fetch from approved domains\n            // 3. Imp"
    },
    {
      "file": "dist/import-export/template-importer.js",
      "line": 182,
      "snippet": "            // 3. Implement retry logic and timeout\n            const url = new "
    },
    {
      "file": "dist/import-export/template-importer.js",
      "line": 217,
      "snippet": "        // Write to temporary file and import\n        const tempFile = path.join"
    },
    {
      "file": "dist/import-export/template-importer.js",
      "line": 224,
      "snippet": "            // Clean up temp file\n            if (fs.existsSync(tempFile)) {\n   "
    },
    {
      "file": "dist/import-export/template-importer.js",
      "line": 238,
      "snippet": "//# sourceMappingURL=template-importer.js.map"
    },
    {
      "file": "dist/import-export/security-validator.js",
      "line": 112,
      "snippet": "            // Assume Layers 1-3 already passed (path sanitization, safe parsing"
    },
    {
      "file": "dist/import-export/security-validator.js",
      "line": 113,
      "snippet": "            // These are handled by SecureYAMLLoader\n            // Layer 4: Cry"
    },
    {
      "file": "dist/import-export/security-validator.js",
      "line": 114,
      "snippet": "            // Layer 4: Cryptographic Signature Verification\n            const s"
    },
    {
      "file": "dist/import-export/security-validator.js",
      "line": 120,
      "snippet": "            // Layer 5: Semantic Validation\n            const semanticResult = t"
    },
    {
      "file": "dist/import-export/security-validator.js",
      "line": 126,
      "snippet": "            // Layer 6: Dependency Resolution (validation only, not actual fetch"
    },
    {
      "file": "dist/import-export/security-validator.js",
      "line": 172,
      "snippet": "            // Look up public key in trusted registry\n            const publicKe"
    },
    {
      "file": "dist/import-export/security-validator.js",
      "line": 177,
      "snippet": "            // Verify algorithm matches\n            if (publicKey.algorithm !== "
    },
    {
      "file": "dist/import-export/security-validator.js",
      "line": 181,
      "snippet": "            // Create canonical representation of signed content\n            // "
    },
    {
      "file": "dist/import-export/security-validator.js",
      "line": 182,
      "snippet": "            // In a real implementation, this would be the spec + dependencies\n "
    },
    {
      "file": "dist/import-export/security-validator.js",
      "line": 184,
      "snippet": "            // Verify signature (simplified - in production use crypto library)\n"
    },
    {
      "file": "dist/import-export/security-validator.js",
      "line": 212,
      "snippet": "        // Deterministic JSON serialization\n        const content = {\n          "
    },
    {
      "file": "dist/import-export/security-validator.js",
      "line": 224,
      "snippet": "        // Simplified implementation - in production use proper crypto\n        /"
    },
    {
      "file": "dist/import-export/security-validator.js",
      "line": 225,
      "snippet": "        // For now, just check that signature is non-empty\n        // Real imple"
    },
    {
      "file": "dist/import-export/security-validator.js",
      "line": 226,
      "snippet": "        // Real implementation would use:\n        // - crypto.verify() for RS256"
    },
    {
      "file": "dist/import-export/security-validator.js",
      "line": 227,
      "snippet": "        // - crypto.verify() for RS256/ES256\n        // - GPG libraries for PGP-"
    },
    {
      "file": "dist/import-export/security-validator.js",
      "line": 228,
      "snippet": "        // - GPG libraries for PGP-SHA256\n        return signature.length > 0 &&"
    },
    {
      "file": "dist/import-export/security-validator.js",
      "line": 241,
      "snippet": "            // Check for denied keywords (anti-RCE)\n            const specString"
    },
    {
      "file": "dist/import-export/security-validator.js",
      "line": 248,
      "snippet": "            // Check resource limits\n            if (spec.resources) {\n         "
    },
    {
      "file": "dist/import-export/security-validator.js",
      "line": 257,
      "snippet": "            // Validate allowed actions (if allowlist is populated)\n            "
    },
    {
      "file": "dist/import-export/security-validator.js",
      "line": 269,
      "snippet": "            // Cross-field consistency checks\n            if (spec.startDate && "
    },
    {
      "file": "dist/import-export/security-validator.js",
      "line": 309,
      "snippet": "            // No dependencies is valid\n            if (!dependencies || depende"
    },
    {
      "file": "dist/import-export/security-validator.js",
      "line": 317,
      "snippet": "            // Check dependency count limit\n            if (dependencies.length "
    },
    {
      "file": "dist/import-export/security-validator.js",
      "line": 321,
      "snippet": "            // Validate each dependency\n            for (const dep of dependenci"
    },
    {
      "file": "dist/import-export/security-validator.js",
      "line": 323,
      "snippet": "                // Check URL allowlist\n                const isAllowed = this.is"
    },
    {
      "file": "dist/import-export/security-validator.js",
      "line": 328,
      "snippet": "                // Validate checksum format\n                if (!dep.checksum.ma"
    },
    {
      "file": "dist/import-export/security-validator.js",
      "line": 332,
      "snippet": "                // Validate version format (semver)\n                if (!dep.ver"
    },
    {
      "file": "dist/import-export/security-validator.js",
      "line": 364,
      "snippet": "        // If allowlist is empty, deny all external URLs\n        if (this.semant"
    },
    {
      "file": "dist/import-export/security-validator.js",
      "line": 371,
      "snippet": "            // Check against allowlist patterns\n            return this.semantic"
    },
    {
      "file": "dist/import-export/security-validator.js",
      "line": 373,
      "snippet": "                // Support wildcards like *.example.com\n                if (patt"
    },
    {
      "file": "dist/import-export/security-validator.js",
      "line": 405,
      "snippet": "//# sourceMappingURL=security-validator.js.map"
    },
    {
      "file": "dist/import-export/types.d.ts",
      "line": 105,
      "snippet": "//# sourceMappingURL=types.d.ts.map"
    },
    {
      "file": "dist/import-export/template-exporter.js",
      "line": 78,
      "snippet": "            // Validate template structure\n            this.validateTemplateForE"
    },
    {
      "file": "dist/import-export/template-exporter.js",
      "line": 80,
      "snippet": "            // Determine format\n            const format = options?.format || 'y"
    },
    {
      "file": "dist/import-export/template-exporter.js",
      "line": 82,
      "snippet": "            // Serialize template\n            const content = this.serialize(tem"
    },
    {
      "file": "dist/import-export/template-exporter.js",
      "line": 84,
      "snippet": "            // Resolve output path (ensure within baseDir)\n            const res"
    },
    {
      "file": "dist/import-export/template-exporter.js",
      "line": 86,
      "snippet": "            // Ensure output directory exists\n            const outputDir = path"
    },
    {
      "file": "dist/import-export/template-exporter.js",
      "line": 91,
      "snippet": "            // Write file\n            fs.writeFileSync(resolvedPath, content, 'u"
    },
    {
      "file": "dist/import-export/template-exporter.js",
      "line": 155,
      "snippet": "        // Use YAML.stringify for safe, strict serialization\n        let yamlCon"
    },
    {
      "file": "dist/import-export/template-exporter.js",
      "line": 159,
      "snippet": "        // Add header comment if enabled\n        if (includeComments) {\n        "
    },
    {
      "file": "dist/import-export/template-exporter.js",
      "line": 208,
      "snippet": "        // Security check: ensure resolved path is within baseDir\n        const "
    },
    {
      "file": "dist/import-export/template-exporter.js",
      "line": 246,
      "snippet": "//# sourceMappingURL=template-exporter.js.map"
    },
    {
      "file": "dist/import-export/template-exporter.d.ts",
      "line": 106,
      "snippet": "//# sourceMappingURL=template-exporter.d.ts.map"
    },
    {
      "file": "dist/registry/semver-validator.d.ts",
      "line": 48,
      "snippet": "//# sourceMappingURL=semver-validator.d.ts.map"
    },
    {
      "file": "dist/registry/registry-parser.js",
      "line": 56,
      "snippet": "        // Load with schema validation\n        const registry = this.loader.load"
    },
    {
      "file": "dist/registry/registry-parser.js",
      "line": 58,
      "snippet": "        // Validate each entry\n        const validatedEntries = [];\n        cons"
    },
    {
      "file": "dist/registry/registry-parser.js",
      "line": 71,
      "snippet": "        // If any entries failed validation, throw error with all details\n      "
    },
    {
      "file": "dist/registry/registry-parser.js",
      "line": 85,
      "snippet": "        // Validate required fields (schema ensures they exist, but check conten"
    },
    {
      "file": "dist/registry/registry-parser.js",
      "line": 98,
      "snippet": "        // Validate SemVer format for version\n        if (!(0, semver_validator_"
    },
    {
      "file": "dist/registry/registry-parser.js",
      "line": 102,
      "snippet": "        // Validate SemVer format for schema_version\n        if (!(0, semver_val"
    },
    {
      "file": "dist/registry/registry-parser.js",
      "line": 106,
      "snippet": "        // Validate path doesn't contain traversal sequences\n        if (entry.p"
    },
    {
      "file": "dist/registry/registry-parser.js",
      "line": 110,
      "snippet": "        // Validate author if present\n        if (entry.author !== undefined && "
    },
    {
      "file": "dist/registry/registry-parser.js",
      "line": 127,
      "snippet": "        // Validate target version\n        if (!(0, semver_validator_1.isValidSe"
    },
    {
      "file": "dist/registry/registry-parser.js",
      "line": 132,
      "snippet": "            // Entry schema validation already ensures schema_version is valid S"
    },
    {
      "file": "dist/registry/registry-parser.js",
      "line": 161,
      "snippet": "//# sourceMappingURL=registry-parser.js.map"
    },
    {
      "file": "dist/registry/semver-validator.js",
      "line": 68,
      "snippet": "    // Compare major\n    if (parsed1.major !== parsed2.major) {\n        return p"
    },
    {
      "file": "dist/registry/semver-validator.js",
      "line": 72,
      "snippet": "    // Compare minor\n    if (parsed1.minor !== parsed2.minor) {\n        return p"
    },
    {
      "file": "dist/registry/semver-validator.js",
      "line": 76,
      "snippet": "    // Compare patch\n    if (parsed1.patch !== parsed2.patch) {\n        return p"
    },
    {
      "file": "dist/registry/semver-validator.js",
      "line": 107,
      "snippet": "    // In SemVer, major version 0 is for initial development\n    // Different mi"
    },
    {
      "file": "dist/registry/semver-validator.js",
      "line": 108,
      "snippet": "    // Different minor versions in 0.x.x are NOT compatible\n    if (parsed1.majo"
    },
    {
      "file": "dist/registry/semver-validator.js",
      "line": 112,
      "snippet": "    // For major >= 1, same major version indicates compatibility\n    return par"
    },
    {
      "file": "dist/registry/semver-validator.js",
      "line": 115,
      "snippet": "//# sourceMappingURL=semver-validator.js.map"
    },
    {
      "file": "dist/registry/registry-parser.d.ts",
      "line": 59,
      "snippet": "//# sourceMappingURL=registry-parser.d.ts.map"
    },
    {
      "file": "dist/versioning/types.js",
      "line": 50,
      "snippet": "//# sourceMappingURL=types.js.map"
    },
    {
      "file": "dist/versioning/types.d.ts",
      "line": 212,
      "snippet": "//# sourceMappingURL=types.d.ts.map"
    },
    {
      "file": "dist/versioning/migration-engine.js",
      "line": 64,
      "snippet": "        // Sort by from version (oldest to newest)\n        migrations.sort((a, b"
    },
    {
      "file": "dist/versioning/migration-engine.js",
      "line": 76,
      "snippet": "        // Use breadth-first search to find shortest migration path\n        cons"
    },
    {
      "file": "dist/versioning/migration-engine.js",
      "line": 83,
      "snippet": "                // Circular dependency detected\n                return null;\n   "
    },
    {
      "file": "dist/versioning/migration-engine.js",
      "line": 87,
      "snippet": "            // Find migration from current version\n            const nextMigrati"
    },
    {
      "file": "dist/versioning/migration-engine.js",
      "line": 90,
      "snippet": "                // No migration found from this version\n                return n"
    },
    {
      "file": "dist/versioning/migration-engine.js",
      "line": 95,
      "snippet": "            // Check if we've reached the target version\n            if (this.ve"
    },
    {
      "file": "dist/versioning/migration-engine.js",
      "line": 99,
      "snippet": "            // Check if we've overshot the target (shouldn't happen with proper "
    },
    {
      "file": "dist/versioning/migration-engine.js",
      "line": 104,
      "snippet": "        // Calculate total duration and reversibility\n        const totalDuratio"
    },
    {
      "file": "dist/versioning/migration-engine.js",
      "line": 125,
      "snippet": "            // Create backup if enabled\n            if (this.options.createBacku"
    },
    {
      "file": "dist/versioning/migration-engine.js",
      "line": 129,
      "snippet": "            // Execute each migration step\n            for (let i = 0; i < migra"
    },
    {
      "file": "dist/versioning/migration-engine.js",
      "line": 204,
      "snippet": "        // Ensure backup directory exists\n        await fs.mkdir(backupDir, { re"
    },
    {
      "file": "dist/versioning/migration-engine.js",
      "line": 206,
      "snippet": "        // Write backup\n        await fs.writeFile(backupPath, JSON.stringify(te"
    },
    {
      "file": "dist/versioning/migration-engine.js",
      "line": 228,
      "snippet": "        // Check that versions are different\n        if (this.versionManager.com"
    },
    {
      "file": "dist/versioning/migration-engine.js",
      "line": 232,
      "snippet": "        // Check that toVersion is greater than fromVersion (no downgrades)\n    "
    },
    {
      "file": "dist/versioning/migration-engine.js",
      "line": 236,
      "snippet": "        // Check that migration function exists\n        if (typeof migration.mig"
    },
    {
      "file": "dist/versioning/migration-engine.js",
      "line": 240,
      "snippet": "        // Check rollback if reversible\n        if (migration.reversible && type"
    },
    {
      "file": "dist/versioning/migration-engine.js",
      "line": 253,
      "snippet": "        // Get latest version\n        const latestVersion = this.versionManager."
    },
    {
      "file": "dist/versioning/migration-engine.js",
      "line": 258,
      "snippet": "        // Check if already at latest version\n        if (this.versionManager.co"
    },
    {
      "file": "dist/versioning/migration-engine.js",
      "line": 267,
      "snippet": "        // Find migration path\n        const path = this.findMigrationPath(templ"
    },
    {
      "file": "dist/versioning/migration-engine.js",
      "line": 272,
      "snippet": "        // Execute migration\n        return this.migrate(templateId, template, p"
    },
    {
      "file": "dist/versioning/migration-engine.js",
      "line": 335,
      "snippet": "//# sourceMappingURL=migration-engine.js.map"
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 27,
      "snippet": "        // SemVer regex pattern\n        const semverRegex = /^(\\d+)\\.(\\d+)\\.(\\d+"
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 59,
      "snippet": "        // Compare major.minor.patch\n        if (v1.major !== v2.major) {\n      "
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 69,
      "snippet": "        // If major.minor.patch are equal, check prerelease\n        // According"
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 70,
      "snippet": "        // According to SemVer: version with prerelease < version without prerel"
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 80,
      "snippet": "        // Both have prerelease - compare them lexicographically\n        const p"
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 90,
      "snippet": "            // Try parsing as numbers\n            const num1 = parseInt(part1, 1"
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 99,
      "snippet": "                // Lexicographic comparison for non-numeric parts\n              "
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 111,
      "snippet": "        // Exact version match\n        if (range.exact) {\n            return thi"
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 115,
      "snippet": "        // Range expression (simplified SemVer range support)\n        if (range."
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 119,
      "snippet": "        // Min/max range check\n        if (range.min) {\n            const minCom"
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 139,
      "snippet": "        // Remove whitespace\n        expression = expression.trim();\n        // "
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 141,
      "snippet": "        // Caret range (^): allow changes that don't modify left-most non-zero d"
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 147,
      "snippet": "            // Check if within caret range\n            if (baseVersion.major > 0"
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 160,
      "snippet": "        // Tilde range (~): allow patch-level changes\n        if (expression.sta"
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 168,
      "snippet": "        // Comparison operators\n        if (expression.startsWith('>=')) {\n     "
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 187,
      "snippet": "        // Exact match\n        const baseVersion = this.parseVersion(expression)"
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 195,
      "snippet": "        // Check if version1 is compatible with version2\n        if (version1.co"
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 203,
      "snippet": "        // Check if version2 is compatible with version1\n        if (version2.co"
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 211,
      "snippet": "        // Check for deprecation warnings\n        if (version1.deprecated || ver"
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 227,
      "snippet": "        // Check if migration is available\n        const migrationRequired = fro"
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 250,
      "snippet": "        // Add version to the list\n        entry.versions.push(templateVersion);"
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 252,
      "snippet": "        // Sort versions\n        entry.versions.sort((a, b) => this.compareVersi"
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 254,
      "snippet": "        // Update latest stable and latest versions\n        entry.latest = entry"
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 302,
      "snippet": "            // Find a version that satisfies all ranges\n            let compatib"
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 305,
      "snippet": "                // Skip prerelease versions if not allowed\n                if (v"
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 309,
      "snippet": "                // Check if this version satisfies all ranges\n                co"
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 318,
      "snippet": "                // Add deprecation warning\n                if (compatibleVersion"
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 324,
      "snippet": "                // No compatible version found\n                conflicts.push({\n"
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 346,
      "snippet": "        // Validate version format\n        try {\n            this.parseVersion(t"
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 353,
      "snippet": "        // Validate compatibility range\n        if (templateVersion.compatibleWi"
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 363,
      "snippet": "        // Validate release date\n        if (isNaN(Date.parse(templateVersion.re"
    },
    {
      "file": "dist/versioning/version-manager.js",
      "line": 386,
      "snippet": "//# sourceMappingURL=version-manager.js.map"
    },
    {
      "file": "dist/versioning/version-manager.d.ts",
      "line": 76,
      "snippet": "//# sourceMappingURL=version-manager.d.ts.map"
    },
    {
      "file": "dist/versioning/migration-engine.d.ts",
      "line": 82,
      "snippet": "//# sourceMappingURL=migration-engine.d.ts.map"
    },
    {
      "file": "dist/extraction/types.js",
      "line": 7,
      "snippet": "//# sourceMappingURL=types.js.map"
    },
    {
      "file": "dist/extraction/types.d.ts",
      "line": 160,
      "snippet": "//# sourceMappingURL=types.d.ts.map"
    },
    {
      "file": "dist/extraction/template-extractor.d.ts",
      "line": 57,
      "snippet": "//# sourceMappingURL=template-extractor.d.ts.map"
    },
    {
      "file": "dist/extraction/template-extractor.js",
      "line": 66,
      "snippet": "            // Validate source mission exists\n            if (!fs.existsSync(thi"
    },
    {
      "file": "dist/extraction/template-extractor.js",
      "line": 70,
      "snippet": "            // Stage 1: Identify candidates\n            const stage1Result = awa"
    },
    {
      "file": "dist/extraction/template-extractor.js",
      "line": 72,
      "snippet": "            // Stage 2: Generate template\n            const stage2Result = await"
    },
    {
      "file": "dist/extraction/template-extractor.js",
      "line": 103,
      "snippet": "        // Get all files in the mission\n        const files = this.getAllFiles(m"
    },
    {
      "file": "dist/extraction/template-extractor.js",
      "line": 105,
      "snippet": "        // Track literal frequencies across all files\n        const literalFrequ"
    },
    {
      "file": "dist/extraction/template-extractor.js",
      "line": 114,
      "snippet": "            // Analyze different aspects based on file type\n            if (this"
    },
    {
      "file": "dist/extraction/template-extractor.js",
      "line": 121,
      "snippet": "            // Analyze file path for potential parameters\n            this.analy"
    },
    {
      "file": "dist/extraction/template-extractor.js",
      "line": 124,
      "snippet": "        // Calculate confidence scores based on frequency\n        for (const [li"
    },
    {
      "file": "dist/extraction/template-extractor.js",
      "line": 128,
      "snippet": "            // Only include candidates above threshold\n            if (confidenc"
    },
    {
      "file": "dist/extraction/template-extractor.js",
      "line": 141,
      "snippet": "        // If no candidates found, lower threshold to ensure we get some results"
    },
    {
      "file": "dist/extraction/template-extractor.js",
      "line": 176,
      "snippet": "        // Generate parameters from candidates\n        let parametersGenerated ="
    },
    {
      "file": "dist/extraction/template-extractor.js",
      "line": 183,
      "snippet": "        // Process all files and apply parameterization\n        const files = th"
    },
    {
      "file": "dist/extraction/template-extractor.js",
      "line": 191,
      "snippet": "            // Apply parameterization to file path\n            for (const [param"
    },
    {
      "file": "dist/extraction/template-extractor.js",
      "line": 199,
      "snippet": "            // Apply parameterization to content\n            for (const [paramNa"
    },
    {
      "file": "dist/extraction/template-extractor.js",
      "line": 203,
      "snippet": "                        // Use word boundaries for safer replacement\n           "
    },
    {
      "file": "dist/extraction/template-extractor.js",
      "line": 215,
      "snippet": "        // Generate metadata\n        const metadata = this.extractMetadata(param"
    },
    {
      "file": "dist/extraction/template-extractor.js",
      "line": 251,
      "snippet": "    // === Private Helper Methods ===\n    getAllFiles(dir, fileList = []) {\n    "
    },
    {
      "file": "dist/extraction/template-extractor.js",
      "line": 295,
      "snippet": "            // Skip files that can't be parsed\n        }\n    }\n    extractConfig"
    },
    {
      "file": "dist/extraction/template-extractor.js",
      "line": 325,
      "snippet": "        // Extract string literals\n        const stringLiteralRegex = /[\"']([^\"'"
    },
    {
      "file": "dist/extraction/template-extractor.js",
      "line": 335,
      "snippet": "                // Skip common keywords and short strings\n                if (li"
    },
    {
      "file": "dist/extraction/template-extractor.js",
      "line": 355,
      "snippet": "        // Extract unique path segments that might be project-specific\n        c"
    },
    {
      "file": "dist/extraction/template-extractor.js",
      "line": 358,
      "snippet": "            // Skip common directory names\n            if (this.isCommonDirector"
    },
    {
      "file": "dist/extraction/template-extractor.js",
      "line": 361,
      "snippet": "            // Check if segment looks like a project-specific identifier\n       "
    },
    {
      "file": "dist/extraction/template-extractor.js",
      "line": 380,
      "snippet": "        // Low frequency = likely project-specific = high confidence for paramet"
    },
    {
      "file": "dist/extraction/template-extractor.js",
      "line": 381,
      "snippet": "        // High frequency = likely boilerplate = low confidence\n        // For s"
    },
    {
      "file": "dist/extraction/template-extractor.js",
      "line": 382,
      "snippet": "        // For small projects (few files), be more lenient\n        const baseThr"
    },
    {
      "file": "dist/extraction/template-extractor.js",
      "line": 389,
      "snippet": "        // Use context to suggest better parameter names\n        if (candidate.t"
    },
    {
      "file": "dist/extraction/template-extractor.js",
      "line": 397,
      "snippet": "        // Generate from literal value\n        return literal\n            .repla"
    },
    {
      "file": "dist/extraction/template-extractor.js",
      "line": 404,
      "snippet": "        // Determine type from candidate values\n        const firstValue = candi"
    },
    {
      "file": "dist/extraction/template-extractor.js",
      "line": 413,
      "snippet": "        // Use the most common value as default\n        const valueCounts = new "
    },
    {
      "file": "dist/extraction/template-extractor.js",
      "line": 443,
      "snippet": "        // Detect language/framework from file extensions\n        const files = "
    },
    {
      "file": "dist/extraction/template-extractor.js",
      "line": 453,
      "snippet": "        // Detect common patterns\n        if (baseName.includes('api'))\n        "
    },
    {
      "file": "dist/extraction/template-extractor.js",
      "line": 475,
      "snippet": "//# sourceMappingURL=template-extractor.js.map"
    },
    {
      "file": "dist/loaders/yaml-loader.d.ts",
      "line": 92,
      "snippet": "//# sourceMappingURL=yaml-loader.d.ts.map"
    },
    {
      "file": "dist/loaders/yaml-loader.js",
      "line": 59,
      "snippet": "        // Normalize and resolve base directory\n        this.baseDir = path.reso"
    },
    {
      "file": "dist/loaders/yaml-loader.js",
      "line": 63,
      "snippet": "        // Initialize AJV for schema validation\n        this.ajv = new ajv_1.def"
    },
    {
      "file": "dist/loaders/yaml-loader.js",
      "line": 76,
      "snippet": "        // Resolve the path relative to base directory\n        const resolvedPat"
    },
    {
      "file": "dist/loaders/yaml-loader.js",
      "line": 78,
      "snippet": "        // Get the relative path from base to resolved\n        const relativePat"
    },
    {
      "file": "dist/loaders/yaml-loader.js",
      "line": 80,
      "snippet": "        // Check if path escapes base directory\n        // If it starts with '.."
    },
    {
      "file": "dist/loaders/yaml-loader.js",
      "line": 81,
      "snippet": "        // If it starts with '..' or is absolute, it's outside baseDir\n        i"
    },
    {
      "file": "dist/loaders/yaml-loader.js",
      "line": 85,
      "snippet": "        // Additional check: ensure resolved path starts with baseDir\n        if"
    },
    {
      "file": "dist/loaders/yaml-loader.js",
      "line": 102,
      "snippet": "            // YAML.parse is safe - it doesn't evaluate custom tags\n            "
    },
    {
      "file": "dist/loaders/yaml-loader.js",
      "line": 103,
      "snippet": "            // Unlike js-yaml's load(), it won't execute code\n            const "
    },
    {
      "file": "dist/loaders/yaml-loader.js",
      "line": 105,
      "snippet": "            // Additional safety check: ensure no functions in parsed data\n     "
    },
    {
      "file": "dist/loaders/yaml-loader.js",
      "line": 156,
      "snippet": "        // Layer 1: Sanitize path\n        const sanitizedPath = this.sanitizePat"
    },
    {
      "file": "dist/loaders/yaml-loader.js",
      "line": 158,
      "snippet": "        // Check file exists and get stats\n        if (!fs.existsSync(sanitizedP"
    },
    {
      "file": "dist/loaders/yaml-loader.js",
      "line": 162,
      "snippet": "        // Use lstatSync to detect symlinks (statSync follows them)\n        cons"
    },
    {
      "file": "dist/loaders/yaml-loader.js",
      "line": 164,
      "snippet": "        // Check if symlink when not allowed\n        if (stats.isSymbolicLink() "
    },
    {
      "file": "dist/loaders/yaml-loader.js",
      "line": 168,
      "snippet": "        // Check file size\n        if (stats.size > this.maxFileSize) {\n        "
    },
    {
      "file": "dist/loaders/yaml-loader.js",
      "line": 172,
      "snippet": "        // Read file content\n        const content = fs.readFileSync(sanitizedPa"
    },
    {
      "file": "dist/loaders/yaml-loader.js",
      "line": 174,
      "snippet": "        // Layer 2: Safe parse\n        const parsed = this.safeParse(content);\n "
    },
    {
      "file": "dist/loaders/yaml-loader.js",
      "line": 176,
      "snippet": "        // Layer 3: Schema validation (if provided)\n        if (schema) {\n      "
    },
    {
      "file": "dist/loaders/yaml-loader.js",
      "line": 200,
      "snippet": "//# sourceMappingURL=yaml-loader.js.map"
    },
    {
      "file": "tests/tools/create-mission.test.ts",
      "line": 35,
      "snippet": "    // Create test data directory\n    if (!fs.existsSync(testDataDir)) {\n      f"
    },
    {
      "file": "tests/tools/create-mission.test.ts",
      "line": 47,
      "snippet": "\n    // Create generic mission template (with placeholders to pass validation)\n "
    },
    {
      "file": "tests/tools/create-mission.test.ts",
      "line": 68,
      "snippet": "    // Clean up test files\n    const files = fs.readdirSync(testDataDir);\n    fi"
    },
    {
      "file": "tests/tools/create-mission.test.ts",
      "line": 171,
      "snippet": "      // Create test domain pack\n      const webDevDir = path.join(testDataDir, "
    },
    {
      "file": "tests/tools/create-mission.test.ts",
      "line": 174,
      "snippet": "\n      // Create pack manifest\n      const manifest = `\nname: web-dev\nversion: 1"
    },
    {
      "file": "tests/tools/create-mission.test.ts",
      "line": 184,
      "snippet": "\n      // Create schema\n      const schema = `\ntype: object\nproperties:\n  techSt"
    },
    {
      "file": "tests/tools/create-mission.test.ts",
      "line": 199,
      "snippet": "\n      // Create template\n      const template = `\ntechStack:\n  - TypeScript\n  -"
    },
    {
      "file": "tests/tools/create-mission.test.ts",
      "line": 209,
      "snippet": "\n      // Create registry\n      const registry = `\ndomains:\n  - name: web-dev\n  "
    },
    {
      "file": "tests/tools/create-mission.test.ts",
      "line": 339,
      "snippet": "\n      // Should parse without errors\n      expect(() => YAML.parse(result)).not"
    },
    {
      "file": "tests/tools/create-mission.test.ts",
      "line": 393,
      "snippet": "\n      // Format: mission-YYYYMMDD-HHmmss-nnn\n      expect(mission.missionId).to"
    },
    {
      "file": "tests/tools/create-mission.test.ts",
      "line": 414,
      "snippet": "      // Remove generic template to trigger error\n      fs.unlinkSync(path.join("
    },
    {
      "file": "tests/tools/create-mission.test.ts",
      "line": 459,
      "snippet": "      // Create invalid template (missing required fields)\n      const invalidTe"
    },
    {
      "file": "tests/tools/create-mission.test.ts",
      "line": 476,
      "snippet": "      // This is hard to trigger but we document it's covered\n      const params"
    },
    {
      "file": "tests/tools/create-mission.test.ts",
      "line": 478,
      "snippet": "\n      // Normal execution should work\n      const result = tool.execute(params,"
    },
    {
      "file": "tests/tools/create-mission.test.ts",
      "line": 494,
      "snippet": "\n      // Should have all required fields\n      expect(mission).toHaveProperty('"
    },
    {
      "file": "tests/tools/create-mission.test.ts",
      "line": 512,
      "snippet": "\n      // Required fields\n      expect(mission.schemaType).toBe('Mission');\n    "
    },
    {
      "file": "tests/tools/create-mission.test.ts",
      "line": 546,
      "snippet": "\n      // Empty successCriteria gets default value (schema requires non-empty)\n "
    },
    {
      "file": "tests/tools/create-mission.test.ts",
      "line": 549,
      "snippet": "      // Empty constraints is allowed\n      expect(mission.context.constraints)."
    },
    {
      "file": "tests/tools/optimize-tokens.test.ts",
      "line": 23,
      "snippet": "    // Clean up temp directory\n    try {\n      await fs.rm(tempDir, { recursive:"
    },
    {
      "file": "tests/tools/optimize-tokens.test.ts",
      "line": 27,
      "snippet": "      // Ignore cleanup errors\n    }\n  });\n\n  describe('execute', () => {\n    te"
    },
    {
      "file": "tests/tools/optimize-tokens.test.ts",
      "line": 177,
      "snippet": "\n      // Very short content may generate warnings\n      if (\n        result.sta"
    },
    {
      "file": "tests/tools/optimize-tokens.test.ts",
      "line": 211,
      "snippet": "\n      // Make file read-only to trigger write error\n      await fs.chmod(testFi"
    },
    {
      "file": "tests/tools/optimize-tokens.test.ts",
      "line": 221,
      "snippet": "\n      // Should handle the error\n      if (!result.success) {\n        expect(re"
    },
    {
      "file": "tests/tools/optimize-tokens.test.ts",
      "line": 226,
      "snippet": "\n      // Restore permissions for cleanup\n      await fs.chmod(testFilePath, 0o6"
    },
    {
      "file": "tests/tools/create-mission.coverage.test.ts",
      "line": 37,
      "snippet": "\n    // Minimal valid generic template\n    const genericTemplate = `\nschemaType:"
    },
    {
      "file": "tests/tools/create-mission.coverage.test.ts",
      "line": 69,
      "snippet": "      // simulate non-Error throw path\n      throw 'boom';\n    });\n\n    expect(("
    },
    {
      "file": "tests/tools/create-mission.coverage.test.ts",
      "line": 78,
      "snippet": "    // registry just needs to exist; actual loading is mocked\n    const spyPack "
    },
    {
      "file": "tests/tools/create-mission.coverage.test.ts",
      "line": 88,
      "snippet": "    // Bypass internal template loading to avoid early type guard\n    const fake"
    },
    {
      "file": "tests/tools/list-domains.test.ts",
      "line": 25,
      "snippet": "    // Create test data directory\n    if (!fs.existsSync(testDataDir)) {\n      f"
    },
    {
      "file": "tests/tools/list-domains.test.ts",
      "line": 38,
      "snippet": "    // Clean up test files\n    const files = fs.readdirSync(testDataDir);\n    fi"
    },
    {
      "file": "tests/tools/list-domains.test.ts",
      "line": 249,
      "snippet": "\n      // Should have blank lines between entries\n      expect(result).toContain"
    },
    {
      "file": "tests/tools/list-domains.test.ts",
      "line": 264,
      "snippet": "\n      // Check for bold markdown\n      expect(result).toContain('**test**');\n  "
    },
    {
      "file": "tests/tools/list-domains.test.ts",
      "line": 267,
      "snippet": "      // Check for version format\n      expect(result).toContain('(v1.0.0)');\n  "
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 16,
      "snippet": "    // Create temporary directories\n    tempDir = fs.mkdtempSync(path.join(requi"
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 26,
      "snippet": "    // Clean up\n    if (fs.existsSync(tempDir)) {\n      fs.rmSync(tempDir, { rec"
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 117,
      "snippet": "      // Create a simple test mission\n      fs.writeFileSync(\n        path.join("
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 142,
      "snippet": "\n      // Verify template was written to disk\n      const templateDir = path.joi"
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 167,
      "snippet": "\n      // Template should be created from the parent directory\n      const templ"
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 213,
      "snippet": "\n      // Check that template was created in default location\n      expect(fs.ex"
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 216,
      "snippet": "\n      // Clean up the test artifact without disturbing pre-existing templates\n "
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 500,
      "snippet": "\n      // Should still succeed but with minimal output\n      expect(result.succe"
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 517,
      "snippet": "\n      // Should still succeed, just skip the bad file\n      expect(result.succe"
    },
    {
      "file": "tests/tools/import-template.test.ts",
      "line": 7,
      "snippet": "    // @ts-expect-error intentionally omitting required parameter\n    const resu"
    },
    {
      "file": "tests/tools/import-template.test.ts",
      "line": 17,
      "snippet": "      // @ts-expect-error intentional invalid trust level for coverage\n      tru"
    },
    {
      "file": "tests/tools/analyze-dependencies.test.ts",
      "line": 10,
      "snippet": "    // Create test directory and mission files\n    await fs.promises.mkdir(testD"
    },
    {
      "file": "tests/tools/analyze-dependencies.test.ts",
      "line": 51,
      "snippet": "    // Clean up test directory\n    await fs.promises.rm(testDir, { recursive: tr"
    },
    {
      "file": "tests/tools/analyze-dependencies.test.ts",
      "line": 101,
      "snippet": "\n      // R4.3 should come before B4.3\n      expect(order.indexOf('R4.3')).toBeL"
    },
    {
      "file": "tests/tools/analyze-dependencies.test.ts",
      "line": 104,
      "snippet": "      // B4.3 should come before B4.4\n      expect(order.indexOf('B4.3')).toBeLe"
    },
    {
      "file": "tests/tools/analyze-dependencies.test.ts",
      "line": 115,
      "snippet": "      // Critical path should include R4.3 -> B4.3 -> B4.4\n      expect(result.c"
    },
    {
      "file": "tests/tools/analyze-dependencies.test.ts",
      "line": 124,
      "snippet": "\n      // Should complete in less than 5 seconds (5000ms)\n      expect(result.pe"
    },
    {
      "file": "tests/tools/analyze-dependencies.test.ts",
      "line": 242,
      "snippet": "      // Create a fresh cyclic directory for this test\n      const cyclicDirForF"
    },
    {
      "file": "tests/tools/analyze-dependencies.test.ts",
      "line": 278,
      "snippet": "\n      // Clean up\n      await fs.promises.rm(cyclicDirForFormat, { recursive: t"
    },
    {
      "file": "tests/tools/analyze-dependencies.test.ts",
      "line": 328,
      "snippet": "\n      // Should handle gracefully - empty YAML is parsed as null\n      expect(r"
    },
    {
      "file": "tests/tools/analyze-dependencies.test.ts",
      "line": 347,
      "snippet": "\n      // Should handle gracefully\n      expect(result).toBeDefined();\n\n      aw"
    },
    {
      "file": "tests/tools/split-mission.test.ts",
      "line": 40,
      "snippet": "\n    // Create temp directory for test files\n    tempDir = await fs.mkdtemp(path"
    },
    {
      "file": "tests/tools/split-mission.test.ts",
      "line": 47,
      "snippet": "    // Clean up temp directory\n    try {\n      await fs.rm(tempDir, { recursive:"
    },
    {
      "file": "tests/tools/split-mission.test.ts",
      "line": 51,
      "snippet": "      // Ignore cleanup errors\n    }\n  });\n\n  describe('execute', () => {\n    te"
    },
    {
      "file": "tests/tools/split-mission.test.ts",
      "line": 107,
      "snippet": "\n      // Verify files were actually created\n      for (const filePath of result"
    },
    {
      "file": "tests/tools/split-mission.test.ts",
      "line": 179,
      "snippet": "        // Read and parse each sub-mission file\n        for (const filePath of r"
    },
    {
      "file": "tests/tools/split-mission.test.ts",
      "line": 183,
      "snippet": "\n          // Verify it's a valid mission\n          expect(parsed.schemaType).to"
    },
    {
      "file": "tests/tools/split-mission.test.ts",
      "line": 222,
      "snippet": "        // Verify execution plan has correct structure\n        expect(result.exe"
    },
    {
      "file": "tests/tools/split-mission.test.ts",
      "line": 231,
      "snippet": "\n        // First step should have no dependencies\n        expect(result.executi"
    },
    {
      "file": "tests/tools/split-mission.test.ts",
      "line": 234,
      "snippet": "\n        // Later steps should have dependencies\n        if (result.executionPla"
    },
    {
      "file": "tests/tools/split-mission.test.ts",
      "line": 406,
      "snippet": "        // Check that files follow naming pattern: baseName_sub1.yaml, baseName_"
    },
    {
      "file": "tests/tools/export-template.test.ts",
      "line": 73,
      "snippet": "      // @ts-expect-error intentional invalid template for coverage\n      templa"
    },
    {
      "file": "tests/domains/domain-pack-loader.test.ts",
      "line": 33,
      "snippet": "    // Use app directory as base for tests\n    testBaseDir = path.resolve(__dirn"
    },
    {
      "file": "tests/domains/domain-pack-loader.test.ts",
      "line": 78,
      "snippet": "        // missing version, displayName, description, schema\n      } as DomainPa"
    },
    {
      "file": "tests/domains/domain-pack-loader.test.ts",
      "line": 195,
      "snippet": "\n      // Using private method via type casting\n      const isValid = (packLoade"
    },
    {
      "file": "tests/domains/domain-pack-loader.test.ts",
      "line": 403,
      "snippet": "      // This test would need actual test fixtures on disk\n      // For now, we "
    },
    {
      "file": "tests/domains/domain-pack-loader.test.ts",
      "line": 404,
      "snippet": "      // For now, we test the error case\n      const registryEntries: DomainPack"
    },
    {
      "file": "tests/domains/domain-pack-loader.test.ts",
      "line": 463,
      "snippet": "        // Expected to fail, we're just checking that load was called\n      }\n\n "
    },
    {
      "file": "tests/domains/domain-pack-loader.test.ts",
      "line": 486,
      "snippet": "        // Expected to fail, we're just checking that findByName was called\n    "
    },
    {
      "file": "tests/domains/domain-pack-loader.test.ts",
      "line": 512,
      "snippet": "\n      // This will fail because pack.yaml doesn't exist in templates\n      expe"
    },
    {
      "file": "tests/domains/domain-pack-loader.test.ts",
      "line": 584,
      "snippet": "      // Should have errors for both name and version\n      const depErrors = re"
    },
    {
      "file": "tests/domains/domain-pack-loader.test.ts",
      "line": 643,
      "snippet": "      // Should have multiple errors\n      expect(result.errors.length).toBeGrea"
    },
    {
      "file": "tests/domains/domain-pack-loader.test.ts",
      "line": 805,
      "snippet": "\n      // Mock the loader to return valid data for each file\n      const mockLoa"
    },
    {
      "file": "tests/quality/quality-scorer.test.ts",
      "line": 89,
      "snippet": "\n      // Should have suggestions due to missing/insufficient content\n      expe"
    },
    {
      "file": "tests/quality/quality-scorer.test.ts",
      "line": 112,
      "snippet": "\n      // Clarity should have higher impact with 0.5 weight\n      expect(result."
    },
    {
      "file": "tests/quality/quality-scorer.test.ts",
      "line": 131,
      "snippet": "\n      // Check that suggestions have required fields\n      suggestions.forEach("
    },
    {
      "file": "tests/quality/quality-scorer.test.ts",
      "line": 143,
      "snippet": "        // Missing required fields\n        successCriteria: [],\n        delivera"
    },
    {
      "file": "tests/quality/quality-scorer.test.ts",
      "line": 151,
      "snippet": "        // First suggestions should be critical or important\n        const first"
    },
    {
      "file": "tests/quality/clarity-analyzer.test.ts",
      "line": 97,
      "snippet": "      // Should detect pronouns at sentence start\n      expect(refMetric!.normal"
    },
    {
      "file": "tests/quality/clarity-analyzer.test.ts",
      "line": 126,
      "snippet": "        // Create mission that produces specific FKGL\n        // (This is simpli"
    },
    {
      "file": "tests/quality/clarity-analyzer.test.ts",
      "line": 127,
      "snippet": "        // (This is simplified - in practice would need precise text)\n        co"
    },
    {
      "file": "tests/intelligence/token-optimizer.test.ts",
      "line": 104,
      "snippet": "\n      // In dry run, optimized should equal original\n      expect(result.optimi"
    },
    {
      "file": "tests/intelligence/token-optimizer.test.ts",
      "line": 117,
      "snippet": "\n      // Very short content may not achieve 20-30% reduction\n      if (result.s"
    },
    {
      "file": "tests/intelligence/model-transpilers.test.ts",
      "line": 159,
      "snippet": "\n      // All should contain the original objective text\n      expect(claudeResu"
    },
    {
      "file": "tests/intelligence/token-counters.api.test.ts",
      "line": 11,
      "snippet": "\n// Mock gpt-tokenizer\njest.mock(\n  'gpt-tokenizer',\n  () => ({\n    encode: jest"
    },
    {
      "file": "tests/intelligence/token-counters.api.test.ts",
      "line": 20,
      "snippet": "\n// Mock @xenova/transformers for Claude\njest.mock(\n  '@xenova/transformers',\n  "
    },
    {
      "file": "tests/intelligence/token-counters.api.test.ts",
      "line": 104,
      "snippet": "    // Should be Math.ceil(11/4 * 1.5) = Math.ceil(4.125) = 5\n    expect(result."
    },
    {
      "file": "tests/intelligence/token-optimizer.extra.test.ts",
      "line": 38,
      "snippet": "    // Short content + templating likely yields small or negative reduction\n    "
    },
    {
      "file": "tests/intelligence/token-optimizer.extra.test.ts",
      "line": 41,
      "snippet": "    // We assert that either warnings exist or reduction is within target\n    if"
    },
    {
      "file": "tests/intelligence/token-validation.test.ts",
      "line": 21,
      "snippet": "    \n    // Capture telemetry events\n    registerTelemetryHandler((event) => {\n "
    },
    {
      "file": "tests/intelligence/token-validation.test.ts",
      "line": 49,
      "snippet": "      \n      // Accept either the official tokenizer message or the fallback mes"
    },
    {
      "file": "tests/intelligence/token-validation.test.ts",
      "line": 58,
      "snippet": "      // Context varies between official tokenizer and fallback\n      expect(cla"
    },
    {
      "file": "tests/intelligence/token-validation.test.ts",
      "line": 101,
      "snippet": "      \n      // Should have emitted telemetry\n      expect(telemetryEvents.lengt"
    },
    {
      "file": "tests/intelligence/token-validation.test.ts",
      "line": 112,
      "snippet": "      \n      // Should have emitted telemetry\n      expect(telemetryEvents.lengt"
    },
    {
      "file": "tests/intelligence/token-validation.test.ts",
      "line": 120,
      "snippet": "      \n      // Base estimate: 400/4 = 100 tokens\n      // With 1.5x margin: 150"
    },
    {
      "file": "tests/intelligence/token-validation.test.ts",
      "line": 122,
      "snippet": "      // With 1.5x margin: 150 tokens\n      expect(result.count).toBeGreaterThan"
    },
    {
      "file": "tests/intelligence/token-validation.test.ts",
      "line": 138,
      "snippet": "\n      // Call Anthropic API\n      const response = await fetch('https://api.ant"
    },
    {
      "file": "tests/intelligence/token-validation.test.ts",
      "line": 155,
      "snippet": "\n      // Allow up to 50% drift\n      const drift = Math.abs(localResult.count -"
    },
    {
      "file": "tests/intelligence/token-validation.test.ts",
      "line": 173,
      "snippet": "\n      // Call Google API\n      const response = await fetch(\n        `https://g"
    },
    {
      "file": "tests/intelligence/token-validation.test.ts",
      "line": 188,
      "snippet": "\n      // Gemini heuristic should overestimate (safer than underestimating)\n    "
    },
    {
      "file": "tests/intelligence/token-validation.test.ts",
      "line": 190,
      "snippet": "      // Allow up to 100% drift\n      const drift = Math.abs(localResult.count -"
    },
    {
      "file": "tests/intelligence/mission-splitter.test.ts",
      "line": 97,
      "snippet": "\n      // Check that dependency chains are not broken\n      expect(result.subMis"
    },
    {
      "file": "tests/intelligence/mission-splitter.test.ts",
      "line": 100,
      "snippet": "\n      // Verify dependencies are tracked (if split occurred)\n      if (result.s"
    },
    {
      "file": "tests/intelligence/mission-splitter.test.ts",
      "line": 135,
      "snippet": "\n      // Should not create tiny sub-missions\n      expect(result.subMissions.le"
    },
    {
      "file": "tests/intelligence/mission-splitter.test.ts",
      "line": 277,
      "snippet": "\n      // Ensure we have at least one suggested split\n      expect(suggestion.su"
    },
    {
      "file": "tests/intelligence/mission-splitter.test.ts",
      "line": 280,
      "snippet": "      // Reasoning should enumerate split point positions\n      expect(suggestio"
    },
    {
      "file": "tests/intelligence/mission-splitter.test.ts",
      "line": 299,
      "snippet": "\n      // Should detect multiple sections (or at least complete successfully)\n  "
    },
    {
      "file": "tests/intelligence/mission-splitter.test.ts",
      "line": 306,
      "snippet": "        # Phase 1\n        Do task A\n\n        # Phase 2\n        Do task B\n\n      "
    },
    {
      "file": "tests/intelligence/mission-splitter.test.ts",
      "line": 308,
      "snippet": "\n        # Phase 2\n        Do task B\n\n        # Phase 3\n        Do task C\n      "
    },
    {
      "file": "tests/intelligence/mission-splitter.test.ts",
      "line": 311,
      "snippet": "\n        # Phase 3\n        Do task C\n      `;\n\n      const result = await splitt"
    },
    {
      "file": "tests/intelligence/mission-splitter.test.ts",
      "line": 346,
      "snippet": "\n      // Expect at least 3 sub-missions due to paragraph splits\n      expect(re"
    },
    {
      "file": "tests/intelligence/mission-splitter.test.ts",
      "line": 352,
      "snippet": "\n      // Default sequential dependency on previous (sub 2) always exists\n      "
    },
    {
      "file": "tests/intelligence/mission-splitter.test.ts",
      "line": 354,
      "snippet": "      // We also expect an inferred dependency on sub 1 due to explicit referenc"
    },
    {
      "file": "tests/intelligence/mission-splitter.test.ts",
      "line": 357,
      "snippet": "      // Ensure there are at least 2 dependencies captured\n      expect(third.de"
    },
    {
      "file": "tests/intelligence/mission-splitter.test.ts",
      "line": 376,
      "snippet": "\n      // Should preserve list structure\n      expect(result.subMissions).toBeDe"
    },
    {
      "file": "tests/intelligence/mission-splitter.test.ts",
      "line": 391,
      "snippet": "\n      // Should keep \"then\", \"after that\", \"finally\" chains together\n      expe"
    },
    {
      "file": "tests/intelligence/mission-splitter.test.ts",
      "line": 410,
      "snippet": "\n      // Code block should stay intact\n      const hasCodeBlock = result.subMis"
    },
    {
      "file": "tests/intelligence/mission-splitter.test.ts",
      "line": 434,
      "snippet": "\n      // Each mission (except first) should depend on previous\n      for (let i"
    },
    {
      "file": "tests/intelligence/token-counters.test.ts",
      "line": 75,
      "snippet": "\n      // Fallback uses ~4 chars per token\n      const expectedTokens = Math.cei"
    },
    {
      "file": "tests/intelligence/token-counters.test.ts",
      "line": 129,
      "snippet": "\n      // All should be positive\n      expect(gptResult.count).toBeGreaterThan(0"
    },
    {
      "file": "tests/intelligence/token-counters.test.ts",
      "line": 134,
      "snippet": "\n      // Counts may differ due to different tokenizers\n      // (though fallbac"
    },
    {
      "file": "tests/intelligence/token-counters.test.ts",
      "line": 136,
      "snippet": "      // (though fallback will give same results)\n    });\n  });\n});\n"
    },
    {
      "file": "tests/intelligence/complexity-scorer.test.ts",
      "line": 63,
      "snippet": "      // Create a large, complex mission\n      const largeObjective = 'Create a "
    },
    {
      "file": "tests/intelligence/complexity-scorer.test.ts",
      "line": 109,
      "snippet": "      // Create mission that approaches context window limit\n      const largeMi"
    },
    {
      "file": "tests/intelligence/complexity-scorer.test.ts",
      "line": 206,
      "snippet": "\n      // Verify composite score is weighted sum\n      const { components } = an"
    },
    {
      "file": "tests/intelligence/complexity-scorer.test.ts",
      "line": 209,
      "snippet": "\n      // Default weights: token=0.35, structural=0.25, timeHorizon=0.30, comput"
    },
    {
      "file": "tests/intelligence/complexity-scorer.test.ts",
      "line": 271,
      "snippet": "      // Use custom config with lower threshold for testing\n      const testScor"
    },
    {
      "file": "tests/intelligence/dependency-inferrer.test.ts",
      "line": 37,
      "snippet": "\n    // Ensure methods include keyword-based detections\n    expect(inferred.some"
    },
    {
      "file": "tests/intelligence/dependency-inferrer.test.ts",
      "line": 56,
      "snippet": "    // For B4.4, structural inference should suggest dependency on B4.3\n    cons"
    },
    {
      "file": "tests/intelligence/dependency-inferrer.test.ts",
      "line": 61,
      "snippet": "\n    // For B4.3, structural inference should suggest dependency on R4.3 (build "
    },
    {
      "file": "tests/intelligence/dependency-inferrer.test.ts",
      "line": 79,
      "snippet": "\n    // Invalid should return null\n    expect((inferrer as any).parseMissionId('"
    },
    {
      "file": "tests/intelligence/dependency-inferrer.test.ts",
      "line": 107,
      "snippet": "    // Add a node with extra field containing a deliverable path to trigger stru"
    },
    {
      "file": "tests/intelligence/dependency-inferrer.test.ts",
      "line": 114,
      "snippet": "        // extra content to be scanned by JSON.stringify in inferFromDeliverable"
    },
    {
      "file": "tests/intelligence/dependency-inferrer.test.ts",
      "line": 129,
      "snippet": "    // Expect a structural inference from X4.1 -> B4.3 based on deliverable refe"
    },
    {
      "file": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 131,
      "snippet": "\n      // A should come before B\n      expect(order.indexOf('A')).toBeLessThan(o"
    },
    {
      "file": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 134,
      "snippet": "      // B should come before C\n      expect(order.indexOf('B')).toBeLessThan(or"
    },
    {
      "file": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 177,
      "snippet": "      // Critical path should be A -> B -> C (longest path)\n      expect(result."
    },
    {
      "file": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 392,
      "snippet": "\n      // A must be first\n      expect(order[0]).toBe('A');\n      // D must be l"
    },
    {
      "file": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 395,
      "snippet": "      // D must be last\n      expect(order[order.length - 1]).toBe('D');\n      /"
    },
    {
      "file": "tests/intelligence/dependency-analyzer.test.ts",
      "line": 397,
      "snippet": "      // B and C must come after A but before D\n      expect(order.indexOf('B'))"
    },
    {
      "file": "tests/security/path-traversal.test.ts",
      "line": 17,
      "snippet": "    // Create a temporary directory for testing\n    tempDir = fs.mkdtempSync(pat"
    },
    {
      "file": "tests/security/path-traversal.test.ts",
      "line": 20,
      "snippet": "\n    // Create a safe test file\n    fs.writeFileSync(\n      path.join(tempDir, '"
    },
    {
      "file": "tests/security/path-traversal.test.ts",
      "line": 29,
      "snippet": "    // Clean up temp directory\n    fs.rmSync(tempDir, { recursive: true, force: "
    },
    {
      "file": "tests/security/path-traversal.test.ts",
      "line": 115,
      "snippet": "      // Create subdirectory and file\n      const subdir = path.join(tempDir, 's"
    },
    {
      "file": "tests/security/path-traversal.test.ts",
      "line": 147,
      "snippet": "      // Create a symlink within baseDir (pointing to internal file)\n      const"
    },
    {
      "file": "tests/security/path-traversal.test.ts",
      "line": 160,
      "snippet": "        // Cleanup\n        if (fs.existsSync(symlinkPath)) {\n          fs.unlink"
    },
    {
      "file": "tests/security/path-traversal.test.ts",
      "line": 172,
      "snippet": "\n      // Create symlink within baseDir\n      const targetFile = path.join(tempD"
    },
    {
      "file": "tests/security/path-traversal.test.ts",
      "line": 185,
      "snippet": "        // Cleanup\n        if (fs.existsSync(symlinkPath)) {\n          fs.unlink"
    },
    {
      "file": "tests/security/path-traversal.test.ts",
      "line": 199,
      "snippet": "\n      // Create a large file\n      const largeFile = path.join(tempDir, 'large."
    },
    {
      "file": "tests/security/path-traversal.test.ts",
      "line": 217,
      "snippet": "      // Empty path resolves to baseDir itself\n      const sanitized = loader.sa"
    },
    {
      "file": "tests/combination/dependency-resolver.test.ts",
      "line": 18,
      "snippet": "\n  // Helper function to create mock packs\n  function createMockPack(\n    name: "
    },
    {
      "file": "tests/combination/dependency-resolver.test.ts",
      "line": 65,
      "snippet": "      // pack-c depends on pack-b, pack-b depends on pack-a\n      const packA = "
    },
    {
      "file": "tests/combination/dependency-resolver.test.ts",
      "line": 81,
      "snippet": "      // pack-d depends on pack-b and pack-c\n      // pack-b and pack-c both dep"
    },
    {
      "file": "tests/combination/dependency-resolver.test.ts",
      "line": 82,
      "snippet": "      // pack-b and pack-c both depend on pack-a\n      const packA = createMockP"
    },
    {
      "file": "tests/combination/dependency-resolver.test.ts",
      "line": 104,
      "snippet": "      // pack-a depends on pack-b, pack-b depends on pack-a\n      const packA = "
    },
    {
      "file": "tests/combination/dependency-resolver.test.ts",
      "line": 120,
      "snippet": "      // pack-a -> pack-b -> pack-c -> pack-a\n      const packA = createMockPack"
    },
    {
      "file": "tests/combination/dependency-resolver.test.ts",
      "line": 217,
      "snippet": "      // pack-c -> pack-b -> pack-a\n      const packA = createMockPack('pack-a')"
    },
    {
      "file": "tests/combination/pack-combiner.test.ts",
      "line": 18,
      "snippet": "\n  // Helper function to create mock packs\n  function createMockPack(\n    name: "
    },
    {
      "file": "tests/combination/pack-combiner.test.ts",
      "line": 172,
      "snippet": "      // pack-c depends on pack-b, pack-b depends on pack-a\n      const packA = "
    },
    {
      "file": "tests/combination/pack-combiner.test.ts",
      "line": 220,
      "snippet": "      // Only pack-b is combined (dependencies not resolved)\n      expect(result"
    },
    {
      "file": "tests/combination/pack-combiner.test.ts",
      "line": 381,
      "snippet": "      // Empty template warning is expected\n      if (result.warnings && result."
    },
    {
      "file": "tests/integration/mcp-server.test.ts",
      "line": 25,
      "snippet": "    // Initialize components as the MCP server does\n    let baseDir = resolveTem"
    },
    {
      "file": "tests/integration/mcp-server.test.ts",
      "line": 27,
      "snippet": "    // Fallback: if registry.yaml missing, create minimal fixtures\n    const fs "
    },
    {
      "file": "tests/integration/mcp-server.test.ts",
      "line": 60,
      "snippet": "      // Execute the complete workflow\n      const domains = listDomainsTool.exe"
    },
    {
      "file": "tests/integration/mcp-server.test.ts",
      "line": 62,
      "snippet": "\n      // Verify we got domain results\n      expect(domains).toBeDefined();\n    "
    },
    {
      "file": "tests/integration/mcp-server.test.ts",
      "line": 67,
      "snippet": "\n      // Verify first domain has expected structure\n      const firstDomain = d"
    },
    {
      "file": "tests/integration/mcp-server.test.ts",
      "line": 73,
      "snippet": "\n      // Verify domain names are strings\n      expect(typeof firstDomain.name)."
    },
    {
      "file": "tests/integration/mcp-server.test.ts",
      "line": 81,
      "snippet": "      // Execute tool\n      const domains = listDomainsTool.execute('registry.ya"
    },
    {
      "file": "tests/integration/mcp-server.test.ts",
      "line": 83,
      "snippet": "\n      // Format for LLM\n      const formatted = listDomainsTool.formatForLLM(do"
    },
    {
      "file": "tests/integration/mcp-server.test.ts",
      "line": 86,
      "snippet": "\n      // Verify formatted output\n      expect(formatted).toBeDefined();\n      e"
    },
    {
      "file": "tests/integration/mcp-server.test.ts",
      "line": 91,
      "snippet": "\n      // Should contain count\n      expect(formatted).toContain('domain pack');"
    },
    {
      "file": "tests/integration/mcp-server.test.ts",
      "line": 94,
      "snippet": "\n      // Should contain markdown formatting\n      expect(formatted).toContain('"
    },
    {
      "file": "tests/integration/mcp-server.test.ts",
      "line": 115,
      "snippet": "      // This test validates the entire chain\n      const entries = registry.loa"
    },
    {
      "file": "tests/integration/mcp-server.test.ts",
      "line": 119,
      "snippet": "\n      // Verify registry entries have required fields\n      const firstEntry = "
    },
    {
      "file": "tests/integration/mcp-server.test.ts",
      "line": 133,
      "snippet": "\n      // Verify we have the expected domains from registry.yaml\n      expect(en"
    },
    {
      "file": "tests/integration/mcp-server.test.ts",
      "line": 136,
      "snippet": "\n      // Verify foundation domain exists (first in our registry)\n      const fo"
    },
    {
      "file": "tests/integration/mcp-server.test.ts",
      "line": 146,
      "snippet": "\n      // All entries should have valid SemVer\n      entries.forEach(entry => {\n"
    },
    {
      "file": "tests/integration/mcp-server.test.ts",
      "line": 156,
      "snippet": "\n      // All paths should be relative (no leading slash or ..)\n      entries.fo"
    },
    {
      "file": "tests/integration/mcp-server.test.ts",
      "line": 176,
      "snippet": "\n      // Should have DomainInfo fields\n      expect(firstDomain).toHaveProperty"
    },
    {
      "file": "tests/integration/mcp-server.test.ts",
      "line": 181,
      "snippet": "\n      // Should NOT have DomainPackEntry internal fields\n      expect(firstDoma"
    },
    {
      "file": "tests/integration/mcp-server.test.ts",
      "line": 189,
      "snippet": "\n      // Find domain with author\n      const domainWithAuthor = domains.find(d "
    },
    {
      "file": "tests/integration/mcp-server.test.ts",
      "line": 203,
      "snippet": "\n      // Should return empty array for missing registry\n      expect(domains).t"
    },
    {
      "file": "tests/integration/mcp-server.test.ts",
      "line": 209,
      "snippet": "      // Create a test registry with invalid format\n      expect(() => {\n       "
    },
    {
      "file": "tests/integration/mcp-server.test.ts",
      "line": 218,
      "snippet": "      // Criterion 1: Server components initialize\n      expect(loader).toBeDefi"
    },
    {
      "file": "tests/integration/mcp-server.test.ts",
      "line": 222,
      "snippet": "\n      // Criterion 2: Registry loads successfully\n      const entries = registr"
    },
    {
      "file": "tests/integration/mcp-server.test.ts",
      "line": 226,
      "snippet": "\n      // Criterion 3: list_available_domains executes\n      const domains = lis"
    },
    {
      "file": "tests/integration/mcp-server.test.ts",
      "line": 230,
      "snippet": "\n      // Criterion 4: Output formatted for LLM\n      const formatted = listDoma"
    },
    {
      "file": "tests/integration/mcp-server.test.ts",
      "line": 234,
      "snippet": "\n      // Criterion 5: Security validated (all paths relative)\n      entries.for"
    },
    {
      "file": "tests/integration/mcp-server.test.ts",
      "line": 243,
      "snippet": "      // This test confirms the server is ready for Claude Desktop integration\n\n"
    },
    {
      "file": "tests/integration/mcp-server.test.ts",
      "line": 244,
      "snippet": "\n      // 1. Components can be initialized\n      expect(loader).toBeDefined();\n "
    },
    {
      "file": "tests/integration/mcp-server.test.ts",
      "line": 249,
      "snippet": "\n      // 2. Tool can execute successfully\n      const domains = listDomainsTool"
    },
    {
      "file": "tests/integration/mcp-server.test.ts",
      "line": 253,
      "snippet": "\n      // 3. Output can be formatted\n      const formatted = listDomainsTool.for"
    },
    {
      "file": "tests/integration/mcp-server.test.ts",
      "line": 258,
      "snippet": "\n      // Phase 1 Complete: Ready for Claude Desktop\n    });\n  });\n});\n"
    },
    {
      "file": "tests/integration/full-flow.test.ts",
      "line": 9,
      "snippet": "    // Prefer app templates; if missing, create minimal fixture\n    const fs = r"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 20,
      "snippet": "\n// Test fixtures directory\nconst FIXTURES_DIR = path.join(__dirname, '../fixtur"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 29,
      "snippet": "\n      // Create a complex test mission\n      const complexMission = `\nmissionId"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 55,
      "snippet": "\n      // Step 1: Analyze initial quality\n      const initialQuality = await sco"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 65,
      "snippet": "\n      // Step 2: Optimize tokens\n      const optimized = await handleOptimizeTo"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 76,
      "snippet": "      // Token optimization should produce some compression stats\n      expect(o"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 78,
      "snippet": "\n      // Step 3: Verify optimization completed successfully\n      // (Quality s"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 80,
      "snippet": "      // (Quality scoring may fail if optimizer transpiled to model-specific for"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 83,
      "snippet": "\n      // Cleanup\n      fs.unlinkSync(missionPath);\n    });\n  });\n\n  describe('W"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 112,
      "snippet": "\n      // Score the mission\n      const qualityResult = await scoreQuality({\n   "
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 123,
      "snippet": "\n      // Should identify low-quality aspects\n      const score = qualityResult."
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 130,
      "snippet": "\n      // Cleanup\n      fs.unlinkSync(missionPath);\n    });\n\n    it('should scor"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 173,
      "snippet": "\n      // Cleanup\n      fs.unlinkSync(missionPath);\n    });\n  });\n\n  describe('W"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 183,
      "snippet": "\n      // Create a set of interdependent missions\n      const missions = [\n     "
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 223,
      "snippet": "\n      // Analyze dependencies\n      const analysis = await executeAnalyzeDepend"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 233,
      "snippet": "\n      // Cleanup\n      for (const mission of missions) {\n        fs.unlinkSync("
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 269,
      "snippet": "\n      // Get initial token count\n      const beforeContent = fs.readFileSync(mi"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 273,
      "snippet": "\n      // Optimize\n      const result = await handleOptimizeTokens({\n        mis"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 284,
      "snippet": "\n      // Get optimized content length\n      const afterContent = result.optimiz"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 288,
      "snippet": "\n      // Content should be valid (size may vary due to model-specific transpile"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 291,
      "snippet": "\n      // Should contain mission content (format may vary - YAML or model-specif"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 295,
      "snippet": "\n      // Cleanup\n      fs.unlinkSync(missionPath);\n    });\n\n    it('should resp"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 315,
      "snippet": "\n      // Optimize in dry run mode\n      const result = await handleOptimizeToke"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 325,
      "snippet": "\n      // File should not be modified\n      const afterContent = fs.readFileSync"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 329,
      "snippet": "\n      // But should still get optimization preview\n      expect(result.optimize"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 332,
      "snippet": "\n      // Cleanup\n      fs.unlinkSync(missionPath);\n    });\n  });\n\n  describe('W"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 357,
      "snippet": "\n      // Should complete in <100ms (from R4.4 research)\n      expect(duration)."
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 360,
      "snippet": "\n      // Cleanup\n      fs.unlinkSync(missionPath);\n    });\n\n    it('should comp"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 387,
      "snippet": "\n      // Should complete in <200ms (from R4.1 research)\n      expect(duration)."
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 390,
      "snippet": "\n      // Cleanup\n      fs.unlinkSync(missionPath);\n    });\n  });\n\n  describe('E"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 432,
      "snippet": "\n      // Should handle gracefully (either error or very low score)\n      expect"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 464,
      "snippet": "\n      // Step 1: Initial quality assessment\n      const initialQuality = await "
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 473,
      "snippet": "\n      // Step 2: Optimize for tokens\n      const optimization = await handleOpt"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 483,
      "snippet": "\n      // Step 3: Re-assess quality after optimization (if successful)\n      if "
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 490,
      "snippet": "\n        // Quality scoring may fail if optimization corrupted YAML\n        // T"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 492,
      "snippet": "        // That's acceptable - the important thing is optimization executed\n    "
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 495,
      "snippet": "          // Quality should not degrade significantly\n          expect(qualityDe"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 499,
      "snippet": "\n      // Cleanup\n      fs.unlinkSync(missionPath);\n    });\n  });\n\n  // Cleanup "
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 504,
      "snippet": "\n  // Cleanup fixture directory after all tests\n  afterAll(() => {\n    if (fs.ex"
    },
    {
      "file": "tests/integration/phase4-intelligence-flow.test.ts",
      "line": 511,
      "snippet": "        // Ignore cleanup errors\n      }\n    }\n  });\n});\n"
    },
    {
      "file": "tests/integration/template-runtime-store.test.ts",
      "line": 53,
      "snippet": "      \n      // Check that expected domain packs are present\n      const domainN"
    },
    {
      "file": "tests/integration/template-runtime-store.test.ts",
      "line": 70,
      "snippet": "      // Template files have empty values, so we check structure not strict vali"
    },
    {
      "file": "tests/integration/quality-scoring.test.ts",
      "line": 21,
      "snippet": "\n      // Skip if file doesn't exist\n      if (!fs.existsSync(missionFile)) {\n  "
    },
    {
      "file": "tests/integration/quality-scoring.test.ts",
      "line": 136,
      "snippet": "\n      // Should have few critical suggestions\n      const critical = result.sug"
    },
    {
      "file": "tests/integration/quality-scoring.test.ts",
      "line": 154,
      "snippet": "\n      // Should flag multiple issues\n      const suggestions = result.suggestio"
    },
    {
      "file": "tests/integration/quality-scoring.test.ts",
      "line": 236,
      "snippet": "\n      // All suggestions should have actionable messages\n      result.suggestio"
    },
    {
      "file": "tests/integration/quality-scoring.test.ts",
      "line": 255,
      "snippet": "\n      // Group by severity\n      const bySeverity = {\n        critical: suggest"
    },
    {
      "file": "tests/integration/quality-scoring.test.ts",
      "line": 262,
      "snippet": "\n      // Critical issues should be present for missing fields\n      expect(bySe"
    },
    {
      "file": "tests/integration/phase3-flow.test.ts",
      "line": 36,
      "snippet": "\n    // Identify candidates directly (Stage 1)\n    const extractor = new Templat"
    },
    {
      "file": "tests/integration/phase3-flow.test.ts",
      "line": 41,
      "snippet": "\n    // Build a minimal mission template object for export\n    const template = "
    },
    {
      "file": "tests/integration/phase3-flow.test.ts",
      "line": 54,
      "snippet": "\n    // Export to YAML string\n    const exporter = new TemplateExporter(tmpRoot)"
    },
    {
      "file": "tests/integration/phase3-flow.test.ts",
      "line": 59,
      "snippet": "\n    // Import from string and validate\n    const importer = new TemplateImporte"
    },
    {
      "file": "tests/integration/phase3-flow.test.ts",
      "line": 67,
      "snippet": "    // Use canonical templates when available\n    const baseDir = resolveTemplat"
    },
    {
      "file": "tests/integration/phase3-flow.test.ts",
      "line": 71,
      "snippet": "\n    // If registry is not present in this environment, skip gracefully\n    let "
    },
    {
      "file": "tests/integration/phase3-flow.test.ts",
      "line": 96,
      "snippet": "    // register two versions\n    const r1 = await registerTemplateVersion({ temp"
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 31,
      "snippet": "    // If shared templates are missing (CI sandbox), create minimal fixtures in "
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 37,
      "snippet": "\n      // Write registry\n      fs.writeFileSync(path.join(localTemplates, 'regis"
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 41,
      "snippet": "\n      // Write software pack\n      fs.writeFileSync(path.join(localTemplates, '"
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 52,
      "snippet": "\n      // Write business pack\n      fs.writeFileSync(path.join(localTemplates, '"
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 60,
      "snippet": "\n      // Write generic mission template used by create_mission tool\n      fs.wr"
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 74,
      "snippet": "    // Initialize all components\n    loader = new SecureYAMLLoader({ baseDir: te"
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 84,
      "snippet": "      // Load registry entries\n      const entries = registry.loadRegistry('regi"
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 86,
      "snippet": "\n      // Create generic mission\n      const result = createMissionTool.execute("
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 96,
      "snippet": "\n      // Verify YAML output\n      expect(result).toBeTruthy();\n      expect(typ"
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 100,
      "snippet": "\n      // Parse and validate structure\n      const mission = YAML.parse(result) "
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 150,
      "snippet": "\n      // Verify core fields\n      expect(mission.objective).toBe('Build a user "
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 154,
      "snippet": "\n      // Verify domain fields are present\n      expect(mission.domainFields).to"
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 165,
      "snippet": "\n      // Load the software domain pack\n      const pack = packLoader.loadPack('"
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 168,
      "snippet": "\n      // Verify pack structure\n      expect(pack.manifest.name).toBe('software."
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 173,
      "snippet": "\n      // Verify schema exists and is valid\n      expect(pack.schema).toBeDefine"
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 179,
      "snippet": "\n      // Verify template\n      expect(pack.template).toBeDefined();\n      expec"
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 201,
      "snippet": "\n      // Verify core fields\n      expect(mission.objective).toBe('Analyze compe"
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 205,
      "snippet": "\n      // Verify domain fields are present\n      expect(mission.domainFields).to"
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 215,
      "snippet": "\n      // Load the business domain pack\n      const pack = packLoader.loadPack('"
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 218,
      "snippet": "\n      // Verify pack structure\n      expect(pack.manifest.name).toBe('business."
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 223,
      "snippet": "\n      // Verify schema exists and is valid\n      expect(pack.schema).toBeDefine"
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 230,
      "snippet": "\n      // Verify template\n      expect(pack.template).toBeDefined();\n      expec"
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 242,
      "snippet": "\n      // Find software and business packs\n      const softwarePack = entries.fi"
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 258,
      "snippet": "\n      // Filter to only the new packs we created (skip the stub packs)\n      co"
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 265,
      "snippet": "\n      // Verify each pack can be loaded\n      for (const entry of newPacks) {\n "
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 293,
      "snippet": "\n      // Verify core fields exist\n      expect(mission.schemaType).toBe('Missio"
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 301,
      "snippet": "\n      // Verify domain fields exist and are merged correctly\n      expect(missi"
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 320,
      "snippet": "\n      // Verify types are preserved\n      expect(typeof mission.objective).toBe"
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 375,
      "snippet": "      // This test validates the complete Phase 2 milestone:\n      // 1. Registr"
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 376,
      "snippet": "      // 1. Registry parsing \u2713\n      // 2. Domain pack loading \u2713\n      // 3. Tem"
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 377,
      "snippet": "      // 2. Domain pack loading \u2713\n      // 3. Template merging \u2713\n      // 4. Mis"
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 378,
      "snippet": "      // 3. Template merging \u2713\n      // 4. Mission validation \u2713\n      // 5. YAML"
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 379,
      "snippet": "      // 4. Mission validation \u2713\n      // 5. YAML generation \u2713\n\n      const entr"
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 380,
      "snippet": "      // 5. YAML generation \u2713\n\n      const entries = registry.loadRegistry('regi"
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 383,
      "snippet": "\n      // Test 1: Generic mission\n      const genericResult = createMissionTool."
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 391,
      "snippet": "\n      // Test 2: Software mission\n      const softwareResult = createMissionToo"
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 403,
      "snippet": "\n      // Test 3: Business mission\n      const businessResult = createMissionToo"
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 415,
      "snippet": "\n      // Phase 2 complete! \u2713\n    });\n\n    it('confirms 2 production-ready domai"
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 426,
      "snippet": "\n      // Verify each pack is production-ready\n      for (const pack of producti"
    },
    {
      "file": "tests/integration/phase2-flow.test.ts",
      "line": 431,
      "snippet": "\n        // Verify files exist\n        const packDir = path.join(templatesDir, p"
    },
    {
      "file": "tests/utils/template-path.ts",
      "line": 22,
      "snippet": "\n  // Default to workspace templates even if missing to preserve prior fallback "
    },
    {
      "file": "tests/schemas/generic-mission.test.ts",
      "line": 312,
      "snippet": "      // This test ensures the interface has proper JSDoc comments\n      // Chec"
    },
    {
      "file": "tests/schemas/generic-mission.test.ts",
      "line": 313,
      "snippet": "      // Check is done during TypeScript compilation and IDE usage\n      const m"
    },
    {
      "file": "tests/import-export/template-importer.coverage.test.ts",
      "line": 57,
      "snippet": "        // Expose getSchema for TemplateImporter\n        default: MockSecurityVa"
    },
    {
      "file": "tests/import-export/template-exporter.test.ts",
      "line": 22,
      "snippet": "    // Create test directory\n    if (!fs.existsSync(testDir)) {\n      fs.mkdirSy"
    },
    {
      "file": "tests/import-export/template-exporter.test.ts",
      "line": 29,
      "snippet": "    // Create exporter with test directory\n    exporter = new TemplateExporter(t"
    },
    {
      "file": "tests/import-export/template-exporter.test.ts",
      "line": 34,
      "snippet": "    // Clean up test directory\n    if (fs.existsSync(testDir)) {\n      fs.rmSync"
    },
    {
      "file": "tests/import-export/template-exporter.test.ts",
      "line": 39,
      "snippet": "\n  // Helper to create a valid template\n  function createValidTemplate(): Missio"
    },
    {
      "file": "tests/import-export/template-exporter.test.ts",
      "line": 122,
      "snippet": "\n      // Check for dangerous YAML tags\n      expect(content).not.toContain('!!p"
    },
    {
      "file": "tests/import-export/template-exporter.test.ts",
      "line": 135,
      "snippet": "\n      // Pretty YAML should have indentation\n      expect(content).toContain(' "
    },
    {
      "file": "tests/import-export/template-exporter.test.ts",
      "line": 171,
      "snippet": "\n      // Pretty JSON should have newlines and indentation\n      expect(content)"
    },
    {
      "file": "tests/import-export/template-exporter.test.ts",
      "line": 183,
      "snippet": "\n      // Compact JSON should not have pretty formatting\n      expect(content.sp"
    },
    {
      "file": "tests/import-export/template-exporter.test.ts",
      "line": 218,
      "snippet": "      // @ts-ignore intentional invalid state\n      delete template.metadata;\n\n "
    },
    {
      "file": "tests/import-export/template-exporter.test.ts",
      "line": 226,
      "snippet": "      // @ts-ignore intentional invalid state\n      delete template.spec;\n\n     "
    },
    {
      "file": "tests/import-export/template-exporter.test.ts",
      "line": 240,
      "snippet": "        // Remove spec to trigger validation failure\n        spec: undefined as "
    },
    {
      "file": "tests/import-export/template-exporter.test.ts",
      "line": 358,
      "snippet": "\n      // Should export 2 out of 3 (skipping the invalid one)\n      expect(count"
    },
    {
      "file": "tests/import-export/template-exporter.test.ts",
      "line": 375,
      "snippet": "\n      // Export\n      exporter.export(template, 'roundtrip.yaml');\n\n      // Re"
    },
    {
      "file": "tests/import-export/template-exporter.test.ts",
      "line": 378,
      "snippet": "\n      // Read back\n      const content = fs.readFileSync(path.join(testDir, 'ro"
    },
    {
      "file": "tests/import-export/template-exporter.test.ts",
      "line": 382,
      "snippet": "\n      // Verify structure is preserved\n      expect(parsed.apiVersion).toBe(tem"
    },
    {
      "file": "tests/import-export/template-importer.test.ts",
      "line": 20,
      "snippet": "    // Create test directory\n    if (!fs.existsSync(testDir)) {\n      fs.mkdirSy"
    },
    {
      "file": "tests/import-export/template-importer.test.ts",
      "line": 27,
      "snippet": "    // Reset trusted keys\n    SecurityValidator.clearTrustedKeys();\n\n    // Crea"
    },
    {
      "file": "tests/import-export/template-importer.test.ts",
      "line": 29,
      "snippet": "\n    // Create importer with test directory\n    importer = new TemplateImporter("
    },
    {
      "file": "tests/import-export/template-importer.test.ts",
      "line": 35,
      "snippet": "    // Clean up test directory\n    if (fs.existsSync(testDir)) {\n      fs.rmSync"
    },
    {
      "file": "tests/import-export/template-importer.test.ts",
      "line": 40,
      "snippet": "\n  // Helper to write a template file\n  function writeTemplateFile(filename: str"
    },
    {
      "file": "tests/import-export/template-importer.test.ts",
      "line": 45,
      "snippet": "\n  // Helper to create valid template YAML\n  function createValidTemplateYAML():"
    },
    {
      "file": "tests/import-export/template-importer.test.ts",
      "line": 229,
      "snippet": "      // Create a dependency file\n      const depContent = createValidTemplateYA"
    },
    {
      "file": "tests/import-export/template-importer.test.ts",
      "line": 235,
      "snippet": "\n      // Create incorrect checksum - needs URL allowlist\n      const templateWi"
    },
    {
      "file": "tests/import-export/template-importer.test.ts",
      "line": 259,
      "snippet": "\n      // Should fail due to URL allowlist (empty by default)\n      await expect"
    },
    {
      "file": "tests/import-export/template-importer.test.ts",
      "line": 300,
      "snippet": "\n      // Check that no .temp- files remain\n      const files = fs.readdirSync(t"
    },
    {
      "file": "tests/import-export/template-importer.test.ts",
      "line": 354,
      "snippet": "\n      // Verify all layers passed\n      result.validationReport.layers.forEach("
    },
    {
      "file": "tests/import-export/security-validator.test.ts",
      "line": 20,
      "snippet": "    // Reset trusted keys before each test\n    SecurityValidator.clearTrustedKey"
    },
    {
      "file": "tests/import-export/security-validator.test.ts",
      "line": 22,
      "snippet": "\n    // Create validator with default rules\n    validator = new SecurityValidato"
    },
    {
      "file": "tests/import-export/security-validator.test.ts",
      "line": 26,
      "snippet": "\n  // Helper to create a valid template\n  function createValidTemplate(): Missio"
    },
    {
      "file": "tests/import-export/security-validator.test.ts",
      "line": 70,
      "snippet": "      // Register a trusted key\n      SecurityValidator.registerTrustedKey({\n   "
    },
    {
      "file": "tests/import-export/security-validator.test.ts",
      "line": 101,
      "snippet": "      // Register key with RS256\n      SecurityValidator.registerTrustedKey({\n  "
    },
    {
      "file": "tests/import-export/security-validator.test.ts",
      "line": 111,
      "snippet": "      // Template claims ES256\n      template.metadata.signature.algorithm = 'ES"
    },
    {
      "file": "tests/import-export/security-validator.test.ts",
      "line": 126,
      "snippet": "      // Register trusted key for all semantic tests\n      SecurityValidator.reg"
    },
    {
      "file": "tests/import-export/security-validator.test.ts",
      "line": 238,
      "snippet": "      // No dependencies field\n\n      const result = await validator.validate(te"
    },
    {
      "file": "tests/import-export/security-validator.test.ts",
      "line": 398,
      "snippet": "\n      // Create validator with URL allowlist for dependencies\n      const valid"
    },
    {
      "file": "tests/import-export/security-validator.test.ts",
      "line": 406,
      "snippet": "      // No dependencies to avoid allowlist issues\n\n      const result = await v"
    },
    {
      "file": "tests/import-export/security-validator.test.ts",
      "line": 409,
      "snippet": "\n      // All layers should pass\n      result.layers.forEach((layer) => {\n      "
    },
    {
      "file": "tests/registry/semver-validator.test.ts",
      "line": 100,
      "snippet": "      // v1 < v2\n      expect(compareSemVer('1.0.0', '2.0.0')).toBe(-1);\n      e"
    },
    {
      "file": "tests/registry/semver-validator.test.ts",
      "line": 104,
      "snippet": "\n      // v1 == v2\n      expect(compareSemVer('1.0.0', '1.0.0')).toBe(0);\n      "
    },
    {
      "file": "tests/registry/semver-validator.test.ts",
      "line": 108,
      "snippet": "\n      // v1 > v2\n      expect(compareSemVer('2.0.0', '1.0.0')).toBe(1);\n      e"
    },
    {
      "file": "tests/registry/semver-validator.test.ts",
      "line": 171,
      "snippet": "      // In 0.x.x, minor versions are breaking changes\n      expect(areVersionsC"
    },
    {
      "file": "tests/registry/registry-parser.test.ts",
      "line": 20,
      "snippet": "    // Ensure test data directory exists\n    if (!fs.existsSync(TEST_DATA_DIR)) "
    },
    {
      "file": "tests/versioning/version-manager.test.ts",
      "line": 368,
      "snippet": "      // Register multiple versions\n      versionManager.registerVersion({\n     "
    },
    {
      "file": "tests/versioning/migration-engine.test.ts",
      "line": 23,
      "snippet": "    // Create test directory for backups\n    if (!fs.existsSync(testDir)) {\n    "
    },
    {
      "file": "tests/versioning/migration-engine.test.ts",
      "line": 35,
      "snippet": "    // Clean up test directory\n    if (fs.existsSync(testDir)) {\n      fs.rmSync"
    },
    {
      "file": "tests/versioning/migration-engine.test.ts",
      "line": 74,
      "snippet": "\n      // Register in reverse order\n      migrationEngine.registerMigration('tes"
    },
    {
      "file": "tests/versioning/migration-engine.test.ts",
      "line": 87,
      "snippet": "      // Register a chain of migrations: 1.0.0 -> 1.1.0 -> 1.2.0 -> 2.0.0\n      "
    },
    {
      "file": "tests/versioning/migration-engine.test.ts",
      "line": 334,
      "snippet": "\n      // Verify backup content\n      const backupContent = fs.readFileSync(resu"
    },
    {
      "file": "tests/versioning/migration-engine.test.ts",
      "line": 398,
      "snippet": "      // Create a backup file\n      const template = { name: 'original', version"
    },
    {
      "file": "tests/versioning/migration-engine.test.ts",
      "line": 483,
      "snippet": "      // Register versions\n      versionManager.registerVersion({\n        templa"
    },
    {
      "file": "tests/versioning/migration-engine.test.ts",
      "line": 495,
      "snippet": "\n      // Register migrations\n      migrationEngine.registerMigration(\n        '"
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 16,
      "snippet": "    // Create a temporary test mission directory\n    tempDir = fs.mkdtempSync(pa"
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 23,
      "snippet": "    // Clean up temporary directory\n    if (fs.existsSync(tempDir)) {\n      fs.r"
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 31,
      "snippet": "      // Create a simple test mission\n      const appPy = path.join(testMissionD"
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 68,
      "snippet": "\n      // Check that config values were identified\n      const candidateValues ="
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 130,
      "snippet": "      // Create a node_modules directory with files\n      const nodeModulesDir ="
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 134,
      "snippet": "\n      // Create a normal file\n      fs.writeFileSync(path.join(testMissionDir, "
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 145,
      "snippet": "\n      // Should only analyze app.js, not files in node_modules\n      expect(res"
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 151,
      "snippet": "      // Create files with different literal frequencies\n      fs.writeFileSync("
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 173,
      "snippet": "\n      // \"unique-project\" should have higher confidence than \"common-value\"\n   "
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 189,
      "snippet": "      // Create a file with a unique literal that won't meet an extreme threshol"
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 203,
      "snippet": "\n      // Fallback path should populate candidates from literalLocations\n      e"
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 209,
      "snippet": "      // Create excluded directories and files\n      const gitDir = path.join(te"
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 217,
      "snippet": "\n      // Create one valid file\n      fs.writeFileSync(path.join(testMissionDir,"
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 228,
      "snippet": "\n      // Only main.js should be analyzed\n      expect(result.filesAnalyzed).toB"
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 275,
      "snippet": "\n      // Should contain Jinja2 placeholders\n      expect(appFile!.content).toCo"
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 306,
      "snippet": "      // Use JSON with a boolean-like string for name to exercise boolean branch"
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 323,
      "snippet": "\n      // Find parameter with number type\n      const numberParam = Object.value"
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 327,
      "snippet": "\n      // Find parameter with boolean type (name: 'true' should infer boolean)\n "
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 337,
      "snippet": "\n      // Also include a common directory to exercise skip branch\n      const sr"
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 351,
      "snippet": "\n      // Check if file paths contain Jinja2 placeholders\n      const hasTemplat"
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 361,
      "snippet": "      // Create multiple files with the 'name' key, where one value is more freq"
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 393,
      "snippet": "      // Create a realistic test mission\n      fs.writeFileSync(\n        path.jo"
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 438,
      "snippet": "      // Create a mission with ~50 files\n      for (let i = 0; i < 50; i++) {\n  "
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 525,
      "snippet": "      // Create a specially named directory to influence tags\n      const specia"
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 528,
      "snippet": "      // Put at least one file inside so getAllFiles sees it\n      fs.writeFileS"
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 555,
      "snippet": "\n      // Files analyzed should include both .env and .rb, but .env yields no ca"
    },
    {
      "file": "tests/loaders/yaml-loader.test.ts",
      "line": 140,
      "snippet": "      // While YAML.parse is safe by default, we test various attack vectors\n   "
    },
    {
      "file": "tests/loaders/yaml-loader.test.ts",
      "line": 146,
      "snippet": "\n      // The YAML library should reject this or our validation catches it\n     "
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 1,
      "snippet": "# Extension Patterns Cookbook\n\nPractical recipes and patterns for common Extensi"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 4,
      "snippet": "\n## Table of Contents\n\n1. [Template Extraction Patterns](#template-extraction-pa"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 15,
      "snippet": "\n## Template Extraction Patterns\n\n### Pattern 1: Extract Multi-Language Project "
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 17,
      "snippet": "\n### Pattern 1: Extract Multi-Language Project Template\n\n**Scenario**: Extract a"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 28,
      "snippet": "  // Step 1: Extract with higher confidence threshold for cleaner params\n  const"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 40,
      "snippet": "\n  // Step 2: Review and categorize parameters\n  const params = result.template!"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 61,
      "snippet": "\n  // Step 3: Add category metadata\n  result.template!.metadata.parameterCategor"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 64,
      "snippet": "\n  // Step 4: Save with enhanced metadata\n  const outputPath = path.join('./temp"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 81,
      "snippet": "\n### Pattern 2: Extract with Manual Parameter Review\n\n**Scenario**: Extract a te"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 88,
      "snippet": "  // Step 1: Extract with low threshold to see all candidates\n  const extractor "
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 96,
      "snippet": "\n  // Step 2: Review candidates and select manually\n  const selectedCandidates: "
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 101,
      "snippet": "    // Filter: only keep candidates with frequency > 2 or confidence > 0.6\n    c"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 112,
      "snippet": "\n  // Step 3: Generate template from selected candidates\n  const stage2 = await "
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 130,
      "snippet": "\n### Pattern 3: Extract and Version Immediately\n\n**Scenario**: Extract a templat"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 137,
      "snippet": "  // Extract\n  const extractResult = await extractTemplate({\n    sourceMissionPa"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 147,
      "snippet": "\n  // Register version\n  const versionManager = new VersionManager();\n  const te"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 167,
      "snippet": "\n// Usage\nawait extractAndVersion('./missions/order-service', '1.0.0');\n```\n\n**W"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 175,
      "snippet": "\n## Secure Sharing Patterns\n\n### Pattern 4: Team-to-Team Template Sharing\n\n**Sce"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 177,
      "snippet": "\n### Pattern 4: Team-to-Team Template Sharing\n\n**Scenario**: Share templates sec"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 183,
      "snippet": "// Team A: Generate and sign template\nasync function shareTemplate(template: Mis"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 186,
      "snippet": "\n  // Export with signature\n  const exportResult = await exportTemplate({\n    te"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 196,
      "snippet": "\n  // Share public key separately (secure channel)\n  const publicKeyInfo = {\n   "
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 210,
      "snippet": "\n// Team B: Import with verification\nasync function receiveTemplate(templatePath"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 213,
      "snippet": "  // Register trusted key\n  SecurityValidator.registerTrustedKey({\n    keyId: pu"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 221,
      "snippet": "\n  // Import with full validation\n  const importer = new TemplateImporter('./sha"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 243,
      "snippet": "\n### Pattern 5: Multi-Format Distribution\n\n**Scenario**: Export template in both"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 251,
      "snippet": "\n  // YAML for human readability\n  const yamlResult = await exportTemplate({\n   "
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 262,
      "snippet": "\n  // JSON for programmatic use\n  const jsonResult = await exportTemplate({\n    "
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 273,
      "snippet": "\n  // Generate README\n  const readme = `\n# Template Distribution\n\n## Files\n- YAM"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 276,
      "snippet": "# Template Distribution\n\n## Files\n- YAML: ${path.basename(yamlResult.exportPath!"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 277,
      "snippet": "\n## Files\n- YAML: ${path.basename(yamlResult.exportPath!)}\n- JSON: ${path.basena"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 281,
      "snippet": "\n## Verification\nBoth files are signed with keyId: release-key\nImport with signa"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 296,
      "snippet": "\n## Pack Composition Patterns\n\n### Pattern 6: Layer Architecture with Base Pack\n"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 298,
      "snippet": "\n### Pattern 6: Layer Architecture with Base Pack\n\n**Scenario**: Build layered a"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 305,
      "snippet": "  // Always include base layer\n  const basePacks = ['base-web-server', 'base-log"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 307,
      "snippet": "\n  // Combine base + selected features\n  const allPacks = [...basePacks, ...feat"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 321,
      "snippet": "\n  // Verify base components are present\n  const template = result.combinedPack!"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 335,
      "snippet": "\n// Usage\nconst app = await buildLayeredApp(['auth-jwt', 'database-postgres', 'a"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 343,
      "snippet": "\n### Pattern 7: Conflict Resolution with Selective Merge\n\n**Scenario**: Combine "
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 350,
      "snippet": "  // These packs have conflicting 'config.port' values\n  const result = await co"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 359,
      "snippet": "\n  // Log the conflict resolution\n  if (result.warnings) {\n    result.warnings.f"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 376,
      "snippet": "\n### Pattern 8: Dynamic Pack Selection\n\n**Scenario**: Select packs based on user"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 389,
      "snippet": "\n  // Add auth pack\n  if (requirements.auth && requirements.auth !== 'none') {\n "
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 394,
      "snippet": "\n  // Add database pack\n  if (requirements.database) {\n    packs.push(`database-"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 399,
      "snippet": "\n  // Add optional features\n  if (requirements.cache) {\n    packs.push('cache-re"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 420,
      "snippet": "\n// Usage\nconst app = await buildCustomApp({\n  auth: 'jwt',\n  database: 'postgre"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 433,
      "snippet": "\n## Versioning Patterns\n\n### Pattern 9: Safe Version Upgrade Check\n\n**Scenario**"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 435,
      "snippet": "\n### Pattern 9: Safe Version Upgrade Check\n\n**Scenario**: Check if upgrade is sa"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 442,
      "snippet": "  // Get latest version\n  const latest = await getLatestVersion({\n    templateId"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 452,
      "snippet": "\n  // Check compatibility\n  const compat = await checkVersionCompatibility({\n   "
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 465,
      "snippet": "\n  // Find migration path\n  const migrationPath = await findMigrationPath({\n    "
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 488,
      "snippet": "\n// Usage\nconst upgrade = await safeUpgrade('api-template', '1.5.0');\nif (upgrad"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 492,
      "snippet": "  // Proceed with upgrade\n} else if (upgrade?.requiresMigration) {\n  // Review m"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 494,
      "snippet": "  // Review migration path, then execute\n}\n```\n\n**When to use**: Before upgradin"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 501,
      "snippet": "\n### Pattern 10: Deprecation Workflow\n\n**Scenario**: Mark old versions as deprec"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 514,
      "snippet": "\n  // Get the version to deprecate\n  const version = versionManager.getVersion(t"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 520,
      "snippet": "\n  // Update with deprecation info\n  version.deprecated = {\n    message,\n    rep"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 527,
      "snippet": "\n  // Re-register with deprecation\n  versionManager.registerVersion(version);\n\n "
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 534,
      "snippet": "\n  // Create migration from deprecated to replacement\n  const migrationEngine = "
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 544,
      "snippet": "      // Add transformation logic\n      return {\n        ...data,\n        _migra"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 557,
      "snippet": "\n// Usage\nawait deprecateVersion(\n  'api-template',\n  '1.0.0',\n  '2.0.0',\n  'Ver"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 570,
      "snippet": "\n## Migration Patterns\n\n### Pattern 11: Multi-Step Migration with Validation\n\n**"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 572,
      "snippet": "\n### Pattern 11: Multi-Step Migration with Validation\n\n**Scenario**: Migrate tem"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 589,
      "snippet": "\n  // Find path\n  const path = migrationEngine.findMigrationPath(templateId, fro"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 601,
      "snippet": "\n  // Execute each step with validation\n  for (const [index, step] of path.steps"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 605,
      "snippet": "\n    // Pre-migration validation\n    if (step.validate) {\n      const valid = st"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 613,
      "snippet": "\n    // Execute migration\n    const stepResult = await step.transform(currentDat"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 617,
      "snippet": "\n    // Post-migration validation\n    validationResults.push({\n      step: index"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 643,
      "snippet": "\n### Pattern 12: Reversible Migration with Rollback\n\n**Scenario**: Perform migra"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 660,
      "snippet": "\n  // Find and verify path is reversible\n  const path = migrationEngine.findMigr"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 666,
      "snippet": "\n  // Backup original data\n  const backup = JSON.parse(JSON.stringify(data));\n\n "
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 671,
      "snippet": "    // Attempt migration\n    const result = await migrationEngine.migrate(templa"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 677,
      "snippet": "\n    // Validate migrated data\n    const valid = await validateMigratedData(resu"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 689,
      "snippet": "\n    // Rollback: migrate back to original version\n    const rollbackResult = aw"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 709,
      "snippet": "  // Custom validation logic\n  return data && typeof data === 'object';\n}\n```\n\n*"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 717,
      "snippet": "\n## Error Handling Patterns\n\n### Pattern 13: Graceful Degradation\n\n**Scenario**:"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 719,
      "snippet": "\n### Pattern 13: Graceful Degradation\n\n**Scenario**: Handle errors gracefully an"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 727,
      "snippet": "    // Attempt full extraction\n    const result = await extractTemplate({\n      "
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 737,
      "snippet": "\n    // Partial failure - try with lower threshold\n    console.warn('Full extrac"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 754,
      "snippet": "\n    // Total failure - return minimal template\n    return {\n      status: 'fail"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 794,
      "snippet": "\n### Pattern 14: Validation Error Recovery\n\n**Scenario**: Handle import validati"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 812,
      "snippet": "\n    // Validation failed - analyze errors\n    console.error('\u2717 Import validatio"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 821,
      "snippet": "\n    // Check if we can skip signature for internal use\n    if (failedLayers.som"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 858,
      "snippet": "\n## Advanced Patterns\n\n### Pattern 15: Template Pipeline Automation\n\n**Scenario*"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 860,
      "snippet": "\n### Pattern 15: Template Pipeline Automation\n\n**Scenario**: Automate the comple"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 868,
      "snippet": "\n  // 1. Extract\n  console.log('Step 1: Extracting template...');\n  const extrac"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 881,
      "snippet": "\n  // 2. Version\n  console.log('Step 2: Registering version...');\n  const versio"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 894,
      "snippet": "\n  // 3. Test (validate template structure)\n  console.log('Step 3: Testing templ"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 902,
      "snippet": "\n  // 4. Publish (export with signature)\n  console.log('Step 4: Publishing templ"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 925,
      "snippet": "\n  // Test 1: Has parameters\n  if (Object.keys(template.metadata.parameters).len"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 930,
      "snippet": "\n  // Test 2: Has files\n  if (template.fileStructure.length === 0) {\n    errors."
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 935,
      "snippet": "\n  // Test 3: Parameters are used in files\n  const params = Object.keys(template"
    },
    {
      "file": "docs/Extension_Patterns_Cookbook.md",
      "line": 956,
      "snippet": "\n## Summary\n\nThese patterns cover common scenarios in the Extension System. Mix "
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 1,
      "snippet": "# Phase 3 API Documentation\n\nComplete API reference for all Mission Protocol v2 "
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 4,
      "snippet": "\n## Table of Contents\n\n1. [MCP Tools](#mcp-tools)\n2. [Template Extraction API](#"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 15,
      "snippet": "\n## MCP Tools\n\nAll Phase 3 features are exposed as Model Context Protocol (MCP) "
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 19,
      "snippet": "\n### extract_template\n\nExtract a reusable template from an existing mission dire"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 75,
      "snippet": "\n### import_template\n\nImport and validate a template file with full 6-layer secu"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 128,
      "snippet": "\n### export_template\n\nExport a template with optional cryptographic signature.\n\n"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 181,
      "snippet": "\n### combine_packs\n\nCombine multiple domain packs with dependency resolution.\n\n*"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 241,
      "snippet": "\n### check_version_compatibility\n\nCheck if two template versions are compatible."
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 284,
      "snippet": "\n### find_migration_path\n\nFind migration path between two template versions.\n\n**"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 335,
      "snippet": "\n### register_template_version\n\nRegister a new template version in the registry."
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 384,
      "snippet": "\n### get_latest_version\n\nGet the latest version of a template.\n\n**Input Schema:*"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 423,
      "snippet": "\n### compare_versions\n\nCompare two semantic versions.\n\n**Input Schema:**\n```json"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 456,
      "snippet": "\n## Template Extraction API\n\n### TemplateExtractor Class\n\n```typescript\nclass Te"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 458,
      "snippet": "\n### TemplateExtractor Class\n\n```typescript\nclass TemplateExtractor {\n  construc"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 464,
      "snippet": "\n  // Main extraction method\n  async extract(): Promise<ExtractionResult>;\n\n  //"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 467,
      "snippet": "\n  // Stage 1: Identify parameter candidates\n  async identifyCandidates(missionP"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 470,
      "snippet": "\n  // Stage 2: Generate template from candidates\n  async generateTemplate(candid"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 473,
      "snippet": "\n  // Extract metadata from mission\n  extractMetadata(parameters: ParameterMap, "
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 478,
      "snippet": "\n### ExtractionConfig\n\n```typescript\ninterface ExtractionConfig {\n  sourceMissio"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 491,
      "snippet": "\n### ExtractionResult\n\n```typescript\ninterface ExtractionResult {\n  success: boo"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 517,
      "snippet": "\n### Candidate\n\n```typescript\ninterface Candidate {\n  value: string | number | b"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 532,
      "snippet": "\n## Import/Export API\n\n### TemplateImporter Class\n\n```typescript\nclass TemplateI"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 534,
      "snippet": "\n### TemplateImporter Class\n\n```typescript\nclass TemplateImporter {\n  constructo"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 540,
      "snippet": "\n  // Import from file\n  async import(\n    filePath: string,\n    options?: Impor"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 546,
      "snippet": "\n  // Import from string\n  async importFromString(\n    yamlContent: string,\n    "
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 554,
      "snippet": "\n### TemplateExporter Class\n\n```typescript\nclass TemplateExporter {\n  // Export "
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 559,
      "snippet": "  // Export template\n  async export(\n    template: MissionTemplate,\n    options:"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 566,
      "snippet": "\n### ImportOptions\n\n```typescript\ninterface ImportOptions {\n  skipSignatureVerif"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 576,
      "snippet": "\n### ExportOptions\n\n```typescript\ninterface ExportOptions {\n  outputPath: string"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 588,
      "snippet": "\n### SecurityValidator\n\n```typescript\nclass SecurityValidator {\n  // Register tr"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 593,
      "snippet": "  // Register trusted signing key\n  static registerTrustedKey(key: TrustedKey): "
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 595,
      "snippet": "\n  // Clear all trusted keys\n  static clearTrustedKeys(): void;\n\n  // Validate t"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 598,
      "snippet": "\n  // Validate template\n  async validate(\n    template: any,\n    options?: Valid"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 614,
      "snippet": "\n### ValidationReport\n\n```typescript\ninterface ValidationReport {\n  valid: boole"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 633,
      "snippet": "\n## Pack Combination API\n\n### PackCombiner Class\n\n```typescript\nclass PackCombin"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 635,
      "snippet": "\n### PackCombiner Class\n\n```typescript\nclass PackCombiner {\n  // Combine packs\n "
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 640,
      "snippet": "  // Combine packs\n  combine(\n    packs: DomainPack[],\n    availablePacks: Domai"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 646,
      "snippet": "\n  // Combine by name\n  combineByName(\n    packNames: string[],\n    availablePac"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 653,
      "snippet": "\n  // Preview combination\n  preview(\n    packs: DomainPack[],\n    availablePacks"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 662,
      "snippet": "\n### DependencyResolver Class\n\n```typescript\nclass DependencyResolver {\n  // Res"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 667,
      "snippet": "  // Resolve dependencies\n  resolve(\n    packs: DomainPack[],\n    availablePacks"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 672,
      "snippet": "\n  // Build dependency graph\n  buildGraph(packs: DomainPack[]): DependencyGraph;"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 675,
      "snippet": "\n  // Topological sort\n  topologicalSort(graph: DependencyGraph): string[];\n\n  /"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 678,
      "snippet": "\n  // Detect cycles\n  detectCircularDependencies(graph: DependencyGraph): string"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 683,
      "snippet": "\n### CombinationOptions\n\n```typescript\ninterface CombinationOptions {\n  strategy"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 697,
      "snippet": "\n### CombinationResult\n\n```typescript\ninterface CombinationResult {\n  success: b"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 718,
      "snippet": "\n## Versioning API\n\n### VersionManager Class\n\n```typescript\nclass VersionManager"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 720,
      "snippet": "\n### VersionManager Class\n\n```typescript\nclass VersionManager {\n  constructor(op"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 726,
      "snippet": "\n  // Version parsing and formatting\n  parseVersion(versionString: string): Sema"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 730,
      "snippet": "\n  // Version comparison\n  compareVersions(v1: SemanticVersion, v2: SemanticVers"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 734,
      "snippet": "\n  // Registry management\n  registerVersion(templateVersion: TemplateVersion): v"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 739,
      "snippet": "\n  // Compatibility checking\n  checkCompatibility(v1: TemplateVersion, v2: Templ"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 742,
      "snippet": "\n  // Version resolution\n  resolveVersions(requirements: Map<string, VersionRang"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 745,
      "snippet": "\n  // Validation\n  validateVersion(templateVersion: TemplateVersion): VersionVal"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 750,
      "snippet": "\n### MigrationEngine Class\n\n```typescript\nclass MigrationEngine {\n  constructor("
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 756,
      "snippet": "\n  // Register migration\n  registerMigration(migration: Migration): void;\n\n  // "
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 759,
      "snippet": "\n  // Find migration path\n  findMigrationPath(\n    templateId: string,\n    from:"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 766,
      "snippet": "\n  // Execute migration\n  async migrate(\n    templateId: string,\n    data: any,\n"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 774,
      "snippet": "\n  // Validate migration\n  validateMigration(migration: Migration): MigrationVal"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 779,
      "snippet": "\n### SemanticVersion\n\n```typescript\ninterface SemanticVersion {\n  major: number;"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 797,
      "snippet": "\n### VersionRange\n\n```typescript\ntype VersionRange =\n  | { expression: string } "
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 805,
      "snippet": "\n### Migration\n\n```typescript\ninterface Migration {\n  id: string;\n  templateId: "
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 838,
      "snippet": "\n## Type Definitions\n\n### MissionTemplate\n\n```typescript\ninterface MissionTempla"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 840,
      "snippet": "\n### MissionTemplate\n\n```typescript\ninterface MissionTemplate {\n  metadata: Temp"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 881,
      "snippet": "\n### ParameterMap\n\n```typescript\ntype ParameterMap = Record<string, Parameter>;\n"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 900,
      "snippet": "\n### DomainPack\n\n```typescript\ninterface DomainPack {\n  manifest: PackManifest;\n"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 929,
      "snippet": "\n## Error Handling\n\nAll APIs follow consistent error handling patterns:\n\n### Err"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 933,
      "snippet": "\n### Error Types\n\n```typescript\nclass ExtractionError extends Error {\n  construc"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 968,
      "snippet": "\n### Error Response Pattern\n\n```typescript\ninterface ErrorResponse {\n  success: "
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 981,
      "snippet": "\n## Performance Benchmarks\n\n| Operation | Target | Actual (Typical) |\n|---------"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 995,
      "snippet": "\n## Security Considerations\n\n### 6-Layer Validation\n\nAll imported templates pass"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 997,
      "snippet": "\n### 6-Layer Validation\n\nAll imported templates pass through:\n\n1. **Path Travers"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 1008,
      "snippet": "\n### Best Practices\n\n\u2705 **Always:**\n- Verify signatures for external templates\n- "
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 1025,
      "snippet": "\n## Usage Examples\n\nSee the [Extension System Guide](./Extension_System_Guide.md"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 1029,
      "snippet": "\n## Changelog\n\n### Phase 3 (v2.0.0)\n- \u2705 Template Extraction (B3.1)\n- \u2705 Import/Ex"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 1031,
      "snippet": "\n### Phase 3 (v2.0.0)\n- \u2705 Template Extraction (B3.1)\n- \u2705 Import/Export System wi"
    },
    {
      "file": "docs/API_Documentation.md",
      "line": 1040,
      "snippet": "\n## Support\n\nFor API-related questions:\n- Review this documentation\n- Check the "
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 1,
      "snippet": "# Intelligence Layer User Guide\n\n## Overview\n\nThe Intelligence Layer (Phase 4) a"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 2,
      "snippet": "\n## Overview\n\nThe Intelligence Layer (Phase 4) adds AI-driven capabilities to Mi"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 6,
      "snippet": "\n## Quick Start\n\nThe Intelligence Layer provides five key MCP tools:\n\n1. **`opti"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 16,
      "snippet": "\n### Example Workflow\n\n```bash\n# 1. Check quality of your mission\nscore_quality "
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 20,
      "snippet": "# 1. Check quality of your mission\nscore_quality --missionFile=missions/current."
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 22,
      "snippet": "\n# 2. Optimize tokens if needed\noptimize_tokens --missionFile=missions/current.y"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 25,
      "snippet": "\n# 3. Analyze dependencies across sprint\nanalyze_dependencies --missionDirectory"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 28,
      "snippet": "\n# 4. Get splitting suggestions for complex missions\nsuggest_splits --missionFil"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 34,
      "snippet": "\n## Tool 1: Quality Scoring (`score_quality`)\n\n**Purpose**: Assess mission quali"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 38,
      "snippet": "\n### Basic Usage\n\n```typescript\nconst result = await scoreQuality({\n  missionFil"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 49,
      "snippet": "\n### Output Example\n\n```\n=== Mission Quality Assessment ===\n\nOverall Quality Sco"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 73,
      "snippet": "\n### Quality Score Interpretation\n\n| Score Range | Grade | Meaning |\n|----------"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 83,
      "snippet": "\n### Parameters\n\n- `missionFile` (required): Path to mission YAML file\n- `verbos"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 88,
      "snippet": "\n### Use Cases\n\n**Before Starting a Mission**\n```typescript\n// Validate mission "
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 93,
      "snippet": "// Validate mission quality before execution\nconst quality = await scoreQuality("
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 107,
      "snippet": "// Compare quality across sprint missions\nconst missions = ['B4.1', 'B4.2', 'B4."
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 119,
      "snippet": "\n## Tool 2: Token Optimization (`optimize_tokens`)\n\n**Purpose**: Reduce mission "
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 123,
      "snippet": "\n### Basic Usage\n\n```typescript\nconst result = await handleOptimizeTokens({\n  mi"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 137,
      "snippet": "\n### Compression Levels\n\n**Conservative** (5-15% reduction)\n- Minimal changes\n- "
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 154,
      "snippet": "\n### Parameters\n\n- `missionFile` (required): Path to mission YAML file\n- `target"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 162,
      "snippet": "\n### Example: Dry Run Preview\n\n```typescript\n// Preview optimization without mod"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 166,
      "snippet": "// Preview optimization without modifying file\nconst preview = await handleOptim"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 184,
      "snippet": "\n### Use Cases\n\n**Before Long Context Sessions**\n```typescript\n// Optimize missi"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 189,
      "snippet": "// Optimize mission to fit within context window\nconst mission = await handleOpt"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 196,
      "snippet": "\n// Verify it fits within budget\nif (mission.stats!.compressedTokens < 50000) {\n"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 205,
      "snippet": "// Optimize all missions in a sprint\nconst sprintMissions = ['B4.1', 'B4.2', 'B4"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 220,
      "snippet": "\n## Tool 3: Dependency Analysis (`analyze_dependencies`)\n\n**Purpose**: Detect im"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 224,
      "snippet": "\n### Basic Usage\n\n```typescript\nconst analysis = await executeAnalyzeDependencie"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 235,
      "snippet": "\n### Output Example\n\n```\n=== Dependency Analysis Report ===\n\nTotal Missions: 5\nA"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 275,
      "snippet": "\n### Parameters\n\n- `missionDirectory` (optional): Directory containing mission f"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 281,
      "snippet": "\n### Use Cases\n\n**Sprint Planning**\n```typescript\n// Analyze dependencies before"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 286,
      "snippet": "// Analyze dependencies before sprint starts\nconst analysis = await executeAnaly"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 291,
      "snippet": "\n// Check for circular dependencies\nif (analysis.includes('Has Cycles: Yes')) {\n"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 300,
      "snippet": "// Generate Mermaid diagram\nconst graph = await executeAnalyzeDependenciesTool({"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 307,
      "snippet": "// Copy output to Mermaid live editor or docs\n```\n\n**Validate Execution Order**\n"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 312,
      "snippet": "// Get optimal execution sequence\nconst analysis = await executeAnalyzeDependenc"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 323,
      "snippet": "\n// Execution order is in topological sort section\n```\n\n---\n\n## Tool 4: Mission "
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 328,
      "snippet": "\n## Tool 4: Mission Splitting (`split_mission`, `suggest_splits`)\n\n**Purpose**: "
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 332,
      "snippet": "\n### Step 1: Get Split Suggestions\n\n```typescript\nconst suggestions = await exec"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 347,
      "snippet": "\n### Step 2: Execute Split\n\n```typescript\nconst result = await executeSplitMissi"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 363,
      "snippet": "\n### Split Strategies\n\n**Semantic** (Recommended)\n- Splits based on functional c"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 378,
      "snippet": "\n### Parameters\n\n**`suggest_splits`:**\n- `missionFile` (required): Path to missi"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 391,
      "snippet": "\n### Use Cases\n\n**Large Feature Development**\n```typescript\n// Mission: \"Impleme"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 396,
      "snippet": "// Mission: \"Implement complete authentication system\"\n// Too complex for single"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 397,
      "snippet": "// Too complex for single session\n\nconst suggestions = await executeSuggestSplit"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 411,
      "snippet": "\n  // Now you have: B6.1 (OAuth), B6.2 (Sessions), B6.3 (Middleware)\n}\n```\n\n**Co"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 418,
      "snippet": "// Check all missions in backlog for complexity\nconst backlog = fs.readdirSync('"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 434,
      "snippet": "\n## Complete Workflow Example\n\nHere's how to use the Intelligence Layer for a co"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 440,
      "snippet": "// ============================================\n// Sprint 5 Planning with Intell"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 441,
      "snippet": "// Sprint 5 Planning with Intelligence Layer\n// ================================"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 442,
      "snippet": "// ============================================\n\n// Step 1: Analyze sprint depen"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 443,
      "snippet": "\n// Step 1: Analyze sprint dependencies\nconst depAnalysis = await executeAnalyze"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 452,
      "snippet": "\n// Step 2: Check quality of all missions\nconsole.log('\\n\ud83c\udfaf Quality Assessment:')"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 465,
      "snippet": "\n// Step 3: Check for complex missions that need splitting\nconsole.log('\\n\ud83d\udd0d Comp"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 478,
      "snippet": "\n// Step 4: Optimize tokens for context efficiency\nconsole.log('\\n\u26a1 Token Optimi"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 496,
      "snippet": "\n## Performance Benchmarks\n\nThe Intelligence Layer is optimized for speed:\n\n| To"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 512,
      "snippet": "\n## Best Practices\n\n### 1. Quality-First Approach\n\nAlways check quality before e"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 514,
      "snippet": "\n### 1. Quality-First Approach\n\nAlways check quality before execution:\n```typesc"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 521,
      "snippet": "  // Review and improve mission based on suggestions\n}\n```\n\n### 2. Optimize Earl"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 524,
      "snippet": "\n### 2. Optimize Early\n\nOptimize missions during planning, not during execution:"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 529,
      "snippet": "// During sprint planning\nfor (const mission of sprintMissions) {\n  await handle"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 534,
      "snippet": "\n### 3. Validate Dependencies\n\nAlways analyze dependencies before starting a spr"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 543,
      "snippet": "\n// Check for circular dependencies or missing prerequisites\n```\n\n### 4. Split P"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 546,
      "snippet": "\n### 4. Split Proactively\n\nCheck complexity during mission creation:\n```typescri"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 557,
      "snippet": "  // Split before adding to sprint\n}\n```\n\n---\n\n## Troubleshooting\n\n### Quality S"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 562,
      "snippet": "\n## Troubleshooting\n\n### Quality Score Lower Than Expected\n\n**Cause**: Mission m"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 564,
      "snippet": "\n### Quality Score Lower Than Expected\n\n**Cause**: Mission may lack specificity "
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 578,
      "snippet": "\n### Token Optimization Increases Size\n\n**Cause**: Model-specific transpilers ma"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 592,
      "snippet": "\n### Circular Dependencies Detected\n\n**Cause**: Missions have mutual dependencie"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 603,
      "snippet": "\n// Review dependency chain and restructure missions\n```\n\n---\n\n## Integration wi"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 608,
      "snippet": "\n## Integration with MCP\n\nAll Intelligence Layer tools are available as MCP tool"
    },
    {
      "file": "docs/Intelligence_Layer_Guide.md",
      "line": 632,
      "snippet": "\n## Next Steps\n\n- Read [API Documentation](API_Documentation_Phase4.md) for comp"
    },
    {
      "file": "docs/Quality_Scoring_Implementation.md",
      "line": 1,
      "snippet": "# Quality Scoring System Implementation\n\n**Mission ID:** BI-20251005-004\n**Statu"
    },
    {
      "file": "docs/Quality_Scoring_Implementation.md",
      "line": 6,
      "snippet": "\n## Overview\n\nSuccessfully implemented a comprehensive quality scoring system ba"
    },
    {
      "file": "docs/Quality_Scoring_Implementation.md",
      "line": 10,
      "snippet": "\n## Implementation Summary\n\n### Core Components\n\n1. **QualityScorer** (`app/src/"
    },
    {
      "file": "docs/Quality_Scoring_Implementation.md",
      "line": 12,
      "snippet": "\n### Core Components\n\n1. **QualityScorer** (`app/src/quality/quality-scorer.ts`)"
    },
    {
      "file": "docs/Quality_Scoring_Implementation.md",
      "line": 52,
      "snippet": "\n## Scoring Algorithm\n\n```\nTotal Score = (0.35 \u00d7 Clarity) + (0.35 \u00d7 Completeness"
    },
    {
      "file": "docs/Quality_Scoring_Implementation.md",
      "line": 60,
      "snippet": "\n## Success Criteria - All Met \u2705\n\n- \u2705 Three-dimensional quality model implemente"
    },
    {
      "file": "docs/Quality_Scoring_Implementation.md",
      "line": 69,
      "snippet": "\n## Test Results\n\n**Unit Tests:** 15 passing\n- `tests/quality/quality-scorer.tes"
    },
    {
      "file": "docs/Quality_Scoring_Implementation.md",
      "line": 86,
      "snippet": "\n## Performance Metrics\n\n| Mission Type | Processing Time | Status |\n|----------"
    },
    {
      "file": "docs/Quality_Scoring_Implementation.md",
      "line": 94,
      "snippet": "\n## Example Output\n\n```\n=== Mission Quality Assessment ===\n\nOverall Quality Scor"
    },
    {
      "file": "docs/Quality_Scoring_Implementation.md",
      "line": 119,
      "snippet": "\n## Usage\n\n```typescript\nimport { QualityScorer } from './quality/quality-scorer"
    },
    {
      "file": "docs/Quality_Scoring_Implementation.md",
      "line": 139,
      "snippet": "\n## Files Created/Modified\n\n**New Files:**\n- `app/src/quality/types.ts`\n- `app/s"
    },
    {
      "file": "docs/Quality_Scoring_Implementation.md",
      "line": 156,
      "snippet": "\n## Known Limitations\n\n1. **Benchmarking Dimension:** Deferred (requires Gold St"
    },
    {
      "file": "docs/Quality_Scoring_Implementation.md",
      "line": 163,
      "snippet": "\n## Future Enhancements\n\n1. Implement Gold Standard Corpus (GSC) for benchmarkin"
    },
    {
      "file": "docs/Quality_Scoring_Implementation.md",
      "line": 172,
      "snippet": "\n## References\n\n- Research Mission: R4.4_Mission_Quality_metrics\n- Implementatio"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 1,
      "snippet": "# Extension System User Guide\n\n## Overview\n\nThe Mission Protocol v2 Extension Sy"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 2,
      "snippet": "\n## Overview\n\nThe Mission Protocol v2 Extension System (Phase 3) enables you to "
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 6,
      "snippet": "\n## Table of Contents\n\n1. [Template Extraction](#template-extraction)\n2. [Import"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 16,
      "snippet": "\n## Template Extraction\n\n### What is Template Extraction?\n\nTemplate extraction a"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 18,
      "snippet": "\n### What is Template Extraction?\n\nTemplate extraction analyzes a completed miss"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 22,
      "snippet": "\n### Basic Usage\n\n```typescript\nimport { extractTemplate } from './tools/extract"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 40,
      "snippet": "\n### How It Works\n\nThe extraction process has two stages:\n\n**Stage 1: Candidate "
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 56,
      "snippet": "\n### Configuration Options\n\n```typescript\ninterface ExtractionConfig {\n  sourceM"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 69,
      "snippet": "\n### Example: Extract an API Template\n\n```typescript\n// 1. Prepare mission direc"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 73,
      "snippet": "// 1. Prepare mission directory\nconst missionPath = './missions/user-service';\n\n"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 75,
      "snippet": "\n// 2. Extract template\nconst result = await extractTemplate({\n  sourceMissionPa"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 84,
      "snippet": "\n// 3. Review results\nconsole.log(`Files analyzed: ${result.stage1?.filesAnalyze"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 88,
      "snippet": "\n// 4. Inspect parameters\nresult.template?.metadata.parameters.forEach((param, n"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 94,
      "snippet": "\n### Best Practices\n\n\u2705 **Do:**\n- Use descriptive mission directories for better "
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 109,
      "snippet": "\n## Import & Export\n\n### Security-First Design\n\nThe import/export system impleme"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 111,
      "snippet": "\n### Security-First Design\n\nThe import/export system implements **6 layers of se"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 122,
      "snippet": "\n### Exporting Templates\n\n```typescript\nimport { exportTemplate } from './tools/"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 127,
      "snippet": "\n// Export with security signature\nconst result = await exportTemplate({\n  templ"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 140,
      "snippet": "\n### Importing Templates\n\n```typescript\nimport { importTemplate } from './tools/"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 146,
      "snippet": "\n// 1. Register trusted key (one-time setup)\nSecurityValidator.registerTrustedKe"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 155,
      "snippet": "\n// 2. Import template\nconst result = await importTemplate({\n  templatePath: './"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 170,
      "snippet": "\n### Trust Levels\n\n| Trust Level | Use Case | Verification Required |\n|---------"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 179,
      "snippet": "\n### Performance Targets\n\n- **Export**: < 500ms for typical templates\n- **Import"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 187,
      "snippet": "\n## Pack Combination\n\n### What are Domain Packs?\n\nDomain packs are reusable conf"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 189,
      "snippet": "\n### What are Domain Packs?\n\nDomain packs are reusable configuration bundles tha"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 197,
      "snippet": "\n### Basic Combination\n\n```typescript\nimport { combineP acks } from './tools/com"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 215,
      "snippet": "\n### Merge Strategies\n\n#### 1. Deep Merge (Default)\nRecursively merges objects a"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 217,
      "snippet": "\n#### 1. Deep Merge (Default)\nRecursively merges objects and concatenates arrays"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 222,
      "snippet": "# Pack A\nserver:\n  port: 3000\n\n# Pack B\nserver:\n  host: \"0.0.0.0\"\n\n# Result\nserv"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 225,
      "snippet": "\n# Pack B\nserver:\n  host: \"0.0.0.0\"\n\n# Result\nserver:\n  port: 3000\n  host: \"0.0."
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 229,
      "snippet": "\n# Result\nserver:\n  port: 3000\n  host: \"0.0.0.0\"\n```\n\n#### 2. Override\nLast pack"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 235,
      "snippet": "\n#### 2. Override\nLast pack wins for conflicting keys.\n\n```yaml\n# Pack A\nconfig:"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 240,
      "snippet": "# Pack A\nconfig:\n  mode: \"dev\"\n\n# Pack B\nconfig:\n  mode: \"prod\"\n\n# Result (Pack "
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 243,
      "snippet": "\n# Pack B\nconfig:\n  mode: \"prod\"\n\n# Result (Pack B overrides)\nconfig:\n  mode: \"p"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 247,
      "snippet": "\n# Result (Pack B overrides)\nconfig:\n  mode: \"prod\"\n```\n\n#### 3. Selective\nSpeci"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 252,
      "snippet": "\n#### 3. Selective\nSpecify paths to merge vs. override.\n\n```typescript\n{\n  strat"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 263,
      "snippet": "\n### Dependency Resolution\n\nPacks declare dependencies in their manifest:\n\n```ya"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 269,
      "snippet": "# auth-middleware/manifest.yaml\nname: \"auth-middleware\"\nversion: \"1.0.0\"\ndepende"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 292,
      "snippet": "\n### Preview Mode\n\nPreview combination results without executing:\n\n```typescript"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 307,
      "snippet": "// Warnings might include:\n// - Version mismatches\n// - Circular dependencies\n//"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 308,
      "snippet": "// - Version mismatches\n// - Circular dependencies\n// - Missing dependencies\n```"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 309,
      "snippet": "// - Circular dependencies\n// - Missing dependencies\n```\n\n---\n\n## Template Versi"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 310,
      "snippet": "// - Missing dependencies\n```\n\n---\n\n## Template Versioning\n\n### SemVer Support\n\n"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 314,
      "snippet": "\n## Template Versioning\n\n### SemVer Support\n\nAll templates use Semantic Versioni"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 316,
      "snippet": "\n### SemVer Support\n\nAll templates use Semantic Versioning (X.Y.Z format):\n\n- **"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 324,
      "snippet": "\n### Registering Versions\n\n```typescript\nimport { registerTemplateVersion } from"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 338,
      "snippet": "\n### Version Compatibility\n\nCheck if two versions can work together:\n\n```typescr"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 361,
      "snippet": "\n### Migrations\n\nDefine migration paths between versions:\n\n```typescript\nimport "
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 368,
      "snippet": "\n// Define migration\nconst migration = createMigration({\n  id: 'api-v1-to-v2',\n "
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 376,
      "snippet": "    // Transform v1 config to v2 format\n    return {\n      ...data,\n      config"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 387,
      "snippet": "\n// Register migration\nmigrationEngine.registerMigration(migration);\n\n// Find mi"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 390,
      "snippet": "\n// Find migration path\nconst path = await findMigrationPath({\n  templateId: 'ap"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 402,
      "snippet": "\n### Auto-Migration\n\nExecute migrations automatically:\n\n```typescript\nconst resu"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 424,
      "snippet": "\n## Complete Workflows\n\n### Workflow 1: Share Template Between Teams\n\n```typescr"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 426,
      "snippet": "\n### Workflow 1: Share Template Between Teams\n\n```typescript\n// Team A: Extract "
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 430,
      "snippet": "// Team A: Extract and export\nconst extractResult = await extractTemplate({\n  so"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 444,
      "snippet": "\n// Share file: ./shared-templates/payment-service-template.yaml\n\n// Team B: Imp"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 446,
      "snippet": "\n// Team B: Import and use\nSecurityValidator.registerTrustedKey({\n  keyId: 'team"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 460,
      "snippet": "\n// Use imported template to create new mission\n// ... instantiation logic ...\n`"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 462,
      "snippet": "// ... instantiation logic ...\n```\n\n### Workflow 2: Build Composite Template\n\n``"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 464,
      "snippet": "\n### Workflow 2: Build Composite Template\n\n```typescript\n// 1. Combine multiple "
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 468,
      "snippet": "// 1. Combine multiple packs\nconst combineResult = await combinePacks({\n  packNa"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 475,
      "snippet": "\n// 2. Version the combined template\nawait registerTemplateVersion({\n  templateI"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 482,
      "snippet": "\n// 3. Export for distribution\nawait exportTemplate({\n  template: combineResult."
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 492,
      "snippet": "\n### Workflow 3: Version Upgrade Pipeline\n\n```typescript\n// 1. Check current ver"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 496,
      "snippet": "// 1. Check current version\nconst currentVersion = '1.5.0';\nconst latest = await"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 504,
      "snippet": "\n// 2. Check compatibility\nconst compat = await checkVersionCompatibility({\n  te"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 513,
      "snippet": "  // 3. Find migration path\n  const path = await findMigrationPath({\n    templat"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 521,
      "snippet": "\n  // 4. Execute migration\n  const migrateResult = await migrationEngine.migrate"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 537,
      "snippet": "\n## MCP Tools Reference\n\nAll Phase 3 features are available as MCP tools in Clau"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 541,
      "snippet": "\n### Template Tools\n- `extract_template` - Extract template from mission\n- `impo"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 546,
      "snippet": "\n### Combination Tools\n- `combine_packs` - Combine multiple domain packs\n\n### Ve"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 549,
      "snippet": "\n### Versioning Tools\n- `check_version_compatibility` - Check version compatibil"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 558,
      "snippet": "\n## Troubleshooting\n\n### Import Fails with \"Untrusted Signature\"\n\n**Cause**: Sig"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 560,
      "snippet": "\n### Import Fails with \"Untrusted Signature\"\n\n**Cause**: Signing key not registe"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 569,
      "snippet": "  // ... other fields\n});\n```\n\n### Circular Dependency Detected\n\n**Cause**: Pack"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 572,
      "snippet": "\n### Circular Dependency Detected\n\n**Cause**: Packs have circular references in "
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 581,
      "snippet": "\n### Migration Path Not Found\n\n**Cause**: No registered migrations between versi"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 590,
      "snippet": "\n### Template Extraction Generates Too Few Parameters\n\n**Cause**: Confidence thr"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 603,
      "snippet": "\n## Next Steps\n\n- Review the [API Documentation](./API_Documentation.md) for det"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 609,
      "snippet": "\n## Support\n\nFor issues or questions:\n- File an issue in the project repository\n"
    },
    {
      "file": "docs/domain-pack-authoring.md",
      "line": 1,
      "snippet": "# Domain Pack Authoring Guide\n\nThis guide explains how to create production-read"
    },
    {
      "file": "docs/domain-pack-authoring.md",
      "line": 4,
      "snippet": "\n## What is a Domain Pack?\n\nA domain pack extends the generic mission template w"
    },
    {
      "file": "docs/domain-pack-authoring.md",
      "line": 12,
      "snippet": "\n## Directory Structure\n\n```\napp/templates/domains/\n\u251c\u2500\u2500 your-domain/\n\u2502   \u251c\u2500\u2500 pac"
    },
    {
      "file": "docs/domain-pack-authoring.md",
      "line": 22,
      "snippet": "\n## Creating a Domain Pack\n\n### Step 1: Create Directory\n\n```bash\nmkdir -p app/t"
    },
    {
      "file": "docs/domain-pack-authoring.md",
      "line": 24,
      "snippet": "\n### Step 1: Create Directory\n\n```bash\nmkdir -p app/templates/domains/your-domai"
    },
    {
      "file": "docs/domain-pack-authoring.md",
      "line": 30,
      "snippet": "\n### Step 2: Create pack.yaml\n\nThe manifest defines metadata about your domain p"
    },
    {
      "file": "docs/domain-pack-authoring.md",
      "line": 51,
      "snippet": "\n### Step 3: Create schema.json\n\nDefine the structure and validation rules for y"
    },
    {
      "file": "docs/domain-pack-authoring.md",
      "line": 95,
      "snippet": "\n### Step 4: Create template.yaml\n\nProvide default values matching your schema:\n"
    },
    {
      "file": "docs/domain-pack-authoring.md",
      "line": 112,
      "snippet": "\n## Example: Software Development Pack\n\nHere's a complete example of a productio"
    },
    {
      "file": "docs/domain-pack-authoring.md",
      "line": 116,
      "snippet": "\n### pack.yaml\n```yaml\nname: \"software.technical-task\"\nversion: \"1.0.0\"\ndisplayN"
    },
    {
      "file": "docs/domain-pack-authoring.md",
      "line": 126,
      "snippet": "\n### schema.json\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#"
    },
    {
      "file": "docs/domain-pack-authoring.md",
      "line": 174,
      "snippet": "\n### template.yaml\n```yaml\nuserStory: \"\"\ntechnicalApproach: []\nnonFunctionalRequ"
    },
    {
      "file": "docs/domain-pack-authoring.md",
      "line": 182,
      "snippet": "\n## Registering Your Domain Pack\n\nAfter creating your domain pack, register it i"
    },
    {
      "file": "docs/domain-pack-authoring.md",
      "line": 189,
      "snippet": "  # ... existing domains ...\n\n  - name: category.domain-name\n    description: Br"
    },
    {
      "file": "docs/domain-pack-authoring.md",
      "line": 198,
      "snippet": "\n## Testing Your Domain Pack\n\n### 1. Unit Tests\n\nVerify your pack loads correctl"
    },
    {
      "file": "docs/domain-pack-authoring.md",
      "line": 200,
      "snippet": "\n### 1. Unit Tests\n\nVerify your pack loads correctly:\n\n```typescript\nimport { Do"
    },
    {
      "file": "docs/domain-pack-authoring.md",
      "line": 214,
      "snippet": "\n### 2. Integration Tests\n\nTest mission creation with your domain:\n\n```typescrip"
    },
    {
      "file": "docs/domain-pack-authoring.md",
      "line": 231,
      "snippet": "\n### 3. Manual Testing\n\n```bash\n# Run tests\ncd app && npm test\n\n# Test with MCP "
    },
    {
      "file": "docs/domain-pack-authoring.md",
      "line": 235,
      "snippet": "# Run tests\ncd app && npm test\n\n# Test with MCP server\ncd app && npm run build &"
    },
    {
      "file": "docs/domain-pack-authoring.md",
      "line": 237,
      "snippet": "\n# Test with MCP server\ncd app && npm run build && npm start\n```\n\n## Validation "
    },
    {
      "file": "docs/domain-pack-authoring.md",
      "line": 241,
      "snippet": "\n## Validation Checklist\n\nBefore considering your domain pack production-ready:\n"
    },
    {
      "file": "docs/domain-pack-authoring.md",
      "line": 258,
      "snippet": "\n## Common Patterns\n\n### Arrays of Strings\n```json\n{\n  \"items\": {\n    \"type\": \"a"
    },
    {
      "file": "docs/domain-pack-authoring.md",
      "line": 260,
      "snippet": "\n### Arrays of Strings\n```json\n{\n  \"items\": {\n    \"type\": \"array\",\n    \"items\": "
    },
    {
      "file": "docs/domain-pack-authoring.md",
      "line": 270,
      "snippet": "\n### Arrays of Objects\n```json\n{\n  \"steps\": {\n    \"type\": \"array\",\n    \"items\": "
    },
    {
      "file": "docs/domain-pack-authoring.md",
      "line": 287,
      "snippet": "\n### Optional Fields\n```json\n{\n  \"properties\": {\n    \"optional\": { \"type\": \"stri"
    },
    {
      "file": "docs/domain-pack-authoring.md",
      "line": 297,
      "snippet": "\n### Enum Values\n```json\n{\n  \"priority\": {\n    \"type\": \"string\",\n    \"enum\": [\"l"
    },
    {
      "file": "docs/domain-pack-authoring.md",
      "line": 308,
      "snippet": "\n## Best Practices\n\n1. **Keep It Focused**: Each domain pack should serve a spec"
    },
    {
      "file": "docs/domain-pack-authoring.md",
      "line": 319,
      "snippet": "\n## Domain Pack Examples\n\nMission Protocol v2 includes these production-ready do"
    },
    {
      "file": "docs/domain-pack-authoring.md",
      "line": 328,
      "snippet": "\n## Troubleshooting\n\n### Pack Not Found\n- Verify pack is registered in registry."
    },
    {
      "file": "docs/domain-pack-authoring.md",
      "line": 330,
      "snippet": "\n### Pack Not Found\n- Verify pack is registered in registry.yaml\n- Check path in"
    },
    {
      "file": "docs/domain-pack-authoring.md",
      "line": 335,
      "snippet": "\n### Schema Validation Errors\n- Validate schema at https://www.jsonschemavalidat"
    },
    {
      "file": "docs/domain-pack-authoring.md",
      "line": 340,
      "snippet": "\n### Template Merge Errors\n- Verify template.yaml structure matches schema\n- Che"
    },
    {
      "file": "docs/domain-pack-authoring.md",
      "line": 345,
      "snippet": "\n## Advanced Topics\n\n### Custom Merge Strategies\n\nDomain fields are merged using"
    },
    {
      "file": "docs/domain-pack-authoring.md",
      "line": 347,
      "snippet": "\n### Custom Merge Strategies\n\nDomain fields are merged using the default `concat"
    },
    {
      "file": "docs/domain-pack-authoring.md",
      "line": 351,
      "snippet": "\n### Schema References\n\nYou can use JSON Schema `$ref` to reuse definitions:\n\n``"
    },
    {
      "file": "docs/domain-pack-authoring.md",
      "line": 371,
      "snippet": "\n### Multi-File Schemas\n\nFor complex domains, you can split schemas into multipl"
    },
    {
      "file": "docs/domain-pack-authoring.md",
      "line": 375,
      "snippet": "\n## Support\n\nFor questions or issues:\n1. Check existing domain packs for example"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 1,
      "snippet": "# Phase 4 API Documentation - Intelligence Layer\n\nComplete API reference for Mis"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 6,
      "snippet": "\n## Tool: `optimize_tokens`\n\nOptimize mission content for token efficiency using"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 10,
      "snippet": "\n### MCP Tool Definition\n\n```json\n{\n  \"name\": \"optimize_tokens\",\n  \"description\""
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 50,
      "snippet": "\n### TypeScript API\n\n```typescript\nimport { handleOptimizeTokens } from './tools"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 80,
      "snippet": "\n### Example Request\n\n```json\n{\n  \"missionFile\": \"missions/sprint-04/B4.1_token-"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 91,
      "snippet": "\n### Example Response\n\n```json\n{\n  \"success\": true,\n  \"optimizedContent\": \"missi"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 113,
      "snippet": "\n### Compression Pipeline\n\n1. **Sanitization Pass**: Remove comments, normalize "
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 120,
      "snippet": "\n### Error Handling\n\n| Error | Cause | Solution |\n|-------|-------|----------|\n|"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 130,
      "snippet": "\n## Tool: `score_quality`\n\nAssess mission quality using three-dimensional framew"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 134,
      "snippet": "\n### MCP Tool Definition\n\n```json\n{\n  \"name\": \"score_quality\",\n  \"description\": "
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 158,
      "snippet": "\n### TypeScript API\n\n```typescript\nimport { scoreQuality } from './tools/score-q"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 209,
      "snippet": "\n### Example Request\n\n```json\n{\n  \"missionFile\": \"missions/current.yaml\",\n  \"ver"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 218,
      "snippet": "\n### Example Response\n\n```json\n{\n  \"success\": true,\n  \"score\": {\n    \"total\": 0."
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 266,
      "snippet": "\n### Quality Dimensions\n\n**Clarity (35% weight)**\n- Flesch-Kincaid Grade Level ("
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 289,
      "snippet": "\n## Tool: `analyze_dependencies`\n\nDetect and analyze dependencies between missio"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 293,
      "snippet": "\n### MCP Tool Definition\n\n```json\n{\n  \"name\": \"analyze_dependencies\",\n  \"descrip"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 322,
      "snippet": "\n### TypeScript API\n\n```typescript\nimport { executeAnalyzeDependenciesTool } fro"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 336,
      "snippet": "\n### Example Request (Directory)\n\n```json\n{\n  \"missionDirectory\": \"missions/spri"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 345,
      "snippet": "\n### Example Request (Explicit Paths)\n\n```json\n{\n  \"missionPaths\": [\n    \"missio"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 358,
      "snippet": "\n### Example Response (Summary)\n\n```\n=== Dependency Analysis Report ===\n\nTotal M"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 377,
      "snippet": "\n### Example Response (Mermaid)\n\n```\ngraph TD\n  B4_1[B4.1: Token Optimization]\n "
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 394,
      "snippet": "\n### Dependency Detection Methods\n\n1. **Explicit Dependencies**: Declared in `de"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 402,
      "snippet": "\n## Tool: `split_mission`\n\nAutomatically split complex mission into multiple sub"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 406,
      "snippet": "\n### MCP Tool Definition\n\n```json\n{\n  \"name\": \"split_mission\",\n  \"description\": "
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 446,
      "snippet": "\n### TypeScript API\n\n```typescript\nimport { executeSplitMissionTool } from './to"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 470,
      "snippet": "\n### Example Request\n\n```json\n{\n  \"missionFile\": \"missions/complex-auth.yaml\",\n "
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 481,
      "snippet": "\n### Example Response\n\n```json\n{\n  \"success\": true,\n  \"submissionCount\": 3,\n  \"s"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 498,
      "snippet": "\n## Tool: `suggest_splits`\n\nGet recommendations for whether and how to split a c"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 502,
      "snippet": "\n### MCP Tool Definition\n\n```json\n{\n  \"name\": \"suggest_splits\",\n  \"description\":"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 531,
      "snippet": "\n### TypeScript API\n\n```typescript\nimport { executeSuggestSplitsTool } from './t"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 557,
      "snippet": "\n### Example Request\n\n```json\n{\n  \"missionFile\": \"missions/large-refactor.yaml\","
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 566,
      "snippet": "\n### Example Response\n\n```json\n{\n  \"success\": true,\n  \"shouldSplit\": true,\n  \"co"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 585,
      "snippet": "\n## Common Patterns\n\n### Sequential Quality \u2192 Optimize \u2192 Score\n\n```typescript\n//"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 587,
      "snippet": "\n### Sequential Quality \u2192 Optimize \u2192 Score\n\n```typescript\n// 1. Score initial qu"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 591,
      "snippet": "// 1. Score initial quality\nconst initialQuality = await scoreQuality({\n  missio"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 596,
      "snippet": "\n// 2. Optimize if quality is acceptable\nif (initialQuality.score!.total > 0.7) "
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 605,
      "snippet": "\n  // 3. Re-score after optimization\n  const finalQuality = await scoreQuality({"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 615,
      "snippet": "\n### Dependency-Aware Sprint Execution\n\n```typescript\n// 1. Analyze dependencies"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 619,
      "snippet": "// 1. Analyze dependencies\nconst analysis = await executeAnalyzeDependenciesTool"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 624,
      "snippet": "\n// 2. Extract execution order\nconst executionOrder = parseTopologicalSort(analy"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 627,
      "snippet": "\n// 3. Execute in order\nfor (const missionId of executionOrder) {\n  console.log("
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 631,
      "snippet": "  // Execute mission\n}\n```\n\n### Complexity-Based Splitting\n\n```typescript\n// 1. "
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 634,
      "snippet": "\n### Complexity-Based Splitting\n\n```typescript\n// 1. Check if split needed\nconst"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 638,
      "snippet": "// 1. Check if split needed\nconst suggestions = await executeSuggestSplitsTool({"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 643,
      "snippet": "\n// 2. Split if recommended\nif (suggestions.shouldSplit) {\n  const split = await"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 658,
      "snippet": "\n## Performance Characteristics\n\n| Operation | Time Complexity | Space Complexit"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 675,
      "snippet": "\n## Error Codes\n\n| Code | Message | Resolution |\n|------|---------|------------|"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 687,
      "snippet": "\n## TypeScript Type Definitions\n\n```typescript\n// Shared types across all tools\n"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 691,
      "snippet": "// Shared types across all tools\ntype SupportedModel = 'claude' | 'gpt' | 'gemin"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 696,
      "snippet": "\n// Quality scoring types\ninterface QualityMetrics {\n  clarity: ClarityMetrics;\n"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 725,
      "snippet": "\n// Dependency analysis types\ninterface DependencyGraph {\n  nodes: Map<string, M"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 743,
      "snippet": "\n## Testing\n\nAll Intelligence Layer tools include comprehensive test suites:\n\n``"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 749,
      "snippet": "# Run Phase 4 integration tests\nnpm test -- tests/integration/phase4-intelligenc"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 751,
      "snippet": "\n# Run individual tool tests\nnpm test -- tests/tools/score-quality.test.ts\nnpm t"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 757,
      "snippet": "\n# Run intelligence layer unit tests\nnpm test -- tests/intelligence/\nnpm test --"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 764,
      "snippet": "\n## Version History\n\n### v2.0 (Phase 4) - Intelligence Layer\n- Added `score_qual"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 766,
      "snippet": "\n### v2.0 (Phase 4) - Intelligence Layer\n- Added `score_quality` tool with 3D qu"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 773,
      "snippet": "\n### v1.5 (Phase 3) - Extension System\n- Template extraction, import/export\n- Pa"
    },
    {
      "file": "docs/API_Documentation_Phase4.md",
      "line": 778,
      "snippet": "\n### v1.0 (Phases 1-2) - Foundation\n- MCP server infrastructure\n- Domain pack sy"
    },
    {
      "file": "docs/Token_Validation_Setup.md",
      "line": 1,
      "snippet": "# Token Validation Setup\n\nThis guide captures the required environment variables"
    },
    {
      "file": "docs/Token_Validation_Setup.md",
      "line": 4,
      "snippet": "\n## 1. Local Environment Variables\n\n1. Create or update `.env.local` in the repo"
    },
    {
      "file": "docs/Token_Validation_Setup.md",
      "line": 16,
      "snippet": "\n## 2. Quick Validation Commands\n\nUse these `curl` snippets to confirm both prov"
    },
    {
      "file": "docs/Token_Validation_Setup.md",
      "line": 22,
      "snippet": "# Anthropic (Claude 3 Haiku example)\ncurl -s https://api.anthropic.com/v1/messag"
    },
    {
      "file": "docs/Token_Validation_Setup.md",
      "line": 28,
      "snippet": "\n# Google Generative Language (Gemini 2.5 Pro example)\ncurl -s -X POST \"https://"
    },
    {
      "file": "docs/Token_Validation_Setup.md",
      "line": 36,
      "snippet": "\n### Other Supported Gemini Models\n\nThe key currently has access to the followin"
    },
    {
      "file": "docs/Token_Validation_Setup.md",
      "line": 46,
      "snippet": "\n## 3. CI / Automation Guidance\n\n1. Store the keys as secrets in your CI system "
    },
    {
      "file": "docs/Token_Validation_Setup.md",
      "line": 65,
      "snippet": "\n## 4. Troubleshooting\n\n- **404 for Gemini models**: Run `curl \"https://generati"
    },
    {
      "file": "cmos/research/r1.1_The_Universal_Mission_Framework.md",
      "line": 197,
      "snippet": "\n# Schema for the domainFields block when type is \"Software.TechnicalTask\"\n\n# Th"
    },
    {
      "file": "cmos/research/r1.1_The_Universal_Mission_Framework.md",
      "line": 199,
      "snippet": "\n# The user story provides the human-centric goal and rationale. [13]\nuserStory:"
    },
    {
      "file": "cmos/research/r1.1_The_Universal_Mission_Framework.md",
      "line": 202,
      "snippet": "\n# Technical specifications derived from TDDs, outlining the implementation plan"
    },
    {
      "file": "cmos/research/r1.1_The_Universal_Mission_Framework.md",
      "line": 207,
      "snippet": "\n# Links to visual aids that clarify system structure and interactions. [9, 10]\n"
    },
    {
      "file": "cmos/research/r1.1_The_Universal_Mission_Framework.md",
      "line": 214,
      "snippet": "\n# Non-functional requirements that are critical, measurable success criteria. ["
    },
    {
      "file": "cmos/research/r1.1_The_Universal_Mission_Framework.md",
      "line": 223,
      "snippet": "\n# Explicitly defining scope boundaries to prevent scope creep. [1, 5]\noutOfScop"
    },
    {
      "file": "cmos/research/r1.1_The_Universal_Mission_Framework.md",
      "line": 228,
      "snippet": "\n# A list of key individuals for consultation and approval, ensuring team alignm"
    },
    {
      "file": "cmos/research/r1.1_The_Universal_Mission_Framework.md",
      "line": 241,
      "snippet": "\n# Schema for the domainFields block when type is \"Science.ResearchProtocol\"\n\n# "
    },
    {
      "file": "cmos/research/r1.1_The_Universal_Mission_Framework.md",
      "line": 243,
      "snippet": "\n# The central, overarching question driving the research. [30]\nresearchQuestion"
    },
    {
      "file": "cmos/research/r1.1_The_Universal_Mission_Framework.md",
      "line": 246,
      "snippet": "\n# A specific, testable, and falsifiable statement that the research will invest"
    },
    {
      "file": "cmos/research/r1.1_The_Universal_Mission_Framework.md",
      "line": 249,
      "snippet": "\n# A summary of existing knowledge, identifying the gap this research aims to fi"
    },
    {
      "file": "cmos/research/r1.1_The_Universal_Mission_Framework.md",
      "line": 252,
      "snippet": "\n# The core of the proposal, detailing the practical steps of the research. [31,"
    },
    {
      "file": "cmos/research/r1.1_The_Universal_Mission_Framework.md",
      "line": 255,
      "snippet": "  # The overall approach to the research (e.g., experimental, observational). [3"
    },
    {
      "file": "cmos/research/r1.1_The_Universal_Mission_Framework.md",
      "line": 257,
      "snippet": "  # Description of the study subjects and the selection strategy. [30]\n  populat"
    },
    {
      "file": "cmos/research/r1.1_The_Universal_Mission_Framework.md",
      "line": 259,
      "snippet": "  # Step-by-step description of the experimental or data collection procedures. "
    },
    {
      "file": "cmos/research/r1.1_The_Universal_Mission_Framework.md",
      "line": 264,
      "snippet": "  # The statistical or qualitative methods that will be used to analyze the data"
    },
    {
      "file": "cmos/research/r1.1_The_Universal_Mission_Framework.md",
      "line": 266,
      "snippet": "\n# Required for funding applications and resource planning. [30, 31]\nbudget:\n  -"
    },
    {
      "file": "cmos/research/r1.1_The_Universal_Mission_Framework.md",
      "line": 275,
      "snippet": "\n# A high-level schedule of key project phases. [31]\ntimeline:\n  - milestone: \"I"
    },
    {
      "file": "cmos/research/r1.1_The_Universal_Mission_Framework.md",
      "line": 290,
      "snippet": "\n# Schema for the domainFields block when type is \"Legal.CaseBrief\"\n\n# The full,"
    },
    {
      "file": "cmos/research/r1.1_The_Universal_Mission_Framework.md",
      "line": 292,
      "snippet": "\n# The full, standard citation for the case. [36]\ncaseNameAndCitation: \"Marbury "
    },
    {
      "file": "cmos/research/r1.1_The_Universal_Mission_Framework.md",
      "line": 295,
      "snippet": "\n# A summary of how the case arrived at the current court. [36]\nproceduralHistor"
    },
    {
      "file": "cmos/research/r1.1_The_Universal_Mission_Framework.md",
      "line": 298,
      "snippet": "\n# A concise statement of the legally significant facts that led to the dispute."
    },
    {
      "file": "cmos/research/r1.1_The_Universal_Mission_Framework.md",
      "line": 301,
      "snippet": "\n# The specific legal question(s) the court is being asked to resolve. [36]\nissu"
    },
    {
      "file": "cmos/research/r1.1_The_Universal_Mission_Framework.md",
      "line": 304,
      "snippet": "\n# The court's direct, one-word or short-phrase answer to the issue(s). [36]\nhol"
    },
    {
      "file": "cmos/research/r1.1_The_Universal_Mission_Framework.md",
      "line": 307,
      "snippet": "\n# The general legal principle or doctrine established or affirmed by the case. "
    },
    {
      "file": "cmos/research/r1.1_The_Universal_Mission_Framework.md",
      "line": 310,
      "snippet": "\n# The court's detailed explanation for its holding, applying law to the facts. "
    },
    {
      "file": "cmos/research/r1.1_The_Universal_Mission_Framework.md",
      "line": 313,
      "snippet": "\n# An optional summary of any concurring or dissenting opinions. [36]\ndissenting"
    },
    {
      "file": "cmos/research/r1.1_The_Universal_Mission_Framework.md",
      "line": 320,
      "snippet": "\n# Schema for the domainFields block when type is \"Creative.MarketingCampaign\"\n\n"
    },
    {
      "file": "cmos/research/r1.1_The_Universal_Mission_Framework.md",
      "line": 322,
      "snippet": "\n# A detailed description of the ideal customer for this campaign. [38, 39]\ntarg"
    },
    {
      "file": "cmos/research/r1.1_The_Universal_Mission_Framework.md",
      "line": 330,
      "snippet": "\n# The core messages and value proposition to be communicated. [39, 40]\nkeyMessa"
    },
    {
      "file": "cmos/research/r1.1_The_Universal_Mission_Framework.md",
      "line": 336,
      "snippet": "\n# The platforms and specific tactics that will be used to execute the campaign."
    },
    {
      "file": "cmos/research/r1.1_The_Universal_Mission_Framework.md",
      "line": 345,
      "snippet": "\n# The specific, measurable metrics that will determine the campaign's success. "
    },
    {
      "file": "cmos/research/r1.1_The_Universal_Mission_Framework.md",
      "line": 356,
      "snippet": "\n# A breakdown of the financial resources allocated to the campaign. [37, 40]\nbu"
    },
    {
      "file": "cmos/research/r1.2_Architectural_Design_Specification.md",
      "line": 271,
      "snippet": "\n# /templates/generic_mission.yaml\nschemaType: \"Mission\"\nschemaVersion: \"2.0\"\n\n#"
    },
    {
      "file": "cmos/research/r1.2_Architectural_Design_Specification.md",
      "line": 275,
      "snippet": "\n# Core fields populated by user input via the create_mission tool\nobjective: \"\""
    },
    {
      "file": "cmos/research/r1.2_Architectural_Design_Specification.md",
      "line": 280,
      "snippet": "\n# This section will be populated by the deep merge from a domain template\ndomai"
    },
    {
      "file": "cmos/research/R2.1_Token-Counting-Strategy-Analysis-and-Recommendation.md",
      "line": 73,
      "snippet": "// tokens is a Uint32Array of token IDs\nCode Example for gpt-tokenizer :   \n\nTyp"
    },
    {
      "file": "cmos/research/R2.1_Token-Counting-Strategy-Analysis-and-Recommendation.md",
      "line": 79,
      "snippet": "// tokens is a number of token IDs\n3.2. Strategy 2: Unified Hugging Face Transfo"
    },
    {
      "file": "cmos/research/R2.1_Token-Counting-Strategy-Analysis-and-Recommendation.md",
      "line": 99,
      "snippet": "// This call fetches model files from the Hub on first run\nconst tokenizer = awa"
    },
    {
      "file": "cmos/research/R2.1_Token-Counting-Strategy-Analysis-and-Recommendation.md",
      "line": 102,
      "snippet": "// tokens is a number of token IDs\n3.3. Strategy 3: Low-Level SentencePiece Wrap"
    },
    {
      "file": "cmos/research/R2.1_Token-Counting-Strategy-Analysis-and-Recommendation.md",
      "line": 174,
      "snippet": "// src/intelligence/token-counters.ts\n\nimport { encode as gptEncode } from 'gpt-"
    },
    {
      "file": "cmos/research/R2.1_Token-Counting-Strategy-Analysis-and-Recommendation.md",
      "line": 178,
      "snippet": "\n// In-memory cache to avoid re-initializing tokenizers on every call.\nconst tok"
    },
    {
      "file": "cmos/research/R2.1_Token-Counting-Strategy-Analysis-and-Recommendation.md",
      "line": 190,
      "snippet": "    // This will download the model file on the first call.\n    const tokenizer "
    },
    {
      "file": "cmos/research/R2.1_Token-Counting-Strategy-Analysis-and-Recommendation.md",
      "line": 205,
      "snippet": "        // gpt-tokenizer is synchronous and highly performant.\n        return gp"
    },
    {
      "file": "cmos/research/R2.1_Token-Counting-Strategy-Analysis-and-Recommendation.md",
      "line": 209,
      "snippet": "        // Note: The result of tokenizer.encode() is an object with a 'length' p"
    },
    {
      "file": "cmos/research/R2.1_Token-Counting-Strategy-Analysis-and-Recommendation.md",
      "line": 213,
      "snippet": "        // Temporary fallback: Use a conservative heuristic for Gemini.\n        "
    },
    {
      "file": "cmos/research/R2.1_Token-Counting-Strategy-Analysis-and-Recommendation.md",
      "line": 214,
      "snippet": "        // This estimates tokens based on characters with a 50% safety margin\n  "
    },
    {
      "file": "cmos/research/R2.1_Token-Counting-Strategy-Analysis-and-Recommendation.md",
      "line": 215,
      "snippet": "        // to prevent exceeding context limits due to undercounting.\n        con"
    },
    {
      "file": "cmos/research/R2.1_Token-Counting-Strategy-Analysis-and-Recommendation.md",
      "line": 219,
      "snippet": "\n    // Default fallback heuristic for unknown model families.\n    return Math.c"
    },
    {
      "file": "cmos/context/MASTER_CONTEXT.md",
      "line": 7,
      "snippet": "\n# Mission Protocol Strategy Context\n\n## Current Baseline\n\n- **Assessment Summar"
    },
    {
      "file": "cmos/context/MASTER_CONTEXT.md",
      "line": 9,
      "snippet": "\n## Current Baseline\n\n- **Assessment Summary** (Oct 2025 - Sprint 2 Complete)\n  "
    },
    {
      "file": "cmos/context/MASTER_CONTEXT.md",
      "line": 27,
      "snippet": "\n## Sprint Plan Snapshot\n\n| Sprint | Focus | High-Level Outcomes |\n|--------|---"
    },
    {
      "file": "cmos/context/MASTER_CONTEXT.md",
      "line": 37,
      "snippet": "\n## Sprint 1 Details\n\n- **Mission Backlog (`cmos/missions/backlog.yaml`)**\n  - `"
    },
    {
      "file": "cmos/context/MASTER_CONTEXT.md",
      "line": 53,
      "snippet": "\n## Sprint 2 Details\n\n- **Mission Backlog (`cmos/missions/backlog.yaml`)**\n  - `"
    },
    {
      "file": "cmos/context/MASTER_CONTEXT.md",
      "line": 66,
      "snippet": "\n## Decision Log\n\n- Defer dedicated memory system; rely on flat-file backlog and"
    },
    {
      "file": "cmos/context/MASTER_CONTEXT.md",
      "line": 73,
      "snippet": "\n## Pending Questions for Sprint 3 Planning\n\n1. Which template lint rules should"
    },
    {
      "file": "cmos/context/MASTER_CONTEXT.md",
      "line": 81,
      "snippet": "\n## Integration / Process Reminders\n\n- Mission execution workflow: run missions "
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 1,
      "snippet": "// active_set_optimizer.js\n// Active Set Optimizer for Mission 2.2\n// Maintains "
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 2,
      "snippet": "// Active Set Optimizer for Mission 2.2\n// Maintains <30KB active context throug"
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 3,
      "snippet": "// Maintains <30KB active context through intelligent domain selection and memor"
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 11,
      "snippet": "      // Memory budget settings\n      memory: {\n        maxActiveSizeKB: config."
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 19,
      "snippet": "\n      // Domain state management\n      domainStates: {\n        active: { compre"
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 28,
      "snippet": "\n      // Optimization thresholds\n      optimization: {\n        accessWindowMs: "
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 38,
      "snippet": "\n    // Initialize compressor and state vector\n    this.compressor = new SmartCo"
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 42,
      "snippet": "\n    // Active set management\n    this.activeDomains = new Map();\n    this.domai"
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 48,
      "snippet": "\n    // Performance tracking\n    this.optimizationHistory = [];\n    this.memoryU"
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 52,
      "snippet": "\n    // Current memory usage\n    this.currentMemoryUsage = {\n      totalKB: 0,\n "
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 74,
      "snippet": "      // Step 1: Calculate current memory usage\n      const initialMemory = this"
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 76,
      "snippet": "\n      // Step 2: Update access patterns\n      this.updateAccessPatterns(accessP"
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 79,
      "snippet": "\n      // Step 3: Classify domains by state\n      const domainClassification = t"
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 82,
      "snippet": "\n      // Step 4: Check if optimization is needed\n      const optimizationNeeded"
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 95,
      "snippet": "        // Step 5: Apply optimization strategy\n        const optimizationStrateg"
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 101,
      "snippet": "\n        // Step 6: Execute optimization\n        const optimizedDomains = this.e"
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 108,
      "snippet": "\n        // Step 7: Calculate final memory usage\n        const finalMemory = thi"
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 124,
      "snippet": "\n        // Update internal state\n        this.updateInternalState(optimizedDoma"
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 128,
      "snippet": "\n      // Record optimization\n      this.recordOptimization(result);\n\n      retu"
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 172,
      "snippet": "    // Base domain size\n    let baseSize = JSON.stringify(domain).length;\n\n    /"
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 174,
      "snippet": "\n    // Add context data if this domain is active in current context\n    if (cur"
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 180,
      "snippet": "\n    // Apply compression based on domain state\n    const state = this.getDomain"
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 200,
      "snippet": "\n      // Add new access record\n      history.push({\n        timestamp: now,\n   "
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 208,
      "snippet": "\n      // Clean old access records (outside window)\n      const cutoff = now - t"
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 244,
      "snippet": "\n    // Factor 1: Recent access frequency (40%)\n    const accessScore = this.cal"
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 247,
      "snippet": "\n    // Factor 2: Domain importance (30%)\n    const importanceScore = this.calcu"
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 250,
      "snippet": "\n    // Factor 3: Dependency relationships (20%)\n    const dependencyScore = thi"
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 253,
      "snippet": "\n    // Factor 4: Size efficiency (10%)\n    const sizeScore = this.calculateSize"
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 258,
      "snippet": "\n    // Classify based on total score\n    if (totalScore >= 0.75) return 'active"
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 272,
      "snippet": "\n    // Score recent direct access higher\n    if (recentAccess) {\n      return M"
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 277,
      "snippet": "\n    // Score based on historical access patterns\n    if (accessHistory.length ="
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 294,
      "snippet": "\n    // File count (larger domains might be more important)\n    score += Math.mi"
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 297,
      "snippet": "\n    // Keywords (domains with more keywords are more specific/important)\n    sc"
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 300,
      "snippet": "\n    // Dependencies (domains with more dependencies are central)\n    const tota"
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 313,
      "snippet": "    // Higher score for domains that other domains depend on\n    const dependent"
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 316,
      "snippet": "\n    // Domains that are depended upon are more critical\n    const dependentScor"
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 319,
      "snippet": "\n    // Domains with fewer dependencies are more independent\n    const independe"
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 332,
      "snippet": "\n    // Prefer smaller, more focused domains\n    const sizeEfficiency = Math.max"
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 422,
      "snippet": "\n    // Process each domain based on its classification and strategy\n    Object."
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 439,
      "snippet": "\n    // Check compression cache first\n    if (this.compressionCache.has(cacheKey"
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 449,
      "snippet": "\n    // Apply state-specific optimization\n    switch (state) {\n      case 'activ"
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 454,
      "snippet": "          // Light compression even for active domains in emergency\n          op"
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 481,
      "snippet": "\n    // Cache the result\n    this.compressionCache.set(cacheKey, {\n      domain:"
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 512,
      "snippet": "      // Fallback to original domain if compression fails\n      console.warn(`Do"
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 549,
      "snippet": "    // Update active domains\n    this.activeDomains.clear();\n    optimizedDomain"
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 557,
      "snippet": "\n    // Update memory usage\n    this.currentMemoryUsage = result.finalMemory || "
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 560,
      "snippet": "\n    // Record memory usage history\n    this.memoryUsageHistory.push({\n      tim"
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 566,
      "snippet": "\n    // Keep last 100 records\n    if (this.memoryUsageHistory.length > 100) {\n  "
    },
    {
      "file": "cmos/context/src/active_set_optimizer.js",
      "line": 585,
      "snippet": "\n    // Keep last 50 optimizations\n    if (this.optimizationHistory.length > 50)"
    },
    {
      "file": "cmos/context/src/context_health.js",
      "line": 1,
      "snippet": "// context_health.js\n// Context Health Monitor for CMOS\n// Self-contained health"
    },
    {
      "file": "cmos/context/src/context_health.js",
      "line": 2,
      "snippet": "// Context Health Monitor for CMOS\n// Self-contained health assessment using sta"
    },
    {
      "file": "cmos/context/src/context_health.js",
      "line": 3,
      "snippet": "// Self-contained health assessment using statistical metrics\n\nconst healthThres"
    },
    {
      "file": "cmos/context/src/context_health.js",
      "line": 10,
      "snippet": "    \n    // Track health history for trend analysis\n    this.healthHistory = [];"
    },
    {
      "file": "cmos/context/src/context_health.js",
      "line": 14,
      "snippet": "    \n    // Viability region bounds\n    this.viabilityRegion = this.thresholds.v"
    },
    {
      "file": "cmos/context/src/context_health.js",
      "line": 26,
      "snippet": "    \n    // Prepare context for metric calculations\n    const preparedContext = "
    },
    {
      "file": "cmos/context/src/context_health.js",
      "line": 29,
      "snippet": "    \n    // Calculate all health metrics\n    const assessment = {\n      timestam"
    },
    {
      "file": "cmos/context/src/context_health.js",
      "line": 42,
      "snippet": "    \n    // Determine health status\n    assessment.status = this.determineStatus"
    },
    {
      "file": "cmos/context/src/context_health.js",
      "line": 47,
      "snippet": "    \n    // Add to history\n    this.addToHistory(assessment);\n    \n    // Calcul"
    },
    {
      "file": "cmos/context/src/context_health.js",
      "line": 50,
      "snippet": "    \n    // Calculate trend if we have history\n    if (this.healthHistory.length"
    },
    {
      "file": "cmos/context/src/context_health.js",
      "line": 63,
      "snippet": "    // Convert context to time series format for metrics\n    const observations "
    },
    {
      "file": "cmos/context/src/context_health.js",
      "line": 67,
      "snippet": "      // Extract temporal data from domains\n      Object.keys(context.working_me"
    },
    {
      "file": "cmos/context/src/context_health.js",
      "line": 78,
      "snippet": "    \n    // Add context size as a metric\n    const contextSize = JSON.stringify("
    },
    {
      "file": "cmos/context/src/context_health.js",
      "line": 102,
      "snippet": "    \n    // Factor in number of facts, decisions, and files\n    complexity += (d"
    },
    {
      "file": "cmos/context/src/context_health.js",
      "line": 107,
      "snippet": "    \n    // Status affects complexity\n    if (domainData.status === 'active') co"
    },
    {
      "file": "cmos/context/src/context_health.js",
      "line": 210,
      "snippet": "    \n    // Return worst status\n    if (statuses.includes('critical')) return 'c"
    },
    {
      "file": "cmos/context/src/context_health.js",
      "line": 297,
      "snippet": "    \n    // Trim history if too long\n    if (this.healthHistory.length > this.ma"
    },
    {
      "file": "cmos/context/src/context_health.js",
      "line": 309,
      "snippet": "    \n    // Compare last few assessments\n    const recent = this.healthHistory.s"
    },
    {
      "file": "cmos/context/src/context_health.js",
      "line": 318,
      "snippet": "      \n      // Compare momentum metric as primary indicator\n      if (curr.metr"
    },
    {
      "file": "cmos/context/src/context_health.js",
      "line": 367,
      "snippet": "    \n    // Check if outside viable region\n    if (!latest.inViableRegion) {\n   "
    },
    {
      "file": "cmos/context/src/context_health.js",
      "line": 372,
      "snippet": "    \n    // Check for critical alerts\n    const criticalAlerts = latest.alerts.f"
    },
    {
      "file": "cmos/context/src/context_health.js",
      "line": 378,
      "snippet": "    \n    // Check trend\n    const trend = this.calculateTrend();\n    if (trend ="
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 1,
      "snippet": "// smart_compressor.js\n// State-Aware Compression Engine for Mission 2.1\n// Inte"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 2,
      "snippet": "// State-Aware Compression Engine for Mission 2.1\n// Integrates with Mission 1.2"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 3,
      "snippet": "// Integrates with Mission 1.2's ContextStateVector and ViabilityRegions\n\nconst "
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 10,
      "snippet": "    // Initialize state monitoring components\n    this.stateVector = new Context"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 13,
      "snippet": "\n    // Load compression strategies\n    this.strategies = this.loadCompressionSt"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 16,
      "snippet": "\n    // Performance tracking\n    this.compressionTimes = [];\n    this.compressio"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 21,
      "snippet": "\n    // Compression configuration\n    this.config = {\n      // Target compressio"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 24,
      "snippet": "      // Target compression ratios by zone\n      targetRatios: {\n        optimal"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 32,
      "snippet": "\n      // Performance targets\n      maxProcessingTimeMs: config.maxProcessingTim"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 36,
      "snippet": "\n      // Compression thresholds\n      minCompressionThreshold: config.minCompre"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 40,
      "snippet": "\n      // Centrality preservation settings\n      preserveHighCentrality: config."
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 59,
      "snippet": "      // Calculate current state and classification\n      const state = this.sta"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 62,
      "snippet": "\n      // Select compression strategy based on zone and trajectory\n      const s"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 65,
      "snippet": "\n      // Apply multi-stage compression\n      let compressed = this.applyCompres"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 68,
      "snippet": "\n      // Validate compression maintains viability\n      let validation = this.v"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 71,
      "snippet": "\n      // Optional second pass: boost compression if target not met\n      if (op"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 81,
      "snippet": "\n      // Record compression performance\n      const processingTime = Date.now()"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 114,
      "snippet": "\n    // Calculate trajectory for dynamic adjustment\n    const velocity = this.st"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 118,
      "snippet": "\n    // Adjust strategy based on trajectory\n    let intensityMultiplier = 1.0;\n "
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 126,
      "snippet": "\n    // Override with user preferences\n    const targetRatio = options.targetRat"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 147,
      "snippet": "\n    // Stage 1: Temporal compression (remove stable/unchanged sections)\n    if "
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 152,
      "snippet": "\n    // Stage 2: Centrality-based preservation\n    if (strategy.preserveCentrali"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 157,
      "snippet": "\n    // Stage 3: Zone-adaptive compression\n    compressed = this.applyZoneAdapti"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 160,
      "snippet": "\n    // Stage 4: Emergency compression if needed\n    if (strategy.emergencyMode)"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 179,
      "snippet": "\n        // Always remove heavy optional fields\n        delete d.context_data;\n "
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 185,
      "snippet": "\n        // Trim files aggressively\n        if (Array.isArray(d.files_created)) "
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 190,
      "snippet": "\n        // Trim decisions aggressively\n        if (Array.isArray(d.decisions_ma"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 195,
      "snippet": "\n        // Trim facts with safe floor (force strong reduction)\n        if (Arra"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 218,
      "snippet": "\n    // Identify stable domains based on temporal hysteresis\n    const stableDom"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 221,
      "snippet": "\n    // Compress stable domains more aggressively\n    if (context.working_memory"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 245,
      "snippet": "\n    // Preserve high-centrality domains with minimal compression\n    Object.key"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 251,
      "snippet": "        // High centrality - preserve with minimal compression\n        domains[d"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 254,
      "snippet": "        // Low centrality - apply normal compression\n        domains[domainKey] "
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 267,
      "snippet": "\n    // Determine actual zone based on target ratio\n    let effectiveZone = stra"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 270,
      "snippet": "\n    // Override zone if target ratio demands more aggressive compression\n    if"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 279,
      "snippet": "\n    // Apply different compression strategies by effective zone\n    switch (eff"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 309,
      "snippet": "\n    // Keep only critical facts from active domains\n    if (context.working_mem"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 331,
      "snippet": "\n    // Calculate relevance score by comparing compressed state\n    const compre"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 429,
      "snippet": "      // Use a more forgiving preservation calculation that accounts for compres"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 431,
      "snippet": "\n      // Bonus for maintaining reasonable values even after compression\n      c"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 437,
      "snippet": "\n    // Additional bonus for maintaining essential structure\n    if (compressedS"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 442,
      "snippet": "\n    // Essentials-preservation bonus\n    try {\n      if (compressed && compress"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 458,
      "snippet": "    // Simple implementation - identify domains unchanged in recent history\n    "
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 463,
      "snippet": "\n    // Check temporal hysteresis trend for each domain\n    Object.keys(context."
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 484,
      "snippet": "\n      // Score based on activity and connections\n      if (domain.status === 'a"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 499,
      "snippet": "\n    // Compress arrays proportionally with minimum thresholds\n    if (compresse"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 504,
      "snippet": "\n      // Compress individual facts if ratio is very low\n      if (ratio < 0.3) "
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 520,
      "snippet": "        // Truncate decision strings for extra compression\n        compressed.de"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 535,
      "snippet": "\n    // Remove optional fields when compression is aggressive\n    if (ratio < 0."
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 546,
      "snippet": "\n  // Zone-specific compression methods\n  applyCrisisCompression(context, ratio)"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 560,
      "snippet": "          // Keep minimal content for active domains\n          compressed.workin"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 563,
      "snippet": "          // Very aggressive compression for inactive domains\n          compress"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 584,
      "snippet": "\n        // More aggressive compression for warning zone\n        compressed.work"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 587,
      "snippet": "\n        // Further reduce non-essential content\n        if (domain.status !== '"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 617,
      "snippet": "\n    // Light compression - mainly remove redundancy\n    if (compressed.working_"
    },
    {
      "file": "cmos/context/src/smart_compressor.js",
      "line": 647,
      "snippet": "\n    // Maintain history limits\n    if (this.compressionTimes.length > 100) {\n  "
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 1,
      "snippet": "// context_alerts.js\n// Alert System with Escalation for Mission 3.1\n// Provides"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 2,
      "snippet": "// Alert System with Escalation for Mission 3.1\n// Provides intelligent alerting"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 3,
      "snippet": "// Provides intelligent alerting for critical anti-patterns requiring human inte"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 8,
      "snippet": "      // Alert thresholds\n      thresholds: {\n        lowSeverity: config.thresh"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 16,
      "snippet": "\n      // Escalation settings\n      escalation: {\n        enableAutoEscalation: "
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 25,
      "snippet": "\n      // Alert management\n      management: {\n        maxActiveAlerts: config.m"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 35,
      "snippet": "\n      // Notification settings\n      notifications: {\n        enableConsoleNoti"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 45,
      "snippet": "\n    // Alert state\n    this.activeAlerts = new Map();\n    this.alertHistory = ["
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 51,
      "snippet": "\n    // Alert statistics\n    this.alertStats = {\n      total: 0,\n      byLevel: "
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 61,
      "snippet": "\n    // Event handling\n    this.eventListeners = new Map();\n\n    // Pattern-spec"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 64,
      "snippet": "\n    // Pattern-specific alert configurations\n    this.patternConfigs = this.ini"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 81,
      "snippet": "      // Process each detected pattern\n      detectionResult.patterns.forEach(pa"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 89,
      "snippet": "\n      // Check for meta-patterns (multiple related alerts)\n      const metaAler"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 96,
      "snippet": "\n      // Update alert statistics\n      this.updateAlertStatistics(generatedAler"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 125,
      "snippet": "\n    // Skip if below alert threshold\n    if (alertLevel === 'info' && !options."
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 179,
      "snippet": "\n    // Escalate level if recovery failed\n    const effectiveSeverity = recovery"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 200,
      "snippet": "\n    // Check deduplication window\n    const recentSimilar = Array.from(this.act"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 208,
      "snippet": "      // Update existing alert instead of creating new one\n      this.updateExis"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 212,
      "snippet": "\n    // Check maximum active alerts limit\n    if (this.activeAlerts.size >= this"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 215,
      "snippet": "      // Remove oldest non-critical alert\n      this.removeOldestNonCriticalAler"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 226,
      "snippet": "    // Add to active alerts\n    this.activeAlerts.set(alert.id, alert);\n\n    // "
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 228,
      "snippet": "\n    // Set up escalation timer if applicable\n    if (alert.escalation.canEscala"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 233,
      "snippet": "\n    // Send notifications\n    this.sendNotification(alert, 'created');\n\n    // "
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 236,
      "snippet": "\n    // Emit event\n    this.emit('alert_created', alert);\n\n    // Update counter"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 239,
      "snippet": "\n    // Update counters\n    this.incrementAlertCount(alert.pattern.type);\n\n    r"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 252,
      "snippet": "\n    // Update key fields\n    existing.pattern.severity = Math.max(existing.patt"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 259,
      "snippet": "\n    // Refresh expiration\n    existing.expiresAt = Date.now() + this.config.man"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 262,
      "snippet": "\n    // Send notification\n    this.sendNotification(existing, 'updated');\n\n    /"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 265,
      "snippet": "\n    // Emit event\n    this.emit('alert_updated', existing);\n\n    return true;\n "
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 278,
      "snippet": "\n    // Mark as resolved\n    alert.resolved = {\n      timestamp: Date.now(),\n   "
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 285,
      "snippet": "\n    // Remove from active alerts\n    this.activeAlerts.delete(alertId);\n\n    //"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 288,
      "snippet": "\n    // Cancel escalation timer\n    this.cancelEscalation(alertId);\n\n    // Add "
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 291,
      "snippet": "\n    // Add to history\n    this.addToHistory(alert);\n\n    // Send notification\n "
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 294,
      "snippet": "\n    // Send notification\n    this.sendNotification(alert, 'resolved');\n\n    // "
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 297,
      "snippet": "\n    // Emit event\n    this.emit('alert_resolved', alert);\n\n    // Update statis"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 300,
      "snippet": "\n    // Update statistics\n    this.alertStats.resolved++;\n\n    return true;\n  }\n"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 313,
      "snippet": "\n    // Check escalation limits\n    if (alert.escalation.level >= this.config.es"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 318,
      "snippet": "\n    // Escalate\n    alert.escalation.level++;\n    alert.escalation.escalatedAt "
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 323,
      "snippet": "\n    // Update alert level\n    const escalationLevels = ['info', 'warning', 'err"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 330,
      "snippet": "\n    // Schedule next escalation if not at max level\n    if (alert.escalation.le"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 335,
      "snippet": "\n    // Send escalation notification\n    this.sendNotification(alert, 'escalated"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 338,
      "snippet": "\n    // Emit event\n    this.emit('alert_escalated', alert);\n\n    // Update stati"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 341,
      "snippet": "\n    // Update statistics\n    this.alertStats.escalated++;\n\n    return true;\n  }"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 352,
      "snippet": "    // Cancel existing timer\n    this.cancelEscalation(alertId);\n\n    // Schedul"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 354,
      "snippet": "\n    // Schedule new escalation\n    const timer = setTimeout(() => {\n      this."
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 361,
      "snippet": "\n    // Update alert with next escalation time\n    const alert = this.activeAler"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 378,
      "snippet": "\n    // Clear next escalation time\n    const alert = this.activeAlerts.get(alert"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 391,
      "snippet": "\n    // Pattern: Multiple high-severity alerts (system degradation)\n    const hi"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 402,
      "snippet": "\n    // Pattern: Cascading failures (context explosion + memory leak)\n    const "
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 466,
      "snippet": "\n    // Add pattern-specific guidance\n    const patternConfig = this.patternConf"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 474,
      "snippet": "\n    // Add recovery-specific guidance\n    if (recoveryResult && !recoveryResult"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 494,
      "snippet": "\n    // Console notification\n    if (this.config.notifications.enableConsoleNoti"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 499,
      "snippet": "\n    // Event notification\n    if (this.config.notifications.enableEventNotifica"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 524,
      "snippet": "      // Simple text format\n      const recoveryStatus = alert.recovery.attempte"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 623,
      "snippet": "\n    // Maintain history size limit\n    if (this.alertHistory.length > this.conf"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 879,
      "snippet": "    // Clear all escalation timers\n    this.escalationTimers.forEach(timer => cl"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 882,
      "snippet": "\n    // Clear all active alerts\n    this.activeAlerts.clear();\n\n    // Clear eve"
    },
    {
      "file": "cmos/context/src/context_alerts.js",
      "line": 885,
      "snippet": "\n    // Clear event listeners\n    this.eventListeners.clear();\n\n    this.emit('c"
    },
    {
      "file": "cmos/context/src/context_state.js",
      "line": 1,
      "snippet": "// context_state.js\n// 4-Dimensional Context State Vector Implementation\n// Maps"
    },
    {
      "file": "cmos/context/src/context_state.js",
      "line": 2,
      "snippet": "// 4-Dimensional Context State Vector Implementation\n// Maps context health to n"
    },
    {
      "file": "cmos/context/src/context_state.js",
      "line": 3,
      "snippet": "// Maps context health to normalized [0,1]^4 space (Form, Function, Behavior, Co"
    },
    {
      "file": "cmos/context/src/context_state.js",
      "line": 12,
      "snippet": "\n    // Viability region thresholds\n    this.viabilityThreshold = config.viabili"
    },
    {
      "file": "cmos/context/src/context_state.js",
      "line": 15,
      "snippet": "\n    // Dimension weights for overall state calculation\n    this.dimensionWeight"
    },
    {
      "file": "cmos/context/src/context_state.js",
      "line": 23,
      "snippet": "\n    // Performance tracking\n    this.calculationTimes = [];\n  }\n\n  /**\n   * Cal"
    },
    {
      "file": "cmos/context/src/context_state.js",
      "line": 36,
      "snippet": "    // Get health assessment from Mission 1.1\n    const healthAssessment = this."
    },
    {
      "file": "cmos/context/src/context_state.js",
      "line": 38,
      "snippet": "\n    // Calculate each dimension\n    const state = {\n      Form: this.calculateF"
    },
    {
      "file": "cmos/context/src/context_state.js",
      "line": 49,
      "snippet": "\n    // Calculate overall state magnitude\n    state.magnitude = this.calculateMa"
    },
    {
      "file": "cmos/context/src/context_state.js",
      "line": 56,
      "snippet": "\n    // Add to history\n    this.addToHistory(state);\n\n    return state;\n  }\n\n  /"
    },
    {
      "file": "cmos/context/src/context_state.js",
      "line": 69,
      "snippet": "\n    // Schema compliance (40% of Form)\n    const schemaCompliance = this.assess"
    },
    {
      "file": "cmos/context/src/context_state.js",
      "line": 73,
      "snippet": "\n    // Size efficiency (30% of Form)\n    const sizeEfficiency = this.assessSize"
    },
    {
      "file": "cmos/context/src/context_state.js",
      "line": 77,
      "snippet": "\n    // Structural symmetry from health metrics (30% of Form)\n    const structur"
    },
    {
      "file": "cmos/context/src/context_state.js",
      "line": 91,
      "snippet": "\n    // Semantic relevance (50% of Function)\n    const semanticRelevance = this."
    },
    {
      "file": "cmos/context/src/context_state.js",
      "line": 95,
      "snippet": "\n    // Intent preservation (30% of Function)\n    const intentPreservation = thi"
    },
    {
      "file": "cmos/context/src/context_state.js",
      "line": 99,
      "snippet": "\n    // Functional momentum from health metrics (20% of Function)\n    const func"
    },
    {
      "file": "cmos/context/src/context_state.js",
      "line": 113,
      "snippet": "\n    // Temporal Hysteresis (25% of Behavior)\n    const hysteresisHealth = this."
    },
    {
      "file": "cmos/context/src/context_state.js",
      "line": 117,
      "snippet": "\n    // Temporal Complexity (25% of Behavior)\n    const complexityHealth = this."
    },
    {
      "file": "cmos/context/src/context_state.js",
      "line": 121,
      "snippet": "\n    // Directional Momentum (25% of Behavior)\n    const momentumHealth = this.n"
    },
    {
      "file": "cmos/context/src/context_state.js",
      "line": 125,
      "snippet": "\n    // Performance efficiency (25% of Behavior)\n    const performanceHealth = t"
    },
    {
      "file": "cmos/context/src/context_state.js",
      "line": 139,
      "snippet": "\n    // Queue Position Fairness (40% of Context)\n    const fairnessHealth = this"
    },
    {
      "file": "cmos/context/src/context_state.js",
      "line": 143,
      "snippet": "\n    // Dependency health (30% of Context)\n    const dependencyHealth = this.ass"
    },
    {
      "file": "cmos/context/src/context_state.js",
      "line": 147,
      "snippet": "\n    // Coupling balance (30% of Context)\n    const couplingBalance = this.asses"
    },
    {
      "file": "cmos/context/src/context_state.js",
      "line": 164,
      "snippet": "\n    // For metrics where higher is better (momentum, fairness, symmetry)\n    if"
    },
    {
      "file": "cmos/context/src/context_state.js",
      "line": 169,
      "snippet": "\n    // For metrics where lower is better (hysteresis, complexity)\n    if (['hys"
    },
    {
      "file": "cmos/context/src/context_state.js",
      "line": 185,
      "snippet": "\n    // Check for required structure elements\n    if (context.working_memory) co"
    },
    {
      "file": "cmos/context/src/context_state.js",
      "line": 217,
      "snippet": "\n    // Higher relevance with more active domains and critical facts\n    const a"
    },
    {
      "file": "cmos/context/src/context_state.js",
      "line": 234,
      "snippet": "\n    // Intent preserved through decisions and deliverables\n    const decisionSc"
    },
    {
      "file": "cmos/context/src/context_state.js",
      "line": 285,
      "snippet": "\n    // Lower variance indicates better balance\n    return Math.max(0, 1 - (vari"
    },
    {
      "file": "cmos/context/src/context_state.js",
      "line": 373,
      "snippet": "\n    // Detect degradation patterns\n    const recentStates = this.history.slice("
    },
    {
      "file": "cmos/context/src/context_state.js",
      "line": 394,
      "snippet": "\n    // Detect oscillations\n    const magnitudes = recentStates.map(s => s.magni"
    },
    {
      "file": "cmos/context/src/context_state.js",
      "line": 430,
      "snippet": "\n    // Simple peak/valley detection\n    const peaks = [];\n    const valleys = ["
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 1,
      "snippet": "// domain_discovery.js\n// Domain Discovery Engine for Mission 2.2\n// Automatical"
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 2,
      "snippet": "// Domain Discovery Engine for Mission 2.2\n// Automatically discovers domains fr"
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 3,
      "snippet": "// Automatically discovers domains from project structure, dependencies, and usa"
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 11,
      "snippet": "      // File patterns that indicate domain boundaries\n      domainIndicators: {"
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 18,
      "snippet": "\n      // Clustering parameters\n      clustering: {\n        minDomainSize: confi"
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 26,
      "snippet": "\n      // Semantic analysis settings\n      semantic: {\n        enableKeywordExtr"
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 38,
      "snippet": "\n    // Discovery cache\n    this.discoveryCache = new Map();\n    this.lastDiscov"
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 54,
      "snippet": "      // Check cache first\n      const cacheKey = this.getCacheKey(projectPath, "
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 59,
      "snippet": "\n      // Step 1: Analyze project structure\n      const structureAnalysis = awai"
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 62,
      "snippet": "\n      // Step 2: Extract file dependencies\n      const dependencyGraph = this.e"
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 65,
      "snippet": "\n      // Step 3: Perform semantic clustering\n      const semanticClusters = thi"
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 68,
      "snippet": "\n      // Step 4: Apply structural clustering\n      const structuralClusters = t"
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 71,
      "snippet": "\n      // Step 5: Merge clustering results\n      const mergedDomains = this.merg"
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 74,
      "snippet": "\n      // Step 6: Validate and refine domains\n      const validatedDomains = thi"
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 77,
      "snippet": "\n      // Step 7: Create domain definitions\n      const domainDefinitions = this"
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 98,
      "snippet": "\n      // Cache result\n      this.discoveryCache.set(cacheKey, result);\n      th"
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 125,
      "snippet": "\n          // Skip excluded patterns\n          if (this.shouldExclude(relativeFu"
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 138,
      "snippet": "\n            // Recurse into subdirectories\n            scanDirectory(fullPath, "
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 155,
      "snippet": "\n              // Extract content for analysis\n              try {\n             "
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 166,
      "snippet": "\n              // Track file patterns\n              const pattern = this.extract"
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 177,
      "snippet": "        // Skip directories we can't read\n      }\n    };\n\n    scanDirectory(proj"
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 201,
      "snippet": "\n    // Resolve relative imports to actual files\n    const resolvedGraph = new M"
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 223,
      "snippet": "\n    // JavaScript/TypeScript imports\n    const importRegex = /(?:import|require"
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 230,
      "snippet": "\n      // Skip external dependencies (non-relative paths)\n      if (!importPath."
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 240,
      "snippet": "\n    // Function calls and references\n    const callRegex = /(\\w+)\\s*\\(/g;\n    c"
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 265,
      "snippet": "\n    // Normalize path separators\n    resolvedPath = resolvedPath.replace(/\\\\/g,"
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 268,
      "snippet": "\n    // Try different extensions if not specified\n    const possiblePaths = [\n  "
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 306,
      "snippet": "\n    // Use simple hierarchical clustering\n    let currentClusters = files.map(f"
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 318,
      "snippet": "\n      // Find most similar clusters to merge\n      for (let i = 0; i < currentC"
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 336,
      "snippet": "\n      // Merge clusters\n      const mergedCluster = this.mergeTwoClusters(\n    "
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 342,
      "snippet": "\n      // Remove original clusters and add merged one\n      currentClusters = [\n"
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 356,
      "snippet": "\n    // Fallback: if no clusters after filtering, group by directory structure o"
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 378,
      "snippet": "        // Minimal batching of size 2 to ensure at least some clusters\n        c"
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 404,
      "snippet": "\n    // Group by top-level directories\n    const topLevelDirs = directories.filt"
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 432,
      "snippet": "\n    // Start with structural clusters as base\n    structuralClusters.forEach(st"
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 445,
      "snippet": "\n      // Find semantic clusters that overlap with this structural cluster\n     "
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 451,
      "snippet": "          // Merge semantic cluster into domain\n          domain.files.push(...s"
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 457,
      "snippet": "\n      // Add dependency information\n      domain.dependencies = this.extractDom"
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 463,
      "snippet": "\n    // Add orphaned semantic clusters as separate domains\n    semanticClusters."
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 492,
      "snippet": "      // Size validation\n      if (domain.files.length < this.config.clustering."
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 495,
      "snippet": "\n      // Coherence validation\n      const coherenceScore = this.calculateDomain"
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 499,
      "snippet": "\n      // Completeness validation\n      const completenessScore = this.calculate"
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 557,
      "snippet": "    // Extract pattern based on naming convention\n    const name = file.name.toL"
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 583,
      "snippet": "\n    // Primary threshold\n    const minFreq = this.config.semantic.keywordMinFre"
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 587,
      "snippet": "\n    // Fallback for small sets: relax threshold if empty\n    if (entries.length"
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 713,
      "snippet": "    // Simple coherence based on keyword overlap\n    const allKeywords = domain."
    },
    {
      "file": "cmos/context/src/domain_discovery.js",
      "line": 721,
      "snippet": "    // Completeness based on directory coverage\n    const totalFiles = structure"
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 1,
      "snippet": "// domain_dependencies.js\n// Dependency Mapping and Relationship Tracking for Mi"
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 2,
      "snippet": "// Dependency Mapping and Relationship Tracking for Mission 2.2\n// Tracks relati"
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 3,
      "snippet": "// Tracks relationships between domains, manages dependency graphs, and optimize"
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 8,
      "snippet": "      // Dependency analysis settings\n      analysis: {\n        maxDepth: config"
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 15,
      "snippet": "\n      // Relationship strength thresholds\n      relationships: {\n        strong"
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 23,
      "snippet": "\n      // Performance thresholds\n      performance: {\n        maxAnalysisTimeMs:"
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 31,
      "snippet": "\n    // Dependency tracking\n    this.dependencyGraph = new Map();\n    this.relat"
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 37,
      "snippet": "\n    // Analysis cache\n    this.analysisCache = new Map();\n    this.lastAnalysis"
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 41,
      "snippet": "\n    // Performance tracking\n    this.analysisHistory = [];\n  }\n\n  /**\n   * Buil"
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 56,
      "snippet": "      // Step 1: Build domain-level dependency graph\n      this.buildDomainGraph"
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 58,
      "snippet": "\n      // Step 2: Analyze relationship strengths\n      this.analyzeRelationshipS"
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 61,
      "snippet": "\n      // Step 3: Detect circular dependencies\n      this.detectCircularDependen"
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 64,
      "snippet": "\n      // Step 4: Identify critical paths\n      this.identifyCriticalPaths();\n\n "
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 67,
      "snippet": "\n      // Step 5: Calculate loading priorities\n      const loadingOrder = this.c"
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 70,
      "snippet": "\n      // Step 6: Generate relationship metrics\n      const metrics = this.gener"
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 100,
      "snippet": "\n    // Initialize graph with all domains\n    domains.forEach(domain => {\n      "
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 110,
      "snippet": "\n    // Create lookup of file path -> set of domains containing that file path\n "
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 119,
      "snippet": "\n    // Build cross-domain dependencies (handle duplicate file paths across doma"
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 181,
      "snippet": "\n    // Factor 1: Number of file-level dependencies (40%)\n    const dependencyCo"
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 187,
      "snippet": "\n    // Factor 2: Bidirectional coupling (30%)\n    const reverseDeps = targetNod"
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 191,
      "snippet": "\n    // Factor 3: Shared functionality/keywords (20%)\n    const sharedKeywords ="
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 195,
      "snippet": "\n    // Factor 4: Size similarity (10%)\n    const sizeRatio = Math.min(sourceDom"
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 253,
      "snippet": "        // Found circular dependency\n        const cycleStart = path.indexOf(dom"
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 313,
      "snippet": "\n    // Find root domains (no incoming edges: no dependents)\n    const rootDomai"
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 321,
      "snippet": "\n    // Find longest paths from each root\n    rootDomains.forEach(rootId => {\n  "
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 338,
      "snippet": "\n    // Sort by strength descending\n    this.criticalPaths.sort((a, b) => b.stre"
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 396,
      "snippet": "\n    // Calculate in-degrees (topological sort preparation)\n    this.dependencyG"
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 407,
      "snippet": "\n    // Add domains with no dependencies to queue\n    inDegree.forEach((degree, "
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 417,
      "snippet": "\n    // Process queue with priority consideration\n    while (queue.length > 0) {"
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 420,
      "snippet": "      // Sort by priority (higher priority first)\n      queue.sort((a, b) => b.p"
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 429,
      "snippet": "\n      // Update in-degrees and add newly available domains\n      const node = t"
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 456,
      "snippet": "\n    // Factor 1: Number of dependents (40%)\n    const dependentScore = node.dep"
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 459,
      "snippet": "\n    // Factor 2: Critical path involvement (30%)\n    const criticalScore = this"
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 462,
      "snippet": "\n    // Factor 3: Domain size/complexity (20%)\n    const sizeScore = Math.min(1,"
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 465,
      "snippet": "\n    // Factor 4: Relationship strength average (10%)\n    let avgStrength = 0;\n "
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 491,
      "snippet": "\n    // High priority domains - preload\n    if (priority > 0.7) return 'preload'"
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 494,
      "snippet": "\n    // Large domains - lazy load\n    if (domain.files.length > 30) return 'lazy"
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 497,
      "snippet": "\n    // Domains with many dependencies - staged load\n    if (node.dependencies.s"
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 519,
      "snippet": "\n    // Calculate relationship metrics\n    let totalStrength = 0;\n    this.relat"
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 529,
      "snippet": "\n    // Count isolated domains\n    this.dependencyGraph.forEach(node => {\n      "
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 536,
      "snippet": "\n    // Calculate max depth\n    metrics.maxDepth = Math.max(...this.criticalPath"
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 539,
      "snippet": "\n    // Calculate complexity score\n    metrics.complexity = this.calculateGraphC"
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 555,
      "snippet": "\n    // Complexity factors\n    const densityFactor = e / (n * (n - 1)); // Edge "
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 570,
      "snippet": "\n    // Identify optimization opportunities\n    this.circularDependencies.forEac"
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 580,
      "snippet": "\n    // Identify overly coupled domains\n    this.relationships.forEach(rel => {\n"
    },
    {
      "file": "cmos/context/src/domain_dependencies.js",
      "line": 642,
      "snippet": "\n    // Keep last 50 analyses\n    if (this.analysisHistory.length > 50) {\n      "
    },
    {
      "file": "cmos/context/src/anti_patterns.js",
      "line": 1,
      "snippet": "// anti_patterns.js\n// Core Anti-Pattern Detection Engine for Mission 3.1\n// Int"
    },
    {
      "file": "cmos/context/src/anti_patterns.js",
      "line": 2,
      "snippet": "// Core Anti-Pattern Detection Engine for Mission 3.1\n// Integrates with all pre"
    },
    {
      "file": "cmos/context/src/anti_patterns.js",
      "line": 3,
      "snippet": "// Integrates with all previous missions to detect and prevent context degradati"
    },
    {
      "file": "cmos/context/src/anti_patterns.js",
      "line": 13,
      "snippet": "    // Core dependencies from previous missions\n    this.stateVector = stateVect"
    },
    {
      "file": "cmos/context/src/anti_patterns.js",
      "line": 17,
      "snippet": "\n    // Mission 3.1 components\n    this.recoveryStrategies = new RecoveryStrateg"
    },
    {
      "file": "cmos/context/src/anti_patterns.js",
      "line": 21,
      "snippet": "\n    // Configuration with sensible defaults\n    this.config = {\n      threshold"
    },
    {
      "file": "cmos/context/src/anti_patterns.js",
      "line": 58,
      "snippet": "\n    // Detection state\n    this.detectionHistory = [];\n    this.recoveryAttempt"
    },
    {
      "file": "cmos/context/src/anti_patterns.js",
      "line": 64,
      "snippet": "\n    // Performance tracking\n    this.detectionTimes = [];\n    this.recoveryStat"
    },
    {
      "file": "cmos/context/src/anti_patterns.js",
      "line": 73,
      "snippet": "\n    // Event handling\n    this.eventListeners = new Map();\n\n    // Initialize c"
    },
    {
      "file": "cmos/context/src/anti_patterns.js",
      "line": 76,
      "snippet": "\n    // Initialize continuous monitoring if enabled\n    if (this.config.monitori"
    },
    {
      "file": "cmos/context/src/anti_patterns.js",
      "line": 94,
      "snippet": "      // Calculate current state using Mission 1.2 ContextStateVector\n      cons"
    },
    {
      "file": "cmos/context/src/anti_patterns.js",
      "line": 97,
      "snippet": "\n      // Detect all anti-patterns\n      const detectedPatterns = [];\n\n      // "
    },
    {
      "file": "cmos/context/src/anti_patterns.js",
      "line": 100,
      "snippet": "\n      // 1. Context Rot Detection (via Temporal Hysteresis)\n      const context"
    },
    {
      "file": "cmos/context/src/anti_patterns.js",
      "line": 104,
      "snippet": "\n      // 2. Context Explosion Detection (via Memory + TDM)\n      const contextE"
    },
    {
      "file": "cmos/context/src/anti_patterns.js",
      "line": 108,
      "snippet": "\n      // 3. Memory Leak Detection\n      const memoryLeak = this.detectMemoryLea"
    },
    {
      "file": "cmos/context/src/anti_patterns.js",
      "line": 112,
      "snippet": "\n      // 4. State Oscillation Detection\n      const stateOscillation = this.det"
    },
    {
      "file": "cmos/context/src/anti_patterns.js",
      "line": 116,
      "snippet": "\n      // 5. Domain Bloat Detection\n      const domainBloat = this.detectDomainB"
    },
    {
      "file": "cmos/context/src/anti_patterns.js",
      "line": 120,
      "snippet": "\n      // 6. Compression Degradation Detection\n      const compressionDegradatio"
    },
    {
      "file": "cmos/context/src/anti_patterns.js",
      "line": 124,
      "snippet": "\n      // Apply recovery strategies for detected patterns\n      const recoveryRe"
    },
    {
      "file": "cmos/context/src/anti_patterns.js",
      "line": 133,
      "snippet": "\n      // Update detection history\n      const detectionResult = {\n        times"
    },
    {
      "file": "cmos/context/src/anti_patterns.js",
      "line": 147,
      "snippet": "\n      // Process alerts for detected patterns and recovery results\n      const "
    },
    {
      "file": "cmos/context/src/anti_patterns.js",
      "line": 151,
      "snippet": "\n      // Emit events for monitoring\n      if (detectedPatterns.length > 0) {\n  "
    },
    {
      "file": "cmos/context/src/anti_patterns.js",
      "line": 184,
      "snippet": "\n    // Check current breach\n    if (hysteresis <= this.config.thresholds.tempor"
    },
    {
      "file": "cmos/context/src/anti_patterns.js",
      "line": 187,
      "snippet": "\n    // Check sustained breach in history\n    const recentStates = this.stateVec"
    },
    {
      "file": "cmos/context/src/anti_patterns.js",
      "line": 220,
      "snippet": "\n    // Memory size explosion\n    if (currentMemoryKB > this.config.thresholds.m"
    },
    {
      "file": "cmos/context/src/anti_patterns.js",
      "line": 243,
      "snippet": "\n    // Temporal complexity explosion\n    if (typeof complexity === 'number' && "
    },
    {
      "file": "cmos/context/src/anti_patterns.js",
      "line": 430,
      "snippet": "    // Check recovery attempt limits\n    const attempts = this.recoveryAttempts."
    },
    {
      "file": "cmos/context/src/anti_patterns.js",
      "line": 440,
      "snippet": "\n    // Record recovery attempt\n    this.recoveryAttempts.set(antiPattern.type, "
    },
    {
      "file": "cmos/context/src/anti_patterns.js",
      "line": 445,
      "snippet": "      // Use the sophisticated RecoveryStrategies module\n      const dependencie"
    },
    {
      "file": "cmos/context/src/anti_patterns.js",
      "line": 458,
      "snippet": "\n      // Record recovery stats\n      this.recordRecoveryResult(antiPattern.type"
    },
    {
      "file": "cmos/context/src/anti_patterns.js",
      "line": 463,
      "snippet": "        // Reset attempt count on success\n        this.recoveryAttempts.delete(a"
    },
    {
      "file": "cmos/context/src/anti_patterns.js",
      "line": 575,
      "snippet": "\n    // Maintain history limits\n    if (this.detectionHistory.length > this.conf"
    },
    {
      "file": "cmos/context/src/anti_patterns.js",
      "line": 627,
      "snippet": "      // Create minimal context for monitoring\n      const context = this.create"
    },
    {
      "file": "cmos/context/src/anti_patterns.js",
      "line": 726,
      "snippet": "\n    // Cleanup integrated components\n    if (this.recoveryStrategies) {\n      /"
    },
    {
      "file": "cmos/context/src/anti_patterns.js",
      "line": 729,
      "snippet": "      // RecoveryStrategies doesn't have destroy method, but we could add one\n  "
    },
    {
      "file": "cmos/context/src/state_calculator.js",
      "line": 1,
      "snippet": "// state_calculator.js\n// Specialized normalization and calculation functions fo"
    },
    {
      "file": "cmos/context/src/state_calculator.js",
      "line": 2,
      "snippet": "// Specialized normalization and calculation functions for 4D state vector\n// Pr"
    },
    {
      "file": "cmos/context/src/state_calculator.js",
      "line": 3,
      "snippet": "// Provides mathematical utilities for mapping raw context data to [0,1]^4 space"
    },
    {
      "file": "cmos/context/src/state_calculator.js",
      "line": 8,
      "snippet": "\n    // Normalization constants\n    this.normalizationConstants = {\n      // For"
    },
    {
      "file": "cmos/context/src/state_calculator.js",
      "line": 11,
      "snippet": "      // Form dimension constants\n      form: {\n        maxExpectedSize: config."
    },
    {
      "file": "cmos/context/src/state_calculator.js",
      "line": 17,
      "snippet": "\n      // Function dimension constants\n      function: {\n        maxFactsPerDoma"
    },
    {
      "file": "cmos/context/src/state_calculator.js",
      "line": 24,
      "snippet": "\n      // Behavior dimension constants\n      behavior: {\n        targetLatencyMs"
    },
    {
      "file": "cmos/context/src/state_calculator.js",
      "line": 31,
      "snippet": "\n      // Context dimension constants\n      context: {\n        maxDomains: confi"
    },
    {
      "file": "cmos/context/src/state_calculator.js",
      "line": 39,
      "snippet": "\n    // Sigmoid function parameters for smooth normalization\n    this.sigmoidPar"
    },
    {
      "file": "cmos/context/src/state_calculator.js",
      "line": 108,
      "snippet": "\n    // Check required fields\n    for (const field of required) {\n      if (this"
    },
    {
      "file": "cmos/context/src/state_calculator.js",
      "line": 115,
      "snippet": "\n    // Check recommended fields\n    for (const field of recommended) {\n      if"
    },
    {
      "file": "cmos/context/src/state_calculator.js",
      "line": 132,
      "snippet": "\n    // Size efficiency (smaller is better for same content)\n    const sizeEffic"
    },
    {
      "file": "cmos/context/src/state_calculator.js",
      "line": 135,
      "snippet": "\n    // Organization efficiency (balanced domain sizes)\n    const orgEfficiency "
    },
    {
      "file": "cmos/context/src/state_calculator.js",
      "line": 152,
      "snippet": "\n    // Calculate coefficient of variation (lower is better)\n    const mean = do"
    },
    {
      "file": "cmos/context/src/state_calculator.js",
      "line": 157,
      "snippet": "\n    // Lower CV means better organization\n    return this.exponentialNormalize("
    },
    {
      "file": "cmos/context/src/state_calculator.js",
      "line": 182,
      "snippet": "\n      // Relevance based on content density\n      const factRelevance = this.si"
    },
    {
      "file": "cmos/context/src/state_calculator.js",
      "line": 211,
      "snippet": "\n      // Intent preserved through actionable outcomes\n      const actionableRat"
    },
    {
      "file": "cmos/context/src/state_calculator.js",
      "line": 233,
      "snippet": "\n    // Latency efficiency (lower is better)\n    const latencyScore = this.linea"
    },
    {
      "file": "cmos/context/src/state_calculator.js",
      "line": 241,
      "snippet": "\n    // If we have historical data, calculate consistency\n    const consistencyS"
    },
    {
      "file": "cmos/context/src/state_calculator.js",
      "line": 252,
      "snippet": "    // This would be enhanced with historical latency data\n    // For now, use a"
    },
    {
      "file": "cmos/context/src/state_calculator.js",
      "line": 253,
      "snippet": "    // For now, use a simple heuristic based on current performance\n    const la"
    },
    {
      "file": "cmos/context/src/state_calculator.js",
      "line": 279,
      "snippet": "\n    // Apply sigmoid to create smooth transition around 0.8\n    return this.sig"
    },
    {
      "file": "cmos/context/src/state_calculator.js",
      "line": 293,
      "snippet": "\n    // Calculate domain interconnectedness\n    const domainSizes = domains.map("
    },
    {
      "file": "cmos/context/src/state_calculator.js",
      "line": 297,
      "snippet": "\n    // Balance is good when domains are similar size and moderately connected\n "
    },
    {
      "file": "cmos/context/src/state_calculator.js",
      "line": 339,
      "snippet": "    // Simple heuristic: domains with similar keywords are connected\n    let con"
    },
    {
      "file": "cmos/context/src/state_calculator.js",
      "line": 360,
      "snippet": "    // Simple heuristic based on shared files or similar content\n    const files"
    },
    {
      "file": "cmos/context/src/state_calculator.js",
      "line": 363,
      "snippet": "\n    // Check for shared files\n    const sharedFiles = files1.filter(file => fil"
    },
    {
      "file": "cmos/context/src/state_calculator.js",
      "line": 387,
      "snippet": "    // Optimal interconnectedness is around 0.3-0.7 (moderate coupling)\n    cons"
    },
    {
      "file": "cmos/context/src/state_calculator.js",
      "line": 402,
      "snippet": "    // percentiles should be an object like { p25: 0.2, p50: 0.5, p75: 0.8 }\n   "
    },
    {
      "file": "cmos/context/src/state_calculator.js",
      "line": 416,
      "snippet": "\n    // Convert z-score to [0,1] using sigmoid\n    return this.sigmoidNormalize("
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 1,
      "snippet": "// recovery_strategies.js\n// Automated Recovery Mechanisms for Mission 3.1\n// Pr"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 2,
      "snippet": "// Automated Recovery Mechanisms for Mission 3.1\n// Provides sophisticated recov"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 3,
      "snippet": "// Provides sophisticated recovery strategies for each anti-pattern type\n\nclass "
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 8,
      "snippet": "      // Recovery timing\n      immediateRecoveryMs: config.immediateRecoveryMs |"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 11,
      "snippet": "\n      // Recovery aggressiveness levels\n      conservativeThreshold: config.con"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 16,
      "snippet": "\n      // Safety limits\n      maxCompressionRatio: config.maxCompressionRatio ||"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 21,
      "snippet": "\n      // Recovery validation\n      enableValidation: config.enableValidation !="
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 28,
      "snippet": "\n    // Recovery state tracking\n    this.recoveryHistory = [];\n    this.activeRe"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 54,
      "snippet": "      // Mark recovery as active\n      this.activeRecoveries.set(recoveryId, {\n "
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 61,
      "snippet": "\n      // Select and execute recovery strategy\n      let result;\n      switch (a"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 86,
      "snippet": "\n      // Validate recovery if enabled\n      if (this.config.enableValidation &&"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 93,
      "snippet": "\n      // Record recovery completion\n      const completedRecovery = {\n        i"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 116,
      "snippet": "      // Record recovery failure\n      const failedRecovery = {\n        id: reco"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 146,
      "snippet": "\n    // Strategy selection based on severity\n    if (severity < this.config.cons"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 158,
      "snippet": "    // Light compression to reduce temporal complexity\n    const compressionResu"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 176,
      "snippet": "    // Moderate compression + domain archival\n    const compressionResult = comp"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 182,
      "snippet": "\n    // Archive least recently used domains\n    const activeDomains = domainMana"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 209,
      "snippet": "    // Emergency compression + state reset\n    const emergencyResult = compresso"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 215,
      "snippet": "\n    // Reset state vector history to clear temporal artifacts\n    const history"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 219,
      "snippet": "\n    // Deactivate all but most critical domain\n    const activeDomains = domain"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 258,
      "snippet": "\n    // Generic explosion recovery\n    return this.recoverGenericExplosion(conte"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 267,
      "snippet": "\n    // Calculate required compression ratio to get back under threshold\n    con"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 276,
      "snippet": "\n    // If compression insufficient, start deactivating domains\n    let deactiva"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 311,
      "snippet": "\n    // Aggressive complexity reduction\n    const simplificationResult = this.si"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 314,
      "snippet": "\n    // Apply compression optimized for complexity reduction\n    const compressi"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 334,
      "snippet": "    // Generic explosion strategy: aggressive compression\n    const result = com"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 357,
      "snippet": "\n    // Phase 1: Garbage collection\n    const gcResult = this.performGarbageColl"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 360,
      "snippet": "\n    // Phase 2: Domain cleanup based on leak severity\n    let cleanupResult = {"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 366,
      "snippet": "\n    // Phase 3: Orphan reference removal\n    const orphanResult = this.removeOr"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 392,
      "snippet": "\n    // Apply dampening strategies based on oscillation characteristics\n    cons"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 399,
      "snippet": "\n    // Stabilize state history\n    const stabilizationResult = this.stabilizeSt"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 421,
      "snippet": "\n    // Strategy: Split large domains and compress aggressively\n    const splitt"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 424,
      "snippet": "\n    // Compress remaining large domains\n    const compressionResult = compresso"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 448,
      "snippet": "\n    // Reset compression system state\n    compressor.compressionHistory = [];\n "
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 452,
      "snippet": "\n    // Retune compression strategies\n    const retuningResult = this.retuneComp"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 455,
      "snippet": "\n    // Test new compression settings\n    const testResult = compressor.compress"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 478,
      "snippet": "\n    // Apply moderate compression as fallback\n    const result = compressor.com"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 505,
      "snippet": "\n        // Simplify arrays\n        if (domain.critical_facts?.length > 8) {\n   "
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 521,
      "snippet": "\n        // Remove complex nested structures\n        if (domain.context_data || "
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 541,
      "snippet": "\n        // Remove null/undefined references\n        if (domain.critical_facts) "
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 548,
      "snippet": "\n        // Clean empty arrays and objects\n        if (domain.files_created?.len"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 559,
      "snippet": "\n        // Estimate memory freed (rough approximation)\n        memoryFreed += i"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 575,
      "snippet": "\n        // Clean completed domains aggressively\n        if (domain.status === '"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 579,
      "snippet": "\n          // Keep only essential information\n          const cleaned = {\n      "
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 604,
      "snippet": "\n    // Remove orphaned properties at root level\n    const orphanKeys = ['temp_d"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 620,
      "snippet": "\n    // Calculate dampening factor based on oscillation characteristics\n    cons"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 623,
      "snippet": "\n    // Apply dampening to state vector history\n    if (stateVector.history.leng"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 627,
      "snippet": "\n      // Smooth out oscillations in affected dimensions\n      affectedDimension"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 632,
      "snippet": "\n        // Update recent history with smoothed values\n        recent.forEach((s"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 648,
      "snippet": "\n      // Apply stability correction to reduce variance\n      affectedDimensions"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 656,
      "snippet": "          // Apply variance reduction\n          recent.forEach(state => {\n      "
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 679,
      "snippet": "\n        // Split domains with too many files\n        if (domain.files_created?."
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 686,
      "snippet": "\n        // Split domains with too many facts\n        if (domain.critical_facts?"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 700,
      "snippet": "\n    // Adjust compression ratios based on performance\n    if (metrics.averageRa"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 703,
      "snippet": "      // Increase target ratios\n      Object.keys(compressor.config.targetRatios"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 709,
      "snippet": "\n    // Adjust relevance thresholds\n    if (metrics.averageRelevance < 0.8) {\n  "
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 715,
      "snippet": "\n    // Adjust performance thresholds\n    if (metrics.averageProcessingMs > 100)"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 752,
      "snippet": "      // Recalculate state after recovery\n      const newState = stateVector.cal"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 754,
      "snippet": "\n      // Basic validation checks\n      const checks = {\n        stateImproved: "
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 795,
      "snippet": "\n    // Update metrics\n    this.recoveryMetrics.total++;\n    if (recovery.succes"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 803,
      "snippet": "\n    // Update strategy metrics\n    const strategy = recovery.result?.strategy |"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 813,
      "snippet": "\n    // Update pattern metrics\n    if (!this.recoveryMetrics.byPattern[recovery."
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 822,
      "snippet": "\n    // Maintain history size\n    if (this.recoveryHistory.length > 100) {\n     "
    },
    {
      "file": "cmos/context/src/context_compressor.js",
      "line": 1,
      "snippet": "// context_compressor.js\n// Context-Specific Compression Utilities for Mission 2"
    },
    {
      "file": "cmos/context/src/context_compressor.js",
      "line": 2,
      "snippet": "// Context-Specific Compression Utilities for Mission 2.1\n// Provides specialize"
    },
    {
      "file": "cmos/context/src/context_compressor.js",
      "line": 3,
      "snippet": "// Provides specialized compression techniques for different context types\n\ncons"
    },
    {
      "file": "cmos/context/src/context_compressor.js",
      "line": 16,
      "snippet": "\n    // Deduplication cache\n    this.factHashes = new Map();\n    this.decisionHa"
    },
    {
      "file": "cmos/context/src/context_compressor.js",
      "line": 43,
      "snippet": "\n    // Compress critical facts\n    if (compressed.critical_facts) {\n      compr"
    },
    {
      "file": "cmos/context/src/context_compressor.js",
      "line": 48,
      "snippet": "\n    // Compress decisions made\n    if (compressed.decisions_made) {\n      compr"
    },
    {
      "file": "cmos/context/src/context_compressor.js",
      "line": 53,
      "snippet": "\n    // Compress files created (preserve important metadata)\n    if (compressed."
    },
    {
      "file": "cmos/context/src/context_compressor.js",
      "line": 58,
      "snippet": "\n    // Compress context data\n    if (compressed.context_data) {\n      compresse"
    },
    {
      "file": "cmos/context/src/context_compressor.js",
      "line": 86,
      "snippet": "\n    // Remove duplicates\n    compressed = this.removeDuplicateFacts(compressed)"
    },
    {
      "file": "cmos/context/src/context_compressor.js",
      "line": 89,
      "snippet": "\n    // Sort by importance/recency\n    compressed = this.sortFactsByImportance(c"
    },
    {
      "file": "cmos/context/src/context_compressor.js",
      "line": 92,
      "snippet": "\n    // Apply length limit if specified\n    if (options.maxFacts && compressed.l"
    },
    {
      "file": "cmos/context/src/context_compressor.js",
      "line": 97,
      "snippet": "\n    // Compress individual fact content\n    compressed = compressed.map(fact =>"
    },
    {
      "file": "cmos/context/src/context_compressor.js",
      "line": 111,
      "snippet": "\n    // Remove duplicate decisions\n    compressed = this.removeDuplicateDecision"
    },
    {
      "file": "cmos/context/src/context_compressor.js",
      "line": 114,
      "snippet": "\n    // Sort by impact and recency\n    compressed = this.sortDecisionsByImpact(c"
    },
    {
      "file": "cmos/context/src/context_compressor.js",
      "line": 117,
      "snippet": "\n    // Apply length limit if specified\n    if (options.maxDecisions && compress"
    },
    {
      "file": "cmos/context/src/context_compressor.js",
      "line": 122,
      "snippet": "\n    // Compress decision content\n    compressed = compressed.map(decision => th"
    },
    {
      "file": "cmos/context/src/context_compressor.js",
      "line": 139,
      "snippet": "\n      // Preserve essential file metadata\n      return {\n        name: file.nam"
    },
    {
      "file": "cmos/context/src/context_compressor.js",
      "line": 159,
      "snippet": "      // Preserve small, essential data\n      if (this.isEssentialContextKey(key"
    },
    {
      "file": "cmos/context/src/context_compressor.js",
      "line": 163,
      "snippet": "        // Truncate long strings\n        compressed[key] = value.substring(0, th"
    },
    {
      "file": "cmos/context/src/context_compressor.js",
      "line": 166,
      "snippet": "        // Truncate long arrays\n        compressed[key] = value.slice(0, 10);\n  "
    },
    {
      "file": "cmos/context/src/context_compressor.js",
      "line": 248,
      "snippet": "\n    // Recency bonus (if timestamp available)\n    if (fact.timestamp) {\n      c"
    },
    {
      "file": "cmos/context/src/context_compressor.js",
      "line": 254,
      "snippet": "\n    // Length penalty for very long facts\n    if (factStr.length > 200) {\n     "
    },
    {
      "file": "cmos/context/src/context_compressor.js",
      "line": 259,
      "snippet": "\n    // Keyword importance\n    const importantKeywords = [\n      'critical', 'im"
    },
    {
      "file": "cmos/context/src/context_compressor.js",
      "line": 271,
      "snippet": "\n    // Structural completeness\n    if (typeof fact === 'object' && fact.descrip"
    },
    {
      "file": "cmos/context/src/context_compressor.js",
      "line": 286,
      "snippet": "\n    // Recency bonus\n    if (decision.timestamp) {\n      const ageHours = (Date"
    },
    {
      "file": "cmos/context/src/context_compressor.js",
      "line": 292,
      "snippet": "\n    // Impact indicators\n    const highImpactWords = [\n      'architecture', 'd"
    },
    {
      "file": "cmos/context/src/context_compressor.js",
      "line": 304,
      "snippet": "\n    // Decision structure completeness\n    if (typeof decision === 'object') {\n"
    },
    {
      "file": "cmos/context/src/context_compressor.js",
      "line": 326,
      "snippet": "\n      // Preserve essential fields\n      const essentialFields = ['description'"
    },
    {
      "file": "cmos/context/src/context_compressor.js",
      "line": 352,
      "snippet": "\n      // Preserve essential decision fields\n      const essentialFields = ['dec"
    },
    {
      "file": "cmos/context/src/context_compressor.js",
      "line": 360,
      "snippet": "\n      // Compress alternatives if present\n      if (decision.alternatives && Ar"
    },
    {
      "file": "cmos/context/src/context_compressor.js",
      "line": 382,
      "snippet": "\n    // Score sentences by importance\n    const scoredSentences = sentences.map("
    },
    {
      "file": "cmos/context/src/context_compressor.js",
      "line": 388,
      "snippet": "\n    // Sort by score and take top sentences\n    let topSentences = scoredSenten"
    },
    {
      "file": "cmos/context/src/context_compressor.js",
      "line": 394,
      "snippet": "\n    // Ensure at least one sentence containing keyword 'important' is present i"
    },
    {
      "file": "cmos/context/src/context_compressor.js",
      "line": 413,
      "snippet": "\n    // Length normalization (prefer medium-length sentences)\n    const words = "
    },
    {
      "file": "cmos/context/src/context_compressor.js",
      "line": 418,
      "snippet": "\n    // Important keywords\n    const importantWords = [\n      'implement', 'crea"
    },
    {
      "file": "cmos/context/src/context_compressor.js",
      "line": 430,
      "snippet": "\n    // Position bonus (first and last sentences often important)\n    const sent"
    },
    {
      "file": "cmos/context/src/context_compressor.js",
      "line": 449,
      "snippet": "\n    // Remove old, stable content\n    Object.keys(compressed).forEach(key => {\n"
    },
    {
      "file": "cmos/context/src/context_compressor.js",
      "line": 456,
      "snippet": "\n        // If old and appears stable (low change frequency), compress more aggr"
    },
    {
      "file": "cmos/context/src/viability_regions.js",
      "line": 1,
      "snippet": "// viability_regions.js\n// Defines and manages healthy operating zones for 4D co"
    },
    {
      "file": "cmos/context/src/viability_regions.js",
      "line": 2,
      "snippet": "// Defines and manages healthy operating zones for 4D context state vector\n// Pr"
    },
    {
      "file": "cmos/context/src/viability_regions.js",
      "line": 3,
      "snippet": "// Provides viability region boundaries, zone classification, and adaptation\n\ncl"
    },
    {
      "file": "cmos/context/src/viability_regions.js",
      "line": 8,
      "snippet": "\n    // Base viability thresholds for each dimension\n    this.baseThresholds = {"
    },
    {
      "file": "cmos/context/src/viability_regions.js",
      "line": 36,
      "snippet": "\n    // Overall viability threshold (minimum for system viability)\n    this.over"
    },
    {
      "file": "cmos/context/src/viability_regions.js",
      "line": 39,
      "snippet": "\n    // Zone definitions in 4D space\n    this.zones = this.defineZones();\n\n    /"
    },
    {
      "file": "cmos/context/src/viability_regions.js",
      "line": 42,
      "snippet": "\n    // Adaptive thresholds (learn from usage patterns)\n    this.adaptiveThresho"
    },
    {
      "file": "cmos/context/src/viability_regions.js",
      "line": 47,
      "snippet": "\n    // Alert configurations\n    this.alertConfig = {\n      exitViableRegion: tr"
    },
    {
      "file": "cmos/context/src/viability_regions.js",
      "line": 65,
      "snippet": "      // Crisis zone: immediate intervention required\n      crisis: {\n        na"
    },
    {
      "file": "cmos/context/src/viability_regions.js",
      "line": 78,
      "snippet": "\n      // Critical zone: severe degradation\n      critical: {\n        name: 'Cri"
    },
    {
      "file": "cmos/context/src/viability_regions.js",
      "line": 92,
      "snippet": "\n      // Warning zone: degradation risk\n      warning: {\n        name: 'Warning"
    },
    {
      "file": "cmos/context/src/viability_regions.js",
      "line": 106,
      "snippet": "\n      // Viable zone: normal operation\n      viable: {\n        name: 'Viable',\n"
    },
    {
      "file": "cmos/context/src/viability_regions.js",
      "line": 119,
      "snippet": "\n      // Optimal zone: excellent performance\n      optimal: {\n        name: 'Op"
    },
    {
      "file": "cmos/context/src/viability_regions.js",
      "line": 140,
      "snippet": "    // Check zones in priority order\n    const zoneOrder = ['crisis', 'critical'"
    },
    {
      "file": "cmos/context/src/viability_regions.js",
      "line": 149,
      "snippet": "          // Viability defined by overall threshold, independent of zone label\n "
    },
    {
      "file": "cmos/context/src/viability_regions.js",
      "line": 155,
      "snippet": "\n    // Fallback to viable if no other zone matches\n    return {\n      zone: 'vi"
    },
    {
      "file": "cmos/context/src/viability_regions.js",
      "line": 179,
      "snippet": "\n    // Positive distance = inside viable region\n    // Negative distance = outs"
    },
    {
      "file": "cmos/context/src/viability_regions.js",
      "line": 181,
      "snippet": "    // Negative distance = outside viable region\n    return minDimension - thres"
    },
    {
      "file": "cmos/context/src/viability_regions.js",
      "line": 248,
      "snippet": "\n    // Check for zone transitions\n    const transition = this.detectTransition("
    },
    {
      "file": "cmos/context/src/viability_regions.js",
      "line": 263,
      "snippet": "\n    // Check for viability region exit\n    const classification = this.classify"
    },
    {
      "file": "cmos/context/src/viability_regions.js",
      "line": 276,
      "snippet": "\n    // Check for critical zone entry\n    if (['crisis', 'critical'].includes(cl"
    },
    {
      "file": "cmos/context/src/viability_regions.js",
      "line": 288,
      "snippet": "\n    // Check for dimension-specific alerts\n    this.checkDimensionAlerts(state,"
    },
    {
      "file": "cmos/context/src/viability_regions.js",
      "line": 359,
      "snippet": "\n      // Adjust thresholds based on observed distribution\n      this.adjustDime"
    },
    {
      "file": "cmos/context/src/viability_regions.js",
      "line": 374,
      "snippet": "\n    // Don't adjust too far from base thresholds\n    const maxDeviation = 0.15;"
    },
    {
      "file": "cmos/context/src/viability_regions.js",
      "line": 377,
      "snippet": "\n    // Adjust critical threshold based on p10 (10th percentile)\n    const targe"
    },
    {
      "file": "cmos/context/src/viability_regions.js",
      "line": 381,
      "snippet": "\n    // Adjust warning threshold based on p25 (25th percentile)\n    const target"
    },
    {
      "file": "cmos/context/src/viability_regions.js",
      "line": 385,
      "snippet": "\n    // Adjust optimal threshold based on p75 (75th percentile)\n    const target"
    },
    {
      "file": "cmos/context/src/viability_regions.js",
      "line": 389,
      "snippet": "\n    // Ensure thresholds maintain proper ordering\n    current.critical = Math.m"
    },
    {
      "file": "cmos/context/src/viability_regions.js",
      "line": 424,
      "snippet": "\n    // Keep only recent adaptations\n    if (this.adaptationHistory.length > 10)"
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 1,
      "snippet": "// domain_manager.js\n// Main Domain Management Engine for Mission 2.2\n// Orchest"
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 2,
      "snippet": "// Main Domain Management Engine for Mission 2.2\n// Orchestrates domain discover"
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 3,
      "snippet": "// Orchestrates domain discovery, dependency tracking, active set optimization, "
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 14,
      "snippet": "      // Domain management settings\n      domains: {\n        autoDiscovery: conf"
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 22,
      "snippet": "\n      // Memory management\n      memory: {\n        maxActiveSizeKB: config.memo"
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 30,
      "snippet": "\n      // State preservation\n      statePreservation: {\n        enableHistory: c"
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 39,
      "snippet": "\n    // Initialize components\n    this.discovery = new DomainDiscovery(config.di"
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 46,
      "snippet": "\n    // Domain state management\n    this.domains = new Map();\n    this.activeDom"
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 53,
      "snippet": "\n    // Performance tracking\n    this.switchHistory = [];\n    this.optimizationS"
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 58,
      "snippet": "\n    // Event handling\n    this.eventListeners = new Map();\n\n    // Initialize o"
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 61,
      "snippet": "\n    // Initialize optimization schedule\n    this.startOptimizationSchedule();\n "
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 77,
      "snippet": "\n      // Step 1: Discover domains in the project\n      this.emit('initializatio"
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 85,
      "snippet": "\n      // Step 2: Build dependency mapping\n      const dependencyAnalysis = this"
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 91,
      "snippet": "\n      // Step 3: Initialize domains in manager\n      this.initializeDomains(dis"
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 94,
      "snippet": "\n      // Step 4: Perform initial optimization\n      const initialContext = opti"
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 101,
      "snippet": "\n      // Step 5: Set up automatic discovery if enabled\n      if (this.config.do"
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 140,
      "snippet": "      // Enhance domain with dependency information\n      const enhancedDomain ="
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 153,
      "snippet": "\n    // Set initial active domains based on dependency analysis\n    this.setInit"
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 165,
      "snippet": "        // Sort by importance: file count, dependency count, centrality\n        "
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 203,
      "snippet": "      // Validate domain exists\n      if (!this.domains.has(domainId)) {\n       "
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 216,
      "snippet": "\n      // Step 1: Preserve current state if enabled\n      let preservedState = n"
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 222,
      "snippet": "\n      // Step 2: Prepare target domain\n      const loadedDomain = await this.lo"
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 225,
      "snippet": "\n      // Step 3: Update active set based on new domain\n      const accessPatter"
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 240,
      "snippet": "\n      // Step 4: Update domain state\n      this.updateDomainAccess(domainId);\n "
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 244,
      "snippet": "\n      // Step 5: Build transition context\n      const transitionContext = this."
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 263,
      "snippet": "\n      // Record switch\n      this.recordDomainSwitch(switchResult);\n\n      this"
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 288,
      "snippet": "\n    // If domain is compressed, decompress it\n    if (domain.compressed) {\n    "
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 295,
      "snippet": "\n    // Activate domain if not already active\n    if (!this.activeDomains.has(do"
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 300,
      "snippet": "\n    // Update load timestamp\n    domain.loadedAt = Date.now();\n    return domai"
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 310,
      "snippet": "    // For now, return the domain as-is since we store compression metadata\n    "
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 311,
      "snippet": "    // In a full implementation, this would use the compression metadata\n    // "
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 312,
      "snippet": "    // to restore the domain to its original state\n\n    return {\n      ...compre"
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 328,
      "snippet": "\n    // Check active domain limit\n    if (this.activeDomains.size >= this.config"
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 331,
      "snippet": "      // Deactivate least recently used domain\n      this.deactivateLeastRecentl"
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 338,
      "snippet": "\n    // Enforce cap robustly in case no domain was deactivated above\n    while ("
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 370,
      "snippet": "      // Fallback: arbitrarily pick first if timestamps were not comparable\n    "
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 403,
      "snippet": "\n    // Update domain history\n    if (this.config.statePreservation.enableHistor"
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 411,
      "snippet": "\n      // Trim history if needed\n      if (this.domainHistory.length > this.conf"
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 447,
      "snippet": "\n    // Add domain-specific context\n    if (!transitionContext.working_memory) {"
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 469,
      "snippet": "\n    // Keep last 100 switches\n    if (this.switchHistory.length > 100) {\n      "
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 571,
      "snippet": "\n      // Check if new domains were discovered\n      const newDomains = discover"
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 582,
      "snippet": "\n        // Update domain definitions if needed\n        // This could trigger a "
    },
    {
      "file": "cmos/context/src/domain_manager.js",
      "line": 584,
      "snippet": "        // This could trigger a re-initialization\n      }\n    } catch (error) {\n"
    },
    {
      "file": "cmos/missions/backlog.yaml",
      "line": 1,
      "snippet": "# pack.yaml - Metadata for the \"Sprint Plan\" Domain Pack\nname: \"Planning.SprintP"
    },
    {
      "file": "cmos/missions/backlog.yaml",
      "line": 10,
      "snippet": "\n# Mission File: project-main-backlog.yaml\n\nmissionId: \"SP-MAIN-001\"\n\nobjective:"
    },
    {
      "file": "cmos/missions/backlog.yaml",
      "line": 80,
      "snippet": "\n  # Structured representation of the Mermaid diagram from backlog.md\n  missionD"
    },
    {
      "file": "cmos/missions/backlog.yaml",
      "line": 83,
      "snippet": "    # Sprint 1 dependencies\n    - { from: \"B1.1\", to: \"B1.2\", type: \"Blocks\" }\n "
    },
    {
      "file": "cmos/missions/backlog.yaml",
      "line": 86,
      "snippet": "\n    # Future sprint placeholders (to be refined during sprint planning)\n    - {"
    },
    {
      "file": "cmos/missions/sprint-01/B1.3_refresh_docs_and_backlog.yaml",
      "line": 1,
      "snippet": "# Mission File: B1.3_refresh_docs_and_backlog.yaml\n\nmissionId: \"B1.3-20250209-00"
    },
    {
      "file": "cmos/missions/sprint-01/B1.2_reinstate_phase2_tests.yaml",
      "line": 1,
      "snippet": "# Mission File: B1.2_reinstate_phase2_tests.yaml\n\nmissionId: \"B1.2-20250209-001\""
    },
    {
      "file": "cmos/missions/sprint-01/B1.1_completion_summary.md",
      "line": 1,
      "snippet": "# B1.1 Completion Summary\n**Mission**: Restore Template Runtime Store  \n**Status"
    },
    {
      "file": "cmos/missions/sprint-01/B1.1_completion_summary.md",
      "line": 5,
      "snippet": "\n## Objective\nRebuild the Mission Protocol template runtime store (registry, gen"
    },
    {
      "file": "cmos/missions/sprint-01/B1.1_completion_summary.md",
      "line": 8,
      "snippet": "\n## What Was Delivered\n\n### Core Templates\n1. **templates/registry.yaml** - Cent"
    },
    {
      "file": "cmos/missions/sprint-01/B1.1_completion_summary.md",
      "line": 10,
      "snippet": "\n### Core Templates\n1. **templates/registry.yaml** - Central registry with 5 dom"
    },
    {
      "file": "cmos/missions/sprint-01/B1.1_completion_summary.md",
      "line": 15,
      "snippet": "\n### Domain Packs Restored\n1. **foundation** (v1.0.0) - Core infrastructure and "
    },
    {
      "file": "cmos/missions/sprint-01/B1.1_completion_summary.md",
      "line": 27,
      "snippet": "\n## Verification\n\n### Smoke Tests Created\n- **tests/integration/template-runtime"
    },
    {
      "file": "cmos/missions/sprint-01/B1.1_completion_summary.md",
      "line": 29,
      "snippet": "\n### Smoke Tests Created\n- **tests/integration/template-runtime-store.test.ts** "
    },
    {
      "file": "cmos/missions/sprint-01/B1.1_completion_summary.md",
      "line": 36,
      "snippet": "\n### Existing Tests Status\n- \u2705 MCP server integration tests (16/16 passing)\n- \u2705 "
    },
    {
      "file": "cmos/missions/sprint-01/B1.1_completion_summary.md",
      "line": 41,
      "snippet": "\n## Success Criteria Met\n\n\u2705 `templates/registry.yaml` exists, validates, and lis"
    },
    {
      "file": "cmos/missions/sprint-01/B1.1_completion_summary.md",
      "line": 48,
      "snippet": "\n## Technical Notes\n\n- Templates based on architectural specs from `cmos/researc"
    },
    {
      "file": "cmos/missions/sprint-01/B1.1_completion_summary.md",
      "line": 55,
      "snippet": "\n## Next Steps\n\nMission B1.2 \"Reinstate Phase 2 Tests & Smoke Coverage\" has been"
    },
    {
      "file": "cmos/missions/sprint-01/B1.1_restore_template_store.yaml",
      "line": 1,
      "snippet": "# Mission File: B1.1_restore_template_store.yaml\n\nmissionId: \"B1.1-20250209-001\""
    },
    {
      "file": "cmos/missions/sprint-03/B3.2_mission-creation-ux-improvements.yaml",
      "line": 1,
      "snippet": "# Mission File: B3.2_mission-creation-ux-improvements.yaml\n\nmissionId: \"B3.2-202"
    },
    {
      "file": "cmos/missions/sprint-03/B3.1_template-qa-and-linting.yaml",
      "line": 1,
      "snippet": "# Mission File: B3.1_template-qa-and-linting.yaml\n\nmissionId: \"B3.1-20251026-001"
    },
    {
      "file": "cmos/missions/sprint-03/B3.3_template-catalog-polish.yaml",
      "line": 1,
      "snippet": "# Mission File: B3.3_template-catalog-polish.yaml\n\nmissionId: \"B3.3-20251026-001"
    },
    {
      "file": "cmos/missions/sprint-02/B2.2_register-intelligence-tools-mcp.yaml",
      "line": 1,
      "snippet": "# Mission File: B2.2_register-intelligence-tools-mcp.yaml\n\nmissionId: \"B2.2-2025"
    },
    {
      "file": "cmos/missions/sprint-02/B2.1_hybrid-token-counter-integration.yaml",
      "line": 1,
      "snippet": "# Mission File: B2.1_hybrid-token-counter-integration.yaml\n\nmissionId: \"B2.1-202"
    },
    {
      "file": "cmos/missions/sprint-02/R2.1_token-counting-research.yaml",
      "line": 1,
      "snippet": "# Mission File: R2.1_token-counting-research.yaml\n\nmissionId: \"R2.1-20251025-001"
    },
    {
      "file": "cmos/missions/sprint-02/B2.3_token-validation-and-telemetry.yaml",
      "line": 1,
      "snippet": "# Mission File: B2.3_token-validation-and-telemetry.yaml\n\nmissionId: \"B2.3-20251"
    },
    {
      "file": "cmos/missions/templates/Build.TechnicalResearch.v1.yaml",
      "line": 1,
      "snippet": "# pack.yaml - Metadata for the \"Technical Research\" Domain Pack\nname: \"Build.Tec"
    },
    {
      "file": "cmos/missions/templates/Build.TechnicalResearch.v1.yaml",
      "line": 10,
      "snippet": "\n# Mission File: R#.#_research-topic.yaml\n\nmissionId: \"TR-20251004-001\" # Techni"
    },
    {
      "file": "cmos/missions/templates/Build.TechnicalResearch.v1.yaml",
      "line": 34,
      "snippet": "\n  # Define the specific questions for this research spike.\n  researchQuestions:"
    },
    {
      "file": "cmos/missions/templates/Build.TechnicalResearch.v1.yaml",
      "line": 40,
      "snippet": "  \n  # A structured log of key findings from the investigation.\n  keyFindings:\n "
    },
    {
      "file": "cmos/missions/templates/Build.TechnicalResearch.v1.yaml",
      "line": 49,
      "snippet": "\n  # Note any conflicting information or areas needing further validation.\n  con"
    },
    {
      "file": "cmos/missions/templates/Build.TechnicalResearch.v1.yaml",
      "line": 52,
      "snippet": "\n  # The primary, structured output for the next mission.\n  buildImplications:\n "
    },
    {
      "file": "cmos/missions/templates/Build.TechnicalResearch.v1.yaml",
      "line": 58,
      "snippet": "    \n  # Enforces the 'Evidence Chain' pattern.\n  evidenceCollection:\n    - type"
    },
    {
      "file": "cmos/missions/templates/Build.Implementation.v1.yaml",
      "line": 1,
      "snippet": "# pack.yaml - Metadata for the \"Implementation\" Domain Pack\nname: \"Build.Impleme"
    },
    {
      "file": "cmos/missions/templates/Build.Implementation.v1.yaml",
      "line": 10,
      "snippet": "\n# Mission File: B#.#_component-name.yaml\n\nmissionId: \"BI-20251004-001\" # Build "
    },
    {
      "file": "cmos/missions/templates/Build.Implementation.v1.yaml",
      "line": 33,
      "snippet": "\n  # Creates a direct, auditable link to the justifying research.\n  researchFoun"
    },
    {
      "file": "cmos/missions/templates/Build.Implementation.v1.yaml",
      "line": 42,
      "snippet": "      \n  # Sized for a single session.\n  implementationScope:\n    coreDeliverabl"
    },
    {
      "file": "cmos/missions/templates/Build.Implementation.v1.yaml",
      "line": 50,
      "snippet": "\n  # Defines the cross-AI validation strategy.\n  validationProtocol:\n    - valid"
    },
    {
      "file": "cmos/missions/templates/Build.Implementation.v1.yaml",
      "line": 57,
      "snippet": "\n  # The structured output that enables mission chaining.\n  handoffContext:\n    "
    },
    {
      "file": "cmos/missions/templates/backlog.yaml",
      "line": 1,
      "snippet": "# pack.yaml - Metadata for the \"Sprint Plan\" Domain Pack\nname: \"Planning.SprintP"
    },
    {
      "file": "cmos/missions/templates/backlog.yaml",
      "line": 10,
      "snippet": "\n# Mission File: project-main-backlog.yaml\n\nmissionId: \"SP-MAIN-001\"\n\nobjective:"
    },
    {
      "file": "cmos/missions/templates/backlog.yaml",
      "line": 78,
      "snippet": "\n  # Structured representation of the Mermaid diagram from backlog.md\n  missionD"
    },
    {
      "file": "cmos/missions/templates/backlog.yaml",
      "line": 81,
      "snippet": "    # Sprint 3 dependencies\n    - { from: \"R3.1\", to: \"B3.1\", type: \"Research in"
    },
    {
      "file": "cmos/missions/templates/backlog.yaml",
      "line": 88,
      "snippet": "\n    # Sprint 4 dependencies\n    - { from: \"R4.1\", to: \"B4.1\", type: \"Research i"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 1,
      "snippet": "# Phase 4 Completion Report - Intelligence Layer\n\n**Mission ID**: B4.5 - Phase 4"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 8,
      "snippet": "\n## Executive Summary\n\nPhase 4 \"Intelligence Layer\" has been successfully comple"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 12,
      "snippet": "\n### Delivered Capabilities\n\n1. **Quality Scoring** - 3-dimensional mission qual"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 20,
      "snippet": "\n### Performance Achievements\n\n| Metric | Target | Achieved | Status |\n|--------"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 33,
      "snippet": "\n## Deliverables Checklist\n\n### Code Deliverables\n\n- [x] **Intelligence Layer**\n"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 35,
      "snippet": "\n### Code Deliverables\n\n- [x] **Intelligence Layer**\n  - [x] `app/src/intelligen"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 63,
      "snippet": "\n### Test Deliverables\n\n- [x] **Unit Tests** (96.7% coverage for Phase 4 compone"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 83,
      "snippet": "\n### Documentation Deliverables\n\n- [x] **User Documentation**\n  - [x] `docs/Inte"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 102,
      "snippet": "\n## Test Results Summary\n\n### Overall Test Suite\n\n```\nTest Suites: 42 passed, 42"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 104,
      "snippet": "\n### Overall Test Suite\n\n```\nTest Suites: 42 passed, 42 total\nTests:       742 p"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 113,
      "snippet": "\n### Coverage Report (Phase 4 Components)\n\n| Component | Statements | Branches |"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 138,
      "snippet": "\n## Performance Benchmarks\n\n### Quality Scoring Performance\n\n| Mission Size | Pr"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 140,
      "snippet": "\n### Quality Scoring Performance\n\n| Mission Size | Processing Time | Metrics Com"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 151,
      "snippet": "\n### Token Optimization Performance\n\n| Mission Size | Original Tokens | Compress"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 162,
      "snippet": "\n### Dependency Analysis Performance\n\n| Number of Missions | Dependencies | Cycl"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 173,
      "snippet": "\n### Mission Splitting Performance\n\n| Mission Complexity | Sub-Missions | Split "
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 186,
      "snippet": "\n## Success Criteria Validation\n\n### Primary Success Criteria\n\n| Criterion | Tar"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 188,
      "snippet": "\n### Primary Success Criteria\n\n| Criterion | Target | Achieved | Status |\n|-----"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 199,
      "snippet": "\n### Secondary Success Criteria\n\n- [x] Code coverage >90% for Phase 4 components"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 210,
      "snippet": "\n## Key Technical Achievements\n\n### 1. Three-Dimensional Quality Framework\n\nImpl"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 212,
      "snippet": "\n### 1. Three-Dimensional Quality Framework\n\nImplemented comprehensive quality a"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 221,
      "snippet": "\n### 2. Model-Aware Token Optimization\n\n4-pass compression pipeline:\n1. Sanitiza"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 231,
      "snippet": "\n### 3. Hybrid Dependency Detection\n\nCombines three detection methods:\n- **Expli"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 240,
      "snippet": "\n### 4. Semantic Mission Splitting\n\nHybrid algorithm combining:\n- Complexity ana"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 249,
      "snippet": "\n### 5. End-to-End Integration\n\nAll Intelligence Layer tools work together:\n```\n"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 260,
      "snippet": "\n## Challenges Overcome\n\n### Challenge 1: Compression vs. Quality Trade-off\n\n**I"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 262,
      "snippet": "\n### Challenge 1: Compression vs. Quality Trade-off\n\n**Issue**: Aggressive compr"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 270,
      "snippet": "\n### Challenge 2: Semantic Dependency Detection\n\n**Issue**: Implicit dependencie"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 278,
      "snippet": "\n### Challenge 3: Mission Splitting Coherence\n\n**Issue**: Simple token-based spl"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 286,
      "snippet": "\n### Challenge 4: Performance at Scale\n\n**Issue**: Quality scoring slower than t"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 296,
      "snippet": "\n## Integration Test Coverage\n\n### Workflow 1: Analyze \u2192 Optimize \u2192 Score (\u2705)\nTe"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 298,
      "snippet": "\n### Workflow 1: Analyze \u2192 Optimize \u2192 Score (\u2705)\nTests end-to-end quality assessm"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 301,
      "snippet": "\n### Workflow 2: Quality-Driven Analysis (\u2705)\nTests quality scoring with actionab"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 304,
      "snippet": "\n### Workflow 3: Dependency Analysis (\u2705)\nTests multi-mission dependency detectio"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 307,
      "snippet": "\n### Workflow 4: Token Optimization (\u2705)\nTests all compression levels and dry-run"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 310,
      "snippet": "\n### Workflow 5: Performance Validation (\u2705)\nTests all tools meet performance tar"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 313,
      "snippet": "\n### Workflow 6: Complete Intelligence Pipeline (\u2705)\nTests full workflow: quality"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 316,
      "snippet": "\n### Edge Cases (\u2705)\n- Malformed YAML handling\n- Empty mission files\n- Non-existe"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 326,
      "snippet": "\n## Documentation Completeness\n\n### User Guide (Intelligence_Layer_Guide.md)\n\n- "
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 328,
      "snippet": "\n### User Guide (Intelligence_Layer_Guide.md)\n\n- [x] Overview and quick start\n- "
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 340,
      "snippet": "\n### API Documentation (API_Documentation_Phase4.md)\n\n- [x] MCP tool definitions"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 354,
      "snippet": "\n## Project Metrics\n\n### Code Metrics\n\n| Metric | Value |\n|--------|-------|\n| T"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 356,
      "snippet": "\n### Code Metrics\n\n| Metric | Value |\n|--------|-------|\n| Total Lines of Code ("
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 366,
      "snippet": "\n### Quality Metrics\n\n| Metric | Value |\n|--------|-------|\n| Test Coverage (Pha"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 375,
      "snippet": "\n### Performance Metrics\n\n| Tool | Latency (95th percentile) | Target |\n|------|"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 386,
      "snippet": "\n## Post-Assessment Update (2025-02 \u2192 2025-10 Sprint 1 Outcomes)\n\nAn engineering"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 397,
      "snippet": "\n### Sprint 2 - MCP Surface Hardening (October 2025)\n\n**Status**: \u2705 **COMPLETE**"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 425,
      "snippet": "\n## Next Steps & Recommendations\n\n### Immediate Next Steps (Sprint 3+)\n\nWith Spr"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 427,
      "snippet": "\n### Immediate Next Steps (Sprint 3+)\n\nWith Sprint 1 and Sprint 2 complete, the "
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 436,
      "snippet": "\n### Future Enhancements (Phase 5?)\n\n1. **Machine Learning Integration**\n   - Tr"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 460,
      "snippet": "\n## Conclusion\n\nPhase 4 \"Intelligence Layer\" delivered the expected code artifac"
    },
    {
      "file": "cmos/docs/Phase_4_Completion_Report.md",
      "line": 466,
      "snippet": "\n## Acknowledgments\n\nThis phase built upon foundational research in:\n- R4.1: Tok"
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 1,
      "snippet": "# Mission Protocol v2.0 - Mission Crafting Framework\n\n## Vision Statement\n\nMissi"
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 2,
      "snippet": "\n## Vision Statement\n\nMission Protocol is a **mission crafting assistant** that "
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 8,
      "snippet": "\n## Architecture Overview\n\n### Three-Layer Design\n\n```\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500"
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 10,
      "snippet": "\n### Three-Layer Design\n\n```\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510"
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 27,
      "snippet": "\n## Core Components\n\n### 1. Generic Mission Engine (Universal Layer)\n\n**Purpose*"
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 29,
      "snippet": "\n### 1. Generic Mission Engine (Universal Layer)\n\n**Purpose**: Provide core miss"
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 36,
      "snippet": "# Mission: [ID] - [Title]\n\n## Objective\n[Clear, single-session goal]\n\n## Context"
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 37,
      "snippet": "\n## Objective\n[Clear, single-session goal]\n\n## Context\n[Background information a"
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 40,
      "snippet": "\n## Context\n[Background information and dependencies]\n\n## Success Criteria\n- [ ]"
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 43,
      "snippet": "\n## Success Criteria\n- [ ] [Measurable outcome 1]\n- [ ] [Measurable outcome 2]\n-"
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 48,
      "snippet": "\n## Instructions\n[Machine-readable steps for AI execution]\n\n## Scope Boundaries\n"
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 51,
      "snippet": "\n## Scope Boundaries\n[What's included and explicitly excluded]\n\n## Deliverables\n"
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 54,
      "snippet": "\n## Deliverables\n[Expected outputs from this mission]\n```\n\n**Core Features**:\n- "
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 65,
      "snippet": "\n### 2. Domain Extension Packs\n\n**Software Development Pack**:\n```typescript\next"
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 107,
      "snippet": "\n### 3. Custom Template System\n\n**Purpose**: Allow users/organizations to create"
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 128,
      "snippet": "\n## Implementation Plan\n\n### Phase 1: Generic Core (Week 1)\n**Build the universa"
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 130,
      "snippet": "\n### Phase 1: Generic Core (Week 1)\n**Build the universal mission engine**\n\n**De"
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 146,
      "snippet": "\n### Phase 2: Essential Domain Packs (Week 2)\n**Add PDLC-focused domains**\n\n**De"
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 161,
      "snippet": "\n### Phase 3: Extension System (Week 3)\n**Enable custom templates and packs**\n\n*"
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 177,
      "snippet": "\n### Phase 4: Intelligence Layer (Week 4)\n**Add smart optimizations**\n\n**Deliver"
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 193,
      "snippet": "\n## Technical Architecture\n\n### Mission Structure Model\n\n```typescript\ninterface"
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 195,
      "snippet": "\n### Mission Structure Model\n\n```typescript\ninterface Mission {\n  // Core (alway"
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 200,
      "snippet": "  // Core (always present)\n  id: string;\n  type: 'research' | 'build' | 'write' "
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 209,
      "snippet": "  \n  // Extended (from domain packs)\n  extensions?: {\n    [packName: string]: {\n"
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 216,
      "snippet": "  \n  // Metadata\n  meta: {\n    estimatedTokens: number;\n    estimatedTime: strin"
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 232,
      "snippet": "\n### MCP Tool Interface\n\n```typescript\n// Core Tools\n- craft_mission(\n    type: "
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 236,
      "snippet": "// Core Tools\n- craft_mission(\n    type: MissionType,\n    objective: string,\n   "
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 252,
      "snippet": "\n// Domain Tools  \n- list_domains(): DomainPack[]\n- list_templates(domain?: stri"
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 260,
      "snippet": "\n// Utility Tools\n- estimate_tokens(mission: Mission): number\n- suggest_split(mi"
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 266,
      "snippet": "\n## Domain Pack Specifications\n\n### Software Development Pack\n\n**Templates**:\n1."
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 268,
      "snippet": "\n### Software Development Pack\n\n**Templates**:\n1. **API Integration**: External "
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 283,
      "snippet": "\n### Business Intelligence Pack\n\n**Templates**:\n1. **Market Analysis**: Industry"
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 298,
      "snippet": "\n### Research Pack\n\n**Templates**:\n1. **Technical Research**: Technology evaluat"
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 313,
      "snippet": "\n## Integration with CMOS\n\nMission Protocol enhances CMOS Phase 2 (Mission Plann"
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 331,
      "snippet": "\n## Success Metrics\n\n### Quality Metrics\n- **Mission Clarity**: 90%+ missions ex"
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 333,
      "snippet": "\n### Quality Metrics\n- **Mission Clarity**: 90%+ missions execute without clarif"
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 339,
      "snippet": "\n### Adoption Metrics\n- **Time Saved**: 50% reduction in mission planning time\n-"
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 345,
      "snippet": "\n### Integration Metrics\n- **CMOS Compatibility**: 100% of generated missions wo"
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 350,
      "snippet": "\n## Extension Pack Development\n\n### Creating New Domain Packs\n\n```typescript\ncon"
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 352,
      "snippet": "\n### Creating New Domain Packs\n\n```typescript\nconst newDomainPack: DomainPack = "
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 386,
      "snippet": "\n### Pack Combination\n\nUsers can combine multiple packs:\n```\nSoftware + Business"
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 395,
      "snippet": "\n## Roadmap for Future Enhancements\n\n### Near Term (Next Sprint)\n- Maintain the "
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 397,
      "snippet": "\n### Near Term (Next Sprint)\n- Maintain the restored template runtime store with"
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 403,
      "snippet": "\n### Deferred (After Remediation)\n- More domain packs (Legal, Healthcare, Educat"
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 409,
      "snippet": "\n## Sprint Plan (Next 5 Weeks)\n\n| Sprint | Focus | Key Deliverables | Notes |\n|-"
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 419,
      "snippet": "\n### Medium Term (2-3 Sprints)\n- AI model-specific optimizations (Claude vs GPT "
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 425,
      "snippet": "\n### Long Term (Future)\n- Natural language mission creation\n- Auto-generation fr"
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 431,
      "snippet": "\n## Key Design Principles\n\n1. **Generic First**: Core must work for ANY mission "
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 440,
      "snippet": "\n## Getting Started\n\n### Quick Start\n```typescript\n// Basic mission\nmissionProto"
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 442,
      "snippet": "\n### Quick Start\n```typescript\n// Basic mission\nmissionProtocol.craft_mission(\n "
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 445,
      "snippet": "// Basic mission\nmissionProtocol.craft_mission(\n  type: 'build',\n  objective: 'C"
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 450,
      "snippet": "\n// With domain pack\nmissionProtocol.craft_mission(\n  type: 'build',\n  objective"
    },
    {
      "file": "cmos/docs/roadmap.md",
      "line": 457,
      "snippet": "\n// From template\nmissionProtocol.apply_template(\n  'api_integration',\n  { servi"
    },
    {
      "file": "cmos/docs/CURRENT_BUILD.md",
      "line": 36,
      "snippet": "\n## Sprint 1 Documentation Refresh (Mission B1.3)\n- README.md and cmos/docs/Phas"
    },
    {
      "file": "cmos/docs/CURRENT_BUILD.md",
      "line": 42,
      "snippet": "\n## Token API Credentials (Sprint 2 Prep)\n- `.env.local` holds `GOOGLE_GEMINI_AP"
    },
    {
      "file": "scripts/validate-token-counts.ts",
      "line": 1,
      "snippet": "#!/usr/bin/env ts-node\n/**\n * Token Count Validation Script\n * \n * Compares offl"
    },
    {
      "file": "scripts/validate-token-counts.ts",
      "line": 31,
      "snippet": "\n// Test cases covering various text lengths and complexities\nconst TEST_CASES ="
    },
    {
      "file": "scripts/validate-token-counts.ts",
      "line": 59,
      "snippet": "\n// Drift thresholds (percentage)\nconst THRESHOLDS: Record<ValidatedModel, numbe"
    },
    {
      "file": "scripts/validate-token-counts.ts",
      "line": 178,
      "snippet": "\n  // Check for required API keys\n  const hasAnthropicKey = !!process.env.ANTHRO"
    },
    {
      "file": "scripts/validate-token-counts.ts",
      "line": 188,
      "snippet": "\n  // Run Claude validation if key is available\n  if (hasAnthropicKey) {\n    con"
    },
    {
      "file": "scripts/validate-token-counts.ts",
      "line": 210,
      "snippet": "\n  // Run Gemini validation if key is available\n  if (hasGoogleKey) {\n    consol"
    },
    {
      "file": "scripts/validate-token-counts.ts",
      "line": 232,
      "snippet": "\n  // Summary\n  const failedResults = results.filter(r => !r.passed);\n  if (fail"
    },
    {
      "file": "scripts/validate-token-counts.ts",
      "line": 250,
      "snippet": "\n// Run if executed directly\nif (require.main === module) {\n  main().catch((erro"
    },
    {
      "file": ".github/workflows/token-validation.yml",
      "line": 2,
      "snippet": "\n# Run weekly to detect tokenizer drift\non:\n  schedule:\n    # Every Monday at 9a"
    },
    {
      "file": ".github/workflows/token-validation.yml",
      "line": 6,
      "snippet": "    # Every Monday at 9am UTC\n    - cron: '0 9 * * 1'\n  workflow_dispatch: # All"
    },
    {
      "file": "templates/README.md",
      "line": 1,
      "snippet": "# Template Runtime Store\n\nThis directory contains the canonical mission template"
    },
    {
      "file": "templates/README.md",
      "line": 4,
      "snippet": "\n## Contents\n\n### Core Templates\n\n- **registry.yaml** - Central registry of all "
    },
    {
      "file": "templates/README.md",
      "line": 6,
      "snippet": "\n### Core Templates\n\n- **registry.yaml** - Central registry of all available dom"
    },
    {
      "file": "templates/README.md",
      "line": 11,
      "snippet": "\n### Domain Packs\n\nAll domain packs are located in the `packs/` directory. Each "
    },
    {
      "file": "templates/README.md",
      "line": 18,
      "snippet": "\n#### Available Domain Packs\n\n1. **foundation** (v1.0.0)\n   - Core infrastructur"
    },
    {
      "file": "templates/README.md",
      "line": 42,
      "snippet": "\n## Provenance\n\nThese templates were restored in Sprint 1 (B1.1) based on:\n- Arc"
    },
    {
      "file": "templates/README.md",
      "line": 51,
      "snippet": "\n## Verification\n\nRun the smoke test to verify template integrity:\n\n```bash\nnpm "
    },
    {
      "file": "templates/README.md",
      "line": 59,
      "snippet": "\n## Usage\n\nTemplates are loaded automatically by the MCP server at initializatio"
    },
    {
      "file": "templates/README.md",
      "line": 65,
      "snippet": "\n## Maintenance\n\nWhen adding new domain packs:\n1. Create directory in `packs/`\n2"
    },
    {
      "file": "coverage/block-navigation.js",
      "line": 3,
      "snippet": "    // Classes of code we would like to highlight in the file view\n    var missi"
    },
    {
      "file": "coverage/block-navigation.js",
      "line": 5,
      "snippet": "\n    // Elements to highlight in the file listing view\n    var fileListingElemen"
    },
    {
      "file": "coverage/block-navigation.js",
      "line": 8,
      "snippet": "\n    // We don't want to select elements that are direct descendants of another "
    },
    {
      "file": "coverage/block-navigation.js",
      "line": 11,
      "snippet": "\n    // Selector that finds elements on the page to which we can jump\n    var se"
    },
    {
      "file": "coverage/block-navigation.js",
      "line": 18,
      "snippet": "\n    // The NodeList of matching elements\n    var missingCoverageElements = docu"
    },
    {
      "file": "coverage/block-navigation.js",
      "line": 70,
      "snippet": "            // if we're currently focused on the search input, we don't want to "
    },
    {
      "file": "coverage/sorter.js",
      "line": 9,
      "snippet": "\n    // returns the summary table element\n    function getTable() {\n        retu"
    },
    {
      "file": "coverage/sorter.js",
      "line": 14,
      "snippet": "    // returns the thead element of the summary table\n    function getTableHeade"
    },
    {
      "file": "coverage/sorter.js",
      "line": 18,
      "snippet": "    // returns the tbody element of the summary table\n    function getTableBody("
    },
    {
      "file": "coverage/sorter.js",
      "line": 22,
      "snippet": "    // returns the th element for nth column\n    function getNthColumn(n) {\n    "
    },
    {
      "file": "coverage/sorter.js",
      "line": 30,
      "snippet": "\n        // Try to create a RegExp from the searchValue. If it fails (invalid re"
    },
    {
      "file": "coverage/sorter.js",
      "line": 32,
      "snippet": "        // it will be treated as a plain text search\n        let searchRegex;\n  "
    },
    {
      "file": "coverage/sorter.js",
      "line": 45,
      "snippet": "                // If a valid regex was created, use it for matching\n           "
    },
    {
      "file": "coverage/sorter.js",
      "line": 48,
      "snippet": "                // Otherwise, fall back to the original plain text search\n      "
    },
    {
      "file": "coverage/sorter.js",
      "line": 57,
      "snippet": "\n    // loads the search box\n    function addSearchBox() {\n        var template "
    },
    {
      "file": "coverage/sorter.js",
      "line": 65,
      "snippet": "\n    // loads all columns\n    function loadColumns() {\n        var colNodes = ge"
    },
    {
      "file": "coverage/sorter.js",
      "line": 90,
      "snippet": "    // attaches a data attribute to every tr element with an object\n    // of da"
    },
    {
      "file": "coverage/sorter.js",
      "line": 91,
      "snippet": "    // of data values keyed by column name\n    function loadRowData(tableRow) {\n"
    },
    {
      "file": "coverage/sorter.js",
      "line": 110,
      "snippet": "    // loads all row data\n    function loadData() {\n        var rows = getTableB"
    },
    {
      "file": "coverage/sorter.js",
      "line": 119,
      "snippet": "    // sorts the table using the data for the ith column\n    function sortByInde"
    },
    {
      "file": "coverage/sorter.js",
      "line": 150,
      "snippet": "    // removes sort indicators for current column being sorted\n    function remo"
    },
    {
      "file": "coverage/sorter.js",
      "line": 158,
      "snippet": "    // adds sort indicators for current column being sorted\n    function addSort"
    },
    {
      "file": "coverage/sorter.js",
      "line": 164,
      "snippet": "    // adds event listeners for all sorter widgets\n    function enableUI() {\n   "
    },
    {
      "file": "coverage/sorter.js",
      "line": 186,
      "snippet": "                // add the click event handler on the th so users\n              "
    },
    {
      "file": "coverage/sorter.js",
      "line": 187,
      "snippet": "                // dont have to click on those tiny arrows\n                el = "
    },
    {
      "file": "coverage/sorter.js",
      "line": 197,
      "snippet": "    // adds sorting functionality to the UI\n    return function() {\n        if ("
    },
    {
      "file": "coverage/lcov-report/block-navigation.js",
      "line": 3,
      "snippet": "    // Classes of code we would like to highlight in the file view\n    var missi"
    },
    {
      "file": "coverage/lcov-report/block-navigation.js",
      "line": 5,
      "snippet": "\n    // Elements to highlight in the file listing view\n    var fileListingElemen"
    },
    {
      "file": "coverage/lcov-report/block-navigation.js",
      "line": 8,
      "snippet": "\n    // We don't want to select elements that are direct descendants of another "
    },
    {
      "file": "coverage/lcov-report/block-navigation.js",
      "line": 11,
      "snippet": "\n    // Selector that finds elements on the page to which we can jump\n    var se"
    },
    {
      "file": "coverage/lcov-report/block-navigation.js",
      "line": 18,
      "snippet": "\n    // The NodeList of matching elements\n    var missingCoverageElements = docu"
    },
    {
      "file": "coverage/lcov-report/block-navigation.js",
      "line": 70,
      "snippet": "            // if we're currently focused on the search input, we don't want to "
    },
    {
      "file": "coverage/lcov-report/sorter.js",
      "line": 9,
      "snippet": "\n    // returns the summary table element\n    function getTable() {\n        retu"
    },
    {
      "file": "coverage/lcov-report/sorter.js",
      "line": 14,
      "snippet": "    // returns the thead element of the summary table\n    function getTableHeade"
    },
    {
      "file": "coverage/lcov-report/sorter.js",
      "line": 18,
      "snippet": "    // returns the tbody element of the summary table\n    function getTableBody("
    },
    {
      "file": "coverage/lcov-report/sorter.js",
      "line": 22,
      "snippet": "    // returns the th element for nth column\n    function getNthColumn(n) {\n    "
    },
    {
      "file": "coverage/lcov-report/sorter.js",
      "line": 30,
      "snippet": "\n        // Try to create a RegExp from the searchValue. If it fails (invalid re"
    },
    {
      "file": "coverage/lcov-report/sorter.js",
      "line": 32,
      "snippet": "        // it will be treated as a plain text search\n        let searchRegex;\n  "
    },
    {
      "file": "coverage/lcov-report/sorter.js",
      "line": 45,
      "snippet": "                // If a valid regex was created, use it for matching\n           "
    },
    {
      "file": "coverage/lcov-report/sorter.js",
      "line": 48,
      "snippet": "                // Otherwise, fall back to the original plain text search\n      "
    },
    {
      "file": "coverage/lcov-report/sorter.js",
      "line": 57,
      "snippet": "\n    // loads the search box\n    function addSearchBox() {\n        var template "
    },
    {
      "file": "coverage/lcov-report/sorter.js",
      "line": 65,
      "snippet": "\n    // loads all columns\n    function loadColumns() {\n        var colNodes = ge"
    },
    {
      "file": "coverage/lcov-report/sorter.js",
      "line": 90,
      "snippet": "    // attaches a data attribute to every tr element with an object\n    // of da"
    },
    {
      "file": "coverage/lcov-report/sorter.js",
      "line": 91,
      "snippet": "    // of data values keyed by column name\n    function loadRowData(tableRow) {\n"
    },
    {
      "file": "coverage/lcov-report/sorter.js",
      "line": 110,
      "snippet": "    // loads all row data\n    function loadData() {\n        var rows = getTableB"
    },
    {
      "file": "coverage/lcov-report/sorter.js",
      "line": 119,
      "snippet": "    // sorts the table using the data for the ith column\n    function sortByInde"
    },
    {
      "file": "coverage/lcov-report/sorter.js",
      "line": 150,
      "snippet": "    // removes sort indicators for current column being sorted\n    function remo"
    },
    {
      "file": "coverage/lcov-report/sorter.js",
      "line": 158,
      "snippet": "    // adds sort indicators for current column being sorted\n    function addSort"
    },
    {
      "file": "coverage/lcov-report/sorter.js",
      "line": 164,
      "snippet": "    // adds event listeners for all sorter widgets\n    function enableUI() {\n   "
    },
    {
      "file": "coverage/lcov-report/sorter.js",
      "line": 186,
      "snippet": "                // add the click event handler on the th so users\n              "
    },
    {
      "file": "coverage/lcov-report/sorter.js",
      "line": 187,
      "snippet": "                // dont have to click on those tiny arrows\n                el = "
    },
    {
      "file": "coverage/lcov-report/sorter.js",
      "line": 197,
      "snippet": "    // adds sorting functionality to the UI\n    return function() {\n        if ("
    },
    {
      "file": "src/index.ts",
      "line": 1,
      "snippet": "#!/usr/bin/env node\n\n/* istanbul ignore file */\n\n/**\n * Mission Protocol v2 MCP "
    },
    {
      "file": "src/index.ts",
      "line": 114,
      "snippet": "\n  // Initialize secure YAML loader\n  const loader = new SecureYAMLLoader({\n    "
    },
    {
      "file": "src/index.ts",
      "line": 121,
      "snippet": "\n  // Initialize registry parser\n  const registry = new RegistryParser(loader);\n"
    },
    {
      "file": "src/index.ts",
      "line": 124,
      "snippet": "\n  // Initialize domain pack loader and merger\n  const packLoader = new DomainPa"
    },
    {
      "file": "src/index.ts",
      "line": 129,
      "snippet": "\n  // Initialize token counter for intelligence tools\n  const tokenCounter = new"
    },
    {
      "file": "src/index.ts",
      "line": 132,
      "snippet": "\n  // Initialize tools\n  const listDomainsTool = new ListDomainsToolImpl(registr"
    },
    {
      "file": "src/index.ts",
      "line": 161,
      "snippet": "  // List available tools\n  server.setRequestHandler(ListToolsRequestSchema, asy"
    },
    {
      "file": "src/index.ts",
      "line": 167,
      "snippet": "\n  // Handle tool execution\n  server.setRequestHandler(CallToolRequestSchema, as"
    },
    {
      "file": "src/index.ts",
      "line": 182,
      "snippet": "      // Handle errors gracefully\n      const errorMessage = error instanceof Er"
    },
    {
      "file": "src/index.ts",
      "line": 184,
      "snippet": "\n      // Log error to stderr (won't interfere with stdio protocol)\n      consol"
    },
    {
      "file": "src/index.ts",
      "line": 577,
      "snippet": "    // Initialize all server components\n    const context = await initializeServ"
    },
    {
      "file": "src/index.ts",
      "line": 579,
      "snippet": "\n    // Register tool handlers\n    registerToolHandlers(context);\n\n    // Create"
    },
    {
      "file": "src/index.ts",
      "line": 582,
      "snippet": "\n    // Create stdio transport\n    const transport = new StdioServerTransport();"
    },
    {
      "file": "src/index.ts",
      "line": 585,
      "snippet": "\n    // Connect server to transport\n    await server.connect(transport);\n\n    co"
    },
    {
      "file": "src/index.ts",
      "line": 597,
      "snippet": "\n// Handle graceful shutdown\nprocess.on('SIGINT', async () => {\n  console.error("
    },
    {
      "file": "src/index.ts",
      "line": 610,
      "snippet": "\n// Start the server\nif (require.main === module) {\n  main().catch((error) => {\n"
    },
    {
      "file": "src/tools/combine-packs.ts",
      "line": 141,
      "snippet": "      // Step 1: Validate inputs\n      if (!params.packNames || params.packNames"
    },
    {
      "file": "src/tools/combine-packs.ts",
      "line": 159,
      "snippet": "\n      // Step 2: Load registry\n      const registryEntries: DomainPackEntry[] ="
    },
    {
      "file": "src/tools/combine-packs.ts",
      "line": 162,
      "snippet": "\n      // Step 3: Load all available packs (for dependency resolution)\n      con"
    },
    {
      "file": "src/tools/combine-packs.ts",
      "line": 167,
      "snippet": "\n      // Step 4: Load requested packs\n      const requestedPacks = params.packN"
    },
    {
      "file": "src/tools/combine-packs.ts",
      "line": 172,
      "snippet": "\n      // Step 5: Combine packs\n      const result = this.combiner.combine(reque"
    },
    {
      "file": "src/tools/combine-packs.ts",
      "line": 189,
      "snippet": "\n      // Step 6: Format output\n      const format = params.format || 'yaml';\n  "
    },
    {
      "file": "src/tools/combine-packs.ts",
      "line": 233,
      "snippet": "      // Load registry and packs\n      const registryEntries: DomainPackEntry[] "
    },
    {
      "file": "src/tools/combine-packs.ts",
      "line": 241,
      "snippet": "\n      // Get preview\n      const preview = this.combiner.preview(\n        reque"
    },
    {
      "file": "src/tools/combine-packs.ts",
      "line": 283,
      "snippet": "\n    // YAML format (default)\n    const doc = new YAML.Document(combinedPack);\n "
    },
    {
      "file": "src/tools/combine-packs.ts",
      "line": 319,
      "snippet": "\n  // Format response with metadata\n  let response = `\u2713 Successfully combined ${"
    },
    {
      "file": "src/tools/optimize-tokens.ts",
      "line": 119,
      "snippet": "      // Validate mission file exists\n      const absolutePath = path.resolve(pa"
    },
    {
      "file": "src/tools/optimize-tokens.ts",
      "line": 130,
      "snippet": "\n      // Read mission content\n      const content = await fs.readFile(absoluteP"
    },
    {
      "file": "src/tools/optimize-tokens.ts",
      "line": 133,
      "snippet": "\n      // Optimize\n      const result = await this.optimizer.optimize(content, {"
    },
    {
      "file": "src/tools/optimize-tokens.ts",
      "line": 141,
      "snippet": "\n      // Write optimized content back if not dry run\n      if (!params.dryRun) "
    },
    {
      "file": "src/tools/import-template.ts",
      "line": 82,
      "snippet": "    // Validate input parameters\n    validateParams(params);\n\n    // Determine b"
    },
    {
      "file": "src/tools/import-template.ts",
      "line": 84,
      "snippet": "\n    // Determine base directory\n    const baseDir = params.baseDir || process.c"
    },
    {
      "file": "src/tools/import-template.ts",
      "line": 87,
      "snippet": "\n    // Build semantic validation rules\n    const semanticRules: SemanticValidat"
    },
    {
      "file": "src/tools/import-template.ts",
      "line": 95,
      "snippet": "\n    // Build import options\n    const options: ImportOptions = {\n      skipSign"
    },
    {
      "file": "src/tools/import-template.ts",
      "line": 102,
      "snippet": "\n    // Create importer\n    const importer = new TemplateImporter(baseDir, optio"
    },
    {
      "file": "src/tools/import-template.ts",
      "line": 105,
      "snippet": "\n    // Execute import with full 6-layer validation\n    const result: ImportResu"
    },
    {
      "file": "src/tools/import-template.ts",
      "line": 108,
      "snippet": "\n    // Convert dependencies map to object for JSON serialization\n    const depe"
    },
    {
      "file": "src/tools/import-template.ts",
      "line": 117,
      "snippet": "\n    // Build success response\n    return {\n      success: true,\n      template:"
    },
    {
      "file": "src/tools/import-template.ts",
      "line": 162,
      "snippet": "\n  // Validate trust level if provided\n  if (params.trustLevel) {\n    const vali"
    },
    {
      "file": "src/tools/import-template.ts",
      "line": 172,
      "snippet": "\n  // Validate resource limits if provided\n  if (params.maxResourceMemory !== un"
    },
    {
      "file": "src/tools/import-template.ts",
      "line": 181,
      "snippet": "\n  // Warn if signature verification is skipped\n  if (params.skipSignatureVerifi"
    },
    {
      "file": "src/tools/create-mission.ts",
      "line": 112,
      "snippet": "    // Validate input parameters\n    this.validateParams(params);\n\n    // 1. Loa"
    },
    {
      "file": "src/tools/create-mission.ts",
      "line": 114,
      "snippet": "\n    // 1. Load generic template\n    const genericTemplate = this.loadGenericTem"
    },
    {
      "file": "src/tools/create-mission.ts",
      "line": 117,
      "snippet": "\n    // 2. Generate mission ID\n    const missionId = this.generateMissionId();\n\n"
    },
    {
      "file": "src/tools/create-mission.ts",
      "line": 120,
      "snippet": "\n    // 3. Populate core fields from params\n    let mission = this.populateCoreF"
    },
    {
      "file": "src/tools/create-mission.ts",
      "line": 123,
      "snippet": "\n    // 4. If domain specified, load and merge domainFields\n    if (params.domai"
    },
    {
      "file": "src/tools/create-mission.ts",
      "line": 128,
      "snippet": "\n    // 5. Validate final mission\n    this.validateMission(mission);\n\n    // 6. "
    },
    {
      "file": "src/tools/create-mission.ts",
      "line": 131,
      "snippet": "\n    // 6. Return YAML string\n    return this.toYAML(mission);\n  }\n\n  /**\n   * V"
    },
    {
      "file": "src/tools/create-mission.ts",
      "line": 175,
      "snippet": "\n    // Add random suffix for uniqueness when called rapidly\n    const random = "
    },
    {
      "file": "src/tools/create-mission.ts",
      "line": 190,
      "snippet": "      // Load without schema validation to avoid readonly type issues\n      cons"
    },
    {
      "file": "src/tools/create-mission.ts",
      "line": 192,
      "snippet": "\n      // Ensure template has required structure\n      if (!isGenericMission(tem"
    },
    {
      "file": "src/tools/create-mission.ts",
      "line": 220,
      "snippet": "    // Create a new mission object (no mutation)\n    const mission: GenericMissi"
    },
    {
      "file": "src/tools/create-mission.ts",
      "line": 229,
      "snippet": "      // Ensure successCriteria is never empty (requirement from schema)\n      s"
    },
    {
      "file": "src/tools/create-mission.ts",
      "line": 233,
      "snippet": "      // Ensure deliverables is never empty (requirement from schema)\n      deli"
    },
    {
      "file": "src/tools/create-mission.ts",
      "line": 255,
      "snippet": "      // Load domain pack\n      const domainPack = this.packLoader.loadPack(doma"
    },
    {
      "file": "src/tools/create-mission.ts",
      "line": 257,
      "snippet": "\n      // Create extension object with domainFields\n      const extension = {\n  "
    },
    {
      "file": "src/tools/create-mission.ts",
      "line": 262,
      "snippet": "\n      // Merge using deep merge logic\n      const merged = this.merger.merge(mi"
    },
    {
      "file": "src/tools/create-mission.ts",
      "line": 269,
      "snippet": "        // Provide helpful error message if domain not found\n        if (error.m"
    },
    {
      "file": "src/tools/create-mission.ts",
      "line": 288,
      "snippet": "    // Use type guard for validation instead of ajv to avoid readonly type issue"
    },
    {
      "file": "src/tools/create-mission.ts",
      "line": 292,
      "snippet": "\n    // Additional structural validation\n    if (!mission.schemaType || mission."
    },
    {
      "file": "src/tools/create-mission.ts",
      "line": 327,
      "snippet": "      // Use YAML.stringify for clean output\n      const yamlString = YAML.strin"
    },
    {
      "file": "src/tools/split-mission.ts",
      "line": 126,
      "snippet": "\n    // Initialize complexity scorer with model-specific config\n    const contex"
    },
    {
      "file": "src/tools/split-mission.ts",
      "line": 134,
      "snippet": "\n    // Initialize mission splitter\n    this.splitter = new MissionSplitter(this"
    },
    {
      "file": "src/tools/split-mission.ts",
      "line": 146,
      "snippet": "    // Validate input\n    this.validateParams(params);\n\n    // 1. Load mission f"
    },
    {
      "file": "src/tools/split-mission.ts",
      "line": 148,
      "snippet": "\n    // 1. Load mission file\n    const mission = this.loadMissionFile(params.mis"
    },
    {
      "file": "src/tools/split-mission.ts",
      "line": 151,
      "snippet": "\n    // 2. Analyze complexity\n    const complexity = await this.complexityScorer"
    },
    {
      "file": "src/tools/split-mission.ts",
      "line": 155,
      "snippet": "\n    // 3. Check if split is needed\n    if (!complexity.shouldSplit) {\n      ret"
    },
    {
      "file": "src/tools/split-mission.ts",
      "line": 168,
      "snippet": "\n    // 4. Split mission\n    const splitResult = await this.splitter.split(missi"
    },
    {
      "file": "src/tools/split-mission.ts",
      "line": 174,
      "snippet": "\n    // 5. Generate sub-mission files\n    const outputDir = params.outputDir || "
    },
    {
      "file": "src/tools/split-mission.ts",
      "line": 182,
      "snippet": "\n    // 6. Create execution plan\n    const executionPlan = this.createExecutionP"
    },
    {
      "file": "src/tools/split-mission.ts",
      "line": 185,
      "snippet": "\n    // 7. Generate summary\n    const summary = this.generateSummary(complexity,"
    },
    {
      "file": "src/tools/split-mission.ts",
      "line": 244,
      "snippet": "      // Try to load as YAML\n      const content = fs.readFileSync(filePath, 'ut"
    },
    {
      "file": "src/tools/split-mission.ts",
      "line": 249,
      "snippet": "\n        // Check if it's a GenericMission\n        if (isGenericMission(parsed))"
    },
    {
      "file": "src/tools/split-mission.ts",
      "line": 254,
      "snippet": "\n        // Otherwise return as text\n        return content;\n      } catch {\n   "
    },
    {
      "file": "src/tools/split-mission.ts",
      "line": 258,
      "snippet": "        // If YAML parsing fails, return as text\n        return content;\n      }"
    },
    {
      "file": "src/tools/split-mission.ts",
      "line": 282,
      "snippet": "\n      // Convert SubMission to GenericMission format\n      const missionYaml = "
    },
    {
      "file": "src/tools/split-mission.ts",
      "line": 285,
      "snippet": "\n      // Write file\n      fs.writeFileSync(filePath, missionYaml, 'utf-8');\n   "
    },
    {
      "file": "src/tools/split-mission.ts",
      "line": 460,
      "snippet": "\n## Files Created\n\n${result.subMissionFiles?.map((f, i) => `${i + 1}. \\`${f}\\``)"
    },
    {
      "file": "src/tools/split-mission.ts",
      "line": 464,
      "snippet": "\n## Execution Plan\n\n${result.executionPlan?.map(ep =>\n  `**Step ${ep.order}:** $"
    },
    {
      "file": "src/tools/version-template.ts",
      "line": 20,
      "snippet": "\n// Global instances (in production, these would be injected)\nlet versionManager"
    },
    {
      "file": "src/tools/version-template.ts",
      "line": 34,
      "snippet": "\n// ============================================================================"
    },
    {
      "file": "src/tools/version-template.ts",
      "line": 36,
      "snippet": "// Tool 1: Check Version Compatibility\n// ======================================"
    },
    {
      "file": "src/tools/version-template.ts",
      "line": 37,
      "snippet": "// ============================================================================\n"
    },
    {
      "file": "src/tools/version-template.ts",
      "line": 70,
      "snippet": "\n    // Get the two versions from the registry\n    const templateVersion1 = vers"
    },
    {
      "file": "src/tools/version-template.ts",
      "line": 130,
      "snippet": "\n// ============================================================================"
    },
    {
      "file": "src/tools/version-template.ts",
      "line": 132,
      "snippet": "// Tool 2: Find Migration Path\n// =============================================="
    },
    {
      "file": "src/tools/version-template.ts",
      "line": 133,
      "snippet": "// ============================================================================\n"
    },
    {
      "file": "src/tools/version-template.ts",
      "line": 243,
      "snippet": "\n// ============================================================================"
    },
    {
      "file": "src/tools/version-template.ts",
      "line": 245,
      "snippet": "// Tool 3: Register Template Version\n// ========================================"
    },
    {
      "file": "src/tools/version-template.ts",
      "line": 246,
      "snippet": "// ============================================================================\n"
    },
    {
      "file": "src/tools/version-template.ts",
      "line": 296,
      "snippet": "\n    // Validate the version\n    const validation = versionManager.validateVersi"
    },
    {
      "file": "src/tools/version-template.ts",
      "line": 302,
      "snippet": "\n    // Register the version\n    versionManager.registerVersion(templateVersion)"
    },
    {
      "file": "src/tools/version-template.ts",
      "line": 355,
      "snippet": "\n// ============================================================================"
    },
    {
      "file": "src/tools/version-template.ts",
      "line": 357,
      "snippet": "// Tool 4: Get Latest Version\n// ==============================================="
    },
    {
      "file": "src/tools/version-template.ts",
      "line": 358,
      "snippet": "// ============================================================================\n"
    },
    {
      "file": "src/tools/version-template.ts",
      "line": 439,
      "snippet": "\n// ============================================================================"
    },
    {
      "file": "src/tools/version-template.ts",
      "line": 441,
      "snippet": "// Tool 5: Compare Versions\n// ================================================="
    },
    {
      "file": "src/tools/version-template.ts",
      "line": 442,
      "snippet": "// ============================================================================\n"
    },
    {
      "file": "src/tools/version-template.ts",
      "line": 507,
      "snippet": "\n// ============================================================================"
    },
    {
      "file": "src/tools/version-template.ts",
      "line": 509,
      "snippet": "// Export all tool definitions for MCP registration\n// ========================="
    },
    {
      "file": "src/tools/version-template.ts",
      "line": 510,
      "snippet": "// ============================================================================\n"
    },
    {
      "file": "src/tools/list-domains.ts",
      "line": 36,
      "snippet": "      // Load all domain entries from registry\n      const entries = this.regist"
    },
    {
      "file": "src/tools/list-domains.ts",
      "line": 38,
      "snippet": "\n      // Convert to simplified DomainInfo format\n      return entries.map(entry"
    },
    {
      "file": "src/tools/list-domains.ts",
      "line": 42,
      "snippet": "      // Handle empty registry gracefully\n      if (error instanceof Error && er"
    },
    {
      "file": "src/tools/extract-template.ts",
      "line": 38,
      "snippet": "    // Validate input parameters\n    validateParams(params);\n\n    // Resolve the"
    },
    {
      "file": "src/tools/extract-template.ts",
      "line": 40,
      "snippet": "\n    // Resolve the mission path\n    const missionPath = path.resolve(params.mis"
    },
    {
      "file": "src/tools/extract-template.ts",
      "line": 43,
      "snippet": "\n    // Determine if it's a file or directory\n    const stats = fs.statSync(miss"
    },
    {
      "file": "src/tools/extract-template.ts",
      "line": 47,
      "snippet": "\n    // Create extraction config\n    const config: ExtractionConfig = {\n      so"
    },
    {
      "file": "src/tools/extract-template.ts",
      "line": 64,
      "snippet": "\n    // Run the extraction\n    const extractor = new TemplateExtractor(config);\n"
    },
    {
      "file": "src/tools/extract-template.ts",
      "line": 68,
      "snippet": "\n    // If successful, write the template to disk\n    if (result.success && resu"
    },
    {
      "file": "src/tools/extract-template.ts",
      "line": 119,
      "snippet": "\n  // Validate template name format\n  if (!/^[a-zA-Z0-9-_]+$/.test(params.templa"
    },
    {
      "file": "src/tools/extract-template.ts",
      "line": 135,
      "snippet": "\n  // Create template directory\n  fs.mkdirSync(templateDir, { recursive: true })"
    },
    {
      "file": "src/tools/extract-template.ts",
      "line": 138,
      "snippet": "\n  // Write template files\n  for (const file of template.fileStructure) {\n    co"
    },
    {
      "file": "src/tools/extract-template.ts",
      "line": 143,
      "snippet": "\n    // Create directory if it doesn't exist\n    fs.mkdirSync(fileDir, { recursi"
    },
    {
      "file": "src/tools/extract-template.ts",
      "line": 146,
      "snippet": "\n    // Write file content\n    fs.writeFileSync(filePath, file.content, 'utf-8')"
    },
    {
      "file": "src/tools/extract-template.ts",
      "line": 150,
      "snippet": "\n  // Write metadata file\n  const metadataPath = path.join(templateDir, 'templat"
    },
    {
      "file": "src/tools/extract-template.ts",
      "line": 158,
      "snippet": "\n  // Write extraction report\n  const reportPath = path.join(templateDir, 'EXTRA"
    },
    {
      "file": "src/tools/extract-template.ts",
      "line": 163,
      "snippet": "\n  // Write hooks if present\n  if (template.hooks?.preGenerate) {\n    const preH"
    },
    {
      "file": "src/tools/suggest-splits.ts",
      "line": 111,
      "snippet": "    // Initialize complexity scorer\n    const contextWindow = this.getContextWin"
    },
    {
      "file": "src/tools/suggest-splits.ts",
      "line": 118,
      "snippet": "\n    // Initialize splitter\n    this.splitter = new MissionSplitter(this.complex"
    },
    {
      "file": "src/tools/suggest-splits.ts",
      "line": 127,
      "snippet": "    // Validate input\n    this.validateParams(params);\n\n    // Load mission\n    "
    },
    {
      "file": "src/tools/suggest-splits.ts",
      "line": 129,
      "snippet": "\n    // Load mission\n    const mission = this.loadMissionFile(params.missionFile"
    },
    {
      "file": "src/tools/suggest-splits.ts",
      "line": 132,
      "snippet": "\n    // Get split suggestions from splitter\n    const suggestion = await this.sp"
    },
    {
      "file": "src/tools/suggest-splits.ts",
      "line": 135,
      "snippet": "\n    // Build detailed result\n    const result: SplitSuggestion = {\n      should"
    },
    {
      "file": "src/tools/suggest-splits.ts",
      "line": 151,
      "snippet": "\n    // Add breakpoint details if split is recommended\n    if (suggestion.should"
    },
    {
      "file": "src/tools/export-template.ts",
      "line": 55,
      "snippet": "    // Validate input parameters\n    validateParams(params);\n\n    // Determine b"
    },
    {
      "file": "src/tools/export-template.ts",
      "line": 57,
      "snippet": "\n    // Determine base directory\n    const baseDir = params.baseDir || process.c"
    },
    {
      "file": "src/tools/export-template.ts",
      "line": 60,
      "snippet": "\n    // Build export options\n    const options: ExportOptions = {\n      format: "
    },
    {
      "file": "src/tools/export-template.ts",
      "line": 67,
      "snippet": "\n    // Create exporter\n    const exporter = new TemplateExporter(baseDir);\n\n   "
    },
    {
      "file": "src/tools/export-template.ts",
      "line": 70,
      "snippet": "\n    // Execute export\n    const success = exporter.export(params.template, para"
    },
    {
      "file": "src/tools/export-template.ts",
      "line": 77,
      "snippet": "\n    // Generate preview\n    const content = exporter.exportToString(params.temp"
    },
    {
      "file": "src/tools/export-template.ts",
      "line": 81,
      "snippet": "\n    // Resolve output path for display\n    const resolvedPath = path.resolve(ba"
    },
    {
      "file": "src/tools/export-template.ts",
      "line": 113,
      "snippet": "\n  // Validate template structure\n  if (!params.template.apiVersion || params.te"
    },
    {
      "file": "src/tools/export-template.ts",
      "line": 130,
      "snippet": "\n  // Validate format if provided\n  if (params.format && !['yaml', 'json'].inclu"
    },
    {
      "file": "src/tools/analyze-dependencies.ts",
      "line": 47,
      "snippet": "    // Validate input\n    if (!args.missionDirectory) {\n      throw new Error('m"
    },
    {
      "file": "src/tools/analyze-dependencies.ts",
      "line": 55,
      "snippet": "\n    // Find all mission files\n    const missionFiles = await findMissionFiles(a"
    },
    {
      "file": "src/tools/analyze-dependencies.ts",
      "line": 62,
      "snippet": "\n    // Load mission data\n    const missions = await loadMissionFiles(missionFil"
    },
    {
      "file": "src/tools/analyze-dependencies.ts",
      "line": 65,
      "snippet": "\n    // Create analyzer and analyze dependencies\n    const analyzer = new Depend"
    },
    {
      "file": "src/tools/analyze-dependencies.ts",
      "line": 69,
      "snippet": "\n    // Validate graph\n    const validator = new GraphValidator();\n    const val"
    },
    {
      "file": "src/tools/analyze-dependencies.ts",
      "line": 73,
      "snippet": "\n    // Infer implicit dependencies if requested\n    let inferredDependencies: a"
    },
    {
      "file": "src/tools/analyze-dependencies.ts",
      "line": 84,
      "snippet": "\n      // Filter by confidence\n      const minConfidence = args.minConfidence ||"
    },
    {
      "file": "src/tools/analyze-dependencies.ts",
      "line": 91,
      "snippet": "\n    // Return result\n    return {\n      totalMissions: missionFiles.length,\n   "
    },
    {
      "file": "src/tools/analyze-dependencies.ts",
      "line": 138,
      "snippet": "        // Skip node_modules, .git, etc.\n        if (!entry.name.startsWith('.')"
    },
    {
      "file": "src/tools/analyze-dependencies.ts",
      "line": 143,
      "snippet": "        // Check if it's a YAML mission file\n        if (entry.name.endsWith('.y"
    },
    {
      "file": "src/tools/analyze-dependencies.ts",
      "line": 167,
      "snippet": "        // Add file path to mission data\n        (missionData as any).filePath ="
    },
    {
      "file": "src/tools/score-quality.ts",
      "line": 28,
      "snippet": "    // Load mission file\n    const missionFile = path.resolve(input.missionFile)"
    },
    {
      "file": "src/tools/score-quality.ts",
      "line": 38,
      "snippet": "\n    // Create scorer with default configuration\n    const scorer = new QualityS"
    },
    {
      "file": "src/tools/score-quality.ts",
      "line": 41,
      "snippet": "\n    // Score the mission\n    const score = await scorer.score(mission, mission."
    },
    {
      "file": "src/tools/score-quality.ts",
      "line": 44,
      "snippet": "\n    // Generate summary\n    const summary = formatQualitySummary(score, input.v"
    },
    {
      "file": "src/tools/score-quality.ts",
      "line": 66,
      "snippet": "\n  // Header\n  lines.push('=== Mission Quality Assessment ===\\n');\n\n  // Overall"
    },
    {
      "file": "src/tools/score-quality.ts",
      "line": 69,
      "snippet": "\n  // Overall score\n  const totalPercent = (score.total * 100).toFixed(1);\n  con"
    },
    {
      "file": "src/tools/score-quality.ts",
      "line": 74,
      "snippet": "\n  // Dimensional breakdown\n  lines.push('Dimensional Scores:');\n  lines.push(` "
    },
    {
      "file": "src/tools/score-quality.ts",
      "line": 81,
      "snippet": "\n  // Performance\n  lines.push(`Processing Time: ${score.metadata.processingTime"
    },
    {
      "file": "src/tools/score-quality.ts",
      "line": 85,
      "snippet": "\n  // Suggestions\n  if (score.suggestions.length > 0) {\n    lines.push('Improvem"
    },
    {
      "file": "src/tools/score-quality.ts",
      "line": 117,
      "snippet": "\n  // Verbose metrics breakdown\n  if (verbose) {\n    lines.push('\\n=== Detailed "
    },
    {
      "file": "src/domains/domain-pack-loader.ts",
      "line": 102,
      "snippet": "    // Step 1: Find pack in registry\n    const registryEntry = this.registry.fin"
    },
    {
      "file": "src/domains/domain-pack-loader.ts",
      "line": 107,
      "snippet": "\n    // Step 2: Load pack.yaml manifest\n    const manifestPath = path.join(regis"
    },
    {
      "file": "src/domains/domain-pack-loader.ts",
      "line": 111,
      "snippet": "\n    // Step 3: Validate manifest\n    const validationResult = this.validateMani"
    },
    {
      "file": "src/domains/domain-pack-loader.ts",
      "line": 119,
      "snippet": "\n    // Step 4: Load domain schema\n    const schemaPath = path.join(registryEntr"
    },
    {
      "file": "src/domains/domain-pack-loader.ts",
      "line": 123,
      "snippet": "\n    // Step 5: Load domain template\n    const templatePath = path.join(registry"
    },
    {
      "file": "src/domains/domain-pack-loader.ts",
      "line": 127,
      "snippet": "\n    // Validate template against schema for safety before returning\n    const t"
    },
    {
      "file": "src/domains/domain-pack-loader.ts",
      "line": 135,
      "snippet": "\n    // Step 6: Return complete pack\n    return {\n      manifest,\n      schema,\n"
    },
    {
      "file": "src/domains/domain-pack-loader.ts",
      "line": 180,
      "snippet": "\n    // Validate required fields\n    if (!manifest.name || manifest.name.trim()."
    },
    {
      "file": "src/domains/domain-pack-loader.ts",
      "line": 205,
      "snippet": "      // Validate schema path is relative (no traversal)\n      if (manifest.sche"
    },
    {
      "file": "src/domains/domain-pack-loader.ts",
      "line": 210,
      "snippet": "\n    // Validate author if present\n    if (manifest.author !== undefined && mani"
    },
    {
      "file": "src/domains/domain-pack-loader.ts",
      "line": 215,
      "snippet": "\n    // Validate dependencies if present\n    if (manifest.dependencies) {\n      "
    },
    {
      "file": "src/domains/domain-pack-loader.ts",
      "line": 250,
      "snippet": "      // Load schema file (can be YAML or JSON)\n      const schema = this.loader"
    },
    {
      "file": "src/domains/domain-pack-loader.ts",
      "line": 252,
      "snippet": "\n      // Validate it's a valid JSON Schema structure\n      if (!this.isValidJSO"
    },
    {
      "file": "src/domains/domain-pack-loader.ts",
      "line": 277,
      "snippet": "\n      // Ensure template is an object\n      if (typeof template !== 'object' ||"
    },
    {
      "file": "src/domains/domain-pack-loader.ts",
      "line": 325,
      "snippet": "\n    // Validate manifest\n    const manifestValidation = this.validateManifest(p"
    },
    {
      "file": "src/domains/domain-pack-loader.ts",
      "line": 331,
      "snippet": "\n    // Validate schema\n    if (!this.isValidJSONSchema(pack.schema)) {\n      er"
    },
    {
      "file": "src/domains/domain-pack-loader.ts",
      "line": 336,
      "snippet": "\n    // Validate template is an object\n    if (\n      typeof pack.template !== '"
    },
    {
      "file": "src/domains/domain-pack-loader.ts",
      "line": 345,
      "snippet": "\n    // Could add template validation against schema here if needed\n    // Valid"
    },
    {
      "file": "src/domains/domain-pack-loader.ts",
      "line": 347,
      "snippet": "    // Validate template conforms to schema\n    const schemaValidation = this.va"
    },
    {
      "file": "src/domains/domain-pack-loader.ts",
      "line": 388,
      "snippet": "\n    // Must have at least a 'type' property or be a schema composition\n    cons"
    },
    {
      "file": "src/quality/improvement-engine.ts",
      "line": 37,
      "snippet": "\n    // Process clarity metrics\n    for (const metric of clarityScore.metrics) {"
    },
    {
      "file": "src/quality/improvement-engine.ts",
      "line": 42,
      "snippet": "\n    // Process completeness metrics\n    for (const metric of completenessScore."
    },
    {
      "file": "src/quality/improvement-engine.ts",
      "line": 47,
      "snippet": "\n    // Process AI-readiness metrics\n    for (const metric of aiReadinessScore.m"
    },
    {
      "file": "src/quality/improvement-engine.ts",
      "line": 52,
      "snippet": "\n    // Sort by severity (critical first, then important, then info)\n    const s"
    },
    {
      "file": "src/quality/improvement-engine.ts",
      "line": 90,
      "snippet": "    // Syntactic Validity (Critical)\n    this.addRule('Syntactic Validity', {\n  "
    },
    {
      "file": "src/quality/improvement-engine.ts",
      "line": 98,
      "snippet": "\n    // Structural Completeness\n    this.addRule('Structural Completeness', {\n  "
    },
    {
      "file": "src/quality/improvement-engine.ts",
      "line": 109,
      "snippet": "\n    // Mission Cyclomatic Complexity\n    this.addRule('Mission Cyclomatic Compl"
    },
    {
      "file": "src/quality/improvement-engine.ts",
      "line": 127,
      "snippet": "\n    // Flesch-Kincaid Grade Level\n    this.addRule('Flesch-Kincaid Grade Level'"
    },
    {
      "file": "src/quality/improvement-engine.ts",
      "line": 144,
      "snippet": "\n    // Lexical Density\n    this.addRule('Lexical Density', {\n      condition: ("
    },
    {
      "file": "src/quality/improvement-engine.ts",
      "line": 153,
      "snippet": "\n    // Referential Ambiguity\n    this.addRule('Referential Ambiguity', {\n      "
    },
    {
      "file": "src/quality/improvement-engine.ts",
      "line": 163,
      "snippet": "\n    // Lexical Ambiguity\n    this.addRule('Lexical Ambiguity', {\n      conditio"
    },
    {
      "file": "src/quality/improvement-engine.ts",
      "line": 173,
      "snippet": "\n    // Information Density\n    this.addRule('Information Density', {\n      cond"
    },
    {
      "file": "src/quality/improvement-engine.ts",
      "line": 188,
      "snippet": "\n    // Information Breadth\n    this.addRule('Information Breadth', {\n      cond"
    },
    {
      "file": "src/quality/improvement-engine.ts",
      "line": 198,
      "snippet": "\n    // Semantic Coverage\n    this.addRule('Semantic Coverage', {\n      conditio"
    },
    {
      "file": "src/quality/improvement-engine.ts",
      "line": 208,
      "snippet": "\n    // Instruction Specificity\n    this.addRule('Instruction Specificity', {\n  "
    },
    {
      "file": "src/quality/improvement-engine.ts",
      "line": 245,
      "snippet": "\n    // Linting Score\n    this.addRule('Linting Score', {\n      condition: (valu"
    },
    {
      "file": "src/quality/quality-scorer.ts",
      "line": 49,
      "snippet": "\n    // Analyze all dimensions in parallel for performance\n    const [claritySco"
    },
    {
      "file": "src/quality/quality-scorer.ts",
      "line": 56,
      "snippet": "\n    // Calculate total weighted score\n    const totalScore = this.calculateTota"
    },
    {
      "file": "src/quality/quality-scorer.ts",
      "line": 63,
      "snippet": "\n    // Generate improvement suggestions\n    const suggestions = this.improvemen"
    },
    {
      "file": "src/quality/quality-scorer.ts",
      "line": 73,
      "snippet": "\n    // Validate performance target\n    if (processingTimeMs > this.performanceT"
    },
    {
      "file": "src/quality/quality-scorer.ts",
      "line": 111,
      "snippet": "\n    // Ensure score is between 0 and 1\n    return Math.max(0, Math.min(1, total"
    },
    {
      "file": "src/quality/quality-scorer.ts",
      "line": 125,
      "snippet": "    // Adapted formula: MMI = 171 - 5.2 * ln(Volume) - 0.23 * CC - 16.2 * ln(LOC"
    },
    {
      "file": "src/quality/quality-scorer.ts",
      "line": 126,
      "snippet": "    // Simplified for mission context with empirical weights\n    const volumeFac"
    },
    {
      "file": "src/quality/quality-scorer.ts",
      "line": 132,
      "snippet": "\n    // Normalize to 0-100 scale\n    return Math.max(0, Math.min(100, mmi));\n  }"
    },
    {
      "file": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 17,
      "snippet": "\n  // Weak phrases that indicate vagueness (from NASA requirements quality model"
    },
    {
      "file": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 64,
      "snippet": "\n    // If syntactic validity fails, entire dimension scores 0\n    if (!metrics."
    },
    {
      "file": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 92,
      "snippet": "      // Mission is already parsed, but check for basic structure\n      if (type"
    },
    {
      "file": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 96,
      "snippet": "\n      // Check for basic required structure\n      const hasBasicStructure =\n   "
    },
    {
      "file": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 115,
      "snippet": "      // 1. Explicit Goal\n      {\n        name: 'Explicit goal',\n        test: ("
    },
    {
      "file": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 121,
      "snippet": "\n      // 2. Defined Scope\n      {\n        name: 'Defined scope',\n        test: "
    },
    {
      "file": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 128,
      "snippet": "\n      // 3. Format Specification\n      {\n        name: 'Format specification',\n"
    },
    {
      "file": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 135,
      "snippet": "\n      // 4. Constraint Declaration\n      {\n        name: 'Constraint declaratio"
    },
    {
      "file": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 142,
      "snippet": "\n      // 5. Success Criteria Definition\n      {\n        name: 'Success criteria"
    },
    {
      "file": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 167,
      "snippet": "\n    // Check for consistent data types\n    if (mission.successCriteria && typeo"
    },
    {
      "file": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 170,
      "snippet": "      // Prefer array over multi-line string\n      if (mission.successCriteria.i"
    },
    {
      "file": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 181,
      "snippet": "\n    // Check for vague language\n    const fullText = JSON.stringify(mission).to"
    },
    {
      "file": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 195,
      "snippet": "\n    // Check for proper field naming\n    if (mission.domainFields) {\n      cons"
    },
    {
      "file": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 200,
      "snippet": "        // Check for camelCase convention\n        if (!/^[a-z][a-zA-Z0-9]*$/.tes"
    },
    {
      "file": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 206,
      "snippet": "\n    // Check for empty fields\n    const emptyFields = this.findEmptyFields(miss"
    },
    {
      "file": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 212,
      "snippet": "\n    // Calculate score: 1 - (violations / total possible lines)\n    const total"
    },
    {
      "file": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 219,
      "snippet": "\n  // Helper methods for instruction specificity\n\n  private hasExplicitGoal(obje"
    },
    {
      "file": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 226,
      "snippet": "\n    // Should contain action verbs\n    const actionVerbs = ['implement', 'creat"
    },
    {
      "file": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 232,
      "snippet": "\n    // Should be substantive (>10 words)\n    const wordCount = objective.split("
    },
    {
      "file": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 235,
      "snippet": "\n    // Should start with \"To\" or contain action verb\n    const isWellFormed = t"
    },
    {
      "file": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 246,
      "snippet": "\n    // Look for scope indicators\n    const scopeIndicators = [\n      'in-scope'"
    },
    {
      "file": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 254,
      "snippet": "\n    // Context should be detailed (>25 words)\n    const wordCount = context.spl"
    },
    {
      "file": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 263,
      "snippet": "\n    // Look for format specifications\n    const formatIndicators = [\n      'for"
    },
    {
      "file": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 275,
      "snippet": "\n    // Look for negative constraints\n    const constraintIndicators = [\n      '"
    },
    {
      "file": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 285,
      "snippet": "\n    // Or positive constraints\n    const positiveConstraints = [\n      'must', "
    },
    {
      "file": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 295,
      "snippet": "\n    // Check domainFields for constraints\n    const hasConstraintsField = missi"
    },
    {
      "file": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 306,
      "snippet": "      // Should have at least 3 criteria\n      if (successCriteria.length < 3) r"
    },
    {
      "file": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 308,
      "snippet": "\n      // Each criterion should be specific (>5 words)\n      const allSpecific ="
    },
    {
      "file": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 318,
      "snippet": "      // If string, should be detailed\n      return successCriteria.split(/\\s+/)"
    },
    {
      "file": "src/quality/analyzers/ai-readiness-analyzer.ts",
      "line": 324,
      "snippet": "\n  // Helper methods for linting\n\n  private findEmptyFields(obj: any, path: stri"
    },
    {
      "file": "src/quality/analyzers/clarity-analyzer.ts",
      "line": 23,
      "snippet": "\n    // Calculate all clarity metrics\n    const metrics: ClarityMetrics = {\n    "
    },
    {
      "file": "src/quality/analyzers/clarity-analyzer.ts",
      "line": 33,
      "snippet": "\n    // Normalize and create metric results\n    const metricResults: MetricResul"
    },
    {
      "file": "src/quality/analyzers/clarity-analyzer.ts",
      "line": 80,
      "snippet": "\n    // Calculate weighted dimension score\n    const score = metricResults.reduc"
    },
    {
      "file": "src/quality/analyzers/clarity-analyzer.ts",
      "line": 118,
      "snippet": "\n    // Function words (articles, prepositions, pronouns, conjunctions)\n    cons"
    },
    {
      "file": "src/quality/analyzers/clarity-analyzer.ts",
      "line": 141,
      "snippet": "\n    // Common ambiguous words in technical contexts\n    const ambiguousWords = "
    },
    {
      "file": "src/quality/analyzers/clarity-analyzer.ts",
      "line": 163,
      "snippet": "      // Patterns that often lead to syntactic ambiguity\n      const patterns = "
    },
    {
      "file": "src/quality/analyzers/clarity-analyzer.ts",
      "line": 194,
      "snippet": "          // Simple heuristic: pronoun at sentence start is more likely unresolv"
    },
    {
      "file": "src/quality/analyzers/clarity-analyzer.ts",
      "line": 198,
      "snippet": "          // Pronoun without clear antecedent in previous words\n          else i"
    },
    {
      "file": "src/quality/analyzers/clarity-analyzer.ts",
      "line": 218,
      "snippet": "\n    // Conditional keywords\n    const conditionalKeywords = [\n      /\\bif\\b/g, "
    },
    {
      "file": "src/quality/analyzers/clarity-analyzer.ts",
      "line": 225,
      "snippet": "\n    // Logical operators\n    const logicalOperators = [\n      /\\band\\b/g, /\\bor"
    },
    {
      "file": "src/quality/analyzers/clarity-analyzer.ts",
      "line": 230,
      "snippet": "\n    // Implicit loops\n    const loopPatterns = [\n      /\\bfor each\\b/g, /\\brepe"
    },
    {
      "file": "src/quality/analyzers/clarity-analyzer.ts",
      "line": 235,
      "snippet": "\n    // Count decision points\n    [...conditionalKeywords, ...logicalOperators, "
    },
    {
      "file": "src/quality/analyzers/clarity-analyzer.ts",
      "line": 241,
      "snippet": "\n    // Check for optional fields in structure\n    if (mission.domainFields) {\n "
    },
    {
      "file": "src/quality/analyzers/clarity-analyzer.ts",
      "line": 244,
      "snippet": "      // Optional sections add complexity\n      const optionalSections = ['assum"
    },
    {
      "file": "src/quality/analyzers/clarity-analyzer.ts",
      "line": 253,
      "snippet": "\n  // Helper methods\n\n  private extractTextContent(mission: MissionContent): str"
    },
    {
      "file": "src/quality/analyzers/clarity-analyzer.ts",
      "line": 300,
      "snippet": "\n    // Adjust for silent e\n    if (word.endsWith('e')) count--;\n\n    return Mat"
    },
    {
      "file": "src/quality/analyzers/clarity-analyzer.ts",
      "line": 315,
      "snippet": "\n  // Normalization functions\n\n  private normalizeFleschKincaid(fkgl: number): n"
    },
    {
      "file": "src/quality/analyzers/clarity-analyzer.ts",
      "line": 319,
      "snippet": "    // Target: 10-12, penalize > 15\n    if (fkgl < 10) return 0.8;\n    if (fkgl "
    },
    {
      "file": "src/quality/analyzers/clarity-analyzer.ts",
      "line": 327,
      "snippet": "    // Target: > 50%\n    if (density >= 50) return 1.0;\n    return density / 50;"
    },
    {
      "file": "src/quality/analyzers/clarity-analyzer.ts",
      "line": 333,
      "snippet": "    // MCC 1-10: 1.0-0.5, MCC > 20: 0.0\n    if (mcc <= 10) return 1.0 - (mcc - 1"
    },
    {
      "file": "src/quality/analyzers/completeness-analyzer.ts",
      "line": 16,
      "snippet": "\n  // Required fields based on mission schema\n  private readonly REQUIRED_FIELDS"
    },
    {
      "file": "src/quality/analyzers/completeness-analyzer.ts",
      "line": 87,
      "snippet": "        // Check for non-empty content\n        if (typeof value === 'string' && "
    },
    {
      "file": "src/quality/analyzers/completeness-analyzer.ts",
      "line": 107,
      "snippet": "      // Core mission elements\n      { name: 'Has objective', test: () => this.h"
    },
    {
      "file": "src/quality/analyzers/completeness-analyzer.ts",
      "line": 112,
      "snippet": "\n      // Domain-specific elements\n      { name: 'Has domain type', test: () => "
    },
    {
      "file": "src/quality/analyzers/completeness-analyzer.ts",
      "line": 116,
      "snippet": "\n      // Rich content indicators\n      { name: 'Multiple success criteria', tes"
    },
    {
      "file": "src/quality/analyzers/completeness-analyzer.ts",
      "line": 120,
      "snippet": "\n      // Domain-specific breadth (varies by type)\n      { name: 'Has domain fie"
    },
    {
      "file": "src/quality/analyzers/completeness-analyzer.ts",
      "line": 136,
      "snippet": "      // Objective should be substantive (>10 words)\n      {\n        name: 'Obje"
    },
    {
      "file": "src/quality/analyzers/completeness-analyzer.ts",
      "line": 142,
      "snippet": "\n      // Context should be detailed (>25 words)\n      {\n        name: 'Context "
    },
    {
      "file": "src/quality/analyzers/completeness-analyzer.ts",
      "line": 149,
      "snippet": "\n      // Success criteria should have multiple items with detail\n      {\n      "
    },
    {
      "file": "src/quality/analyzers/completeness-analyzer.ts",
      "line": 164,
      "snippet": "\n      // Deliverables should be specific\n      {\n        name: 'Deliverables de"
    },
    {
      "file": "src/quality/analyzers/completeness-analyzer.ts",
      "line": 191,
      "snippet": "    // In full implementation, this would use topic modeling or embeddings\n    /"
    },
    {
      "file": "src/quality/analyzers/completeness-analyzer.ts",
      "line": 192,
      "snippet": "    // For now, using heuristic-based scoring\n\n    const missionType = mission.d"
    },
    {
      "file": "src/quality/analyzers/completeness-analyzer.ts",
      "line": 197,
      "snippet": "\n    // Define expected topic keywords for different mission types\n    const top"
    },
    {
      "file": "src/quality/analyzers/completeness-analyzer.ts",
      "line": 202,
      "snippet": "      // Unknown type, give benefit of doubt\n      return 0.7;\n    }\n\n    // Che"
    },
    {
      "file": "src/quality/analyzers/completeness-analyzer.ts",
      "line": 205,
      "snippet": "\n    // Check how many expected topics are covered\n    const coveredTopics = top"
    },
    {
      "file": "src/quality/analyzers/completeness-analyzer.ts",
      "line": 212,
      "snippet": "\n    // Also check for depth: are topics mentioned multiple times?\n    const dep"
    },
    {
      "file": "src/quality/analyzers/completeness-analyzer.ts",
      "line": 215,
      "snippet": "\n    // Combine coverage and depth\n    return coverage * 0.7 + depth * 0.3;\n  }\n"
    },
    {
      "file": "src/quality/analyzers/completeness-analyzer.ts",
      "line": 219,
      "snippet": "\n  // Helper methods\n\n  private hasNonEmpty(value: any): boolean {\n    if (value"
    },
    {
      "file": "src/quality/analyzers/completeness-analyzer.ts",
      "line": 314,
      "snippet": "\n    // Normalize: depth score based on average mentions per topic\n    const avg"
    },
    {
      "file": "src/quality/analyzers/completeness-analyzer.ts",
      "line": 317,
      "snippet": "\n    // Scale: 1 mention = 0.3, 2 = 0.6, 3+ = 1.0\n    if (avgMentions >= 3) retu"
    },
    {
      "file": "src/merge/deep-merge.ts",
      "line": 66,
      "snippet": "\n    // Handle null/undefined cases\n    if (base === null || base === undefined)"
    },
    {
      "file": "src/merge/deep-merge.ts",
      "line": 74,
      "snippet": "\n    // Handle arrays\n    if (Array.isArray(base) && Array.isArray(extension)) {"
    },
    {
      "file": "src/merge/deep-merge.ts",
      "line": 79,
      "snippet": "\n    // Handle objects\n    if (this.isObject(base) && this.isObject(extension)) "
    },
    {
      "file": "src/merge/deep-merge.ts",
      "line": 84,
      "snippet": "\n    // Scalars: extension replaces base\n    return extension as T;\n  }\n\n  /**\n "
    },
    {
      "file": "src/merge/deep-merge.ts",
      "line": 106,
      "snippet": "\n      // Skip undefined values (they don't override)\n      if (extensionValue ="
    },
    {
      "file": "src/merge/deep-merge.ts",
      "line": 111,
      "snippet": "\n      // Domain null removes field\n      if (extensionValue === null) {\n       "
    },
    {
      "file": "src/merge/deep-merge.ts",
      "line": 117,
      "snippet": "\n      // Merge the value\n      result[key] = this.mergeValue(baseValue, extensi"
    },
    {
      "file": "src/merge/deep-merge.ts",
      "line": 141,
      "snippet": "\n    // Default: concat (generic first, then domain)\n    if (options.listStrateg"
    },
    {
      "file": "src/merge/deep-merge.ts",
      "line": 144,
      "snippet": "      // Remove duplicates while preserving order\n      const combined = [...bas"
    },
    {
      "file": "src/merge/deep-merge.ts",
      "line": 149,
      "snippet": "\n    // Default append strategy\n    return [...base, ...extension];\n  }\n\n  /**\n "
    },
    {
      "file": "src/merge/deep-merge.ts",
      "line": 167,
      "snippet": "    // Extension null removes the field\n    if (extensionValue === null) {\n     "
    },
    {
      "file": "src/merge/deep-merge.ts",
      "line": 171,
      "snippet": "\n    // If base doesn't exist, use extension\n    if (baseValue === undefined || "
    },
    {
      "file": "src/merge/deep-merge.ts",
      "line": 176,
      "snippet": "\n    // Arrays\n    if (Array.isArray(baseValue) && Array.isArray(extensionValue)"
    },
    {
      "file": "src/merge/deep-merge.ts",
      "line": 181,
      "snippet": "\n    // Objects\n    if (this.isObject(baseValue) && this.isObject(extensionValue"
    },
    {
      "file": "src/merge/deep-merge.ts",
      "line": 186,
      "snippet": "\n    // Scalars: extension wins\n    return extensionValue;\n  }\n\n  /**\n   * Type "
    },
    {
      "file": "src/intelligence/mission-splitter.ts",
      "line": 112,
      "snippet": "    // Analyze complexity\n    const complexity = await this.complexityScorer.cal"
    },
    {
      "file": "src/intelligence/mission-splitter.ts",
      "line": 117,
      "snippet": "\n    // Phase 1: Semantic Proposal - find topic shifts\n    const proposedBreakpo"
    },
    {
      "file": "src/intelligence/mission-splitter.ts",
      "line": 120,
      "snippet": "\n    // Phase 2: Structural Validation - identify atomic operations\n    const at"
    },
    {
      "file": "src/intelligence/mission-splitter.ts",
      "line": 123,
      "snippet": "\n    // Phase 3: Reconciliation - validate breakpoints don't break atomic ops\n  "
    },
    {
      "file": "src/intelligence/mission-splitter.ts",
      "line": 130,
      "snippet": "\n    // Generate sub-missions from validated split points\n    const subMissions "
    },
    {
      "file": "src/intelligence/mission-splitter.ts",
      "line": 138,
      "snippet": "\n    // Extract preserved context\n    const preservedContext = this.extractPrese"
    },
    {
      "file": "src/intelligence/mission-splitter.ts",
      "line": 171,
      "snippet": "\n    // Generate split suggestions\n    const proposed = this.proposeSemanticBrea"
    },
    {
      "file": "src/intelligence/mission-splitter.ts",
      "line": 196,
      "snippet": "\n    // Simple semantic analysis: look for transitions and topic shifts\n    for "
    },
    {
      "file": "src/intelligence/mission-splitter.ts",
      "line": 201,
      "snippet": "\n      // Calculate semantic distance (simplified - in production use embeddings"
    },
    {
      "file": "src/intelligence/mission-splitter.ts",
      "line": 204,
      "snippet": "\n      // Propose breakpoint if distance exceeds threshold (80th percentile heur"
    },
    {
      "file": "src/intelligence/mission-splitter.ts",
      "line": 216,
      "snippet": "\n    // Also propose breaks at structural boundaries\n    const structuralBreaks "
    },
    {
      "file": "src/intelligence/mission-splitter.ts",
      "line": 239,
      "snippet": "\n    // Identify numbered/bulleted lists\n    const listBlocks = this.findListBlo"
    },
    {
      "file": "src/intelligence/mission-splitter.ts",
      "line": 248,
      "snippet": "\n    // Identify dependency chains\n    const dependencyChains = this.findDepende"
    },
    {
      "file": "src/intelligence/mission-splitter.ts",
      "line": 257,
      "snippet": "\n    // Identify code blocks\n    const codeBlocks = this.findCodeBlocks(missionT"
    },
    {
      "file": "src/intelligence/mission-splitter.ts",
      "line": 284,
      "snippet": "      // Check if this breakpoint falls within an atomic operation\n      const i"
    },
    {
      "file": "src/intelligence/mission-splitter.ts",
      "line": 288,
      "snippet": "\n      // Check minimum chunk size\n      const tooClose = breakpoint.position - "
    },
    {
      "file": "src/intelligence/mission-splitter.ts",
      "line": 301,
      "snippet": "\n    // Limit number of splits\n    const maxSplits = options.maxSubMissions ? op"
    },
    {
      "file": "src/intelligence/mission-splitter.ts",
      "line": 317,
      "snippet": "\n    // Add start and end positions for easier chunking\n    const positions = [0"
    },
    {
      "file": "src/intelligence/mission-splitter.ts",
      "line": 335,
      "snippet": "\n    // Infer dependencies between sub-missions\n    this.inferDependencies(subMi"
    },
    {
      "file": "src/intelligence/mission-splitter.ts",
      "line": 371,
      "snippet": "      // By default, each mission depends on the previous one\n      subMissions["
    },
    {
      "file": "src/intelligence/mission-splitter.ts",
      "line": 373,
      "snippet": "\n      // Check for explicit references to earlier missions\n      const text = s"
    },
    {
      "file": "src/intelligence/mission-splitter.ts",
      "line": 379,
      "snippet": "\n        // If current mission mentions previous mission's objective\n        if "
    },
    {
      "file": "src/intelligence/mission-splitter.ts",
      "line": 392,
      "snippet": "    // Simplified implementation - in production use sentence embeddings\n    con"
    },
    {
      "file": "src/intelligence/mission-splitter.ts",
      "line": 398,
      "snippet": "\n    // Jaccard distance\n    return 1 - (intersection.size / union.size);\n  }\n\n "
    },
    {
      "file": "src/intelligence/mission-splitter.ts",
      "line": 408,
      "snippet": "\n    // Double newlines indicate paragraph breaks\n    const paragraphBreaks = [."
    },
    {
      "file": "src/intelligence/mission-splitter.ts",
      "line": 412,
      "snippet": "\n    // Section headers (lines starting with #)\n    const sectionHeaders = [...t"
    },
    {
      "file": "src/intelligence/mission-splitter.ts",
      "line": 416,
      "snippet": "\n    // Horizontal rules\n    const rules = [...text.matchAll(/\\n---+\\n/g)];\n    "
    },
    {
      "file": "src/intelligence/mission-splitter.ts",
      "line": 460,
      "snippet": "\n      // Check if next sentence starts with dependency keyword\n      const hasD"
    },
    {
      "file": "src/intelligence/mission-splitter.ts",
      "line": 521,
      "snippet": "    // Look for objective-like statements\n    const objectiveMatch = chunk.match"
    },
    {
      "file": "src/intelligence/mission-splitter.ts",
      "line": 526,
      "snippet": "\n    // Look for imperative verbs\n    const firstSentence = chunk.split(/[.!?]/)"
    },
    {
      "file": "src/intelligence/mission-splitter.ts",
      "line": 541,
      "snippet": "    // Remove metadata and keep core instructions\n    return chunk.replace(/(?:M"
    },
    {
      "file": "src/intelligence/mission-splitter.ts",
      "line": 550,
      "snippet": "\n    // Look for file mentions\n    const filePattern = /(?:file|create|implement"
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 54,
      "snippet": "    // Clear previous graph\n    this.graph = {\n      nodes: new Map(),\n      edg"
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 59,
      "snippet": "\n    // Build graph from missions\n    await this.buildGraph(missions);\n\n    // D"
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 62,
      "snippet": "\n    // Detect cycles using DFS\n    const { hasCycles, cycles } = this.detectCyc"
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 65,
      "snippet": "\n    // If no cycles, compute execution order using topological sort\n    let exe"
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 94,
      "snippet": "        // Mission is a file path\n        filePath = mission;\n        const cont"
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 99,
      "snippet": "        // Mission is already an object\n        missionData = mission;\n        f"
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 105,
      "snippet": "\n      // Extract explicit dependencies from various fields\n      const dependen"
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 108,
      "snippet": "\n      // Create node\n      const node: DependencyNode = {\n        missionId,\n  "
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 115,
      "snippet": "\n      // Add node to graph\n      this.graph.nodes.set(missionId, node);\n\n      "
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 118,
      "snippet": "\n      // Add edges\n      if (!this.graph.edges.has(missionId)) {\n        this.g"
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 136,
      "snippet": "\n    // Check researchFoundation field\n    if (missionData.domainFields?.researc"
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 141,
      "snippet": "          // Extract mission ID from source mission reference\n          const mi"
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 149,
      "snippet": "\n    // Check handoffContext dependencies\n    if (missionData.domainFields?.hand"
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 159,
      "snippet": "\n    // Check context field for mission references\n    if (missionData.context) "
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 165,
      "snippet": "\n    // Check blockers field\n    if (missionData.domainFields?.handoffContext?.b"
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 184,
      "snippet": "    // Remove angle brackets if present\n    const cleaned = ref.replace(/[<>]/g,"
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 186,
      "snippet": "\n    // Extract mission ID pattern (e.g., R4.3, B3.2, etc.)\n    const match = cl"
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 192,
      "snippet": "\n    // If no pattern match, check if it's a simple single-letter ID (for tests)"
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 197,
      "snippet": "\n    // Return the whole string if it looks like a mission ID\n    return cleaned"
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 208,
      "snippet": "\n    // Pattern to match mission IDs like R4.3, B3.2, etc.\n    const missionPatt"
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 216,
      "snippet": "\n    // Also match simple single-letter mission IDs (for tests)\n    const simple"
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 239,
      "snippet": "\n    // Initialize all nodes as white\n    for (const nodeId of this.graph.nodes."
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 245,
      "snippet": "\n    // DFS helper function\n    const dfs = (nodeId: string): boolean => {\n     "
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 253,
      "snippet": "          // Skip if neighbor doesn't exist in graph\n          if (!this.graph.n"
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 264,
      "snippet": "            // Back edge found - we have a cycle\n            const cycle = this."
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 275,
      "snippet": "\n    // Run DFS from each unvisited node\n    let hasCycles = false;\n    for (con"
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 318,
      "snippet": "\n    // Initialize out-degree for all nodes (count of dependencies)\n    for (con"
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 325,
      "snippet": "\n    // Add all nodes with out-degree 0 to queue (nodes with no dependencies)\n  "
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 332,
      "snippet": "\n    // Process queue\n    while (queue.length > 0) {\n      const nodeId = queue."
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 337,
      "snippet": "\n      // Find all nodes that depend on this node\n      for (const [otherId, edg"
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 341,
      "snippet": "          // otherId depends on nodeId, so reduce its out-degree\n          const"
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 363,
      "snippet": "    // For this implementation, we'll use longest path in DAG\n    // In our grap"
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 364,
      "snippet": "    // In our graph, edge A->B means A depends on B, so we need to reverse for d"
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 367,
      "snippet": "\n    // Initialize distances to 0 for all nodes\n    for (const nodeId of this.gr"
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 373,
      "snippet": "\n    // Get topological order (dependencies come before dependents)\n    const to"
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 376,
      "snippet": "\n    // Calculate longest path: iterate in topological order\n    // For each nod"
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 378,
      "snippet": "    // For each node, find max distance from all its dependencies\n    for (const"
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 402,
      "snippet": "\n    // Find the node with maximum distance (end of critical path)\n    let maxDi"
    },
    {
      "file": "src/intelligence/dependency-analyzer.ts",
      "line": 413,
      "snippet": "\n    // Reconstruct path from end to start\n    const path: string[] = [];\n    if"
    },
    {
      "file": "src/intelligence/token-counters.ts",
      "line": 50,
      "snippet": "      // Dynamic import of gpt-tokenizer\n      const { encode } = await import('"
    },
    {
      "file": "src/intelligence/token-counters.ts",
      "line": 61,
      "snippet": "      // Fallback to heuristic if library fails\n      return this.fallbackCount("
    },
    {
      "file": "src/intelligence/token-counters.ts",
      "line": 75,
      "snippet": "      \n      // Tokenize the text\n      const encoded = await tokenizer(text);\n "
    },
    {
      "file": "src/intelligence/token-counters.ts",
      "line": 79,
      "snippet": "\n      // Emit telemetry warning about potential drift\n      emitTelemetryWarnin"
    },
    {
      "file": "src/intelligence/token-counters.ts",
      "line": 94,
      "snippet": "      // Fallback to heuristic if tokenizer fails to load\n      return this.fall"
    },
    {
      "file": "src/intelligence/token-counters.ts",
      "line": 127,
      "snippet": "    // Enhanced heuristic: base estimate with 50% safety margin\n    const baseTo"
    },
    {
      "file": "src/intelligence/token-optimizer.ts",
      "line": 54,
      "snippet": "\n    // Get default ruleset and merge with custom rules\n    const finalRuleset ="
    },
    {
      "file": "src/intelligence/token-optimizer.ts",
      "line": 60,
      "snippet": "\n    // Add custom preserve tags if provided\n    if (preserveTags && preserveTag"
    },
    {
      "file": "src/intelligence/token-optimizer.ts",
      "line": 69,
      "snippet": "\n    // Count original tokens\n    const originalTokenCount = await this.tokenCou"
    },
    {
      "file": "src/intelligence/token-optimizer.ts",
      "line": 72,
      "snippet": "\n    // Track passes applied\n    const passesApplied: CompressionPassType[] = []"
    },
    {
      "file": "src/intelligence/token-optimizer.ts",
      "line": 79,
      "snippet": "      // Extract and preserve protected sections\n      const preserved = extract"
    },
    {
      "file": "src/intelligence/token-optimizer.ts",
      "line": 85,
      "snippet": "\n      // Pass 1: Sanitization & Normalization\n      if (finalRuleset.sanitizati"
    },
    {
      "file": "src/intelligence/token-optimizer.ts",
      "line": 91,
      "snippet": "\n      // Pass 2: Structural Refactoring\n      if (finalRuleset.structuralRules."
    },
    {
      "file": "src/intelligence/token-optimizer.ts",
      "line": 97,
      "snippet": "\n      // Pass 3: Linguistic Simplification\n      if (finalRuleset.linguisticRul"
    },
    {
      "file": "src/intelligence/token-optimizer.ts",
      "line": 103,
      "snippet": "\n      // Restore preserved sections\n      result = restorePreservedSections(res"
    },
    {
      "file": "src/intelligence/token-optimizer.ts",
      "line": 106,
      "snippet": "\n      // Pass 4: Model-Specific Templating\n      result = this.transpiler.trans"
    },
    {
      "file": "src/intelligence/token-optimizer.ts",
      "line": 110,
      "snippet": "\n      // Count compressed tokens\n      const compressedTokenCount = await this."
    },
    {
      "file": "src/intelligence/token-optimizer.ts",
      "line": 114,
      "snippet": "\n      // Calculate stats\n      const stats: CompressionStats = {\n        origin"
    },
    {
      "file": "src/intelligence/token-optimizer.ts",
      "line": 133,
      "snippet": "\n      // Check if we achieved target reduction\n      if (stats.reductionPercent"
    },
    {
      "file": "src/intelligence/token-optimizer.ts",
      "line": 140,
      "snippet": "\n      // If dry run, return original content\n      if (dryRun) {\n        result"
    },
    {
      "file": "src/intelligence/context-propagator.ts",
      "line": 115,
      "snippet": "\n    // For short chains, use full context\n    if (completedResults.length <= 2 "
    },
    {
      "file": "src/intelligence/context-propagator.ts",
      "line": 120,
      "snippet": "\n    // For medium chains, use extractive\n    if (completedResults.length <= 5) "
    },
    {
      "file": "src/intelligence/context-propagator.ts",
      "line": 125,
      "snippet": "\n    // For long chains, use map-reduce\n    return 'map-reduce';\n  }\n\n  /**\n   *"
    },
    {
      "file": "src/intelligence/context-propagator.ts",
      "line": 186,
      "snippet": "    // In a production system, this would call an LLM to generate summaries\n    "
    },
    {
      "file": "src/intelligence/context-propagator.ts",
      "line": 187,
      "snippet": "    // For now, we'll use extractive as a fallback with narrative structure\n    "
    },
    {
      "file": "src/intelligence/context-propagator.ts",
      "line": 212,
      "snippet": "    // Map phase: Summarize each result individually\n    const individualSummari"
    },
    {
      "file": "src/intelligence/context-propagator.ts",
      "line": 221,
      "snippet": "\n    // Reduce phase: Group and synthesize summaries\n    const grouped = this.gr"
    },
    {
      "file": "src/intelligence/context-propagator.ts",
      "line": 250,
      "snippet": "\n    // Score sentences by importance\n    const scoredSentences = sentences.map("
    },
    {
      "file": "src/intelligence/context-propagator.ts",
      "line": 254,
      "snippet": "\n      // Keywords indicating importance\n      const importantKeywords = [\n     "
    },
    {
      "file": "src/intelligence/context-propagator.ts",
      "line": 273,
      "snippet": "\n      // Position bias - earlier sentences often more important\n      const pos"
    },
    {
      "file": "src/intelligence/context-propagator.ts",
      "line": 278,
      "snippet": "\n      // Length - prefer medium-length sentences\n      if (sentence.split(/\\s+/"
    },
    {
      "file": "src/intelligence/context-propagator.ts",
      "line": 286,
      "snippet": "\n    // Sort by score and take top sentences\n    const keySentences = scoredSent"
    },
    {
      "file": "src/intelligence/context-propagator.ts",
      "line": 292,
      "snippet": "\n    // Extract key phrases (simple noun phrase extraction)\n    const keyPhrases"
    },
    {
      "file": "src/intelligence/context-propagator.ts",
      "line": 308,
      "snippet": "\n    // Extract quoted text\n    const quoted = text.match(/\"([^\"]+)\"/g) || [];\n "
    },
    {
      "file": "src/intelligence/context-propagator.ts",
      "line": 312,
      "snippet": "\n    // Extract capitalized multi-word terms\n    const capitalized = text.match("
    },
    {
      "file": "src/intelligence/context-propagator.ts",
      "line": 324,
      "snippet": "    // Look for objective/goal statements\n    const objectiveMatch = missionText"
    },
    {
      "file": "src/intelligence/context-propagator.ts",
      "line": 329,
      "snippet": "\n    // Fallback: first sentence\n    const firstSentence = missionText.split(/[."
    },
    {
      "file": "src/intelligence/context-propagator.ts",
      "line": 341,
      "snippet": "    // Simple grouping by sequential order\n    // In production, this would use "
    },
    {
      "file": "src/intelligence/context-propagator.ts",
      "line": 342,
      "snippet": "    // In production, this would use embedding similarity\n    const grouped: Rec"
    },
    {
      "file": "src/intelligence/context-propagator.ts",
      "line": 363,
      "snippet": "    // Rough estimate: 1 token \u2248 4 characters\n    return Math.ceil(text.length /"
    },
    {
      "file": "src/intelligence/graph-validator.ts",
      "line": 36,
      "snippet": "\n    // Check for missing dependencies\n    this.checkMissingDependencies(graph, "
    },
    {
      "file": "src/intelligence/graph-validator.ts",
      "line": 39,
      "snippet": "\n    // Detect cycles using DFS with back-edge detection\n    const cycleDetectio"
    },
    {
      "file": "src/intelligence/graph-validator.ts",
      "line": 90,
      "snippet": "\n    // Initialize all nodes as white\n    for (const nodeId of graph.nodes.keys("
    },
    {
      "file": "src/intelligence/graph-validator.ts",
      "line": 96,
      "snippet": "\n    // DFS helper function\n    const dfs = (nodeId: string, recursionStack: Set"
    },
    {
      "file": "src/intelligence/graph-validator.ts",
      "line": 105,
      "snippet": "          // Skip if neighbor doesn't exist in graph\n          if (!graph.nodes."
    },
    {
      "file": "src/intelligence/graph-validator.ts",
      "line": 114,
      "snippet": "            // Back edge found - we have a cycle\n            const cycle = this."
    },
    {
      "file": "src/intelligence/graph-validator.ts",
      "line": 124,
      "snippet": "\n    // Run DFS from each unvisited node\n    for (const nodeId of graph.nodes.ke"
    },
    {
      "file": "src/intelligence/graph-validator.ts",
      "line": 166,
      "snippet": "    // Create a position map\n    const position = new Map<string, number>();\n   "
    },
    {
      "file": "src/intelligence/graph-validator.ts",
      "line": 171,
      "snippet": "\n    // Check that all dependencies come before dependents\n    // In our graph: "
    },
    {
      "file": "src/intelligence/graph-validator.ts",
      "line": 173,
      "snippet": "    // In our graph: edge from A to B means A depends on B, so B must execute be"
    },
    {
      "file": "src/intelligence/graph-validator.ts",
      "line": 189,
      "snippet": "\n        // Dependency (depId) must come before the node that depends on it (nod"
    },
    {
      "file": "src/intelligence/graph-validator.ts",
      "line": 234,
      "snippet": "\n      // If nodeId is a root node, pop the stack and create an SCC\n      if (lo"
    },
    {
      "file": "src/intelligence/model-transpilers.ts",
      "line": 60,
      "snippet": "\n    // Wrap sections in XML tags\n    result = this.wrapSection(result, 'objecti"
    },
    {
      "file": "src/intelligence/model-transpilers.ts",
      "line": 66,
      "snippet": "\n    // Convert markdown headers to XML sections\n    result = result.replace(/^#"
    },
    {
      "file": "src/intelligence/model-transpilers.ts",
      "line": 81,
      "snippet": "\n    // Add clear delimiters for major sections\n    result = this.addDelimiters("
    },
    {
      "file": "src/intelligence/model-transpilers.ts",
      "line": 87,
      "snippet": "\n    // Structure examples for few-shot learning if present\n    result = this.st"
    },
    {
      "file": "src/intelligence/model-transpilers.ts",
      "line": 131,
      "snippet": "    // Look for example patterns\n    const exampleRegex = /example:?\\s*([^]*?)(?"
    },
    {
      "file": "src/intelligence/model-transpilers.ts",
      "line": 150,
      "snippet": "    // Default PTCF structure\n    const ptcf = {\n      persona: 'You are an AI a"
    },
    {
      "file": "src/intelligence/model-transpilers.ts",
      "line": 157,
      "snippet": "\n    // Extract objective as task\n    const objectiveMatch = content.match(/obje"
    },
    {
      "file": "src/intelligence/model-transpilers.ts",
      "line": 163,
      "snippet": "\n    // Extract context\n    const contextMatch = content.match(/context:?\\s*([^]"
    },
    {
      "file": "src/intelligence/model-transpilers.ts",
      "line": 169,
      "snippet": "\n    // Extract deliverables as format guidance\n    const deliverablesMatch = co"
    },
    {
      "file": "src/intelligence/model-transpilers.ts",
      "line": 200,
      "snippet": "      // Check for XML tags\n      return /<\\w+>.*<\\/\\w+>/s.test(content);\n\n    c"
    },
    {
      "file": "src/intelligence/model-transpilers.ts",
      "line": 204,
      "snippet": "      // Check for ### delimiters\n      return /###\\s+\\w+/.test(content);\n\n    c"
    },
    {
      "file": "src/intelligence/model-transpilers.ts",
      "line": 208,
      "snippet": "      // Check for PTCF structure\n      return /Persona:.*Task:.*Context:.*Forma"
    },
    {
      "file": "src/intelligence/telemetry.ts",
      "line": 50,
      "snippet": "      // Fall through to console.warn so the warning is not lost.\n      console."
    },
    {
      "file": "src/intelligence/compression-rules.ts",
      "line": 18,
      "snippet": "  // Remove conversational fillers\n  {\n    type: 'regex_replace',\n    pattern: /"
    },
    {
      "file": "src/intelligence/compression-rules.ts",
      "line": 43,
      "snippet": "  // Remove redundant phrases\n  {\n    type: 'regex_replace',\n    pattern: /provi"
    },
    {
      "file": "src/intelligence/compression-rules.ts",
      "line": 68,
      "snippet": "  // Normalize whitespace\n  {\n    type: 'regex_replace',\n    pattern: /\\s+/g,\n  "
    },
    {
      "file": "src/intelligence/compression-rules.ts",
      "line": 107,
      "snippet": "  // Simplify verbose constructions\n  {\n    type: 'regex_replace',\n    pattern: "
    },
    {
      "file": "src/intelligence/compression-rules.ts",
      "line": 200,
      "snippet": "  // Check if text contains sequential delimiters\n  let delimiterCount = 0;\n  fo"
    },
    {
      "file": "src/intelligence/compression-rules.ts",
      "line": 207,
      "snippet": "\n  // Only convert if we have multiple sequential items\n  if (delimiterCount < 2"
    },
    {
      "file": "src/intelligence/compression-rules.ts",
      "line": 212,
      "snippet": "\n  // Split by delimiters and create a list\n  let result = text;\n  for (const de"
    },
    {
      "file": "src/intelligence/compression-rules.ts",
      "line": 216,
      "snippet": "    // Create list item format\n    const delimiterRegex = new RegExp(`\\\\s*${deli"
    },
    {
      "file": "src/intelligence/compression-rules.ts",
      "line": 228,
      "snippet": "  // Simple pattern matching for common passive constructions\n  const passivePat"
    },
    {
      "file": "src/intelligence/dependency-inferrer.ts",
      "line": 20,
      "snippet": "  // Dependency keywords that signal relationships\n  private static readonly DEP"
    },
    {
      "file": "src/intelligence/dependency-inferrer.ts",
      "line": 37,
      "snippet": "\n  // Temporal keywords that suggest sequence\n  private static readonly TEMPORAL"
    },
    {
      "file": "src/intelligence/dependency-inferrer.ts",
      "line": 59,
      "snippet": "\n    // Extract mission ID\n    const missionId = missionData.missionId;\n\n    // "
    },
    {
      "file": "src/intelligence/dependency-inferrer.ts",
      "line": 62,
      "snippet": "\n    // Infer from context field using keyword matching\n    if (missionData.cont"
    },
    {
      "file": "src/intelligence/dependency-inferrer.ts",
      "line": 68,
      "snippet": "\n    // Infer from objective field\n    if (missionData.objective) {\n      const "
    },
    {
      "file": "src/intelligence/dependency-inferrer.ts",
      "line": 74,
      "snippet": "\n    // Infer from success criteria\n    if (missionData.successCriteria) {\n     "
    },
    {
      "file": "src/intelligence/dependency-inferrer.ts",
      "line": 80,
      "snippet": "\n    // Infer from deliverables\n    if (missionData.deliverables) {\n      const "
    },
    {
      "file": "src/intelligence/dependency-inferrer.ts",
      "line": 86,
      "snippet": "\n    // Structural inference: missions with similar names might be related\n    c"
    },
    {
      "file": "src/intelligence/dependency-inferrer.ts",
      "line": 100,
      "snippet": "\n    // Find all mission references in text\n    const missionRefs = this.extract"
    },
    {
      "file": "src/intelligence/dependency-inferrer.ts",
      "line": 103,
      "snippet": "\n    // For each mission reference, look for nearby dependency keywords\n    for "
    },
    {
      "file": "src/intelligence/dependency-inferrer.ts",
      "line": 109,
      "snippet": "\n      // Check if there's a dependency keyword near this reference\n      for (c"
    },
    {
      "file": "src/intelligence/dependency-inferrer.ts",
      "line": 114,
      "snippet": "          // Determine direction based on keyword position\n          const befor"
    },
    {
      "file": "src/intelligence/dependency-inferrer.ts",
      "line": 127,
      "snippet": "\n      // Check for temporal keywords\n      for (const keyword of DependencyInfe"
    },
    {
      "file": "src/intelligence/dependency-inferrer.ts",
      "line": 153,
      "snippet": "\n    // Look for mission references in criteria\n    const missionRefs = this.ext"
    },
    {
      "file": "src/intelligence/dependency-inferrer.ts",
      "line": 180,
      "snippet": "\n    // Extract file paths from deliverables\n    const filePaths = this.extractF"
    },
    {
      "file": "src/intelligence/dependency-inferrer.ts",
      "line": 183,
      "snippet": "\n    // Check if any other missions reference these files\n    for (const [nodeId"
    },
    {
      "file": "src/intelligence/dependency-inferrer.ts",
      "line": 189,
      "snippet": "\n      // Check if this mission's deliverables are referenced by other missions\n"
    },
    {
      "file": "src/intelligence/dependency-inferrer.ts",
      "line": 214,
      "snippet": "\n    // Extract mission number (e.g., \"B3.2\" -> {prefix: \"B\", major: 3, minor: 2"
    },
    {
      "file": "src/intelligence/dependency-inferrer.ts",
      "line": 220,
      "snippet": "\n    // Look for missions with same prefix and lower minor version\n    for (cons"
    },
    {
      "file": "src/intelligence/dependency-inferrer.ts",
      "line": 231,
      "snippet": "\n      // Same sprint (major version), previous mission (minor - 1)\n      if (ot"
    },
    {
      "file": "src/intelligence/dependency-inferrer.ts",
      "line": 244,
      "snippet": "\n      // Research missions that build missions depend on\n      if (parsed.prefi"
    },
    {
      "file": "src/intelligence/dependency-inferrer.ts",
      "line": 282,
      "snippet": "\n    // Match patterns like: app/src/file.ts, tests/test.ts\n    const pathPatter"
    },
    {
      "file": "src/intelligence/complexity-scorer.ts",
      "line": 123,
      "snippet": "\n    // Calculate individual components\n    const tokenCount = await this.tokenC"
    },
    {
      "file": "src/intelligence/complexity-scorer.ts",
      "line": 137,
      "snippet": "\n    // Calculate composite score using weighted sum\n    const compositeScore = "
    },
    {
      "file": "src/intelligence/complexity-scorer.ts",
      "line": 140,
      "snippet": "\n    // Determine if split is needed\n    const { shouldSplit, reasons } = this.e"
    },
    {
      "file": "src/intelligence/complexity-scorer.ts",
      "line": 160,
      "snippet": "\n    // Normalize to 0-10 scale, with 1.0 ratio = 10\n    return Math.min(ratio *"
    },
    {
      "file": "src/intelligence/complexity-scorer.ts",
      "line": 171,
      "snippet": "\n    // Count discrete instructions (bullet points, numbered items, sentences)\n "
    },
    {
      "file": "src/intelligence/complexity-scorer.ts",
      "line": 175,
      "snippet": "\n    // Count logical operators\n    const logicalOps = this.countLogicalOperator"
    },
    {
      "file": "src/intelligence/complexity-scorer.ts",
      "line": 179,
      "snippet": "\n    // Count dependencies\n    if (mission?.context?.dependencies) {\n      score"
    },
    {
      "file": "src/intelligence/complexity-scorer.ts",
      "line": 184,
      "snippet": "\n    // Count nested structures (indentation, sub-items)\n    const nestingLevel "
    },
    {
      "file": "src/intelligence/complexity-scorer.ts",
      "line": 188,
      "snippet": "\n    // Count deliverables (more deliverables = more complex)\n    if (mission?.d"
    },
    {
      "file": "src/intelligence/complexity-scorer.ts",
      "line": 204,
      "snippet": "\n    // Normalize to 0-10 scale, with ratio > 1.0 indicating exceeding capacity\n"
    },
    {
      "file": "src/intelligence/complexity-scorer.ts",
      "line": 215,
      "snippet": "\n    // Check for complexity indicators\n    for (const [type, pattern] of Object"
    },
    {
      "file": "src/intelligence/complexity-scorer.ts",
      "line": 225,
      "snippet": "\n    // Check for exponential complexity keywords\n    const exponentialKeywords "
    },
    {
      "file": "src/intelligence/complexity-scorer.ts",
      "line": 258,
      "snippet": "\n    // Check composite score threshold\n    if (compositeScore > this.config.thr"
    },
    {
      "file": "src/intelligence/complexity-scorer.ts",
      "line": 264,
      "snippet": "\n    // Check token threshold\n    const tokenRatio = components.tokenScore / 10;"
    },
    {
      "file": "src/intelligence/complexity-scorer.ts",
      "line": 271,
      "snippet": "\n    // Check time horizon threshold\n    const timeRatio = components.timeHorizo"
    },
    {
      "file": "src/intelligence/complexity-scorer.ts",
      "line": 286,
      "snippet": "    // Base estimate on word count (avg reading speed ~200 wpm)\n    const words "
    },
    {
      "file": "src/intelligence/complexity-scorer.ts",
      "line": 289,
      "snippet": "\n    // Adjust based on deliverables (30 min per deliverable)\n    if (mission?.d"
    },
    {
      "file": "src/intelligence/complexity-scorer.ts",
      "line": 294,
      "snippet": "\n    // Adjust based on success criteria (15 min per criterion)\n    if (mission?"
    },
    {
      "file": "src/intelligence/complexity-scorer.ts",
      "line": 299,
      "snippet": "\n    // Adjust for complexity indicators\n    for (const pattern of Object.values"
    },
    {
      "file": "src/intelligence/complexity-scorer.ts",
      "line": 313,
      "snippet": "    // Count numbered items\n    const numberedItems = (text.match(/^\\s*\\d+[\\.)]\\"
    },
    {
      "file": "src/intelligence/complexity-scorer.ts",
      "line": 315,
      "snippet": "\n    // Count bullet points\n    const bulletPoints = (text.match(/^\\s*[-*+]\\s+/g"
    },
    {
      "file": "src/intelligence/complexity-scorer.ts",
      "line": 318,
      "snippet": "\n    // Count sentences with imperative verbs (crude estimate)\n    const imperat"
    },
    {
      "file": "src/intelligence/complexity-scorer.ts",
      "line": 332,
      "snippet": "\n    // Count conditionals\n    count += (text.match(COMPLEXITY_INDICATORS.condit"
    },
    {
      "file": "src/intelligence/complexity-scorer.ts",
      "line": 335,
      "snippet": "\n    // Count loops\n    count += (text.match(COMPLEXITY_INDICATORS.loops) || [])"
    },
    {
      "file": "src/intelligence/complexity-scorer.ts",
      "line": 338,
      "snippet": "\n    // Count dependency keywords\n    for (const keyword of DEPENDENCY_KEYWORDS)"
    },
    {
      "file": "src/intelligence/complexity-scorer.ts",
      "line": 356,
      "snippet": "      // Count leading spaces/tabs\n      const leadingWhitespace = line.match(/^"
    },
    {
      "file": "src/combination/pack-combiner.ts",
      "line": 64,
      "snippet": "\n    // Validate inputs\n    if (packs.length === 0) {\n      return {\n        suc"
    },
    {
      "file": "src/combination/pack-combiner.ts",
      "line": 73,
      "snippet": "\n    // Step 1: Resolve dependencies\n    let packsToLoad = packs;\n    let depend"
    },
    {
      "file": "src/combination/pack-combiner.ts",
      "line": 89,
      "snippet": "\n      // Load packs in dependency order\n      const packMap = new Map<string, D"
    },
    {
      "file": "src/combination/pack-combiner.ts",
      "line": 113,
      "snippet": "\n    // Step 2: Merge packs using selected strategy\n    try {\n      const mergeS"
    },
    {
      "file": "src/combination/pack-combiner.ts",
      "line": 118,
      "snippet": "\n      // Step 3: Validate if requested\n      if (opts.validate) {\n        const"
    },
    {
      "file": "src/combination/pack-combiner.ts",
      "line": 158,
      "snippet": "    // Extract templates from all packs\n    const templates = packs.map(pack => "
    },
    {
      "file": "src/combination/pack-combiner.ts",
      "line": 160,
      "snippet": "\n    // Merge templates using strategy\n    const combinedTemplate = strategy.mer"
    },
    {
      "file": "src/combination/pack-combiner.ts",
      "line": 163,
      "snippet": "\n    // Combine manifests\n    const firstPack = packs[0];\n    const packNames = "
    },
    {
      "file": "src/combination/pack-combiner.ts",
      "line": 197,
      "snippet": "          // Keep the first version encountered (from dependency order)\n        "
    },
    {
      "file": "src/combination/pack-combiner.ts",
      "line": 221,
      "snippet": "\n    // Validate manifest\n    if (!pack.manifest.name || pack.manifest.name.trim"
    },
    {
      "file": "src/combination/pack-combiner.ts",
      "line": 234,
      "snippet": "\n    // Validate template\n    if (typeof pack.template !== 'object' || pack.temp"
    },
    {
      "file": "src/combination/pack-combiner.ts",
      "line": 239,
      "snippet": "\n    // Validate combination order matches source packs\n    if (\n      pack.comb"
    },
    {
      "file": "src/combination/pack-combiner.ts",
      "line": 247,
      "snippet": "\n    // Warn if template is empty\n    if (Object.keys(pack.template).length === "
    },
    {
      "file": "src/combination/pack-combiner.ts",
      "line": 319,
      "snippet": "\n    // Resolve dependencies\n    const dependencies = this.resolver.resolve(pack"
    },
    {
      "file": "src/combination/pack-combiner.ts",
      "line": 331,
      "snippet": "\n    // Validate each pack's dependencies\n    for (const pack of packs) {\n      "
    },
    {
      "file": "src/combination/merge-strategies.ts",
      "line": 50,
      "snippet": "\n    // Merge templates left to right\n    let result = { ...templates[0] };\n    "
    },
    {
      "file": "src/combination/merge-strategies.ts",
      "line": 75,
      "snippet": "\n    // Return a copy of the last template\n    return { ...templates[templates.l"
    },
    {
      "file": "src/combination/merge-strategies.ts",
      "line": 106,
      "snippet": "\n    // Start with first template\n    let result = { ...templates[0] };\n\n    // "
    },
    {
      "file": "src/combination/merge-strategies.ts",
      "line": 109,
      "snippet": "\n    // Merge each subsequent template\n    for (let i = 1; i < templates.length;"
    },
    {
      "file": "src/combination/merge-strategies.ts",
      "line": 130,
      "snippet": "\n      // Check if this path should be overridden\n      if (this.shouldOverride("
    },
    {
      "file": "src/combination/merge-strategies.ts",
      "line": 136,
      "snippet": "\n      // Check if this path should be merged\n      if (this.shouldMerge(fieldPa"
    },
    {
      "file": "src/combination/merge-strategies.ts",
      "line": 140,
      "snippet": "\n        // Merge arrays by concatenation\n        if (Array.isArray(baseValue) &"
    },
    {
      "file": "src/combination/merge-strategies.ts",
      "line": 145,
      "snippet": "        // Merge objects recursively\n        else if (this.isObject(baseValue) &"
    },
    {
      "file": "src/combination/merge-strategies.ts",
      "line": 153,
      "snippet": "        // Scalars: extension overrides\n        else {\n          result[key] = v"
    },
    {
      "file": "src/combination/merge-strategies.ts",
      "line": 159,
      "snippet": "\n      // Default behavior: deep merge\n      const baseValue = base[key];\n      "
    },
    {
      "file": "src/combination/merge-strategies.ts",
      "line": 176,
      "snippet": "    // Exact match or wildcard match\n    if (this.overridePaths.has(path)) {\n   "
    },
    {
      "file": "src/combination/merge-strategies.ts",
      "line": 180,
      "snippet": "\n    // Check wildcard patterns (e.g., \"spec.resources.*\")\n    for (const patter"
    },
    {
      "file": "src/combination/merge-strategies.ts",
      "line": 195,
      "snippet": "    // Exact match or wildcard match\n    if (this.mergePaths.has(path)) {\n      "
    },
    {
      "file": "src/combination/merge-strategies.ts",
      "line": 199,
      "snippet": "\n    // Check wildcard patterns\n    for (const pattern of this.mergePaths) {\n   "
    },
    {
      "file": "src/combination/dependency-resolver.ts",
      "line": 43,
      "snippet": "\n    // Step 1: Build dependency graph\n    try {\n      this.buildGraph(packs, av"
    },
    {
      "file": "src/combination/dependency-resolver.ts",
      "line": 59,
      "snippet": "\n    // Step 2: Detect circular dependencies\n    const circularDeps = this.detec"
    },
    {
      "file": "src/combination/dependency-resolver.ts",
      "line": 73,
      "snippet": "\n    // Step 3: Perform topological sort\n    try {\n      const loadOrder = this."
    },
    {
      "file": "src/combination/dependency-resolver.ts",
      "line": 106,
      "snippet": "    // Create a map of available packs by name for quick lookup\n    const packMa"
    },
    {
      "file": "src/combination/dependency-resolver.ts",
      "line": 111,
      "snippet": "\n    // Also add requested packs to the map\n    for (const pack of packs) {\n    "
    },
    {
      "file": "src/combination/dependency-resolver.ts",
      "line": 116,
      "snippet": "\n    // Process each requested pack\n    const toProcess = [...packs];\n    const "
    },
    {
      "file": "src/combination/dependency-resolver.ts",
      "line": 124,
      "snippet": "\n      // Skip if already processed\n      if (processed.has(packName)) {\n       "
    },
    {
      "file": "src/combination/dependency-resolver.ts",
      "line": 129,
      "snippet": "\n      // Create dependency node\n      const node: DependencyNode = {\n        na"
    },
    {
      "file": "src/combination/dependency-resolver.ts",
      "line": 140,
      "snippet": "\n      // Add dependencies to processing queue\n      if (pack.manifest.dependenc"
    },
    {
      "file": "src/combination/dependency-resolver.ts",
      "line": 157,
      "snippet": "\n    // Mark all nodes as resolved (dependencies exist)\n    for (const node of g"
    },
    {
      "file": "src/combination/dependency-resolver.ts",
      "line": 180,
      "snippet": "        // Found a cycle\n        const cycleStart = currentPath.indexOf(nodeName"
    },
    {
      "file": "src/combination/dependency-resolver.ts",
      "line": 205,
      "snippet": "\n    // Run DFS from each unvisited node\n    for (const nodeName of graph.keys()"
    },
    {
      "file": "src/combination/dependency-resolver.ts",
      "line": 226,
      "snippet": "\n    // Initialize in-degree and adjacency list\n    for (const [name, node] of g"
    },
    {
      "file": "src/combination/dependency-resolver.ts",
      "line": 237,
      "snippet": "        // Add edge from dependency to dependent\n        if (!adjList.has(dep.na"
    },
    {
      "file": "src/combination/dependency-resolver.ts",
      "line": 242,
      "snippet": "\n        // Increment in-degree of dependent\n        inDegree.set(name, (inDegre"
    },
    {
      "file": "src/combination/dependency-resolver.ts",
      "line": 247,
      "snippet": "\n    // Find all nodes with in-degree 0 (no dependencies)\n    const queue: strin"
    },
    {
      "file": "src/combination/dependency-resolver.ts",
      "line": 255,
      "snippet": "\n    // Process nodes in topological order\n    while (queue.length > 0) {\n      "
    },
    {
      "file": "src/combination/dependency-resolver.ts",
      "line": 260,
      "snippet": "\n      // Reduce in-degree of dependent nodes\n      const dependents = adjList.g"
    },
    {
      "file": "src/combination/dependency-resolver.ts",
      "line": 272,
      "snippet": "\n    // Check if all nodes were processed\n    if (result.length !== graph.size) "
    },
    {
      "file": "src/combination/dependency-resolver.ts",
      "line": 309,
      "snippet": "\n      // Simple version check (exact match for now)\n      // Could be extended "
    },
    {
      "file": "src/combination/dependency-resolver.ts",
      "line": 311,
      "snippet": "      // Could be extended to support SemVer ranges\n      if (availablePack.mani"
    },
    {
      "file": "src/import-export/template-importer.ts",
      "line": 54,
      "snippet": "\n    // Initialize SecureYAMLLoader (Layers 1-3)\n    this.yamlLoader = new Secur"
    },
    {
      "file": "src/import-export/template-importer.ts",
      "line": 61,
      "snippet": "\n    // Initialize SecurityValidator (Layers 4-6)\n    this.validator = new Secur"
    },
    {
      "file": "src/import-export/template-importer.ts",
      "line": 79,
      "snippet": "      // Step 1-3: Load with path sanitization, safe parsing, and schema validat"
    },
    {
      "file": "src/import-export/template-importer.ts",
      "line": 81,
      "snippet": "\n      // Step 4-6: Security validation (signature, semantics, dependencies)\n   "
    },
    {
      "file": "src/import-export/template-importer.ts",
      "line": 87,
      "snippet": "\n      // Check if validation passed\n      if (!validationReport.valid) {\n      "
    },
    {
      "file": "src/import-export/template-importer.ts",
      "line": 98,
      "snippet": "\n      // Step 7: Resolve dependencies (recursive validation)\n      const resolv"
    },
    {
      "file": "src/import-export/template-importer.ts",
      "line": 106,
      "snippet": "\n      // Check performance target (<1 second for typical templates)\n      if (t"
    },
    {
      "file": "src/import-export/template-importer.ts",
      "line": 140,
      "snippet": "      // Load with SecureYAMLLoader (Layers 1-3)\n      const schema = SecurityVa"
    },
    {
      "file": "src/import-export/template-importer.ts",
      "line": 172,
      "snippet": "\n    // Process dependencies sequentially (could be parallelized in production)\n"
    },
    {
      "file": "src/import-export/template-importer.ts",
      "line": 176,
      "snippet": "        // Fetch dependency (simplified - in production would handle URLs)\n     "
    },
    {
      "file": "src/import-export/template-importer.ts",
      "line": 178,
      "snippet": "\n        // Verify checksum\n        this.verifyDependencyChecksum(depTemplate, d"
    },
    {
      "file": "src/import-export/template-importer.ts",
      "line": 181,
      "snippet": "\n        // Recursively validate dependency through full pipeline\n        const "
    },
    {
      "file": "src/import-export/template-importer.ts",
      "line": 208,
      "snippet": "      // For now, treat sourceUrl as a local file path\n      // In production, t"
    },
    {
      "file": "src/import-export/template-importer.ts",
      "line": 209,
      "snippet": "      // In production, this would:\n      // 1. Check URL against allowlist\n    "
    },
    {
      "file": "src/import-export/template-importer.ts",
      "line": 210,
      "snippet": "      // 1. Check URL against allowlist\n      // 2. Use HTTPS to fetch from appr"
    },
    {
      "file": "src/import-export/template-importer.ts",
      "line": 211,
      "snippet": "      // 2. Use HTTPS to fetch from approved domains\n      // 3. Implement retry"
    },
    {
      "file": "src/import-export/template-importer.ts",
      "line": 212,
      "snippet": "      // 3. Implement retry logic and timeout\n      const url = new URL(dependen"
    },
    {
      "file": "src/import-export/template-importer.ts",
      "line": 260,
      "snippet": "    // Write to temporary file and import\n    const tempFile = path.join(this.ba"
    },
    {
      "file": "src/import-export/template-importer.ts",
      "line": 266,
      "snippet": "      // Clean up temp file\n      if (fs.existsSync(tempFile)) {\n        fs.unli"
    },
    {
      "file": "src/import-export/security-validator.ts",
      "line": 144,
      "snippet": "      // Assume Layers 1-3 already passed (path sanitization, safe parsing, sche"
    },
    {
      "file": "src/import-export/security-validator.ts",
      "line": 145,
      "snippet": "      // These are handled by SecureYAMLLoader\n\n      // Layer 4: Cryptographic "
    },
    {
      "file": "src/import-export/security-validator.ts",
      "line": 146,
      "snippet": "\n      // Layer 4: Cryptographic Signature Verification\n      const signatureRes"
    },
    {
      "file": "src/import-export/security-validator.ts",
      "line": 153,
      "snippet": "\n      // Layer 5: Semantic Validation\n      const semanticResult = this.validat"
    },
    {
      "file": "src/import-export/security-validator.ts",
      "line": 160,
      "snippet": "\n      // Layer 6: Dependency Resolution (validation only, not actual fetching)\n"
    },
    {
      "file": "src/import-export/security-validator.ts",
      "line": 213,
      "snippet": "\n      // Look up public key in trusted registry\n      const publicKey = TRUSTED"
    },
    {
      "file": "src/import-export/security-validator.ts",
      "line": 222,
      "snippet": "\n      // Verify algorithm matches\n      if (publicKey.algorithm !== signature.a"
    },
    {
      "file": "src/import-export/security-validator.ts",
      "line": 229,
      "snippet": "\n      // Create canonical representation of signed content\n      // In a real i"
    },
    {
      "file": "src/import-export/security-validator.ts",
      "line": 231,
      "snippet": "      // In a real implementation, this would be the spec + dependencies\n      c"
    },
    {
      "file": "src/import-export/security-validator.ts",
      "line": 233,
      "snippet": "\n      // Verify signature (simplified - in production use crypto library)\n     "
    },
    {
      "file": "src/import-export/security-validator.ts",
      "line": 269,
      "snippet": "    // Deterministic JSON serialization\n    const content = {\n      spec,\n      "
    },
    {
      "file": "src/import-export/security-validator.ts",
      "line": 287,
      "snippet": "    // Simplified implementation - in production use proper crypto\n    // For no"
    },
    {
      "file": "src/import-export/security-validator.ts",
      "line": 288,
      "snippet": "    // For now, just check that signature is non-empty\n    // Real implementatio"
    },
    {
      "file": "src/import-export/security-validator.ts",
      "line": 289,
      "snippet": "    // Real implementation would use:\n    // - crypto.verify() for RS256/ES256\n "
    },
    {
      "file": "src/import-export/security-validator.ts",
      "line": 290,
      "snippet": "    // - crypto.verify() for RS256/ES256\n    // - GPG libraries for PGP-SHA256\n "
    },
    {
      "file": "src/import-export/security-validator.ts",
      "line": 291,
      "snippet": "    // - GPG libraries for PGP-SHA256\n    return signature.length > 0 && publicK"
    },
    {
      "file": "src/import-export/security-validator.ts",
      "line": 306,
      "snippet": "\n      // Check for denied keywords (anti-RCE)\n      const specString = JSON.str"
    },
    {
      "file": "src/import-export/security-validator.ts",
      "line": 314,
      "snippet": "\n      // Check resource limits\n      if (spec.resources) {\n        if (spec.res"
    },
    {
      "file": "src/import-export/security-validator.ts",
      "line": 328,
      "snippet": "\n      // Validate allowed actions (if allowlist is populated)\n      if (this.se"
    },
    {
      "file": "src/import-export/security-validator.ts",
      "line": 341,
      "snippet": "\n      // Cross-field consistency checks\n      if (spec.startDate && spec.endDat"
    },
    {
      "file": "src/import-export/security-validator.ts",
      "line": 385,
      "snippet": "\n      // No dependencies is valid\n      if (!dependencies || dependencies.lengt"
    },
    {
      "file": "src/import-export/security-validator.ts",
      "line": 394,
      "snippet": "\n      // Check dependency count limit\n      if (dependencies.length > this.sema"
    },
    {
      "file": "src/import-export/security-validator.ts",
      "line": 401,
      "snippet": "\n      // Validate each dependency\n      for (const dep of dependencies) {\n     "
    },
    {
      "file": "src/import-export/security-validator.ts",
      "line": 404,
      "snippet": "        // Check URL allowlist\n        const isAllowed = this.isUrlAllowed(dep.s"
    },
    {
      "file": "src/import-export/security-validator.ts",
      "line": 409,
      "snippet": "\n        // Validate checksum format\n        if (!dep.checksum.match(/^sha256:[a"
    },
    {
      "file": "src/import-export/security-validator.ts",
      "line": 414,
      "snippet": "\n        // Validate version format (semver)\n        if (!dep.version.match(/^\\d"
    },
    {
      "file": "src/import-export/security-validator.ts",
      "line": 449,
      "snippet": "    // If allowlist is empty, deny all external URLs\n    if (this.semanticRules."
    },
    {
      "file": "src/import-export/security-validator.ts",
      "line": 457,
      "snippet": "\n      // Check against allowlist patterns\n      return this.semanticRules.urlAl"
    },
    {
      "file": "src/import-export/security-validator.ts",
      "line": 460,
      "snippet": "        // Support wildcards like *.example.com\n        if (pattern.startsWith('"
    },
    {
      "file": "src/import-export/template-exporter.ts",
      "line": 47,
      "snippet": "      // Validate template structure\n      this.validateTemplateForExport(templa"
    },
    {
      "file": "src/import-export/template-exporter.ts",
      "line": 49,
      "snippet": "\n      // Determine format\n      const format = options?.format || 'yaml';\n\n    "
    },
    {
      "file": "src/import-export/template-exporter.ts",
      "line": 52,
      "snippet": "\n      // Serialize template\n      const content = this.serialize(template, form"
    },
    {
      "file": "src/import-export/template-exporter.ts",
      "line": 55,
      "snippet": "\n      // Resolve output path (ensure within baseDir)\n      const resolvedPath ="
    },
    {
      "file": "src/import-export/template-exporter.ts",
      "line": 58,
      "snippet": "\n      // Ensure output directory exists\n      const outputDir = path.dirname(re"
    },
    {
      "file": "src/import-export/template-exporter.ts",
      "line": 64,
      "snippet": "\n      // Write file\n      fs.writeFileSync(resolvedPath, content, 'utf-8');\n\n  "
    },
    {
      "file": "src/import-export/template-exporter.ts",
      "line": 147,
      "snippet": "\n    // Use YAML.stringify for safe, strict serialization\n    let yamlContent = "
    },
    {
      "file": "src/import-export/template-exporter.ts",
      "line": 152,
      "snippet": "\n    // Add header comment if enabled\n    if (includeComments) {\n      const hea"
    },
    {
      "file": "src/import-export/template-exporter.ts",
      "line": 207,
      "snippet": "\n    // Security check: ensure resolved path is within baseDir\n    const relativ"
    },
    {
      "file": "src/registry/semver-validator.ts",
      "line": 72,
      "snippet": "\n  // Compare major\n  if (parsed1.major !== parsed2.major) {\n    return parsed1."
    },
    {
      "file": "src/registry/semver-validator.ts",
      "line": 77,
      "snippet": "\n  // Compare minor\n  if (parsed1.minor !== parsed2.minor) {\n    return parsed1."
    },
    {
      "file": "src/registry/semver-validator.ts",
      "line": 82,
      "snippet": "\n  // Compare patch\n  if (parsed1.patch !== parsed2.patch) {\n    return parsed1."
    },
    {
      "file": "src/registry/semver-validator.ts",
      "line": 120,
      "snippet": "\n  // In SemVer, major version 0 is for initial development\n  // Different minor"
    },
    {
      "file": "src/registry/semver-validator.ts",
      "line": 122,
      "snippet": "  // Different minor versions in 0.x.x are NOT compatible\n  if (parsed1.major =="
    },
    {
      "file": "src/registry/semver-validator.ts",
      "line": 126,
      "snippet": "\n  // For major >= 1, same major version indicates compatibility\n  return parsed"
    },
    {
      "file": "src/registry/registry-parser.ts",
      "line": 62,
      "snippet": "    // Load with schema validation\n    const registry = this.loader.load<Registr"
    },
    {
      "file": "src/registry/registry-parser.ts",
      "line": 64,
      "snippet": "\n    // Validate each entry\n    const validatedEntries: DomainPackEntry[] = [];\n"
    },
    {
      "file": "src/registry/registry-parser.ts",
      "line": 79,
      "snippet": "\n    // If any entries failed validation, throw error with all details\n    if (e"
    },
    {
      "file": "src/registry/registry-parser.ts",
      "line": 96,
      "snippet": "\n    // Validate required fields (schema ensures they exist, but check content)\n"
    },
    {
      "file": "src/registry/registry-parser.ts",
      "line": 113,
      "snippet": "\n    // Validate SemVer format for version\n    if (!isValidSemVer(entry.version)"
    },
    {
      "file": "src/registry/registry-parser.ts",
      "line": 120,
      "snippet": "\n    // Validate SemVer format for schema_version\n    if (!isValidSemVer(entry.s"
    },
    {
      "file": "src/registry/registry-parser.ts",
      "line": 127,
      "snippet": "\n    // Validate path doesn't contain traversal sequences\n    if (entry.path && "
    },
    {
      "file": "src/registry/registry-parser.ts",
      "line": 132,
      "snippet": "\n    // Validate author if present\n    if (entry.author !== undefined && entry.a"
    },
    {
      "file": "src/registry/registry-parser.ts",
      "line": 153,
      "snippet": "    // Validate target version\n    if (!isValidSemVer(targetVersion)) {\n      th"
    },
    {
      "file": "src/registry/registry-parser.ts",
      "line": 161,
      "snippet": "      // Entry schema validation already ensures schema_version is valid SemVer\n"
    },
    {
      "file": "src/versioning/version-manager.ts",
      "line": 41,
      "snippet": "    // SemVer regex pattern\n    const semverRegex =\n      /^(\\d+)\\.(\\d+)\\.(\\d+)("
    },
    {
      "file": "src/versioning/version-manager.ts",
      "line": 83,
      "snippet": "    // Compare major.minor.patch\n    if (v1.major !== v2.major) {\n      return v"
    },
    {
      "file": "src/versioning/version-manager.ts",
      "line": 93,
      "snippet": "\n    // If major.minor.patch are equal, check prerelease\n    // According to Sem"
    },
    {
      "file": "src/versioning/version-manager.ts",
      "line": 95,
      "snippet": "    // According to SemVer: version with prerelease < version without prerelease"
    },
    {
      "file": "src/versioning/version-manager.ts",
      "line": 105,
      "snippet": "\n    // Both have prerelease - compare them lexicographically\n    const prerelea"
    },
    {
      "file": "src/versioning/version-manager.ts",
      "line": 116,
      "snippet": "\n      // Try parsing as numbers\n      const num1 = parseInt(part1, 10);\n      c"
    },
    {
      "file": "src/versioning/version-manager.ts",
      "line": 126,
      "snippet": "        // Lexicographic comparison for non-numeric parts\n        if (part1 !== "
    },
    {
      "file": "src/versioning/version-manager.ts",
      "line": 140,
      "snippet": "    // Exact version match\n    if (range.exact) {\n      return this.compareVersi"
    },
    {
      "file": "src/versioning/version-manager.ts",
      "line": 144,
      "snippet": "\n    // Range expression (simplified SemVer range support)\n    if (range.express"
    },
    {
      "file": "src/versioning/version-manager.ts",
      "line": 149,
      "snippet": "\n    // Min/max range check\n    if (range.min) {\n      const minComparison = thi"
    },
    {
      "file": "src/versioning/version-manager.ts",
      "line": 173,
      "snippet": "    // Remove whitespace\n    expression = expression.trim();\n\n    // Caret range"
    },
    {
      "file": "src/versioning/version-manager.ts",
      "line": 175,
      "snippet": "\n    // Caret range (^): allow changes that don't modify left-most non-zero digi"
    },
    {
      "file": "src/versioning/version-manager.ts",
      "line": 182,
      "snippet": "\n      // Check if within caret range\n      if (baseVersion.major > 0) {\n       "
    },
    {
      "file": "src/versioning/version-manager.ts",
      "line": 196,
      "snippet": "\n    // Tilde range (~): allow patch-level changes\n    if (expression.startsWith"
    },
    {
      "file": "src/versioning/version-manager.ts",
      "line": 208,
      "snippet": "\n    // Comparison operators\n    if (expression.startsWith('>=')) {\n      const "
    },
    {
      "file": "src/versioning/version-manager.ts",
      "line": 231,
      "snippet": "\n    // Exact match\n    const baseVersion = this.parseVersion(expression);\n    r"
    },
    {
      "file": "src/versioning/version-manager.ts",
      "line": 244,
      "snippet": "    // Check if version1 is compatible with version2\n    if (version1.compatible"
    },
    {
      "file": "src/versioning/version-manager.ts",
      "line": 252,
      "snippet": "\n    // Check if version2 is compatible with version1\n    if (version2.compatibl"
    },
    {
      "file": "src/versioning/version-manager.ts",
      "line": 261,
      "snippet": "\n    // Check for deprecation warnings\n    if (version1.deprecated || version2.d"
    },
    {
      "file": "src/versioning/version-manager.ts",
      "line": 283,
      "snippet": "\n    // Check if migration is available\n    const migrationRequired = from.migra"
    },
    {
      "file": "src/versioning/version-manager.ts",
      "line": 310,
      "snippet": "\n    // Add version to the list\n    entry.versions.push(templateVersion);\n\n    /"
    },
    {
      "file": "src/versioning/version-manager.ts",
      "line": 313,
      "snippet": "\n    // Sort versions\n    entry.versions.sort((a, b) => this.compareVersions(b.v"
    },
    {
      "file": "src/versioning/version-manager.ts",
      "line": 316,
      "snippet": "\n    // Update latest stable and latest versions\n    entry.latest = entry.versio"
    },
    {
      "file": "src/versioning/version-manager.ts",
      "line": 375,
      "snippet": "\n      // Find a version that satisfies all ranges\n      let compatibleVersion: "
    },
    {
      "file": "src/versioning/version-manager.ts",
      "line": 380,
      "snippet": "        // Skip prerelease versions if not allowed\n        if (version.version.p"
    },
    {
      "file": "src/versioning/version-manager.ts",
      "line": 384,
      "snippet": "\n        // Check if this version satisfies all ranges\n        const satisfiesAl"
    },
    {
      "file": "src/versioning/version-manager.ts",
      "line": 396,
      "snippet": "\n        // Add deprecation warning\n        if (compatibleVersion.deprecated) {\n"
    },
    {
      "file": "src/versioning/version-manager.ts",
      "line": 404,
      "snippet": "        // No compatible version found\n        conflicts.push({\n          templa"
    },
    {
      "file": "src/versioning/version-manager.ts",
      "line": 428,
      "snippet": "\n    // Validate version format\n    try {\n      this.parseVersion(this.versionTo"
    },
    {
      "file": "src/versioning/version-manager.ts",
      "line": 435,
      "snippet": "\n    // Validate compatibility range\n    if (templateVersion.compatibleWith?.exp"
    },
    {
      "file": "src/versioning/version-manager.ts",
      "line": 445,
      "snippet": "\n    // Validate release date\n    if (isNaN(Date.parse(templateVersion.releaseDa"
    },
    {
      "file": "src/versioning/migration-engine.ts",
      "line": 42,
      "snippet": "\n    // Sort by from version (oldest to newest)\n    migrations.sort((a, b) =>\n  "
    },
    {
      "file": "src/versioning/migration-engine.ts",
      "line": 63,
      "snippet": "\n    // Use breadth-first search to find shortest migration path\n    const path:"
    },
    {
      "file": "src/versioning/migration-engine.ts",
      "line": 75,
      "snippet": "        // Circular dependency detected\n        return null;\n      }\n      visit"
    },
    {
      "file": "src/versioning/migration-engine.ts",
      "line": 79,
      "snippet": "\n      // Find migration from current version\n      const nextMigration = migrat"
    },
    {
      "file": "src/versioning/migration-engine.ts",
      "line": 87,
      "snippet": "        // No migration found from this version\n        return null;\n      }\n\n  "
    },
    {
      "file": "src/versioning/migration-engine.ts",
      "line": 93,
      "snippet": "\n      // Check if we've reached the target version\n      if (\n        this.vers"
    },
    {
      "file": "src/versioning/migration-engine.ts",
      "line": 100,
      "snippet": "\n      // Check if we've overshot the target (shouldn't happen with proper migra"
    },
    {
      "file": "src/versioning/migration-engine.ts",
      "line": 108,
      "snippet": "\n    // Calculate total duration and reversibility\n    const totalDuration = pat"
    },
    {
      "file": "src/versioning/migration-engine.ts",
      "line": 141,
      "snippet": "      // Create backup if enabled\n      if (this.options.createBackups && backup"
    },
    {
      "file": "src/versioning/migration-engine.ts",
      "line": 145,
      "snippet": "\n      // Execute each migration step\n      for (let i = 0; i < migrationPath.st"
    },
    {
      "file": "src/versioning/migration-engine.ts",
      "line": 249,
      "snippet": "\n    // Ensure backup directory exists\n    await fs.mkdir(backupDir, { recursive"
    },
    {
      "file": "src/versioning/migration-engine.ts",
      "line": 252,
      "snippet": "\n    // Write backup\n    await fs.writeFile(backupPath, JSON.stringify(template,"
    },
    {
      "file": "src/versioning/migration-engine.ts",
      "line": 283,
      "snippet": "\n    // Check that versions are different\n    if (\n      this.versionManager.com"
    },
    {
      "file": "src/versioning/migration-engine.ts",
      "line": 290,
      "snippet": "\n    // Check that toVersion is greater than fromVersion (no downgrades)\n    if "
    },
    {
      "file": "src/versioning/migration-engine.ts",
      "line": 297,
      "snippet": "\n    // Check that migration function exists\n    if (typeof migration.migrate !="
    },
    {
      "file": "src/versioning/migration-engine.ts",
      "line": 302,
      "snippet": "\n    // Check rollback if reversible\n    if (migration.reversible && typeof migr"
    },
    {
      "file": "src/versioning/migration-engine.ts",
      "line": 323,
      "snippet": "    // Get latest version\n    const latestVersion = this.versionManager.getLates"
    },
    {
      "file": "src/versioning/migration-engine.ts",
      "line": 328,
      "snippet": "\n    // Check if already at latest version\n    if (\n      this.versionManager.co"
    },
    {
      "file": "src/versioning/migration-engine.ts",
      "line": 340,
      "snippet": "\n    // Find migration path\n    const path = this.findMigrationPath(templateId, "
    },
    {
      "file": "src/versioning/migration-engine.ts",
      "line": 348,
      "snippet": "\n    // Execute migration\n    return this.migrate(templateId, template, path, ba"
    },
    {
      "file": "src/extraction/template-extractor.ts",
      "line": 49,
      "snippet": "      // Validate source mission exists\n      if (!fs.existsSync(this.config.sou"
    },
    {
      "file": "src/extraction/template-extractor.ts",
      "line": 53,
      "snippet": "\n      // Stage 1: Identify candidates\n      const stage1Result = await this.ide"
    },
    {
      "file": "src/extraction/template-extractor.ts",
      "line": 56,
      "snippet": "\n      // Stage 2: Generate template\n      const stage2Result = await this.gener"
    },
    {
      "file": "src/extraction/template-extractor.ts",
      "line": 90,
      "snippet": "\n    // Get all files in the mission\n    const files = this.getAllFiles(missionP"
    },
    {
      "file": "src/extraction/template-extractor.ts",
      "line": 93,
      "snippet": "\n    // Track literal frequencies across all files\n    const literalFrequency = "
    },
    {
      "file": "src/extraction/template-extractor.ts",
      "line": 104,
      "snippet": "\n      // Analyze different aspects based on file type\n      if (this.isConfigFi"
    },
    {
      "file": "src/extraction/template-extractor.ts",
      "line": 111,
      "snippet": "\n      // Analyze file path for potential parameters\n      this.analyzeFilePath("
    },
    {
      "file": "src/extraction/template-extractor.ts",
      "line": 115,
      "snippet": "\n    // Calculate confidence scores based on frequency\n    for (const [literal, "
    },
    {
      "file": "src/extraction/template-extractor.ts",
      "line": 120,
      "snippet": "\n      // Only include candidates above threshold\n      if (confidence >= (this."
    },
    {
      "file": "src/extraction/template-extractor.ts",
      "line": 136,
      "snippet": "\n    // If no candidates found, lower threshold to ensure we get some results\n  "
    },
    {
      "file": "src/extraction/template-extractor.ts",
      "line": 179,
      "snippet": "\n    // Generate parameters from candidates\n    let parametersGenerated = 0;\n   "
    },
    {
      "file": "src/extraction/template-extractor.ts",
      "line": 187,
      "snippet": "\n    // Process all files and apply parameterization\n    const files = this.getA"
    },
    {
      "file": "src/extraction/template-extractor.ts",
      "line": 197,
      "snippet": "\n      // Apply parameterization to file path\n      for (const [paramName, candi"
    },
    {
      "file": "src/extraction/template-extractor.ts",
      "line": 209,
      "snippet": "\n      // Apply parameterization to content\n      for (const [paramName, candida"
    },
    {
      "file": "src/extraction/template-extractor.ts",
      "line": 214,
      "snippet": "            // Use word boundaries for safer replacement\n            const value"
    },
    {
      "file": "src/extraction/template-extractor.ts",
      "line": 227,
      "snippet": "\n    // Generate metadata\n    const metadata: TemplateMetadata = this.extractMet"
    },
    {
      "file": "src/extraction/template-extractor.ts",
      "line": 275,
      "snippet": "\n  // === Private Helper Methods ===\n\n  private getAllFiles(dir: string, fileLis"
    },
    {
      "file": "src/extraction/template-extractor.ts",
      "line": 333,
      "snippet": "      // Skip files that can't be parsed\n    }\n  }\n\n  private extractConfigValue"
    },
    {
      "file": "src/extraction/template-extractor.ts",
      "line": 382,
      "snippet": "    // Extract string literals\n    const stringLiteralRegex = /[\"']([^\"']+)[\"']/"
    },
    {
      "file": "src/extraction/template-extractor.ts",
      "line": 395,
      "snippet": "\n        // Skip common keywords and short strings\n        if (literal.length > "
    },
    {
      "file": "src/extraction/template-extractor.ts",
      "line": 424,
      "snippet": "    // Extract unique path segments that might be project-specific\n    const seg"
    },
    {
      "file": "src/extraction/template-extractor.ts",
      "line": 428,
      "snippet": "      // Skip common directory names\n      if (this.isCommonDirectoryName(segmen"
    },
    {
      "file": "src/extraction/template-extractor.ts",
      "line": 430,
      "snippet": "\n      // Check if segment looks like a project-specific identifier\n      if (se"
    },
    {
      "file": "src/extraction/template-extractor.ts",
      "line": 453,
      "snippet": "    // Low frequency = likely project-specific = high confidence for parameteriz"
    },
    {
      "file": "src/extraction/template-extractor.ts",
      "line": 454,
      "snippet": "    // High frequency = likely boilerplate = low confidence\n\n    // For small pr"
    },
    {
      "file": "src/extraction/template-extractor.ts",
      "line": 455,
      "snippet": "\n    // For small projects (few files), be more lenient\n    const baseThreshold "
    },
    {
      "file": "src/extraction/template-extractor.ts",
      "line": 466,
      "snippet": "    // Use context to suggest better parameter names\n    if (candidate.type === "
    },
    {
      "file": "src/extraction/template-extractor.ts",
      "line": 475,
      "snippet": "\n    // Generate from literal value\n    return literal\n      .replace(/[^a-zA-Z0"
    },
    {
      "file": "src/extraction/template-extractor.ts",
      "line": 484,
      "snippet": "    // Determine type from candidate values\n    const firstValue = candidates[0]"
    },
    {
      "file": "src/extraction/template-extractor.ts",
      "line": 493,
      "snippet": "\n    // Use the most common value as default\n    const valueCounts = new Map<str"
    },
    {
      "file": "src/extraction/template-extractor.ts",
      "line": 529,
      "snippet": "\n    // Detect language/framework from file extensions\n    const files = this.ge"
    },
    {
      "file": "src/extraction/template-extractor.ts",
      "line": 537,
      "snippet": "\n    // Detect common patterns\n    if (baseName.includes('api')) tags.push('api'"
    },
    {
      "file": "src/extraction/types.ts",
      "line": 34,
      "snippet": "  // --- Descriptive Metadata ---\n  /** A unique, machine-readable identifier fo"
    },
    {
      "file": "src/extraction/types.ts",
      "line": 52,
      "snippet": "\n  // --- Operational Metadata ---\n  /** A map defining all the parameters that "
    },
    {
      "file": "src/extraction/types.ts",
      "line": 56,
      "snippet": "\n  // --- Provenance and Quality Metrics ---\n  /** The unique ID of the successf"
    },
    {
      "file": "src/loaders/yaml-loader.ts",
      "line": 46,
      "snippet": "    // Normalize and resolve base directory\n    this.baseDir = path.resolve(opti"
    },
    {
      "file": "src/loaders/yaml-loader.ts",
      "line": 50,
      "snippet": "\n    // Initialize AJV for schema validation\n    this.ajv = new Ajv({ allErrors:"
    },
    {
      "file": "src/loaders/yaml-loader.ts",
      "line": 65,
      "snippet": "    // Resolve the path relative to base directory\n    const resolvedPath = path"
    },
    {
      "file": "src/loaders/yaml-loader.ts",
      "line": 67,
      "snippet": "\n    // Get the relative path from base to resolved\n    const relativePath = pat"
    },
    {
      "file": "src/loaders/yaml-loader.ts",
      "line": 70,
      "snippet": "\n    // Check if path escapes base directory\n    // If it starts with '..' or is"
    },
    {
      "file": "src/loaders/yaml-loader.ts",
      "line": 72,
      "snippet": "    // If it starts with '..' or is absolute, it's outside baseDir\n    if (relat"
    },
    {
      "file": "src/loaders/yaml-loader.ts",
      "line": 76,
      "snippet": "\n    // Additional check: ensure resolved path starts with baseDir\n    if (!reso"
    },
    {
      "file": "src/loaders/yaml-loader.ts",
      "line": 96,
      "snippet": "      // YAML.parse is safe - it doesn't evaluate custom tags\n      // Unlike js"
    },
    {
      "file": "src/loaders/yaml-loader.ts",
      "line": 97,
      "snippet": "      // Unlike js-yaml's load(), it won't execute code\n      const parsed = YAM"
    },
    {
      "file": "src/loaders/yaml-loader.ts",
      "line": 99,
      "snippet": "\n      // Additional safety check: ensure no functions in parsed data\n      this"
    },
    {
      "file": "src/loaders/yaml-loader.ts",
      "line": 160,
      "snippet": "    // Layer 1: Sanitize path\n    const sanitizedPath = this.sanitizePath(filePa"
    },
    {
      "file": "src/loaders/yaml-loader.ts",
      "line": 162,
      "snippet": "\n    // Check file exists and get stats\n    if (!fs.existsSync(sanitizedPath)) {"
    },
    {
      "file": "src/loaders/yaml-loader.ts",
      "line": 167,
      "snippet": "\n    // Use lstatSync to detect symlinks (statSync follows them)\n    const stats"
    },
    {
      "file": "src/loaders/yaml-loader.ts",
      "line": 170,
      "snippet": "\n    // Check if symlink when not allowed\n    if (stats.isSymbolicLink() && !thi"
    },
    {
      "file": "src/loaders/yaml-loader.ts",
      "line": 175,
      "snippet": "\n    // Check file size\n    if (stats.size > this.maxFileSize) {\n      throw new"
    },
    {
      "file": "src/loaders/yaml-loader.ts",
      "line": 180,
      "snippet": "\n    // Read file content\n    const content = fs.readFileSync(sanitizedPath, 'ut"
    },
    {
      "file": "src/loaders/yaml-loader.ts",
      "line": 183,
      "snippet": "\n    // Layer 2: Safe parse\n    const parsed = this.safeParse(content);\n\n    // "
    },
    {
      "file": "src/loaders/yaml-loader.ts",
      "line": 186,
      "snippet": "\n    // Layer 3: Schema validation (if provided)\n    if (schema) {\n      return "
    }
  ],
  "hack_comments": [
    {
      "file": "package-lock.json",
      "line": 6401,
      "snippet": "url\": \"https://github.com/sponsors/colinhacks\"\n      }\n    },\n    \"node_modules/zod-to-json-schema\": {\n      \"version\": \"3.24.6\",\n      \"resolved\": \"https://reg"
    },
    {
      "file": "tests/loaders/yaml-loader.test.ts",
      "line": 178,
      "snippet": "   const maliciousYAML = `\n!!js/regexp /hack/i\n`;\n      fs.writeFileSync(path.join(tempDir, 'malicious4.yaml'), maliciousYAML);\n\n      expect(() => {\n        lo"
    },
    {
      "file": "cmos/research/R2.1_Token-Counting-Strategy-Analysis-and-Recommendation.md",
      "line": 310,
      "snippet": "news.ycombinator.com/item?id=40001193\tA Hacker News thread discussing Transformers.js model sizes, noting small models are 10-60 MB but larger ones can be 800 M"
    },
    {
      "file": "cmos/research/R2.1_Token-Counting-Strategy-Analysis-and-Recommendation.md",
      "line": 445,
      "snippet": " Transformers directly in the browser | Hacker News\nOpens in a new window\n\nnpmjs.com\nsctg/sentencepiece-js - NPM\nOpens in a new window\n\ngithub.com\nJanKaul/sente"
    }
  ],
  "temporary_solution": [
    {
      "file": "dist/intelligence/token-counters.d.ts",
      "line": 8,
      "snippet": "tored)\n * - Gemini: Enhanced heuristic (temporary, pending official library)\n */\nimport { ITokenCounter, TokenCount, SupportedModel } from './types';\n/**\n * Tok"
    },
    {
      "file": "dist/intelligence/token-counters.d.ts",
      "line": 42,
      "snippet": " Gemini using enhanced heuristic\n     * TEMPORARY SOLUTION: No viable offline library exists\n     * - @lenml/tokenizer-gemini is 139 MB (unacceptable)\n     * - "
    },
    {
      "file": "dist/intelligence/token-counters.js",
      "line": 9,
      "snippet": "tored)\n * - Gemini: Enhanced heuristic (temporary, pending official library)\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (funct"
    },
    {
      "file": "dist/intelligence/token-counters.js",
      "line": 140,
      "snippet": " Gemini using enhanced heuristic\n     * TEMPORARY SOLUTION: No viable offline library exists\n     * - @lenml/tokenizer-gemini is 139 MB (unacceptable)\n     * - "
    },
    {
      "file": "dist/import-export/template-importer.js",
      "line": 217,
      "snippet": "Content, options) {\n        // Write to temporary file and import\n        const tempFile = path.join(this.baseDir, `.temp-${Date.now()}.yaml`);\n        try {\n  "
    },
    {
      "file": "tests/tools/extract-template.test.ts",
      "line": 16,
      "snippet": "ng;\n\n  beforeEach(() => {\n    // Create temporary directories\n    tempDir = fs.mkdtempSync(path.join(require('os').tmpdir(), 'extract-template-test-'));\n    tes"
    },
    {
      "file": "tests/security/path-traversal.test.ts",
      "line": 17,
      "snippet": ";\n\n  beforeEach(() => {\n    // Create a temporary directory for testing\n    tempDir = fs.mkdtempSync(path.join(os.tmpdir(), 'yaml-loader-test-'));\n    loader = "
    },
    {
      "file": "tests/import-export/template-importer.test.ts",
      "line": 294,
      "snippet": "true);\n    });\n\n    it('should clean up temporary files after import', async () => {\n      const yamlContent = createValidTemplateYAML();\n\n      await importer."
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 16,
      "snippet": ";\n\n  beforeEach(() => {\n    // Create a temporary test mission directory\n    tempDir = fs.mkdtempSync(path.join(require('os').tmpdir(), 'template-extractor-test"
    },
    {
      "file": "tests/extraction/template-extractor.test.ts",
      "line": 23,
      "snippet": ");\n\n  afterEach(() => {\n    // Clean up temporary directory\n    if (fs.existsSync(tempDir)) {\n      fs.rmSync(tempDir, { recursive: true, force: true });\n    }\n"
    },
    {
      "file": "docs/Extension_System_Guide.md",
      "line": 101,
      "snippet": "sholds (0.6-0.8 recommended)\n- Clean up temporary files before extraction\n\n\u274c **Don't:**\n- Extract from directories with secrets or credentials\n- Use extremely l"
    },
    {
      "file": "cmos/research/r1.1_The_Universal_Mission_Framework.md",
      "line": 139,
      "snippet": "for documenting rationale, context, and temporary notes.\nMulti-line String Support\tPoor\tExcellent\tExcellent\tCritical for readable context sections, code snippet"
    },
    {
      "file": "cmos/research/R2.1_Token-Counting-Strategy-Analysis-and-Recommendation.md",
      "line": 156,
      "snippet": "nting and causing API errors. This is a temporary measure, contingent on a better solution becoming available.\n\nImplement a TokenizerFactory Abstraction: All to"
    },
    {
      "file": "cmos/research/R2.1_Token-Counting-Strategy-Analysis-and-Recommendation.md",
      "line": 213,
      "snippet": "lId.startsWith('gemini-')) {\n        // Temporary fallback: Use a conservative heuristic for Gemini.\n        // This estimates tokens based on characters with a"
    },
    {
      "file": "cmos/research/R2.1_Token-Counting-Strategy-Analysis-and-Recommendation.md",
      "line": 245,
      "snippet": "ecommended fallback to a heuristic is a temporary stopgap that fails to meet the mission's core accuracy requirements. The long-term strategy for Gemini is enti"
    },
    {
      "file": "cmos/context/src/recovery_strategies.js",
      "line": 606,
      "snippet": "st orphanKeys = ['temp_data', 'cache', 'temporary', '_internal'];\n    orphanKeys.forEach(key => {\n      if (context[key]) {\n        delete context[key];\n       "
    },
    {
      "file": "src/intelligence/token-counters.ts",
      "line": 8,
      "snippet": "tored)\n * - Gemini: Enhanced heuristic (temporary, pending official library)\n */\n\nimport { ITokenCounter, TokenCount, SupportedModel } from './types';\nimport { "
    },
    {
      "file": "src/intelligence/token-counters.ts",
      "line": 121,
      "snippet": "or Gemini using enhanced heuristic\n   * TEMPORARY SOLUTION: No viable offline library exists\n   * - @lenml/tokenizer-gemini is 139 MB (unacceptable)\n   * - Offi"
    },
    {
      "file": "src/import-export/template-importer.ts",
      "line": 260,
      "snippet": "Promise<ImportResult> {\n    // Write to temporary file and import\n    const tempFile = path.join(this.baseDir, `.temp-${Date.now()}.yaml`);\n    try {\n      fs.w"
    }
  ]
}